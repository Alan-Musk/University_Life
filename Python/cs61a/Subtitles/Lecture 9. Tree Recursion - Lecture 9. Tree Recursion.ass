[Script Info]
; Script generated by Bilibili Evolved Danmaku Converter
; https://github.com/the1812/Bilibili-Evolved/
Title: Lecture 9. Tree Recursion - Lecture 9. Tree Recursion
ScriptType: v4.00+
PlayResX: 1280
PlayResY: 720
Timer: 10.0000
WrapStyle: 0
ScaledBorderAndShadow: no

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: TopLeft,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,7,32,32,32,0
Style: TopCenter,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,8,32,32,32,0
Style: TopRight,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,9,32,32,32,0
Style: BottomLeft,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,1,32,32,32,0
Style: BottomCenter,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,2,32,32,32,0
Style: BottomRight,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,3,32,32,32,0

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.73,0:00:02.53,BottomCenter,,0,0,0,,sixty one eight lection No.9
Dialogue: 0,0:00:02.73,0:00:03.70,BottomCenter,,0,0,0,,announcements
Dialogue: 0,0:00:04.50,0:00:06.07,BottomCenter,,0,0,0,,the midterm is graded
Dialogue: 0,0:00:06.10,0:00:08.57,BottomCenter,,0,0,0,,and regrade requests are due on Monday
Dialogue: 0,0:00:08.60,0:00:10.60,BottomCenter,,0,0,0,,you make those in grade scope
Dialogue: 0,0:00:10.97,0:00:13.37,BottomCenter,,0,0,0,,you are welcome to post questions on piazza
Dialogue: 0,0:00:13.80,0:00:15.37,BottomCenter,,0,0,0,,but we're not going to fix
Dialogue: 0,0:00:15.37,0:00:17.13,BottomCenter,,0,0,0,,any problems unless you make a
Dialogue: 0,0:00:17.13,0:00:18.87,BottomCenter,,0,0,0,,grade scope regrade request
Dialogue: 0,0:00:19.67,0:00:20.33,BottomCenter,,0,0,0,,as a class
Dialogue: 0,0:00:20.33,0:00:23.20,BottomCenter,,0,0,0,,I think you did very well on this challenging midterm
Dialogue: 0,0:00:23.57,0:00:24.50,BottomCenter,,0,0,0,,nice work
Dialogue: 0,0:00:25.17,0:00:28.27,BottomCenter,,0,0,0,,I am delighted to see how much you've learned
Dialogue: 0,0:00:28.27,0:00:30.60,BottomCenter,,0,0,0,,now many of you didn't solve all the problems
Dialogue: 0,0:00:30.60,0:00:31.67,BottomCenter,,0,0,0,,and that's fine
Dialogue: 0,0:00:31.87,0:00:33.60,BottomCenter,,0,0,0,,the point is to learn this stuff
Dialogue: 0,0:00:34.33,0:00:36.13,BottomCenter,,0,0,0,,and if you haven't mastered it all yet
Dialogue: 0,0:00:36.27,0:00:38.87,BottomCenter,,0,0,0,,you still have plenty of opportunity to do so
Dialogue: 0,0:00:39.17,0:00:41.67,BottomCenter,,0,0,0,,on midterm two and the final exam
Dialogue: 0,0:00:42.67,0:00:43.97,BottomCenter,,0,0,0,,so keep up the hard work
Dialogue: 0,0:00:44.13,0:00:46.27,BottomCenter,,0,0,0,,focus on the parts that haven't clicked yet
Dialogue: 0,0:00:46.27,0:00:47.20,BottomCenter,,0,0,0,,and hang in there
Dialogue: 0,0:00:48.00,0:00:49.73,BottomCenter,,0,0,0,,I'm also delighted to say
Dialogue: 0,0:00:49.93,0:00:51.33,BottomCenter,,0,0,0,,that we've been checking our
Dialogue: 0,0:00:51.33,0:00:54.77,BottomCenter,,0,0,0,,various forms of collaboration detection
Dialogue: 0,0:00:54.90,0:00:56.87,BottomCenter,,0,0,0,,and so far have detected
Dialogue: 0,0:00:57.00,0:01:00.96,BottomCenter,,0,0,0,,a very very low rate of collaboration among students
Dialogue: 0,0:01:01.20,0:01:02.53,BottomCenter,,0,0,0,,as far as I can tell
Dialogue: 0,0:01:02.60,0:01:06.37,BottomCenter,,0,0,0,,the vast majority of you decided to just take the exam
Dialogue: 0,0:01:06.37,0:01:08.53,BottomCenter,,0,0,0,,instead of asking somebody else for help
Dialogue: 0,0:01:09.29,0:01:11.87,BottomCenter,,0,0,0,,and that is the right decision so I'm glad you made it
Dialogue: 0,0:01:12.59,0:01:15.17,BottomCenter,,0,0,0,,I take no pleasure in catching people who cheated
Dialogue: 0,0:01:15.59,0:01:16.97,BottomCenter,,0,0,0,,instead I hope to set up
Dialogue: 0,0:01:16.97,0:01:20.20,BottomCenter,,0,0,0,,our exam so that the obvious and default thing to do
Dialogue: 0,0:01:20.33,0:01:22.87,BottomCenter,,0,0,0,,is just take the exam according to the rules
Dialogue: 0,0:01:23.20,0:01:24.67,BottomCenter,,0,0,0,,so that's why we have the
Dialogue: 0,0:01:24.76,0:01:27.20,BottomCenter,,0,0,0,,rather elaborate amount of teating detection
Dialogue: 0,0:01:27.20,0:01:29.12,BottomCenter,,0,0,0,,and the video proctoring and all of that
Dialogue: 0,0:01:29.20,0:01:31.09,BottomCenter,,0,0,0,,just to make sure that students know
Dialogue: 0,0:01:31.12,0:01:33.70,BottomCenter,,0,0,0,,taking the exam without collaborating with others
Dialogue: 0,0:01:33.70,0:01:35.76,BottomCenter,,0,0,0,,is not going to put you into disadvantage
Dialogue: 0,0:01:35.76,0:01:37.80,BottomCenter,,0,0,0,,because that's what everybody else is doing too
Dialogue: 0,0:01:38.30,0:01:40.20,BottomCenter,,0,0,0,,and also the course is uncurved
Dialogue: 0,0:01:40.26,0:01:42.26,BottomCenter,,0,0,0,,so who cares about other people's scores
Dialogue: 0,0:01:42.73,0:01:44.73,BottomCenter,,0,0,0,,but the best thing to do for your own score
Dialogue: 0,0:01:44.73,0:01:46.12,BottomCenter,,0,0,0,,is just take the exam
Dialogue: 0,0:01:46.17,0:01:47.73,BottomCenter,,0,0,0,,which as far as I can tell
Dialogue: 0,0:01:47.80,0:01:48.70,BottomCenter,,0,0,0,,is what you did
Dialogue: 0,0:01:49.40,0:01:50.50,BottomCenter,,0,0,0,,if you're wondering whether you can
Dialogue: 0,0:01:50.50,0:01:51.59,BottomCenter,,0,0,0,,delete your midterm one
Dialogue: 0,0:01:51.59,0:01:53.40,BottomCenter,,0,0,0,,recordings from your google drive
Dialogue: 0,0:01:53.40,0:01:54.37,BottomCenter,,0,0,0,,please keep them there
Dialogue: 0,0:01:54.37,0:01:56.00,BottomCenter,,0,0,0,,until at least the end of Monday
Dialogue: 0,0:01:56.12,0:01:57.76,BottomCenter,,0,0,0,,while we finish our checks
Dialogue: 0,0:01:59.00,0:02:02.12,BottomCenter,,0,0,0,,homework two will be posted today stu next Thursday
Dialogue: 0,0:02:02.53,0:02:04.37,BottomCenter,,0,0,0,,there's no exam prep section this week
Dialogue: 0,0:02:04.37,0:02:05.79,BottomCenter,,0,0,0,,since you just took an exam
Dialogue: 0,0:02:05.87,0:02:08.40,BottomCenter,,0,0,0,,and said we'll hold an ask us anything session
Dialogue: 0,0:02:08.59,0:02:12.00,BottomCenter,,0,0,0,,with both your instructors to morrow two ten pm
Dialogue: 0,0:02:12.27,0:02:14.12,BottomCenter,,0,0,0,,this will not be recorded
Dialogue: 0,0:02:14.37,0:02:16.33,BottomCenter,,0,0,0,,if you want to hear our answers to anything
Dialogue: 0,0:02:16.50,0:02:17.56,BottomCenter,,0,0,0,,then you have to come
Dialogue: 0,0:02:18.40,0:02:20.00,BottomCenter,,0,0,0,,and the only other thing going on is the
Dialogue: 0,0:02:20.00,0:02:22.16,BottomCenter,,0,0,0,,completely optional hog strategy contest
Dialogue: 0,0:02:22.56,0:02:25.12,BottomCenter,,0,0,0,,the submission form has been posted in
Dialogue: 0,0:02:25.12,0:02:26.77,BottomCenter,,0,0,0,,in previous announcement videos
Dialogue: 0,0:02:26.77,0:02:29.06,BottomCenter,,0,0,0,,I said you should try to make sure that your code
Dialogue: 0,0:02:29.06,0:02:30.53,BottomCenter,,0,0,0,,runs in reasonable time
Dialogue: 0,0:02:30.56,0:02:32.69,BottomCenter,,0,0,0,,but that's no longer a requirement
Dialogue: 0,0:02:32.69,0:02:35.00,BottomCenter,,0,0,0,,there's no time limit on your final strategy
Dialogue: 0,0:02:35.00,0:02:37.19,BottomCenter,,0,0,0,,as long as it finishes submitting
Dialogue: 0,0:02:37.19,0:02:38.87,BottomCenter,,0,0,0,,before the contest ends
Dialogue: 0,0:02:38.90,0:02:40.16,BottomCenter,,0,0,0,,then it's fine
Dialogue: 0,0:02:41.47,0:02:43.93,BottomCenter,,0,0,0,,and if you submit early
Dialogue: 0,0:02:43.93,0:02:45.19,BottomCenter,,0,0,0,,you can see where you stand
Dialogue: 0,0:02:45.19,0:02:47.16,BottomCenter,,0,0,0,,relative to everybody else who submitted
Dialogue: 0,0:02:47.37,0:02:49.40,BottomCenter,,0,0,0,,on the hong strategy contest
Dialogue: 0,0:02:49.47,0:02:50.30,BottomCenter,,0,0,0,,leader board
Dialogue: 0,0:02:51.47,0:02:53.09,BottomCenter,,0,0,0,,so as I'm making this video
Dialogue: 0,0:02:53.16,0:02:55.30,BottomCenter,,0,0,0,,there's a submission called blockchain
Dialogue: 0,0:02:55.30,0:02:58.19,BottomCenter,,0,0,0,,that has won against all 45 opponents
Dialogue: 0,0:02:59.06,0:03:01.46,BottomCenter,,0,0,0,,followed by the golden ratio
Dialogue: 0,0:03:01.69,0:03:04.56,BottomCenter,,0,0,0,,followed by somebody who tried to break our web app
Dialogue: 0,0:03:04.56,0:03:05.72,BottomCenter,,0,0,0,,and failed
Dialogue: 0,0:03:06.33,0:03:08.30,BottomCenter,,0,0,0,,I am definitely not going to click on that link
Dialogue: 0,0:03:08.30,0:03:09.30,BottomCenter,,0,0,0,,whatever it is
Dialogue: 0,0:03:09.46,0:03:11.27,BottomCenter,,0,0,0,,and you can see that
Dialogue: 0,0:03:11.50,0:03:13.06,BottomCenter,,0,0,0,,other folks have come up with strategy
Dialogue: 0,0:03:13.06,0:03:14.12,BottomCenter,,0,0,0,,is very effective
Dialogue: 0,0:03:14.12,0:03:15.93,BottomCenter,,0,0,0,,like always roll -1
Dialogue: 0,0:03:16.59,0:03:19.47,BottomCenter,,0,0,0,,and some strategies are so far not as effective
Dialogue: 0,0:03:19.47,0:03:20.30,BottomCenter,,0,0,0,,that's fine
Dialogue: 0,0:03:20.93,0:03:22.09,BottomCenter,,0,0,0,,always roll late
Dialogue: 0,0:03:22.09,0:03:23.50,BottomCenter,,0,0,0,,still one eight times
Dialogue: 0,0:03:23.72,0:03:26.80,BottomCenter,,0,0,0,,and who is the worst of all oh apparently it's stanford
Dialogue: 0,0:03:27.09,0:03:29.00,BottomCenter,,0,0,0,,well they should really work on that shouldn't they
Dialogue: 0,0:03:30.77,0:03:32.27,BottomCenter,,0,0,0,,so I encourage you to participate
Dialogue: 0,0:03:32.27,0:03:34.53,BottomCenter,,0,0,0,,this is completely optional but can be kind of fun
Dialogue: 0,0:03:35.09,0:03:36.69,BottomCenter,,0,0,0,,and entries are due next
Dialogue: 0,0:03:36.69,0:03:37.50,BottomCenter,,0,0,0,,Monday
Dialogue: 0,0:03:39.00,0:03:41.12,BottomCenter,,0,0,0,,today's lecture video is a little bit different
Dialogue: 0,0:03:41.12,0:03:44.16,BottomCenter,,0,0,0,,in the past most notably because it's not just me
Dialogue: 0,0:03:44.53,0:03:46.90,BottomCenter,,0,0,0,,professor fried made some videos
Dialogue: 0,0:03:47.00,0:03:48.19,BottomCenter,,0,0,0,,and I think they're great
Dialogue: 0,0:03:48.80,0:03:50.69,BottomCenter,,0,0,0,,the first one which will come next
Dialogue: 0,0:03:51.47,0:03:53.69,BottomCenter,,0,0,0,,it's kind of a review of last lecture
Dialogue: 0,0:03:54.06,0:03:55.93,BottomCenter,,0,0,0,,but he presents it in a different way
Dialogue: 0,0:03:56.06,0:03:57.93,BottomCenter,,0,0,0,,and I think it's always good to kind of
Dialogue: 0,0:03:57.93,0:03:59.87,BottomCenter,,0,0,0,,go over the fundamentals of occursion
Dialogue: 0,0:03:59.87,0:04:00.77,BottomCenter,,0,0,0,,more than ones
Dialogue: 0,0:04:01.27,0:04:02.80,BottomCenter,,0,0,0,,so take a look at that video
Dialogue: 0,0:04:03.06,0:04:05.30,BottomCenter,,0,0,0,,and then the rest of the videos of the lecture will be
Dialogue: 0,0:04:05.30,0:04:06.12,BottomCenter,,0,0,0,,new content
Dialogue: 0,0:04:07.06,0:04:09.72,BottomCenter,,0,0,0,,and today's content is very important
Dialogue: 0,0:04:09.93,0:04:12.33,BottomCenter,,0,0,0,,but typically require some practice to master
Dialogue: 0,0:04:12.37,0:04:15.66,BottomCenter,,0,0,0,,so that's why we'll have a lab next week and a homework
Dialogue: 0,0:04:15.87,0:04:17.19,BottomCenter,,0,0,0,,to give you some practice
Dialogue: 0,0:04:18.12,0:04:21.10,BottomCenter,,0,0,0,,so here we go talking about recursion
Dialogue: 0,0:04:22.89,0:04:25.60,BottomCenter,,0,0,0,,welcome back at this point in the course
Dialogue: 0,0:04:25.60,0:04:26.10,BottomCenter,,0,0,0,,we
Dialogue: 0,0:04:26.10,0:04:27.12,BottomCenter,,0,0,0,,believe it or not
Dialogue: 0,0:04:27.12,0:04:28.00,BottomCenter,,0,0,0,,covered
Dialogue: 0,0:04:28.30,0:04:32.73,BottomCenter,,0,0,0,,the core computational machinery that you need to know
Dialogue: 0,0:04:33.30,0:04:34.67,BottomCenter,,0,0,0,,to be a python programmer
Dialogue: 0,0:04:34.67,0:04:35.87,BottomCenter,,0,0,0,,there's lots to learn
Dialogue: 0,0:04:35.97,0:04:38.39,BottomCenter,,0,0,0,,there's a lot of data structures and algorithms
Dialogue: 0,0:04:38.39,0:04:42.19,BottomCenter,,0,0,0,,but in terms of functions variables looping constructs
Dialogue: 0,0:04:42.19,0:04:43.26,BottomCenter,,0,0,0,,while in four
Dialogue: 0,0:04:43.52,0:04:44.69,BottomCenter,,0,0,0,,conditional statements
Dialogue: 0,0:04:44.69,0:04:45.19,BottomCenter,,0,0,0,,if
Dialogue: 0,0:04:45.19,0:04:47.73,BottomCenter,,0,0,0,,lf l statements that
Dialogue: 0,0:04:47.76,0:04:49.52,BottomCenter,,0,0,0,,forms the core of
Dialogue: 0,0:04:49.52,0:04:51.37,BottomCenter,,0,0,0,,the programming language
Dialogue: 0,0:04:51.80,0:04:53.80,BottomCenter,,0,0,0,,that you need to know to be a general purpose
Dialogue: 0,0:04:53.80,0:04:54.60,BottomCenter,,0,0,0,,python programmer
Dialogue: 0,0:04:54.60,0:04:56.50,BottomCenter,,0,0,0,,and again lots more to learn
Dialogue: 0,0:04:56.50,0:04:59.00,BottomCenter,,0,0,0,,refining honing those skills writing good
Dialogue: 0,0:04:59.17,0:05:01.73,BottomCenter,,0,0,0,,efficient well documented smart code
Dialogue: 0,0:05:01.87,0:05:03.73,BottomCenter,,0,0,0,,will come with experience
Dialogue: 0,0:05:04.52,0:05:05.60,BottomCenter,,0,0,0,,but that's the corven
Dialogue: 0,0:05:05.97,0:05:07.47,BottomCenter,,0,0,0,,now we're going to
Dialogue: 0,0:05:07.47,0:05:09.17,BottomCenter,,0,0,0,,just before we get into some more
Dialogue: 0,0:05:09.17,0:05:11.93,BottomCenter,,0,0,0,,the data structures and algorithms
Dialogue: 0,0:05:12.39,0:05:15.19,BottomCenter,,0,0,0,,and we're just called object oriented programming
Dialogue: 0,0:05:15.19,0:05:16.80,BottomCenter,,0,0,0,,I want to just take a little breath
Dialogue: 0,0:05:17.06,0:05:19.37,BottomCenter,,0,0,0,,and talk about something called recursion
Dialogue: 0,0:05:20.00,0:05:21.37,BottomCenter,,0,0,0,,and recursion in my opinion
Dialogue: 0,0:05:21.37,0:05:24.56,BottomCenter,,0,0,0,,is this very beautiful computational construct
Dialogue: 0,0:05:24.73,0:05:26.67,BottomCenter,,0,0,0,,and it's particularly beautiful because it
Dialogue: 0,0:05:26.67,0:05:29.89,BottomCenter,,0,0,0,,deviates from everything we have seen up until now
Dialogue: 0,0:05:29.89,0:05:33.10,BottomCenter,,0,0,0,,in the way you think about the nature of computation
Dialogue: 0,0:05:33.32,0:05:34.93,BottomCenter,,0,0,0,,so again everything we've been thinking about
Dialogue: 0,0:05:34.93,0:05:36.39,BottomCenter,,0,0,0,,and everything we've been doing up in tamaw has
Dialogue: 0,0:05:36.39,0:05:37.76,BottomCenter,,0,0,0,,been functions variables
Dialogue: 0,0:05:37.80,0:05:39.19,BottomCenter,,0,0,0,,looping it and conditionals
Dialogue: 0,0:05:39.26,0:05:40.06,BottomCenter,,0,0,0,,and recursion
Dialogue: 0,0:05:40.06,0:05:41.56,BottomCenter,,0,0,0,,brings in this very nice and
Dialogue: 0,0:05:41.56,0:05:43.80,BottomCenter,,0,0,0,,elegant and beautiful way of thinking
Dialogue: 0,0:05:43.80,0:05:45.67,BottomCenter,,0,0,0,,about the nature of computation
Dialogue: 0,0:05:45.69,0:05:47.47,BottomCenter,,0,0,0,,and we're gonna spend a little time talking about that
Dialogue: 0,0:05:47.47,0:05:49.52,BottomCenter,,0,0,0,,because I think it's an important construct
Dialogue: 0,0:05:49.89,0:05:52.10,BottomCenter,,0,0,0,,to understand as a general purpose
Dialogue: 0,0:05:52.17,0:05:54.06,BottomCenter,,0,0,0,,computer scientist and programmer
Dialogue: 0,0:05:54.06,0:05:55.12,BottomCenter,,0,0,0,,and dave scientist
Dialogue: 0,0:05:55.87,0:05:56.06,BottomCenter,,0,0,0,,I
Dialogue: 0,0:05:56.06,0:06:00.10,BottomCenter,,0,0,0,,let me start by reminding you of the definition of the
Dialogue: 0,0:06:00.26,0:06:01.87,BottomCenter,,0,0,0,,factorial operator
Dialogue: 0,0:06:02.60,0:06:02.97,BottomCenter,,0,0,0,,so of course
Dialogue: 0,0:06:02.97,0:06:05.39,BottomCenter,,0,0,0,,the factoral operator is denoted with an exclamation
Dialogue: 0,0:06:05.39,0:06:08.32,BottomCenter,,0,0,0,,mark and it has the following definition
Dialogue: 0,0:06:08.32,0:06:10.69,BottomCenter,,0,0,0,,it is defined as you can see here
Dialogue: 0,0:06:10.93,0:06:12.32,BottomCenter,,0,0,0,,only on
Dialogue: 0,0:06:13.06,0:06:15.32,BottomCenter,,0,0,0,,positive integers that are greater than
Dialogue: 0,0:06:15.32,0:06:16.47,BottomCenter,,0,0,0,,or equal to zero
Dialogue: 0,0:06:16.76,0:06:18.69,BottomCenter,,0,0,0,,and so the definition of factorial says that if
Dialogue: 0,0:06:18.69,0:06:19.80,BottomCenter,,0,0,0,,n is zero
Dialogue: 0,0:06:19.80,0:06:21.76,BottomCenter,,0,0,0,,you're trying to of course compute un factorial
Dialogue: 0,0:06:21.80,0:06:23.52,BottomCenter,,0,0,0,,that end factorial is equal to one
Dialogue: 0,0:06:23.52,0:06:25.69,BottomCenter,,0,0,0,,so zero factorial is one
Dialogue: 0,0:06:26.12,0:06:29.06,BottomCenter,,0,0,0,,and for all integers greater than zero
Dialogue: 0,0:06:29.32,0:06:31.50,BottomCenter,,0,0,0,,n factorial is defined to be n
Dialogue: 0,0:06:31.56,0:06:33.89,BottomCenter,,0,0,0,,times n minus one times n minus two
Dialogue: 0,0:06:34.00,0:06:36.12,BottomCenter,,0,0,0,,down to one that is the product
Dialogue: 0,0:06:36.39,0:06:39.06,BottomCenter,,0,0,0,,of all of the positive integers
Dialogue: 0,0:06:39.12,0:06:41.19,BottomCenter,,0,0,0,,from n down into one
Dialogue: 0,0:06:41.19,0:06:42.50,BottomCenter,,0,0,0,,and of course we've seen this before
Dialogue: 0,0:06:42.50,0:06:43.80,BottomCenter,,0,0,0,,we see the pops up in
Dialogue: 0,0:06:43.97,0:06:44.76,BottomCenter,,0,0,0,,in
Dialogue: 0,0:06:45.10,0:06:46.87,BottomCenter,,0,0,0,,set theory and in probability
Dialogue: 0,0:06:46.87,0:06:48.47,BottomCenter,,0,0,0,,and encounting all the time
Dialogue: 0,0:06:48.60,0:06:50.30,BottomCenter,,0,0,0,,standard mathematical operator
Dialogue: 0,0:06:51.17,0:06:52.73,BottomCenter,,0,0,0,,so before we dig
Dialogue: 0,0:06:52.87,0:06:53.76,BottomCenter,,0,0,0,,into the recursion
Dialogue: 0,0:06:53.76,0:06:55.73,BottomCenter,,0,0,0,,that I wanted to be the topic of the
Dialogue: 0,0:06:55.76,0:06:56.93,BottomCenter,,0,0,0,,set of lectures
Dialogue: 0,0:06:57.10,0:06:58.87,BottomCenter,,0,0,0,,let's just by way of practice
Dialogue: 0,0:06:59.17,0:06:59.97,BottomCenter,,0,0,0,,write
Dialogue: 0,0:07:01.19,0:07:02.60,BottomCenter,,0,0,0,,some python code to compute those
Dialogue: 0,0:07:02.60,0:07:04.19,BottomCenter,,0,0,0,,and if you want to you can pause the video
Dialogue: 0,0:07:04.19,0:07:05.56,BottomCenter,,0,0,0,,now this is a good little exercise
Dialogue: 0,0:07:05.56,0:07:07.73,BottomCenter,,0,0,0,,but if not let's just go ahead and do it together
Dialogue: 0,0:07:09.60,0:07:11.32,BottomCenter,,0,0,0,,I'm going to write a function
Dialogue: 0,0:07:11.50,0:07:14.39,BottomCenter,,0,0,0,,called factorial that takes his input and n
Dialogue: 0,0:07:14.60,0:07:16.67,BottomCenter,,0,0,0,,now let me just say before I dig into the code here
Dialogue: 0,0:07:16.67,0:07:17.17,BottomCenter,,0,0,0,,really
Dialogue: 0,0:07:17.17,0:07:19.80,BottomCenter,,0,0,0,,I should have some code in here that saysmake sure
Dialogue: 0,0:07:19.80,0:07:22.12,BottomCenter,,0,0,0,,and as an integer make sure it's greater than zero
Dialogue: 0,0:07:22.19,0:07:24.67,BottomCenter,,0,0,0,,I don't typically do that in these little examples
Dialogue: 0,0:07:24.67,0:07:26.39,BottomCenter,,0,0,0,,because it just creates a lot of code
Dialogue: 0,0:07:26.73,0:07:28.10,BottomCenter,,0,0,0,,but generally speaking
Dialogue: 0,0:07:28.10,0:07:30.06,BottomCenter,,0,0,0,,when you have functions like this
Dialogue: 0,0:07:30.10,0:07:32.10,BottomCenter,,0,0,0,,that have constraints on the input
Dialogue: 0,0:07:32.10,0:07:35.10,BottomCenter,,0,0,0,,you should put chuckson balances in your code
Dialogue: 0,0:07:35.32,0:07:35.97,BottomCenter,,0,0,0,,to make sure
Dialogue: 0,0:07:35.97,0:07:38.47,BottomCenter,,0,0,0,,that what is being passed in from the outside world
Dialogue: 0,0:07:38.52,0:07:40.32,BottomCenter,,0,0,0,,conforms to your expectation
Dialogue: 0,0:07:40.32,0:07:42.73,BottomCenter,,0,0,0,,but again just for cleanliness I won't do this here
Dialogue: 0,0:07:43.50,0:07:45.50,BottomCenter,,0,0,0,,this code is going to compute victoria
Dialogue: 0,0:07:45.50,0:07:47.32,BottomCenter,,0,0,0,,we'll go through the step by step in a second
Dialogue: 0,0:07:47.47,0:07:49.69,BottomCenter,,0,0,0,,and you can see at the very end it returns
Dialogue: 0,0:07:49.69,0:07:51.37,BottomCenter,,0,0,0,,and again remember what return does
Dialogue: 0,0:07:51.37,0:07:52.60,BottomCenter,,0,0,0,,it sends it back
Dialogue: 0,0:07:52.97,0:07:54.87,BottomCenter,,0,0,0,,to the calling function
Dialogue: 0,0:07:54.87,0:07:56.19,BottomCenter,,0,0,0,,and this distinction
Dialogue: 0,0:07:56.50,0:07:59.12,BottomCenter,,0,0,0,,between return and for example print is important
Dialogue: 0,0:07:59.30,0:08:01.56,BottomCenter,,0,0,0,,it has never been more important than when
Dialogue: 0,0:08:01.56,0:08:02.47,BottomCenter,,0,0,0,,we are about to
Dialogue: 0,0:08:02.69,0:08:04.97,BottomCenter,,0,0,0,,start talking about recursion in a few minutes
Dialogue: 0,0:08:05.19,0:08:05.60,BottomCenter,,0,0,0,,until then
Dialogue: 0,0:08:05.60,0:08:07.39,BottomCenter,,0,0,0,,let's go ahead and look at this code and make sure we
Dialogue: 0,0:08:07.39,0:08:08.19,BottomCenter,,0,0,0,,understand it
Dialogue: 0,0:08:08.50,0:08:09.69,BottomCenter,,0,0,0,,so fact of course
Dialogue: 0,0:08:09.69,0:08:10.47,BottomCenter,,0,0,0,,you can see here
Dialogue: 0,0:08:10.47,0:08:12.80,BottomCenter,,0,0,0,,is going to be the variable that I send back
Dialogue: 0,0:08:13.00,0:08:15.60,BottomCenter,,0,0,0,,I apologize they should both be color coded the same
Dialogue: 0,0:08:16.26,0:08:17.80,BottomCenter,,0,0,0,,I initialize that to be one
Dialogue: 0,0:08:17.80,0:08:20.06,BottomCenter,,0,0,0,,that's going to hold on to the
Dialogue: 0,0:08:20.47,0:08:21.87,BottomCenter,,0,0,0,,running product
Dialogue: 0,0:08:22.17,0:08:24.69,BottomCenter,,0,0,0,,I is equal to one is a counter
Dialogue: 0,0:08:24.80,0:08:25.87,BottomCenter,,0,0,0,,that is going to
Dialogue: 0,0:08:25.87,0:08:27.37,BottomCenter,,0,0,0,,as you can see in my loop here
Dialogue: 0,0:08:27.37,0:08:28.97,BottomCenter,,0,0,0,,while I is less than equal to one
Dialogue: 0,0:08:29.10,0:08:31.30,BottomCenter,,0,0,0,,is going to go from one to two to three to four
Dialogue: 0,0:08:31.30,0:08:32.39,BottomCenter,,0,0,0,,up until n
Dialogue: 0,0:08:32.52,0:08:35.12,BottomCenter,,0,0,0,,I'm of course going to computer running product
Dialogue: 0,0:08:35.60,0:08:37.00,BottomCenter,,0,0,0,,all right here is my increment
Dialogue: 0,0:08:37.00,0:08:38.70,BottomCenter,,0,0,0,,I'll come back to this line in the second
Dialogue: 0,0:08:38.76,0:08:39.12,BottomCenter,,0,0,0,,notice
Dialogue: 0,0:08:39.12,0:08:41.39,BottomCenter,,0,0,0,,by the way I just want to introduce the short hand
Dialogue: 0,0:08:41.73,0:08:42.60,BottomCenter,,0,0,0,,what do I want to do
Dialogue: 0,0:08:42.60,0:08:44.50,BottomCenter,,0,0,0,,on each iteration of the wild loop
Dialogue: 0,0:08:44.50,0:08:46.00,BottomCenter,,0,0,0,,is I want to increment
Dialogue: 0,0:08:46.16,0:08:48.37,BottomCenter,,0,0,0,,I by one I takes on the value one
Dialogue: 0,0:08:48.37,0:08:51.16,BottomCenter,,0,0,0,,and then two and then three and then four and so on
Dialogue: 0,0:08:51.39,0:08:52.57,BottomCenter,,0,0,0,,this is a little shorthand
Dialogue: 0,0:08:52.57,0:08:54.16,BottomCenter,,0,0,0,,because this is such a common
Dialogue: 0,0:08:54.79,0:08:56.50,BottomCenter,,0,0,0,,expression we say I
Dialogue: 0,0:08:56.70,0:09:00.52,BottomCenter,,0,0,0,,plus equals one which simply means I equals I plus one
Dialogue: 0,0:09:01.20,0:09:03.76,BottomCenter,,0,0,0,,so on each iteration I'm incrementing I by one
Dialogue: 0,0:09:03.76,0:09:04.76,BottomCenter,,0,0,0,,and what do I want to do
Dialogue: 0,0:09:04.76,0:09:07.92,BottomCenter,,0,0,0,,I want to keep a running product
Dialogue: 0,0:09:08.16,0:09:09.87,BottomCenter,,0,0,0,,so fact starts out as one
Dialogue: 0,0:09:10.00,0:09:13.26,BottomCenter,,0,0,0,,I multiply it by one that's of course one
Dialogue: 0,0:09:13.26,0:09:14.60,BottomCenter,,0,0,0,,next time through I have a two
Dialogue: 0,0:09:14.60,0:09:17.07,BottomCenter,,0,0,0,,multiply that product by two
Dialogue: 0,0:09:17.29,0:09:19.10,BottomCenter,,0,0,0,,next time through multiply by three
Dialogue: 0,0:09:19.10,0:09:20.20,BottomCenter,,0,0,0,,next time through multiply by four
Dialogue: 0,0:09:20.20,0:09:23.00,BottomCenter,,0,0,0,,and you can see I'm keeping a running product
Dialogue: 0,0:09:23.29,0:09:26.52,BottomCenter,,0,0,0,,fact is equal to the previous value of fact
Dialogue: 0,0:09:26.66,0:09:29.10,BottomCenter,,0,0,0,,times the current value of I
Dialogue: 0,0:09:29.29,0:09:31.60,BottomCenter,,0,0,0,,I get through that whole body of the wild loop
Dialogue: 0,0:09:31.60,0:09:34.47,BottomCenter,,0,0,0,,including end of course because end factorial is
Dialogue: 0,0:09:34.60,0:09:38.16,BottomCenter,,0,0,0,,end times and minus one all the way down to
Dialogue: 0,0:09:38.92,0:09:40.37,BottomCenter,,0,0,0,,one and then I return fat
Dialogue: 0,0:09:40.73,0:09:42.10,BottomCenter,,0,0,0,,one little point by the way
Dialogue: 0,0:09:42.10,0:09:43.39,BottomCenter,,0,0,0,,notice that in the previous
Dialogue: 0,0:09:43.39,0:09:44.39,BottomCenter,,0,0,0,,definition of factorialized
Dialogue: 0,0:09:44.39,0:09:45.73,BottomCenter,,0,0,0,,special case zero
Dialogue: 0,0:09:46.12,0:09:48.16,BottomCenter,,0,0,0,,alright I said zero factorial is one
Dialogue: 0,0:09:48.29,0:09:49.89,BottomCenter,,0,0,0,,and then anything greater than zero is this
Dialogue: 0,0:09:49.89,0:09:53.07,BottomCenter,,0,0,0,,I don't seem to have a special case here for zero
Dialogue: 0,0:09:53.07,0:09:54.66,BottomCenter,,0,0,0,,so let's make sure this works
Dialogue: 0,0:09:54.76,0:09:56.37,BottomCenter,,0,0,0,,okay so let's run through the code
Dialogue: 0,0:09:56.37,0:09:57.97,BottomCenter,,0,0,0,,and is zero fact is it one
Dialogue: 0,0:09:57.97,0:10:00.92,BottomCenter,,0,0,0,,I is one while I is less than equal to
Dialogue: 0,0:10:00.92,0:10:03.10,BottomCenter,,0,0,0,,while one is less than equal to zero
Dialogue: 0,0:10:03.16,0:10:05.39,BottomCenter,,0,0,0,,does that a value to true no
Dialogue: 0,0:10:05.50,0:10:08.29,BottomCenter,,0,0,0,,so what happens I pop out here and where do I return
Dialogue: 0,0:10:08.60,0:10:09.26,BottomCenter,,0,0,0,,one
Dialogue: 0,0:10:09.26,0:10:10.79,BottomCenter,,0,0,0,,that's zero factorial nice little
Dialogue: 0,0:10:10.79,0:10:12.16,BottomCenter,,0,0,0,,I could have put a special case
Dialogue: 0,0:10:12.26,0:10:13.70,BottomCenter,,0,0,0,,I could have said it's an equal zero
Dialogue: 0,0:10:13.70,0:10:15.37,BottomCenter,,0,0,0,,return one otherwise
Dialogue: 0,0:10:15.37,0:10:17.47,BottomCenter,,0,0,0,,but it just comes out because of the way
Dialogue: 0,0:10:17.57,0:10:20.16,BottomCenter,,0,0,0,,factorial is defined in this iterative scheme here
Dialogue: 0,0:10:21.60,0:10:23.57,BottomCenter,,0,0,0,,perfectly find iterative scheme
Dialogue: 0,0:10:23.57,0:10:27.00,BottomCenter,,0,0,0,,let's go through and just make sure we see how
Dialogue: 0,0:10:27.33,0:10:29.10,BottomCenter,,0,0,0,,fact and I are incrementing
Dialogue: 0,0:10:29.10,0:10:31.10,BottomCenter,,0,0,0,,because that's going to lead us to where we want to go
Dialogue: 0,0:10:31.10,0:10:33.00,BottomCenter,,0,0,0,,when we start talking about recursion
Dialogue: 0,0:10:33.33,0:10:35.66,BottomCenter,,0,0,0,,let's say I want to call factorial with five
Dialogue: 0,0:10:35.66,0:10:37.00,BottomCenter,,0,0,0,,so I want to compute
Dialogue: 0,0:10:37.29,0:10:39.50,BottomCenter,,0,0,0,,five times four times three times two times
Dialogue: 0,0:10:39.52,0:10:40.33,BottomCenter,,0,0,0,,one
Dialogue: 0,0:10:41.00,0:10:41.73,BottomCenter,,0,0,0,,good
Dialogue: 0,0:10:41.73,0:10:42.73,BottomCenter,,0,0,0,,first iteration through
Dialogue: 0,0:10:42.73,0:10:44.73,BottomCenter,,0,0,0,,first time through fact is one I as once
Dialogue: 0,0:10:44.73,0:10:45.57,BottomCenter,,0,0,0,,I'm gonna
Dialogue: 0,0:10:45.60,0:10:48.92,BottomCenter,,0,0,0,,do two columns here showing these values as I iterate
Dialogue: 0,0:10:49.26,0:10:52.07,BottomCenter,,0,0,0,,that boolean expression of course evaluates the true
Dialogue: 0,0:10:52.12,0:10:53.76,BottomCenter,,0,0,0,,so I go into it
Dialogue: 0,0:10:54.07,0:10:55.87,BottomCenter,,0,0,0,,into the bottle of the wild and what do I do
Dialogue: 0,0:10:55.87,0:10:58.66,BottomCenter,,0,0,0,,I say fact equals fact times I
Dialogue: 0,0:10:58.66,0:11:00.20,BottomCenter,,0,0,0,,so what is fact going to be
Dialogue: 0,0:11:00.20,0:11:02.37,BottomCenter,,0,0,0,,one and what is I going to be
Dialogue: 0,0:11:02.39,0:11:04.76,BottomCenter,,0,0,0,,two because I incremented by one right there
Dialogue: 0,0:11:05.10,0:11:07.57,BottomCenter,,0,0,0,,come back up two is still less than equal to five
Dialogue: 0,0:11:07.87,0:11:10.10,BottomCenter,,0,0,0,,dive back into the body of the wild blue please
Dialogue: 0,0:11:10.29,0:11:12.92,BottomCenter,,0,0,0,,now fact is going to be the current value of fact
Dialogue: 0,0:11:12.92,0:11:14.66,BottomCenter,,0,0,0,,times the current value of I
Dialogue: 0,0:11:14.66,0:11:15.79,BottomCenter,,0,0,0,,one times two
Dialogue: 0,0:11:15.92,0:11:17.52,BottomCenter,,0,0,0,,good so fact is two
Dialogue: 0,0:11:17.70,0:11:19.07,BottomCenter,,0,0,0,,increment I by one
Dialogue: 0,0:11:19.10,0:11:21.37,BottomCenter,,0,0,0,,go back up blue expression is true
Dialogue: 0,0:11:21.50,0:11:24.39,BottomCenter,,0,0,0,,multiply those two I get six increment
Dialogue: 0,0:11:24.70,0:11:25.60,BottomCenter,,0,0,0,,let's do it again
Dialogue: 0,0:11:26.73,0:11:29.20,BottomCenter,,0,0,0,,product of six and four twenty four increment
Dialogue: 0,0:11:29.20,0:11:30.79,BottomCenter,,0,0,0,,okay now we got to start being a little careful
Dialogue: 0,0:11:30.79,0:11:32.10,BottomCenter,,0,0,0,,because we're getting near the end
Dialogue: 0,0:11:32.79,0:11:35.39,BottomCenter,,0,0,0,,so I is five I come back up
Dialogue: 0,0:11:35.39,0:11:37.73,BottomCenter,,0,0,0,,is five less than or equal to five
Dialogue: 0,0:11:37.76,0:11:39.73,BottomCenter,,0,0,0,,sure is come back in
Dialogue: 0,0:11:39.92,0:11:42.87,BottomCenter,,0,0,0,,multiply those two values of course to get 120
Dialogue: 0,0:11:43.07,0:11:44.70,BottomCenter,,0,0,0,,now increment I by one
Dialogue: 0,0:11:44.73,0:11:45.60,BottomCenter,,0,0,0,,I come back up
Dialogue: 0,0:11:45.60,0:11:47.57,BottomCenter,,0,0,0,,six lescenter equal to five
Dialogue: 0,0:11:47.57,0:11:49.33,BottomCenter,,0,0,0,,no come back to the
Dialogue: 0,0:11:49.33,0:11:51.70,BottomCenter,,0,0,0,,get out of the body of the while loop return fact
Dialogue: 0,0:11:51.73,0:11:53.89,BottomCenter,,0,0,0,,and I'm done I've got 120
Dialogue: 0,0:11:54.33,0:11:55.12,BottomCenter,,0,0,0,,good
Dialogue: 0,0:11:55.87,0:11:57.87,BottomCenter,,0,0,0,,and you can see here that what we've done is
Dialogue: 0,0:11:57.87,0:11:58.87,BottomCenter,,0,0,0,,on each iteration
Dialogue: 0,0:11:58.87,0:12:01.16,BottomCenter,,0,0,0,,we've computed exactly what we promised
Dialogue: 0,0:12:01.37,0:12:04.87,BottomCenter,,0,0,0,,this line is computing a running product
Dialogue: 0,0:12:05.00,0:12:06.89,BottomCenter,,0,0,0,,so by the time I get to the fifth iteration
Dialogue: 0,0:12:06.89,0:12:09.10,BottomCenter,,0,0,0,,I've multiplied five times four times three
Dialogue: 0,0:12:09.10,0:12:10.26,BottomCenter,,0,0,0,,times two times one
Dialogue: 0,0:12:10.33,0:12:11.66,BottomCenter,,0,0,0,,and when I was this iteration
Dialogue: 0,0:12:11.66,0:12:13.97,BottomCenter,,0,0,0,,I multiplied four times three times two times one
Dialogue: 0,0:12:13.97,0:12:15.12,BottomCenter,,0,0,0,,and so on and so forth
Dialogue: 0,0:12:15.70,0:12:17.73,BottomCenter,,0,0,0,,now there's something interesting looking
Dialogue: 0,0:12:17.79,0:12:20.07,BottomCenter,,0,0,0,,at this iterative process
Dialogue: 0,0:12:20.39,0:12:23.07,BottomCenter,,0,0,0,,because what you notice here is that
Dialogue: 0,0:12:23.33,0:12:26.16,BottomCenter,,0,0,0,,when I computed five factorial
Dialogue: 0,0:12:26.20,0:12:27.60,BottomCenter,,0,0,0,,along the way
Dialogue: 0,0:12:27.79,0:12:29.70,BottomCenter,,0,0,0,,I also computed four factorial
Dialogue: 0,0:12:29.70,0:12:31.70,BottomCenter,,0,0,0,,and along the way I computed three factorial
Dialogue: 0,0:12:31.70,0:12:33.60,BottomCenter,,0,0,0,,two factorial and one factorial
Dialogue: 0,0:12:34.26,0:12:34.76,BottomCenter,,0,0,0,,and that sort
Dialogue: 0,0:12:34.76,0:12:35.92,BottomCenter,,0,0,0,,of makes sense if you think about
Dialogue: 0,0:12:35.92,0:12:37.33,BottomCenter,,0,0,0,,the nature of the product
Dialogue: 0,0:12:37.66,0:12:39.16,BottomCenter,,0,0,0,,so what is end factorial
Dialogue: 0,0:12:39.16,0:12:41.76,BottomCenter,,0,0,0,,end times end minus one times end minus two
Dialogue: 0,0:12:41.76,0:12:43.89,BottomCenter,,0,0,0,,down to one well what's end minus one factorial
Dialogue: 0,0:12:43.89,0:12:46.50,BottomCenter,,0,0,0,,and minus one times end minus two down to one
Dialogue: 0,0:12:46.73,0:12:48.60,BottomCenter,,0,0,0,,and so to get end factorial
Dialogue: 0,0:12:48.60,0:12:50.37,BottomCenter,,0,0,0,,I sort of have to get up to end minus one
Dialogue: 0,0:12:50.37,0:12:51.52,BottomCenter,,0,0,0,,and to get the end minus one
Dialogue: 0,0:12:51.52,0:12:53.39,BottomCenter,,0,0,0,,I have to get up to and minus two
Dialogue: 0,0:12:53.97,0:12:55.37,BottomCenter,,0,0,0,,and so I can sort of
Dialogue: 0,0:12:55.52,0:12:58.00,BottomCenter,,0,0,0,,think about this definition slightly differently
Dialogue: 0,0:12:58.00,0:13:01.92,BottomCenter,,0,0,0,,I can define end factorial or five factorial
Dialogue: 0,0:13:01.92,0:13:03.50,BottomCenter,,0,0,0,,let's say to instantiate it
Dialogue: 0,0:13:03.57,0:13:05.50,BottomCenter,,0,0,0,,as five times four factorial
Dialogue: 0,0:13:05.70,0:13:07.07,BottomCenter,,0,0,0,,and what is four factorial what
Dialogue: 0,0:13:07.07,0:13:08.97,BottomCenter,,0,0,0,,it's four times three factorial
Dialogue: 0,0:13:09.26,0:13:10.33,BottomCenter,,0,0,0,,that sort of makes sense right
Dialogue: 0,0:13:10.33,0:13:13.57,BottomCenter,,0,0,0,,because it's four times the product of 3 2 1
Dialogue: 0,0:13:13.57,0:13:16.57,BottomCenter,,0,0,0,,or what's the product of 3 2 1 it's three factorial
Dialogue: 0,0:13:17.12,0:13:18.10,BottomCenter,,0,0,0,,that's sort of interesting
Dialogue: 0,0:13:18.10,0:13:19.97,BottomCenter,,0,0,0,,so let me let me redefine
Dialogue: 0,0:13:20.39,0:13:21.89,BottomCenter,,0,0,0,,this definition of factorial
Dialogue: 0,0:13:21.89,0:13:23.92,BottomCenter,,0,0,0,,so our initial definition of factorial was
Dialogue: 0,0:13:23.97,0:13:26.26,BottomCenter,,0,0,0,,if end of zero and factorial is one good
Dialogue: 0,0:13:26.26,0:13:27.07,BottomCenter,,0,0,0,,easy
Dialogue: 0,0:13:27.89,0:13:29.07,BottomCenter,,0,0,0,,if that is greater than zero
Dialogue: 0,0:13:29.07,0:13:31.76,BottomCenter,,0,0,0,,then it's the running product of integers between n
Dialogue: 0,0:13:31.76,0:13:32.73,BottomCenter,,0,0,0,,and one
Dialogue: 0,0:13:33.50,0:13:34.76,BottomCenter,,0,0,0,,so let me take what we
Dialogue: 0,0:13:34.76,0:13:37.60,BottomCenter,,0,0,0,,that insight that we just had from that iterative code
Dialogue: 0,0:13:37.70,0:13:40.70,BottomCenter,,0,0,0,,and redefine factorial
Dialogue: 0,0:13:40.76,0:13:42.57,BottomCenter,,0,0,0,,here it is recursively
Dialogue: 0,0:13:42.92,0:13:43.57,BottomCenter,,0,0,0,,I'm gonna define
Dialogue: 0,0:13:43.57,0:13:45.00,BottomCenter,,0,0,0,,I'm gonna tell you what I mean by recursively
Dialogue: 0,0:13:45.00,0:13:47.73,BottomCenter,,0,0,0,,in a second so typically speaking
Dialogue: 0,0:13:48.50,0:13:51.50,BottomCenter,,0,0,0,,recursive definitions have two components to it
Dialogue: 0,0:13:51.50,0:13:54.10,BottomCenter,,0,0,0,,a base case and a recursive case
Dialogue: 0,0:13:54.10,0:13:56.00,BottomCenter,,0,0,0,,and sometimes you can have more than one base case
Dialogue: 0,0:13:56.00,0:13:58.60,BottomCenter,,0,0,0,,by the way so the base case stays the same
Dialogue: 0,0:13:58.70,0:14:01.33,BottomCenter,,0,0,0,,the simplest thing you can do is say give me
Dialogue: 0,0:14:01.76,0:14:04.07,BottomCenter,,0,0,0,,a zero factorial and I just tell you one
Dialogue: 0,0:14:04.07,0:14:06.92,BottomCenter,,0,0,0,,there's nothing to compute it's literally by definition
Dialogue: 0,0:14:07.66,0:14:10.00,BottomCenter,,0,0,0,,for all other integers greater than zero
Dialogue: 0,0:14:10.10,0:14:11.87,BottomCenter,,0,0,0,,instead of defining infectoral lb
Dialogue: 0,0:14:11.87,0:14:13.70,BottomCenter,,0,0,0,,n times n minus one time z and minus two
Dialogue: 0,0:14:13.87,0:14:14.87,BottomCenter,,0,0,0,,oddly down to one
Dialogue: 0,0:14:14.89,0:14:17.26,BottomCenter,,0,0,0,,I'm going to define n factoral v n times
Dialogue: 0,0:14:17.26,0:14:18.79,BottomCenter,,0,0,0,,and minus one factorial
Dialogue: 0,0:14:19.00,0:14:22.60,BottomCenter,,0,0,0,,which lets start off by agreeing is absolutely 100%
Dialogue: 0,0:14:22.79,0:14:24.10,BottomCenter,,0,0,0,,correct why
Dialogue: 0,0:14:24.12,0:14:24.87,BottomCenter,,0,0,0,,because
Dialogue: 0,0:14:24.87,0:14:27.73,BottomCenter,,0,0,0,,minus one factorial is and minus one times a minus two
Dialogue: 0,0:14:27.76,0:14:29.20,BottomCenter,,0,0,0,,through the previous definition
Dialogue: 0,0:14:29.73,0:14:32.16,BottomCenter,,0,0,0,,but imagine I didn't give you the previous definition
Dialogue: 0,0:14:32.16,0:14:33.97,BottomCenter,,0,0,0,,imagine you didn't know what factorial was
Dialogue: 0,0:14:33.97,0:14:35.07,BottomCenter,,0,0,0,,and you came to me and said
Dialogue: 0,0:14:35.10,0:14:36.10,BottomCenter,,0,0,0,,hey press a breed
Dialogue: 0,0:14:36.37,0:14:38.70,BottomCenter,,0,0,0,,what is end factorial and I said oh it's really easy
Dialogue: 0,0:14:38.70,0:14:41.29,BottomCenter,,0,0,0,,if you ask me for zero factorial the answer is one
Dialogue: 0,0:14:41.29,0:14:44.00,BottomCenter,,0,0,0,,if for all other values of
Dialogue: 0,0:14:44.47,0:14:46.52,BottomCenter,,0,0,0,,end factorial is equal to end times
Dialogue: 0,0:14:46.52,0:14:48.10,BottomCenter,,0,0,0,,and minus one factorial
Dialogue: 0,0:14:49.33,0:14:50.39,BottomCenter,,0,0,0,,you might say well
Dialogue: 0,0:14:50.52,0:14:52.87,BottomCenter,,0,0,0,,okay but what's end minus one factorial
Dialogue: 0,0:14:52.87,0:14:53.92,BottomCenter,,0,0,0,,and I'm a go that's easy
Dialogue: 0,0:14:53.92,0:14:57.07,BottomCenter,,0,0,0,,that's end minus one times and minus two factorial
Dialogue: 0,0:14:57.60,0:14:58.92,BottomCenter,,0,0,0,,and you get the sense that I'm sort of
Dialogue: 0,0:14:58.92,0:15:00.52,BottomCenter,,0,0,0,,screwing around with you a little bit
Dialogue: 0,0:15:00.73,0:15:02.97,BottomCenter,,0,0,0,,because I'm sort of defining
Dialogue: 0,0:15:03.26,0:15:05.92,BottomCenter,,0,0,0,,a function in terms of itself
Dialogue: 0,0:15:05.92,0:15:08.10,BottomCenter,,0,0,0,,and that is exactly what recursion means
Dialogue: 0,0:15:08.10,0:15:10.16,BottomCenter,,0,0,0,,but I am not in fact messing with you
Dialogue: 0,0:15:10.20,0:15:13.20,BottomCenter,,0,0,0,,in fact this definition works so let's see why
Dialogue: 0,0:15:14.66,0:15:16.89,BottomCenter,,0,0,0,,let's say you ask me what is three factorial
Dialogue: 0,0:15:16.89,0:15:19.07,BottomCenter,,0,0,0,,and I say it's three times two factorial
Dialogue: 0,0:15:19.60,0:15:21.52,BottomCenter,,0,0,0,,and so you made a little bit of progress
Dialogue: 0,0:15:21.52,0:15:22.97,BottomCenter,,0,0,0,,you know it's three times something
Dialogue: 0,0:15:22.97,0:15:24.57,BottomCenter,,0,0,0,,but you don't know what that's something is
Dialogue: 0,0:15:24.70,0:15:26.37,BottomCenter,,0,0,0,,and so you ask me what's two factorial
Dialogue: 0,0:15:26.37,0:15:28.00,BottomCenter,,0,0,0,,and I tell you what's two times
Dialogue: 0,0:15:28.20,0:15:29.29,BottomCenter,,0,0,0,,one factorial
Dialogue: 0,0:15:29.89,0:15:31.47,BottomCenter,,0,0,0,,we made a little bit more progress
Dialogue: 0,0:15:31.47,0:15:33.29,BottomCenter,,0,0,0,,what's one factorial oh that's easy
Dialogue: 0,0:15:33.29,0:15:35.00,BottomCenter,,0,0,0,,it's one time zero factorial
Dialogue: 0,0:15:35.26,0:15:36.47,BottomCenter,,0,0,0,,what's zero factorial
Dialogue: 0,0:15:36.47,0:15:37.26,BottomCenter,,0,0,0,,aha
Dialogue: 0,0:15:37.60,0:15:38.66,BottomCenter,,0,0,0,,the base case
Dialogue: 0,0:15:38.66,0:15:40.07,BottomCenter,,0,0,0,,zero factorial is one
Dialogue: 0,0:15:40.47,0:15:41.87,BottomCenter,,0,0,0,,and now what do you know
Dialogue: 0,0:15:41.92,0:15:43.20,BottomCenter,,0,0,0,,you know that three factories
Dialogue: 0,0:15:43.20,0:15:46.29,BottomCenter,,0,0,0,,three times two times one times one the base case
Dialogue: 0,0:15:46.60,0:15:49.73,BottomCenter,,0,0,0,,and so it seems like this is sort of a weird definition
Dialogue: 0,0:15:49.73,0:15:50.89,BottomCenter,,0,0,0,,because I'm defining
Dialogue: 0,0:15:50.89,0:15:52.97,BottomCenter,,0,0,0,,a function in terms of itself
Dialogue: 0,0:15:53.39,0:15:56.20,BottomCenter,,0,0,0,,but eventually if I follow down that road
Dialogue: 0,0:15:56.20,0:15:56.57,BottomCenter,,0,0,0,,because
Dialogue: 0,0:15:56.57,0:15:58.39,BottomCenter,,0,0,0,,notice this problem is getting simpler and simpler
Dialogue: 0,0:15:58.39,0:15:59.79,BottomCenter,,0,0,0,,by decrementing by one
Dialogue: 0,0:15:59.89,0:16:01.66,BottomCenter,,0,0,0,,I will eventually get to
Dialogue: 0,0:16:01.76,0:16:02.76,BottomCenter,,0,0,0,,the base case
Dialogue: 0,0:16:02.89,0:16:04.52,BottomCenter,,0,0,0,,and I will have built up
Dialogue: 0,0:16:04.60,0:16:06.47,BottomCenter,,0,0,0,,an expression along the way
Dialogue: 0,0:16:06.87,0:16:08.12,BottomCenter,,0,0,0,,when you asked me for three factorial
Dialogue: 0,0:16:08.12,0:16:09.87,BottomCenter,,0,0,0,,I said it's three times two factorial
Dialogue: 0,0:16:09.92,0:16:10.26,BottomCenter,,0,0,0,,and then
Dialogue: 0,0:16:10.26,0:16:11.92,BottomCenter,,0,0,0,,you went and figured out what two factorial was
Dialogue: 0,0:16:11.92,0:16:13.00,BottomCenter,,0,0,0,,and then you came back and said
Dialogue: 0,0:16:13.00,0:16:14.87,BottomCenter,,0,0,0,,odds three times that quantity
Dialogue: 0,0:16:15.00,0:16:17.37,BottomCenter,,0,0,0,,and then you do the same thing for two and for one
Dialogue: 0,0:16:17.37,0:16:18.66,BottomCenter,,0,0,0,,and eventually for zero
Dialogue: 0,0:16:18.66,0:16:21.76,BottomCenter,,0,0,0,,and that is the nature of a recursive definition
Dialogue: 0,0:16:21.89,0:16:22.73,BottomCenter,,0,0,0,,and of course
Dialogue: 0,0:16:22.73,0:16:25.37,BottomCenter,,0,0,0,,we can now implement that in python
Dialogue: 0,0:16:25.37,0:16:26.60,BottomCenter,,0,0,0,,in very beautiful way
Dialogue: 0,0:16:26.60,0:16:29.20,BottomCenter,,0,0,0,,so let's go ahead and do now a recursive
Dialogue: 0,0:16:29.50,0:16:30.70,BottomCenter,,0,0,0,,versus an iterative
Dialogue: 0,0:16:30.70,0:16:33.92,BottomCenter,,0,0,0,,so I will refer to wild and four loop implementations
Dialogue: 0,0:16:33.92,0:16:35.29,BottomCenter,,0,0,0,,as iterative solutions
Dialogue: 0,0:16:35.29,0:16:36.52,BottomCenter,,0,0,0,,because you're iterating
Dialogue: 0,0:16:36.70,0:16:38.87,BottomCenter,,0,0,0,,and what we're about to do are called recursive
Dialogue: 0,0:16:38.87,0:16:40.79,BottomCenter,,0,0,0,,and you'll see in a minute why there's
Dialogue: 0,0:16:40.79,0:16:41.92,BottomCenter,,0,0,0,,a difference between these two
Dialogue: 0,0:16:41.92,0:16:43.10,BottomCenter,,0,0,0,,and what that difference is
Dialogue: 0,0:16:44.66,0:16:46.07,BottomCenter,,0,0,0,,please define please
Dialogue: 0,0:16:46.07,0:16:46.70,BottomCenter,,0,0,0,,I write a function
Dialogue: 0,0:16:46.70,0:16:47.97,BottomCenter,,0,0,0,,a recursive function
Dialogue: 0,0:16:47.97,0:16:49.89,BottomCenter,,0,0,0,,factorial that takes a parameter end
Dialogue: 0,0:16:49.89,0:16:52.07,BottomCenter,,0,0,0,,again I won't check if the parameters are greater than
Dialogue: 0,0:16:52.07,0:16:52.92,BottomCenter,,0,0,0,,we go to zero
Dialogue: 0,0:16:53.60,0:16:54.70,BottomCenter,,0,0,0,,base case is easy
Dialogue: 0,0:16:54.70,0:16:56.70,BottomCenter,,0,0,0,,if n is equal to zero return one
Dialogue: 0,0:16:56.70,0:16:57.33,BottomCenter,,0,0,0,,and notice here
Dialogue: 0,0:16:57.33,0:16:59.66,BottomCenter,,0,0,0,,I'm going to now make the base case explicit
Dialogue: 0,0:16:59.79,0:17:02.29,BottomCenter,,0,0,0,,okay so this is easy and absolutely correct
Dialogue: 0,0:17:02.37,0:17:03.39,BottomCenter,,0,0,0,,not a very useful function
Dialogue: 0,0:17:03.39,0:17:04.59,BottomCenter,,0,0,0,,because for all of the various event
Dialogue: 0,0:17:04.59,0:17:05.56,BottomCenter,,0,0,0,,there's nothing to do
Dialogue: 0,0:17:05.93,0:17:08.97,BottomCenter,,0,0,0,,now what do I want to do if n is greater than zero
Dialogue: 0,0:17:09.29,0:17:10.97,BottomCenter,,0,0,0,,well if end is greater than zero
Dialogue: 0,0:17:11.20,0:17:14.93,BottomCenter,,0,0,0,,I want to compute end times and minus one factorial
Dialogue: 0,0:17:15.09,0:17:17.29,BottomCenter,,0,0,0,,well how do I compute end minus one factorial
Dialogue: 0,0:17:17.47,0:17:18.86,BottomCenter,,0,0,0,,I've got a function to do it
Dialogue: 0,0:17:19.52,0:17:21.67,BottomCenter,,0,0,0,,so what happens if I just say
Dialogue: 0,0:17:21.86,0:17:25.36,BottomCenter,,0,0,0,,return end times factorial of n minus one
Dialogue: 0,0:17:25.50,0:17:26.90,BottomCenter,,0,0,0,,there's the recursion
Dialogue: 0,0:17:26.97,0:17:29.76,BottomCenter,,0,0,0,,that function definition and that function call
Dialogue: 0,0:17:29.76,0:17:30.97,BottomCenter,,0,0,0,,are the same thing
Dialogue: 0,0:17:31.17,0:17:33.97,BottomCenter,,0,0,0,,you are calling yourself recursively
Dialogue: 0,0:17:34.47,0:17:36.36,BottomCenter,,0,0,0,,now also notice this return
Dialogue: 0,0:17:36.36,0:17:38.13,BottomCenter,,0,0,0,,I said earlier when we did the editor of solution
Dialogue: 0,0:17:38.13,0:17:40.26,BottomCenter,,0,0,0,,this is really really really important
Dialogue: 0,0:17:40.26,0:17:42.29,BottomCenter,,0,0,0,,and you're gonna see in a minute why it's important
Dialogue: 0,0:17:42.50,0:17:45.13,BottomCenter,,0,0,0,,but notice I'm not printing I'm not assigning
Dialogue: 0,0:17:45.13,0:17:46.47,BottomCenter,,0,0,0,,in fact there's no variables here
Dialogue: 0,0:17:46.47,0:17:49.20,BottomCenter,,0,0,0,,there's no fact there's no fact equals
Dialogue: 0,0:17:49.20,0:17:51.52,BottomCenter,,0,0,0,,I'm just building an expression
Dialogue: 0,0:17:51.52,0:17:53.13,BottomCenter,,0,0,0,,and we're gonna see that in a minute
Dialogue: 0,0:17:53.86,0:17:55.47,BottomCenter,,0,0,0,,put this into python and it will work
Dialogue: 0,0:17:55.47,0:17:56.76,BottomCenter,,0,0,0,,it will return for you
Dialogue: 0,0:17:57.00,0:17:59.17,BottomCenter,,0,0,0,,five factorial 10 factorial whatever you want
Dialogue: 0,0:18:00.29,0:18:02.50,BottomCenter,,0,0,0,,and it seems sort of like we're cheating
Dialogue: 0,0:18:02.79,0:18:04.52,BottomCenter,,0,0,0,,it doesn't seem like it should work
Dialogue: 0,0:18:04.52,0:18:06.97,BottomCenter,,0,0,0,,but let's now in fact see why it works
Dialogue: 0,0:18:07.52,0:18:09.06,BottomCenter,,0,0,0,,and the magic here
Dialogue: 0,0:18:09.20,0:18:11.32,BottomCenter,,0,0,0,,is that while it seems like we are
Dialogue: 0,0:18:11.32,0:18:12.52,BottomCenter,,0,0,0,,all we're doing
Dialogue: 0,0:18:12.59,0:18:15.20,BottomCenter,,0,0,0,,is calling this function over and over again
Dialogue: 0,0:18:15.20,0:18:17.90,BottomCenter,,0,0,0,,notice that we are building up an expression here
Dialogue: 0,0:18:18.20,0:18:19.59,BottomCenter,,0,0,0,,so I've peeled off
Dialogue: 0,0:18:19.59,0:18:21.26,BottomCenter,,0,0,0,,I've simplified the problem a little bit
Dialogue: 0,0:18:21.26,0:18:24.47,BottomCenter,,0,0,0,,I've said three factorial is three times something
Dialogue: 0,0:18:24.90,0:18:25.67,BottomCenter,,0,0,0,,what's that something
Dialogue: 0,0:18:25.67,0:18:26.76,BottomCenter,,0,0,0,,well go ahead and figure it out
Dialogue: 0,0:18:26.76,0:18:27.40,BottomCenter,,0,0,0,,and when you're done
Dialogue: 0,0:18:27.40,0:18:30.17,BottomCenter,,0,0,0,,come back and put it into this expression for me
Dialogue: 0,0:18:30.17,0:18:32.13,BottomCenter,,0,0,0,,and I'll tell you what the final answer is
Dialogue: 0,0:18:32.56,0:18:33.36,BottomCenter,,0,0,0,,so
Dialogue: 0,0:18:33.67,0:18:35.52,BottomCenter,,0,0,0,,this little thing right here this is it
Dialogue: 0,0:18:35.79,0:18:37.50,BottomCenter,,0,0,0,,and this returning of a value
Dialogue: 0,0:18:37.50,0:18:38.09,BottomCenter,,0,0,0,,that's where
Dialogue: 0,0:18:38.09,0:18:40.00,BottomCenter,,0,0,0,,the nature of the computation is happening
Dialogue: 0,0:18:40.00,0:18:42.86,BottomCenter,,0,0,0,,and now you can see why recursion is so different
Dialogue: 0,0:18:42.86,0:18:45.26,BottomCenter,,0,0,0,,there's no variables there's no assignment operator
Dialogue: 0,0:18:45.47,0:18:47.52,BottomCenter,,0,0,0,,you're building this expression up
Dialogue: 0,0:18:47.52,0:18:49.47,BottomCenter,,0,0,0,,and now let's make sure we can go
Dialogue: 0,0:18:49.79,0:18:50.47,BottomCenter,,0,0,0,,and see that
Dialogue: 0,0:18:50.47,0:18:52.73,BottomCenter,,0,0,0,,and let's do that by calling three factorial
Dialogue: 0,0:18:52.79,0:18:54.20,BottomCenter,,0,0,0,,so here's my function definition
Dialogue: 0,0:18:54.20,0:18:57.00,BottomCenter,,0,0,0,,if an eco zero return one otherwise return end times
Dialogue: 0,0:18:57.00,0:18:59.13,BottomCenter,,0,0,0,,a recursive call to myself
Dialogue: 0,0:18:59.29,0:19:01.59,BottomCenter,,0,0,0,,with and minus one as a parameter
Dialogue: 0,0:19:01.73,0:19:03.26,BottomCenter,,0,0,0,,I call three factorial
Dialogue: 0,0:19:03.40,0:19:05.20,BottomCenter,,0,0,0,,and now you've just got to follow the code
Dialogue: 0,0:19:05.20,0:19:05.76,BottomCenter,,0,0,0,,it's like all
Dialogue: 0,0:19:05.76,0:19:07.90,BottomCenter,,0,0,0,,everything we've done to now just write out the code
Dialogue: 0,0:19:07.90,0:19:09.00,BottomCenter,,0,0,0,,what happens okay
Dialogue: 0,0:19:09.17,0:19:10.09,BottomCenter,,0,0,0,,three comes in
Dialogue: 0,0:19:10.09,0:19:11.09,BottomCenter,,0,0,0,,it's not equal to zero
Dialogue: 0,0:19:11.09,0:19:13.13,BottomCenter,,0,0,0,,so I come into the statement and I return
Dialogue: 0,0:19:13.70,0:19:16.76,BottomCenter,,0,0,0,,to the user three times factorial two
Dialogue: 0,0:19:17.40,0:19:19.70,BottomCenter,,0,0,0,,but I can't quite return it to the user yet
Dialogue: 0,0:19:19.70,0:19:22.20,BottomCenter,,0,0,0,,because that is not a value that I can
Dialogue: 0,0:19:22.56,0:19:24.00,BottomCenter,,0,0,0,,compute multiplication on
Dialogue: 0,0:19:24.00,0:19:26.36,BottomCenter,,0,0,0,,so I have to go call factorial of two
Dialogue: 0,0:19:26.73,0:19:30.09,BottomCenter,,0,0,0,,so it's sort of like if I'd said return three Times
Dialogue: 0,0:19:30.56,0:19:32.17,BottomCenter,,0,0,0,,Square root of 27
Dialogue: 0,0:19:32.32,0:19:34.47,BottomCenter,,0,0,0,,I'd have to go compute square root of 27
Dialogue: 0,0:19:34.76,0:19:36.17,BottomCenter,,0,0,0,,it's not a recursive call
Dialogue: 0,0:19:36.26,0:19:37.32,BottomCenter,,0,0,0,,come back
Dialogue: 0,0:19:37.56,0:19:41.17,BottomCenter,,0,0,0,,can do the arithmetic and then send it back to the user
Dialogue: 0,0:19:41.50,0:19:42.36,BottomCenter,,0,0,0,,it's the same thing here
Dialogue: 0,0:19:42.36,0:19:44.50,BottomCenter,,0,0,0,,the only difference is I'm calling myself
Dialogue: 0,0:19:44.50,0:19:46.00,BottomCenter,,0,0,0,,and I just have to remember
Dialogue: 0,0:19:46.17,0:19:48.50,BottomCenter,,0,0,0,,that when I eventually get an answer here
Dialogue: 0,0:19:48.52,0:19:50.70,BottomCenter,,0,0,0,,I'm going to have to multiply by three
Dialogue: 0,0:19:50.70,0:19:52.86,BottomCenter,,0,0,0,,and that will eventually get sent back to the
Dialogue: 0,0:19:52.97,0:19:54.06,BottomCenter,,0,0,0,,calling function
Dialogue: 0,0:19:54.47,0:19:57.09,BottomCenter,,0,0,0,,all right so forget about three times for now
Dialogue: 0,0:19:57.09,0:19:59.93,BottomCenter,,0,0,0,,we'll keep a memory of that yeah it's called a staff
Dialogue: 0,0:20:00.93,0:20:02.29,BottomCenter,,0,0,0,,let's compute two factorial
Dialogue: 0,0:20:02.29,0:20:04.86,BottomCenter,,0,0,0,,that's what we need in order to finish this expression
Dialogue: 0,0:20:05.13,0:20:05.56,BottomCenter,,0,0,0,,all right
Dialogue: 0,0:20:05.56,0:20:08.26,BottomCenter,,0,0,0,,two comes into here it's not zero so we return what
Dialogue: 0,0:20:08.29,0:20:10.67,BottomCenter,,0,0,0,,two times one factorial
Dialogue: 0,0:20:11.09,0:20:11.97,BottomCenter,,0,0,0,,okay so
Dialogue: 0,0:20:12.59,0:20:13.79,BottomCenter,,0,0,0,,we sort of got somewhere
Dialogue: 0,0:20:13.79,0:20:15.29,BottomCenter,,0,0,0,,we sort of didn't yeah
Dialogue: 0,0:20:15.36,0:20:16.90,BottomCenter,,0,0,0,,so three factorial
Dialogue: 0,0:20:16.90,0:20:18.90,BottomCenter,,0,0,0,,needs to know the answer to two factorial
Dialogue: 0,0:20:19.13,0:20:21.17,BottomCenter,,0,0,0,,two factorial there's two times something
Dialogue: 0,0:20:21.17,0:20:22.97,BottomCenter,,0,0,0,,but I don't know what that's something is yet
Dialogue: 0,0:20:23.13,0:20:23.86,BottomCenter,,0,0,0,,so I've got a
Dialogue: 0,0:20:23.86,0:20:25.47,BottomCenter,,0,0,0,,okay I gotta go and figure that out
Dialogue: 0,0:20:25.47,0:20:27.17,BottomCenter,,0,0,0,,and then I'll eventually compute this
Dialogue: 0,0:20:27.17,0:20:28.76,BottomCenter,,0,0,0,,and then I'll eventually compute this
Dialogue: 0,0:20:28.97,0:20:30.67,BottomCenter,,0,0,0,,let's go figure out one factorial
Dialogue: 0,0:20:31.52,0:20:32.56,BottomCenter,,0,0,0,,one factorial comes in
Dialogue: 0,0:20:32.56,0:20:36.17,BottomCenter,,0,0,0,,that's not true so return one times zero factorial
Dialogue: 0,0:20:36.17,0:20:37.29,BottomCenter,,0,0,0,,there it is right there
Dialogue: 0,0:20:37.73,0:20:39.52,BottomCenter,,0,0,0,,all right now we're getting closer
Dialogue: 0,0:20:39.76,0:20:41.52,BottomCenter,,0,0,0,,right because what's going to happen
Dialogue: 0,0:20:41.70,0:20:43.79,BottomCenter,,0,0,0,,when I call zero factorial
Dialogue: 0,0:20:44.09,0:20:47.32,BottomCenter,,0,0,0,,zero comes into here and a zero return one
Dialogue: 0,0:20:47.47,0:20:48.79,BottomCenter,,0,0,0,,I have a value here
Dialogue: 0,0:20:48.90,0:20:51.00,BottomCenter,,0,0,0,,so this is going to go off and call something
Dialogue: 0,0:20:51.26,0:20:53.67,BottomCenter,,0,0,0,,and it's going to return an actual value
Dialogue: 0,0:20:53.67,0:20:56.13,BottomCenter,,0,0,0,,no more recursion we hit the face case
Dialogue: 0,0:20:56.13,0:20:57.56,BottomCenter,,0,0,0,,no more recursive case
Dialogue: 0,0:20:58.20,0:20:59.59,BottomCenter,,0,0,0,,alright now let's see what happens
Dialogue: 0,0:20:59.59,0:21:00.70,BottomCenter,,0,0,0,,let's forget about the three
Dialogue: 0,0:21:00.70,0:21:01.79,BottomCenter,,0,0,0,,forget about the two for a minute
Dialogue: 0,0:21:01.79,0:21:03.73,BottomCenter,,0,0,0,,let's just look at one in below
Dialogue: 0,0:21:03.76,0:21:07.20,BottomCenter,,0,0,0,,yeah so one factorial is one times zero factorial
Dialogue: 0,0:21:07.20,0:21:09.00,BottomCenter,,0,0,0,,zero factorial is a function called
Dialogue: 0,0:21:09.00,0:21:11.20,BottomCenter,,0,0,0,,happens to be recursive but honestly I don't care
Dialogue: 0,0:21:11.56,0:21:12.90,BottomCenter,,0,0,0,,it returns one
Dialogue: 0,0:21:13.29,0:21:16.26,BottomCenter,,0,0,0,,and so now that one and here it is
Dialogue: 0,0:21:16.29,0:21:18.26,BottomCenter,,0,0,0,,it's a return statement
Dialogue: 0,0:21:18.70,0:21:19.93,BottomCenter,,0,0,0,,why does that matter
Dialogue: 0,0:21:20.13,0:21:22.17,BottomCenter,,0,0,0,,because that's a function call
Dialogue: 0,0:21:22.36,0:21:24.29,BottomCenter,,0,0,0,,and that means I'm going to send a value
Dialogue: 0,0:21:24.32,0:21:25.13,BottomCenter,,0,0,0,,into that function
Dialogue: 0,0:21:25.13,0:21:27.13,BottomCenter,,0,0,0,,and it has to send me something back
Dialogue: 0,0:21:27.13,0:21:28.17,BottomCenter,,0,0,0,,that I can use it in
Dialogue: 0,0:21:28.17,0:21:30.73,BottomCenter,,0,0,0,,expression it's exactly like calling square root
Dialogue: 0,0:21:30.86,0:21:33.00,BottomCenter,,0,0,0,,you can't print the square root that does me no good
Dialogue: 0,0:21:33.00,0:21:34.76,BottomCenter,,0,0,0,,I'm trying to use it in an expression
Dialogue: 0,0:21:34.90,0:21:36.52,BottomCenter,,0,0,0,,you have to return it to me
Dialogue: 0,0:21:36.52,0:21:39.97,BottomCenter,,0,0,0,,return it to me so that I can use it in expression
Dialogue: 0,0:21:40.32,0:21:40.52,BottomCenter,,0,0,0,,all right
Dialogue: 0,0:21:40.52,0:21:44.13,BottomCenter,,0,0,0,,one gets popped back into this call for your factorial
Dialogue: 0,0:21:44.13,0:21:44.93,BottomCenter,,0,0,0,,and now
Dialogue: 0,0:21:45.06,0:21:47.09,BottomCenter,,0,0,0,,I can do the arithmetic I can do the multiplication
Dialogue: 0,0:21:47.09,0:21:48.93,BottomCenter,,0,0,0,,so I'm going to multiply one times one
Dialogue: 0,0:21:49.70,0:21:52.73,BottomCenter,,0,0,0,,and now I have an answer to one factorial
Dialogue: 0,0:21:52.93,0:21:55.86,BottomCenter,,0,0,0,,because that evaluated to an actual value
Dialogue: 0,0:21:55.86,0:21:57.67,BottomCenter,,0,0,0,,and it's being returned
Dialogue: 0,0:21:57.86,0:22:00.97,BottomCenter,,0,0,0,,back because of that return statement right there
Dialogue: 0,0:22:01.29,0:22:03.97,BottomCenter,,0,0,0,,so now the one gets replaced in there
Dialogue: 0,0:22:04.13,0:22:06.00,BottomCenter,,0,0,0,,and now I have two times one
Dialogue: 0,0:22:06.00,0:22:08.47,BottomCenter,,0,0,0,,is the answer to two factorial
Dialogue: 0,0:22:08.50,0:22:11.36,BottomCenter,,0,0,0,,a two get returned to that
Dialogue: 0,0:22:13.73,0:22:17.13,BottomCenter,,0,0,0,,the two gets returned to the factorial of two
Dialogue: 0,0:22:17.26,0:22:20.13,BottomCenter,,0,0,0,,and now I have an expression that I can evaluate
Dialogue: 0,0:22:20.13,0:22:22.40,BottomCenter,,0,0,0,,so eventually it took a little while
Dialogue: 0,0:22:22.70,0:22:24.26,BottomCenter,,0,0,0,,eventually what happened
Dialogue: 0,0:22:24.50,0:22:27.47,BottomCenter,,0,0,0,,is that that two factorial called one factoria
Dialogue: 0,0:22:27.47,0:22:28.40,BottomCenter,,0,0,0,,which called zero factoria
Dialogue: 0,0:22:28.40,0:22:29.67,BottomCenter,,0,0,0,,which hit the base case
Dialogue: 0,0:22:29.73,0:22:31.93,BottomCenter,,0,0,0,,and then I started popping up those expressions
Dialogue: 0,0:22:31.93,0:22:33.52,BottomCenter,,0,0,0,,and now I have an expression
Dialogue: 0,0:22:33.59,0:22:36.00,BottomCenter,,0,0,0,,and I return of course six
Dialogue: 0,0:22:36.93,0:22:41.09,BottomCenter,,0,0,0,,so the nature of recursion is that we build up
Dialogue: 0,0:22:41.32,0:22:46.20,BottomCenter,,0,0,0,,expressions using a recursive definition of a function
Dialogue: 0,0:22:46.40,0:22:48.36,BottomCenter,,0,0,0,,and these return statements which
Dialogue: 0,0:22:48.50,0:22:51.86,BottomCenter,,0,0,0,,essentially hold the memory of that expression
Dialogue: 0,0:22:51.97,0:22:53.86,BottomCenter,,0,0,0,,as it is being built
Dialogue: 0,0:22:54.17,0:22:55.76,BottomCenter,,0,0,0,,so you can see here it's a really
Dialogue: 0,0:22:55.76,0:22:57.73,BottomCenter,,0,0,0,,really different way of thinking
Dialogue: 0,0:22:57.76,0:22:59.90,BottomCenter,,0,0,0,,about the nature of computation
Dialogue: 0,0:23:00.06,0:23:02.17,BottomCenter,,0,0,0,,it's not right or wrong better or worse
Dialogue: 0,0:23:02.17,0:23:03.32,BottomCenter,,0,0,0,,sometimes it's a little bit better
Dialogue: 0,0:23:03.32,0:23:04.79,BottomCenter,,0,0,0,,sometimes it's a little bit more elegant
Dialogue: 0,0:23:04.93,0:23:05.93,BottomCenter,,0,0,0,,sometimes it's a little worse
Dialogue: 0,0:23:05.93,0:23:07.13,BottomCenter,,0,0,0,,sometimes it's less efficient
Dialogue: 0,0:23:07.13,0:23:07.73,BottomCenter,,0,0,0,,because you have to
Dialogue: 0,0:23:07.73,0:23:10.09,BottomCenter,,0,0,0,,hold on to the memory of all of these things
Dialogue: 0,0:23:10.56,0:23:12.26,BottomCenter,,0,0,0,,but it's a really powerful concept
Dialogue: 0,0:23:12.26,0:23:13.70,BottomCenter,,0,0,0,,and I think it's an important way to
Dialogue: 0,0:23:13.70,0:23:15.70,BottomCenter,,0,0,0,,think about the nature of computation
Dialogue: 0,0:23:15.79,0:23:16.86,BottomCenter,,0,0,0,,so we're going to spend a little bit of
Dialogue: 0,0:23:16.86,0:23:19.13,BottomCenter,,0,0,0,,time looking at some more recursive examples
Dialogue: 0,0:23:19.13,0:23:20.00,BottomCenter,,0,0,0,,and make sure that we
Dialogue: 0,0:23:20.00,0:23:23.00,BottomCenter,,0,0,0,,understand this paradigm of computation
Dialogue: 0,0:23:23.06,0:23:25.26,BottomCenter,,0,0,0,,and we'll pick it up in a few minutes when we come back
Dialogue: 0,0:23:29.29,0:23:32.32,BottomCenter,,0,0,0,,understanding the order of recursive calls is important
Dialogue: 0,0:23:32.32,0:23:32.86,BottomCenter,,0,0,0,,and
Dialogue: 0,0:23:32.86,0:23:34.20,BottomCenter,,0,0,0,,understanding the behavior
Dialogue: 0,0:23:34.47,0:23:36.20,BottomCenter,,0,0,0,,of recursive functions
Dialogue: 0,0:23:36.93,0:23:38.76,BottomCenter,,0,0,0,,and the thing to remember is that
Dialogue: 0,0:23:38.86,0:23:40.47,BottomCenter,,0,0,0,,when you make a function call
Dialogue: 0,0:23:40.56,0:23:41.56,BottomCenter,,0,0,0,,you have to wait
Dialogue: 0,0:23:41.59,0:23:44.32,BottomCenter,,0,0,0,,for it to return before you can do anything else
Dialogue: 0,0:23:44.56,0:23:46.79,BottomCenter,,0,0,0,,so if one function calls another function
Dialogue: 0,0:23:46.90,0:23:48.79,BottomCenter,,0,0,0,,and then does something after that
Dialogue: 0,0:23:49.09,0:23:51.67,BottomCenter,,0,0,0,,that function call has to return
Dialogue: 0,0:23:51.90,0:23:53.93,BottomCenter,,0,0,0,,before whatever else happens next
Dialogue: 0,0:23:54.97,0:23:58.73,BottomCenter,,0,0,0,,let me illustrate what I mean with the cascade function
Dialogue: 0,0:23:59.40,0:24:01.09,BottomCenter,,0,0,0,,the cascade function
Dialogue: 0,0:24:02.29,0:24:04.56,BottomCenter,,0,0,0,,takes in a positive integer n
Dialogue: 0,0:24:05.29,0:24:08.67,BottomCenter,,0,0,0,,if n is less than 10 it just prints out
Dialogue: 0,0:24:10.67,0:24:11.47,BottomCenter,,0,0,0,,ant
Dialogue: 0,0:24:11.76,0:24:12.56,BottomCenter,,0,0,0,,otherwise
Dialogue: 0,0:24:13.36,0:24:14.90,BottomCenter,,0,0,0,,at first prince end
Dialogue: 0,0:24:15.09,0:24:18.13,BottomCenter,,0,0,0,,then makes a recursive call to cascade
Dialogue: 0,0:24:18.50,0:24:19.93,BottomCenter,,0,0,0,,on a smaller number
Dialogue: 0,0:24:20.20,0:24:22.93,BottomCenter,,0,0,0,,that's everything except for the last digit of an
Dialogue: 0,0:24:23.09,0:24:25.09,BottomCenter,,0,0,0,,or and divided by 10
Dialogue: 0,0:24:25.17,0:24:26.86,BottomCenter,,0,0,0,,with the remainder thrown away
Dialogue: 0,0:24:27.52,0:24:31.56,BottomCenter,,0,0,0,,and finally after that recursive call to cascade
Dialogue: 0,0:24:31.67,0:24:33.20,BottomCenter,,0,0,0,,it prints end again
Dialogue: 0,0:24:34.26,0:24:36.86,BottomCenter,,0,0,0,,let's take a look at the behavior of this function
Dialogue: 0,0:24:37.29,0:24:40.70,BottomCenter,,0,0,0,,so if I cascade just the No.5 that's the base case
Dialogue: 0,0:24:40.70,0:24:42.50,BottomCenter,,0,0,0,,then I print out the No.5
Dialogue: 0,0:24:42.70,0:24:45.17,BottomCenter,,0,0,0,,but if I cascade 1 2 3 4 5
Dialogue: 0,0:24:45.32,0:24:47.52,BottomCenter,,0,0,0,,then I see this beautiful design
Dialogue: 0,0:24:48.29,0:24:50.26,BottomCenter,,0,0,0,,4 1 2 3 4 5 is printed
Dialogue: 0,0:24:50.59,0:24:55.13,BottomCenter,,0,0,0,,and then we see a cascade of smaller versions of that
Dialogue: 0,0:24:55.29,0:24:55.97,BottomCenter,,0,0,0,,and by the way
Dialogue: 0,0:24:55.97,0:24:59.09,BottomCenter,,0,0,0,,the original number is printed again at the very end
Dialogue: 0,0:24:59.56,0:25:01.09,BottomCenter,,0,0,0,,now the first and the last
Dialogue: 0,0:25:01.09,0:25:03.20,BottomCenter,,0,0,0,,lines all come from this print statement
Dialogue: 0,0:25:04.13,0:25:06.40,BottomCenter,,0,0,0,,and in fact most of the lines that you see here
Dialogue: 0,0:25:06.40,0:25:08.40,BottomCenter,,0,0,0,,come from either this print statement or this
Dialogue: 0,0:25:08.40,0:25:09.32,BottomCenter,,0,0,0,,print statement
Dialogue: 0,0:25:09.52,0:25:12.47,BottomCenter,,0,0,0,,only the base case which is for the No.1
Dialogue: 0,0:25:12.47,0:25:14.00,BottomCenter,,0,0,0,,comes from this print statement
Dialogue: 0,0:25:15.36,0:25:17.86,BottomCenter,,0,0,0,,what this is supposed to illustrate is that
Dialogue: 0,0:25:18.17,0:25:20.86,BottomCenter,,0,0,0,,all the cascading that happens recursively
Dialogue: 0,0:25:20.90,0:25:23.26,BottomCenter,,0,0,0,,happens before the final print
Dialogue: 0,0:25:23.40,0:25:26.36,BottomCenter,,0,0,0,,and that's why you get this nice nested structure
Dialogue: 0,0:25:27.09,0:25:29.40,BottomCenter,,0,0,0,,let's take a look at the environment diagram
Dialogue: 0,0:25:29.40,0:25:32.06,BottomCenter,,0,0,0,,so that we can see exactly what's happening
Dialogue: 0,0:25:34.59,0:25:38.32,BottomCenter,,0,0,0,,so we defined cascade and then call it on 1 2 3
Dialogue: 0,0:25:40.70,0:25:42.09,BottomCenter,,0,0,0,,the original call
Dialogue: 0,0:25:42.93,0:25:44.70,BottomCenter,,0,0,0,,checks for the base case
Dialogue: 0,0:25:44.97,0:25:48.47,BottomCenter,,0,0,0,,doesn't find it and so prints out 1 2 3
Dialogue: 0,0:25:49.59,0:25:50.79,BottomCenter,,0,0,0,,in the python tutor
Dialogue: 0,0:25:50.79,0:25:53.76,BottomCenter,,0,0,0,,you can see that the program output generated so far
Dialogue: 0,0:25:53.76,0:25:54.93,BottomCenter,,0,0,0,,is just the number one
Dialogue: 0,0:25:54.93,0:25:57.70,BottomCenter,,0,0,0,,two three we still have to generate all the rest
Dialogue: 0,0:25:58.50,0:26:01.36,BottomCenter,,0,0,0,,and how do we generate everything smaller than 1 2 3
Dialogue: 0,0:26:01.47,0:26:04.70,BottomCenter,,0,0,0,,while that involves a recursive call to cascade
Dialogue: 0,0:26:04.90,0:26:07.76,BottomCenter,,0,0,0,,in this case where we've thrown away the last digit
Dialogue: 0,0:26:07.76,0:26:09.67,BottomCenter,,0,0,0,,and were left with just one two
Dialogue: 0,0:26:10.47,0:26:10.86,BottomCenter,,0,0,0,,so the
Dialogue: 0,0:26:10.86,0:26:13.73,BottomCenter,,0,0,0,,important thing is that this call te cascade will
Dialogue: 0,0:26:13.79,0:26:14.59,BottomCenter,,0,0,0,,complete
Dialogue: 0,0:26:14.86,0:26:16.09,BottomCenter,,0,0,0,,before we ever go back
Dialogue: 0,0:26:16.09,0:26:17.00,BottomCenter,,0,0,0,,and finish
Dialogue: 0,0:26:17.40,0:26:18.73,BottomCenter,,0,0,0,,the original one
Dialogue: 0,0:26:19.52,0:26:21.06,BottomCenter,,0,0,0,,so what do I mean by complete
Dialogue: 0,0:26:21.20,0:26:24.52,BottomCenter,,0,0,0,,well it's gonna print 12 make a recursive call
Dialogue: 0,0:26:24.73,0:26:26.13,BottomCenter,,0,0,0,,on an equals one
Dialogue: 0,0:26:26.13,0:26:28.59,BottomCenter,,0,0,0,,which is the base case which gets printed out
Dialogue: 0,0:26:28.67,0:26:30.79,BottomCenter,,0,0,0,,so now we've cascaded all the way down
Dialogue: 0,0:26:31.13,0:26:33.52,BottomCenter,,0,0,0,,how is it that we cascade all the way back up
Dialogue: 0,0:26:33.59,0:26:36.86,BottomCenter,,0,0,0,,well our 3rd call the cascade returns
Dialogue: 0,0:26:36.90,0:26:39.06,BottomCenter,,0,0,0,,what does it return none
Dialogue: 0,0:26:39.52,0:26:40.32,BottomCenter,,0,0,0,,why
Dialogue: 0,0:26:40.50,0:26:43.00,BottomCenter,,0,0,0,,because there's no return statement at all
Dialogue: 0,0:26:43.47,0:26:46.86,BottomCenter,,0,0,0,,and if when executing the body of a function
Dialogue: 0,0:26:46.86,0:26:48.47,BottomCenter,,0,0,0,,you reach the end of the body
Dialogue: 0,0:26:48.47,0:26:50.73,BottomCenter,,0,0,0,,without ever seeing a return statement
Dialogue: 0,0:26:50.79,0:26:52.90,BottomCenter,,0,0,0,,you always return none
Dialogue: 0,0:26:53.90,0:26:56.09,BottomCenter,,0,0,0,,okay now we have to ask ourselves
Dialogue: 0,0:26:56.09,0:26:57.70,BottomCenter,,0,0,0,,where do we return to
Dialogue: 0,0:26:57.97,0:27:01.26,BottomCenter,,0,0,0,,when we were in the middle of this call to cascade
Dialogue: 0,0:27:01.67,0:27:04.29,BottomCenter,,0,0,0,,which involved this line
Dialogue: 0,0:27:04.86,0:27:08.52,BottomCenter,,0,0,0,,finally we figured out that that had a value of none
Dialogue: 0,0:27:08.52,0:27:11.17,BottomCenter,,0,0,0,,and then we go on and finish printing
Dialogue: 0,0:27:11.32,0:27:13.79,BottomCenter,,0,0,0,,n is 12 right there
Dialogue: 0,0:27:14.86,0:27:18.26,BottomCenter,,0,0,0,,and when we print that we actually see that 12 appear
Dialogue: 0,0:27:18.50,0:27:21.50,BottomCenter,,0,0,0,,and we have a return value of none from this call
Dialogue: 0,0:27:21.56,0:27:22.59,BottomCenter,,0,0,0,,which means that we can
Dialogue: 0,0:27:22.59,0:27:25.79,BottomCenter,,0,0,0,,finally return to our original call to cascade
Dialogue: 0,0:27:26.26,0:27:27.70,BottomCenter,,0,0,0,,and finish up
Dialogue: 0,0:27:27.70,0:27:29.52,BottomCenter,,0,0,0,,so we've evaluated this
Dialogue: 0,0:27:30.50,0:27:33.26,BottomCenter,,0,0,0,,and in the course of evaluating that
Dialogue: 0,0:27:33.26,0:27:34.93,BottomCenter,,0,0,0,,we generated all this output
Dialogue: 0,0:27:34.97,0:27:37.73,BottomCenter,,0,0,0,,and finally we're gonna print in at the very end
Dialogue: 0,0:27:38.47,0:27:39.36,BottomCenter,,0,0,0,,and now we're done
Dialogue: 0,0:27:40.70,0:27:41.29,BottomCenter,,0,0,0,,okay so
Dialogue: 0,0:27:41.29,0:27:44.56,BottomCenter,,0,0,0,,a critical moment in the environment diagram was when
Dialogue: 0,0:27:44.70,0:27:48.13,BottomCenter,,0,0,0,,we had returned from the second call to cascade
Dialogue: 0,0:27:48.17,0:27:50.86,BottomCenter,,0,0,0,,but we hadn't yet finished the first call
Dialogue: 0,0:27:51.70,0:27:53.97,BottomCenter,,0,0,0,,so the first call had printed in
Dialogue: 0,0:27:54.00,0:27:56.90,BottomCenter,,0,0,0,,it had cascaded all the way down to get twelve
Dialogue: 0,0:27:56.90,0:27:57.79,BottomCenter,,0,0,0,,one and twelve
Dialogue: 0,0:27:57.93,0:27:59.70,BottomCenter,,0,0,0,,but it hadn't printed in yet
Dialogue: 0,0:28:00.00,0:28:03.93,BottomCenter,,0,0,0,,and that's the very last step of cascade
Dialogue: 0,0:28:04.90,0:28:06.50,BottomCenter,,0,0,0,,so each cascade frame
Dialogue: 0,0:28:06.73,0:28:08.90,BottomCenter,,0,0,0,,comes from a different call to cascade
Dialogue: 0,0:28:08.90,0:28:11.52,BottomCenter,,0,0,0,,and until the return value appears
Dialogue: 0,0:28:11.59,0:28:13.93,BottomCenter,,0,0,0,,that call has not yet completed
Dialogue: 0,0:28:14.67,0:28:18.06,BottomCenter,,0,0,0,,and so any work that happens after that call
Dialogue: 0,0:28:18.06,0:28:19.47,BottomCenter,,0,0,0,,hasn't happened yet
Dialogue: 0,0:28:19.93,0:28:22.56,BottomCenter,,0,0,0,,any statement can appear before or after
Dialogue: 0,0:28:22.67,0:28:23.76,BottomCenter,,0,0,0,,a recursive call
Dialogue: 0,0:28:24.00,0:28:26.47,BottomCenter,,0,0,0,,there's the one before and there's the one after
Dialogue: 0,0:28:28.09,0:28:28.76,BottomCenter,,0,0,0,,it was
Dialogue: 0,0:28:28.76,0:28:32.00,BottomCenter,,0,0,0,,the third call to cascade that printed out the No.1
Dialogue: 0,0:28:32.29,0:28:35.40,BottomCenter,,0,0,0,,it was the second call to cascade that printed out
Dialogue: 0,0:28:35.40,0:28:36.50,BottomCenter,,0,0,0,,both of those twelves
Dialogue: 0,0:28:36.50,0:28:39.90,BottomCenter,,0,0,0,,one before and one before after printing the No.1
Dialogue: 0,0:28:40.36,0:28:43.26,BottomCenter,,0,0,0,,and finally this first call printed the 1 2 3
Dialogue: 0,0:28:43.26,0:28:46.13,BottomCenter,,0,0,0,,and is about to print 1 2 3 at the very end
Dialogue: 0,0:28:47.29,0:28:50.40,BottomCenter,,0,0,0,,now that's not the only way to define cass gate
Dialogue: 0,0:28:51.97,0:28:54.20,BottomCenter,,0,0,0,,an even shorter version would say well
Dialogue: 0,0:28:54.20,0:28:55.36,BottomCenter,,0,0,0,,in the base case
Dialogue: 0,0:28:55.36,0:28:58.40,BottomCenter,,0,0,0,,or in the recursive case I always print in first
Dialogue: 0,0:28:58.52,0:29:00.97,BottomCenter,,0,0,0,,so why not just put that at the very top
Dialogue: 0,0:29:01.29,0:29:03.17,BottomCenter,,0,0,0,,and then there's actually nothing left to do
Dialogue: 0,0:29:03.17,0:29:04.29,BottomCenter,,0,0,0,,in the base case
Dialogue: 0,0:29:04.40,0:29:05.59,BottomCenter,,0,0,0,,so I could just change
Dialogue: 0,0:29:05.59,0:29:08.73,BottomCenter,,0,0,0,,the zif statement to be all about the recursive case
Dialogue: 0,0:29:08.90,0:29:11.17,BottomCenter,,0,0,0,,which is when n is greater than 10
Dialogue: 0,0:29:11.97,0:29:14.86,BottomCenter,,0,0,0,,I will cascade and then print again
Dialogue: 0,0:29:19.20,0:29:21.93,BottomCenter,,0,0,0,,so now if I cascade 1 2 3 4 5
Dialogue: 0,0:29:22.47,0:29:23.76,BottomCenter,,0,0,0,,it still works
Dialogue: 0,0:29:23.79,0:29:26.47,BottomCenter,,0,0,0,,and I have a slightly shorter function definition
Dialogue: 0,0:29:27.06,0:29:30.00,BottomCenter,,0,0,0,,by the way this works even if I add more numbers
Dialogue: 0,0:29:30.00,0:29:32.32,BottomCenter,,0,0,0,,and it only becomes more beautiful
Dialogue: 0,0:29:33.56,0:29:35.70,BottomCenter,,0,0,0,,but which version of cascade is better
Dialogue: 0,0:29:35.70,0:29:36.70,BottomCenter,,0,0,0,,so we have one
Dialogue: 0,0:29:36.70,0:29:38.09,BottomCenter,,0,0,0,,that breaks out the base
Dialogue: 0,0:29:38.09,0:29:39.50,BottomCenter,,0,0,0,,case and the recursive case
Dialogue: 0,0:29:39.50,0:29:41.06,BottomCenter,,0,0,0,,and tells you what to do in each
Dialogue: 0,0:29:41.40,0:29:44.20,BottomCenter,,0,0,0,,we have this other one that finds what's similar
Dialogue: 0,0:29:44.20,0:29:46.76,BottomCenter,,0,0,0,,between the two and tries not to repeat itself
Dialogue: 0,0:29:47.90,0:29:50.29,BottomCenter,,0,0,0,,the two implementations are equally clear
Dialogue: 0,0:29:50.70,0:29:50.93,BottomCenter,,0,0,0,,then
Dialogue: 0,0:29:50.93,0:29:53.67,BottomCenter,,0,0,0,,I think it's usually better to prefer the shorter one
Dialogue: 0,0:29:53.73,0:29:56.73,BottomCenter,,0,0,0,,just because it takes other people less time to read it
Dialogue: 0,0:29:57.52,0:30:00.20,BottomCenter,,0,0,0,,in this case the longer implementation is more clear
Dialogue: 0,0:30:00.20,0:30:01.26,BottomCenter,,0,0,0,,at least to me
Dialogue: 0,0:30:01.36,0:30:02.90,BottomCenter,,0,0,0,,because it clearly breaks out
Dialogue: 0,0:30:02.90,0:30:05.50,BottomCenter,,0,0,0,,what's the base case and what's the recursive case
Dialogue: 0,0:30:05.56,0:30:06.47,BottomCenter,,0,0,0,,in that order
Dialogue: 0,0:30:06.59,0:30:08.36,BottomCenter,,0,0,0,,and that's the way I'm used to reading
Dialogue: 0,0:30:08.36,0:30:09.73,BottomCenter,,0,0,0,,recursive functions
Dialogue: 0,0:30:10.56,0:30:12.56,BottomCenter,,0,0,0,,so when learning to write recursive functions
Dialogue: 0,0:30:12.56,0:30:14.29,BottomCenter,,0,0,0,,I recommend doing that as well
Dialogue: 0,0:30:14.36,0:30:15.52,BottomCenter,,0,0,0,,but you don't have to
Dialogue: 0,0:30:16.67,0:30:19.29,BottomCenter,,0,0,0,,but both of these are recursive functions even if
Dialogue: 0,0:30:19.29,0:30:22.06,BottomCenter,,0,0,0,,only the one on the left has a typical structure
Dialogue: 0,0:30:22.97,0:30:25.56,BottomCenter,,0,0,0,,if you're trying to choose between one and the other
Dialogue: 0,0:30:26.36,0:30:28.50,BottomCenter,,0,0,0,,remember that when you write programs
Dialogue: 0,0:30:28.50,0:30:30.86,BottomCenter,,0,0,0,,they should be written for somebody else to read
Dialogue: 0,0:30:31.20,0:30:35.13,BottomCenter,,0,0,0,,and only incidentally for a computer to execute them
Dialogue: 0,0:30:35.90,0:30:39.09,BottomCenter,,0,0,0,,so think about which one you'd like to read
Dialogue: 0,0:30:39.29,0:30:41.52,BottomCenter,,0,0,0,,if you were reading somebody else's program
Dialogue: 0,0:30:41.67,0:30:43.06,BottomCenter,,0,0,0,,and make your choice there
Dialogue: 0,0:30:47.52,0:30:49.13,BottomCenter,,0,0,0,,let's let you try one
Dialogue: 0,0:30:49.90,0:30:51.50,BottomCenter,,0,0,0,,now we want to write a function
Dialogue: 0,0:30:51.90,0:30:54.29,BottomCenter,,0,0,0,,that computes an inverse cascade
Dialogue: 0,0:30:54.59,0:30:55.52,BottomCenter,,0,0,0,,what's that
Dialogue: 0,0:30:55.79,0:30:58.97,BottomCenter,,0,0,0,,well if we pass in the number one two three four
Dialogue: 0,0:30:59.17,0:31:02.29,BottomCenter,,0,0,0,,we want it to print out the following lines
Dialogue: 0,0:31:02.86,0:31:04.97,BottomCenter,,0,0,0,,1 1 2 1 2 3 1 2 3 4
Dialogue: 0,0:31:04.97,0:31:07.20,BottomCenter,,0,0,0,,and then get smaller on the way down
Dialogue: 0,0:31:08.06,0:31:09.09,BottomCenter,,0,0,0,,now if you want
Dialogue: 0,0:31:09.36,0:31:11.52,BottomCenter,,0,0,0,,you can try to implement this from scratch
Dialogue: 0,0:31:13.79,0:31:15.97,BottomCenter,,0,0,0,,I'm going to give you some structure right now
Dialogue: 0,0:31:16.36,0:31:19.56,BottomCenter,,0,0,0,,so that you can implement it in a particular way
Dialogue: 0,0:31:19.73,0:31:22.06,BottomCenter,,0,0,0,,using higher order functions
Dialogue: 0,0:31:23.26,0:31:25.93,BottomCenter,,0,0,0,,1st here's the implementation we'll use
Dialogue: 0,0:31:26.17,0:31:27.47,BottomCenter,,0,0,0,,we'll call grow
Dialogue: 0,0:31:28.09,0:31:31.00,BottomCenter,,0,0,0,,to print the one the one two and the 1 2 3
Dialogue: 0,0:31:31.26,0:31:32.73,BottomCenter,,0,0,0,,we'll call print
Dialogue: 0,0:31:32.76,0:31:35.00,BottomCenter,,0,0,0,,in in order to print the longest line of all
Dialogue: 0,0:31:35.36,0:31:36.73,BottomCenter,,0,0,0,,then we'll call shrink
Dialogue: 0,0:31:38.70,0:31:40.32,BottomCenter,,0,0,0,,now what are growing shrink
Dialogue: 0,0:31:40.90,0:31:42.00,BottomCenter,,0,0,0,,while they're both
Dialogue: 0,0:31:42.32,0:31:43.32,BottomCenter,,0,0,0,,going to be
Dialogue: 0,0:31:43.32,0:31:46.59,BottomCenter,,0,0,0,,related to the following higher order function
Dialogue: 0,0:31:46.86,0:31:49.29,BottomCenter,,0,0,0,,which takes in two functions f and g
Dialogue: 0,0:31:49.52,0:31:50.86,BottomCenter,,0,0,0,,and a number n
Dialogue: 0,0:31:51.09,0:31:54.09,BottomCenter,,0,0,0,,and if n meaning if n is not zero
Dialogue: 0,0:31:54.86,0:31:57.56,BottomCenter,,0,0,0,,zero is the only false value of a number
Dialogue: 0,0:31:57.76,0:31:59.29,BottomCenter,,0,0,0,,so if fn is not zero
Dialogue: 0,0:31:59.40,0:32:01.36,BottomCenter,,0,0,0,,then we'll call f and then we'll call g
Dialogue: 0,0:32:01.56,0:32:03.17,BottomCenter,,0,0,0,,in that order
Dialogue: 0,0:32:04.73,0:32:06.32,BottomCenter,,0,0,0,,so here's the challenge to you
Dialogue: 0,0:32:06.76,0:32:08.73,BottomCenter,,0,0,0,,define grow and shrink
Dialogue: 0,0:32:09.00,0:32:12.36,BottomCenter,,0,0,0,,which are both functions of a single argument
Dialogue: 0,0:32:12.36,0:32:16.09,BottomCenter,,0,0,0,,for call n that evolve calling fng
Dialogue: 0,0:32:16.52,0:32:17.97,BottomCenter,,0,0,0,,on some arguments
Dialogue: 0,0:32:18.76,0:32:20.56,BottomCenter,,0,0,0,,so your goal now is to figure out
Dialogue: 0,0:32:20.56,0:32:22.67,BottomCenter,,0,0,0,,what arguments we could pass in
Dialogue: 0,0:32:22.93,0:32:23.86,BottomCenter,,0,0,0,,in order to
Dialogue: 0,0:32:23.86,0:32:27.29,BottomCenter,,0,0,0,,complete the implementation of inverse kestgate
Dialogue: 0,0:32:28.00,0:32:29.93,BottomCenter,,0,0,0,,pause the video and think about it
Dialogue: 0,0:32:30.32,0:32:34.40,BottomCenter,,0,0,0,,I'll show you the answer in 321
Dialogue: 0,0:32:37.26,0:32:39.97,BottomCenter,,0,0,0,,one way to implement inverse cascade
Dialogue: 0,0:32:40.17,0:32:41.79,BottomCenter,,0,0,0,,is with a grow function
Dialogue: 0,0:32:42.20,0:32:45.70,BottomCenter,,0,0,0,,that first grows and then prints
Dialogue: 0,0:32:46.26,0:32:49.00,BottomCenter,,0,0,0,,so why does grow grow and then print well
Dialogue: 0,0:32:49.13,0:32:51.97,BottomCenter,,0,0,0,,because we want to do the small stuff first
Dialogue: 0,0:32:52.00,0:32:53.32,BottomCenter,,0,0,0,,and then the big stuff
Dialogue: 0,0:32:53.70,0:32:56.29,BottomCenter,,0,0,0,,and we're calling it first on end
Dialogue: 0,0:32:56.59,0:32:57.93,BottomCenter,,0,0,0,,and then passing in
Dialogue: 0,0:32:58.26,0:32:59.79,BottomCenter,,0,0,0,,and divided by 10
Dialogue: 0,0:32:59.79,0:33:02.50,BottomCenter,,0,0,0,,passing in and divided by 10 there etc
Dialogue: 0,0:33:03.50,0:33:06.50,BottomCenter,,0,0,0,,and so by growing first and then printing
Dialogue: 0,0:33:06.50,0:33:08.90,BottomCenter,,0,0,0,,we get from smallest to largest
Dialogue: 0,0:33:09.50,0:33:10.09,BottomCenter,,0,0,0,,shrink
Dialogue: 0,0:33:10.09,0:33:12.86,BottomCenter,,0,0,0,,prints first and then shrinks some more
Dialogue: 0,0:33:13.29,0:33:15.73,BottomCenter,,0,0,0,,so that when we pass in the large number
Dialogue: 0,0:33:16.29,0:33:18.09,BottomCenter,,0,0,0,,we first print it out
Dialogue: 0,0:33:18.20,0:33:20.86,BottomCenter,,0,0,0,,and then we print out the rest of the smaller ones
Dialogue: 0,0:33:20.86,0:33:22.56,BottomCenter,,0,0,0,,in decreasing order
Dialogue: 0,0:33:27.20,0:33:28.70,BottomCenter,,0,0,0,,tree recursion
Dialogue: 0,0:33:29.47,0:33:31.40,BottomCenter,,0,0,0,,happens when one function
Dialogue: 0,0:33:31.59,0:33:34.59,BottomCenter,,0,0,0,,makes more than one recursive call
Dialogue: 0,0:33:35.76,0:33:36.93,BottomCenter,,0,0,0,,so tree recursion
Dialogue: 0,0:33:36.93,0:33:40.26,BottomCenter,,0,0,0,,creates tree shaped processes that arise whenever
Dialogue: 0,0:33:40.26,0:33:42.00,BottomCenter,,0,0,0,,executing the body of a recursive
Dialogue: 0,0:33:42.00,0:33:43.00,BottomCenter,,0,0,0,,function makes more than
Dialogue: 0,0:33:43.00,0:33:43.90,BottomCenter,,0,0,0,,one call
Dialogue: 0,0:33:44.13,0:33:45.47,BottomCenter,,0,0,0,,to that function
Dialogue: 0,0:33:46.36,0:33:48.79,BottomCenter,,0,0,0,,and there's one example that almost every
Dialogue: 0,0:33:48.79,0:33:50.00,BottomCenter,,0,0,0,,class that includes
Dialogue: 0,0:33:50.00,0:33:51.00,BottomCenter,,0,0,0,,tree recursion
Dialogue: 0,0:33:51.00,0:33:52.47,BottomCenter,,0,0,0,,covers at some point
Dialogue: 0,0:33:52.93,0:33:54.90,BottomCenter,,0,0,0,,the fibonacci numbers
Dialogue: 0,0:33:55.06,0:33:56.90,BottomCenter,,0,0,0,,there's our friend fibonacci
Dialogue: 0,0:33:58.70,0:34:02.29,BottomCenter,,0,0,0,,he indexes his numbers starting at zero
Dialogue: 0,0:34:03.26,0:34:05.70,BottomCenter,,0,0,0,,so the zeroth number is zero
Dialogue: 0,0:34:06.09,0:34:08.36,BottomCenter,,0,0,0,,the first fibonacci number is one
Dialogue: 0,0:34:08.53,0:34:10.73,BottomCenter,,0,0,0,,the second is one as well
Dialogue: 0,0:34:11.00,0:34:12.86,BottomCenter,,0,0,0,,the third is two
Dialogue: 0,0:34:13.32,0:34:14.92,BottomCenter,,0,0,0,,and then one and two make three
Dialogue: 0,0:34:14.92,0:34:16.40,BottomCenter,,0,0,0,,and two and three make five
Dialogue: 0,0:34:16.40,0:34:17.73,BottomCenter,,0,0,0,,and three and five make eight
Dialogue: 0,0:34:17.73,0:34:19.36,BottomCenter,,0,0,0,,and five and eight make 13
Dialogue: 0,0:34:19.36,0:34:22.07,BottomCenter,,0,0,0,,so each is the sum of the previous two
Dialogue: 0,0:34:22.86,0:34:25.59,BottomCenter,,0,0,0,,except for the base cases zero and one
Dialogue: 0,0:34:25.59,0:34:28.09,BottomCenter,,0,0,0,,which are just defined as zero and one
Dialogue: 0,0:34:29.96,0:34:31.86,BottomCenter,,0,0,0,,now growth is flow
Dialogue: 0,0:34:31.86,0:34:34.76,BottomCenter,,0,0,0,,at the early stages of the fibonacci sequence
Dialogue: 0,0:34:35.76,0:34:36.96,BottomCenter,,0,0,0,,but as you can see
Dialogue: 0,0:34:37.30,0:34:38.80,BottomCenter,,0,0,0,,the numbers start to grow
Dialogue: 0,0:34:38.90,0:34:42.50,BottomCenter,,0,0,0,,a little bit faster when you get around to n is eight
Dialogue: 0,0:34:42.86,0:34:46.00,BottomCenter,,0,0,0,,but what happens if we get all the way out to n is 35
Dialogue: 0,0:34:46.69,0:34:48.92,BottomCenter,,0,0,0,,well it turns out that the fibonaji sequence
Dialogue: 0,0:34:49.17,0:34:50.57,BottomCenter,,0,0,0,,grows quite quickly
Dialogue: 0,0:34:51.32,0:34:57.26,BottomCenter,,0,0,0,,all the way up to 9,227,465
Dialogue: 0,0:34:57.92,0:35:01.00,BottomCenter,,0,0,0,,is fibonacci No.35
Dialogue: 0,0:35:03.76,0:35:05.92,BottomCenter,,0,0,0,,so let's look at a tree recursive way
Dialogue: 0,0:35:05.92,0:35:08.07,BottomCenter,,0,0,0,,of computing fibbanatchi numbers
Dialogue: 0,0:35:08.76,0:35:11.53,BottomCenter,,0,0,0,,we'll define fib to take in n
Dialogue: 0,0:35:13.40,0:35:15.36,BottomCenter,,0,0,0,,if n is zero return zero
Dialogue: 0,0:35:15.40,0:35:17.40,BottomCenter,,0,0,0,,if n is one will return one
Dialogue: 0,0:35:17.40,0:35:19.26,BottomCenter,,0,0,0,,those are two base cases
Dialogue: 0,0:35:19.46,0:35:21.30,BottomCenter,,0,0,0,,what's the recursive case
Dialogue: 0,0:35:21.57,0:35:21.76,BottomCenter,,0,0,0,,well
Dialogue: 0,0:35:21.76,0:35:24.92,BottomCenter,,0,0,0,,each fibonacci number is the sum of the previous two
Dialogue: 0,0:35:25.46,0:35:27.96,BottomCenter,,0,0,0,,which we can write as fib and minus two
Dialogue: 0,0:35:27.96,0:35:29.86,BottomCenter,,0,0,0,,plus fib and minus one
Dialogue: 0,0:35:30.90,0:35:33.80,BottomCenter,,0,0,0,,this is a tree recursive function because to
Dialogue: 0,0:35:33.96,0:35:36.96,BottomCenter,,0,0,0,,compute fib I have to call fib and fib again
Dialogue: 0,0:35:37.13,0:35:40.46,BottomCenter,,0,0,0,,so there's more than one call to fib in the body of fib
Dialogue: 0,0:35:42.96,0:35:44.76,BottomCenter,,0,0,0,,the computational process of
Dialogue: 0,0:35:44.76,0:35:46.36,BottomCenter,,0,0,0,,computing a fibonacci number
Dialogue: 0,0:35:46.36,0:35:49.57,BottomCenter,,0,0,0,,in this way evolves into a tree structure
Dialogue: 0,0:35:50.13,0:35:51.90,BottomCenter,,0,0,0,,so computing fib five
Dialogue: 0,0:35:52.30,0:35:55.30,BottomCenter,,0,0,0,,involves computing both fib three and fib four
Dialogue: 0,0:35:56.17,0:35:59.19,BottomCenter,,0,0,0,,fib three involves computing fib one in fib two
Dialogue: 0,0:35:59.73,0:36:02.69,BottomCenter,,0,0,0,,fib two involves computing fib zero in fib one
Dialogue: 0,0:36:04.07,0:36:05.80,BottomCenter,,0,0,0,,and these are all base cases
Dialogue: 0,0:36:06.30,0:36:08.80,BottomCenter,,0,0,0,,where the value of the function is returned
Dialogue: 0,0:36:08.90,0:36:11.53,BottomCenter,,0,0,0,,directly without any recursive calls
Dialogue: 0,0:36:12.30,0:36:14.19,BottomCenter,,0,0,0,,okay what about computing fib four
Dialogue: 0,0:36:14.19,0:36:15.32,BottomCenter,,0,0,0,,we're not done with that yet
Dialogue: 0,0:36:15.32,0:36:17.86,BottomCenter,,0,0,0,,that involves computing fib two and fib three
Dialogue: 0,0:36:18.07,0:36:20.09,BottomCenter,,0,0,0,,each of those has a very small
Dialogue: 0,0:36:20.26,0:36:23.36,BottomCenter,,0,0,0,,structured process to compute that
Dialogue: 0,0:36:24.00,0:36:27.07,BottomCenter,,0,0,0,,and this whole diagram is tree structured
Dialogue: 0,0:36:27.30,0:36:28.96,BottomCenter,,0,0,0,,if you flip it upside down
Dialogue: 0,0:36:29.09,0:36:32.57,BottomCenter,,0,0,0,,then you can see there's a root and then hump branches
Dialogue: 0,0:36:32.73,0:36:36.07,BottomCenter,,0,0,0,,and those branches have their own smaller branches etc
Dialogue: 0,0:36:37.86,0:36:39.50,BottomCenter,,0,0,0,,so computing fib 5
Dialogue: 0,0:36:40.30,0:36:44.26,BottomCenter,,0,0,0,,actually traverses this tree structured computation
Dialogue: 0,0:36:44.30,0:36:45.73,BottomCenter,,0,0,0,,in the following way
Dialogue: 0,0:36:46.73,0:36:51.07,BottomCenter,,0,0,0,,in order to compute fib fively compute fib three first
Dialogue: 0,0:36:51.07,0:36:53.26,BottomCenter,,0,0,0,,that's n minus two
Dialogue: 0,0:36:54.50,0:36:57.80,BottomCenter,,0,0,0,,in order to compute fib three we compute fib one
Dialogue: 0,0:36:58.09,0:36:59.76,BottomCenter,,0,0,0,,that gives us the No.1
Dialogue: 0,0:37:00.07,0:37:02.80,BottomCenter,,0,0,0,,so I put a blue dot here to say that this is the first
Dialogue: 0,0:37:02.80,0:37:05.26,BottomCenter,,0,0,0,,return value that we ever reach
Dialogue: 0,0:37:05.40,0:37:07.26,BottomCenter,,0,0,0,,when we're computing fib five
Dialogue: 0,0:37:08.19,0:37:11.59,BottomCenter,,0,0,0,,we then find a return value for fib zero and fib one
Dialogue: 0,0:37:11.59,0:37:14.57,BottomCenter,,0,0,0,,and finally this call to fib two can return
Dialogue: 0,0:37:14.76,0:37:16.69,BottomCenter,,0,0,0,,now we have the values one
Dialogue: 0,0:37:17.46,0:37:20.07,BottomCenter,,0,0,0,,and one that we can sum together to get two
Dialogue: 0,0:37:20.07,0:37:23.19,BottomCenter,,0,0,0,,and this call to fib three returns
Dialogue: 0,0:37:23.92,0:37:25.73,BottomCenter,,0,0,0,,so within fib five
Dialogue: 0,0:37:25.73,0:37:29.30,BottomCenter,,0,0,0,,we now have computed fib and minus two or fib three
Dialogue: 0,0:37:29.50,0:37:31.69,BottomCenter,,0,0,0,,but we still have to compute fib four
Dialogue: 0,0:37:31.80,0:37:33.26,BottomCenter,,0,0,0,,or fib and minus one
Dialogue: 0,0:37:33.46,0:37:35.86,BottomCenter,,0,0,0,,in order to sum those two values together
Dialogue: 0,0:37:35.86,0:37:38.07,BottomCenter,,0,0,0,,and finally reach the answer that we want
Dialogue: 0,0:37:38.40,0:37:41.09,BottomCenter,,0,0,0,,and that is another tree structured process
Dialogue: 0,0:37:41.09,0:37:42.67,BottomCenter,,0,0,0,,where we return from this and this
Dialogue: 0,0:37:42.67,0:37:43.46,BottomCenter,,0,0,0,,and then we can
Dialogue: 0,0:37:43.46,0:37:44.90,BottomCenter,,0,0,0,,finally use those return
Dialogue: 0,0:37:44.90,0:37:46.92,BottomCenter,,0,0,0,,values in order to compute fib two
Dialogue: 0,0:37:47.69,0:37:49.09,BottomCenter,,0,0,0,,in order to compute fib three
Dialogue: 0,0:37:49.30,0:37:50.73,BottomCenter,,0,0,0,,we have to compute fib one
Dialogue: 0,0:37:50.76,0:37:53.07,BottomCenter,,0,0,0,,and fib zero and fib one to get fib two
Dialogue: 0,0:37:53.13,0:37:55.30,BottomCenter,,0,0,0,,and then using those we get fib three
Dialogue: 0,0:37:55.36,0:37:56.36,BottomCenter,,0,0,0,,and now finally
Dialogue: 0,0:37:56.36,0:37:58.07,BottomCenter,,0,0,0,,with fib two and fib three computed
Dialogue: 0,0:37:58.07,0:37:59.26,BottomCenter,,0,0,0,,we can get fib four
Dialogue: 0,0:37:59.53,0:38:01.80,BottomCenter,,0,0,0,,and ultimately fib five
Dialogue: 0,0:38:04.76,0:38:06.73,BottomCenter,,0,0,0,,okay so I've told you a story about
Dialogue: 0,0:38:06.73,0:38:08.53,BottomCenter,,0,0,0,,how this recursive process
Dialogue: 0,0:38:09.00,0:38:10.80,BottomCenter,,0,0,0,,makes its computations
Dialogue: 0,0:38:11.59,0:38:14.92,BottomCenter,,0,0,0,,let's see if we can illustrate that using a program
Dialogue: 0,0:38:15.96,0:38:18.36,BottomCenter,,0,0,0,,so first thing I'll do is all define fib
Dialogue: 0,0:38:18.69,0:38:20.32,BottomCenter,,0,0,0,,just like I told you
Dialogue: 0,0:38:28.36,0:38:31.32,BottomCenter,,0,0,0,,the recursive case returns fib
Dialogue: 0,0:38:31.80,0:38:32.92,BottomCenter,,0,0,0,,and minus two
Dialogue: 0,0:38:34.30,0:38:36.73,BottomCenter,,0,0,0,,plus fib and minus one
Dialogue: 0,0:38:39.86,0:38:42.30,BottomCenter,,0,0,0,,and if we now compute fibonacci numbers
Dialogue: 0,0:38:42.36,0:38:44.67,BottomCenter,,0,0,0,,the base cases are what we expect
Dialogue: 0,0:38:44.76,0:38:47.90,BottomCenter,,0,0,0,,the next one is one the next one is two
Dialogue: 0,0:38:49.07,0:38:50.76,BottomCenter,,0,0,0,,the fifth one is five
Dialogue: 0,0:38:51.00,0:38:53.40,BottomCenter,,0,0,0,,what about No.8 that's 21
Dialogue: 0,0:38:53.80,0:38:55.73,BottomCenter,,0,0,0,,what about 10 that's 55
Dialogue: 0,0:38:55.73,0:38:58.36,BottomCenter,,0,0,0,,what about 20 that's 6000 already
Dialogue: 0,0:38:58.53,0:39:04.76,BottomCenter,,0,0,0,,the thirtieth one is 832,000 and the thirty fifth one
Dialogue: 0,0:39:05.07,0:39:07.17,BottomCenter,,0,0,0,,is still computing
Dialogue: 0,0:39:08.00,0:39:09.30,BottomCenter,,0,0,0,,what's really working hard
Dialogue: 0,0:39:09.30,0:39:11.07,BottomCenter,,0,0,0,,I thought computers were fast
Dialogue: 0,0:39:11.26,0:39:12.67,BottomCenter,,0,0,0,,what's going on
Dialogue: 0,0:39:13.30,0:39:14.26,BottomCenter,,0,0,0,,well in a moment
Dialogue: 0,0:39:14.26,0:39:16.69,BottomCenter,,0,0,0,,we'll try to illustrate the computation
Dialogue: 0,0:39:16.69,0:39:20.00,BottomCenter,,0,0,0,,to try to understand why it takes so long to compute
Dialogue: 0,0:39:20.19,0:39:25.09,BottomCenter,,0,0,0,,9,227,465
Dialogue: 0,0:39:26.36,0:39:28.09,BottomCenter,,0,0,0,,now let me just stop and say there are
Dialogue: 0,0:39:28.09,0:39:31.00,BottomCenter,,0,0,0,,faster ways of computing fibonacci numbers
Dialogue: 0,0:39:31.00,0:39:33.09,BottomCenter,,0,0,0,,so it's not that we have to wait that long
Dialogue: 0,0:39:33.09,0:39:35.90,BottomCenter,,0,0,0,,but this particular implementation
Dialogue: 0,0:39:36.07,0:39:37.36,BottomCenter,,0,0,0,,with this particular
Dialogue: 0,0:39:37.53,0:39:39.80,BottomCenter,,0,0,0,,tree structured process for computation
Dialogue: 0,0:39:39.92,0:39:41.36,BottomCenter,,0,0,0,,does take a little while
Dialogue: 0,0:39:42.73,0:39:44.36,BottomCenter,,0,0,0,,okay what is it doing
Dialogue: 0,0:39:45.07,0:39:47.73,BottomCenter,,0,0,0,,well let me show you a function that I've given you as
Dialogue: 0,0:39:47.73,0:39:49.07,BottomCenter,,0,0,0,,part of your project
Dialogue: 0,0:39:49.30,0:39:49.57,BottomCenter,,0,0,0,,and
Dialogue: 0,0:39:49.57,0:39:52.30,BottomCenter,,0,0,0,,perhaps you want to use it on future projects as well
Dialogue: 0,0:39:54.13,0:39:56.40,BottomCenter,,0,0,0,,it's called trace
Dialogue: 0,0:39:58.50,0:40:02.00,BottomCenter,,0,0,0,,it's imported from the ucb module which I provided
Dialogue: 0,0:40:02.19,0:40:03.36,BottomCenter,,0,0,0,,with your project
Dialogue: 0,0:40:04.53,0:40:06.46,BottomCenter,,0,0,0,,trace is called a decorator
Dialogue: 0,0:40:07.07,0:40:09.00,BottomCenter,,0,0,0,,you place it with an ad sign
Dialogue: 0,0:40:09.17,0:40:12.00,BottomCenter,,0,0,0,,just before the function that you want to define
Dialogue: 0,0:40:12.40,0:40:14.00,BottomCenter,,0,0,0,,and it changes the behavior
Dialogue: 0,0:40:14.00,0:40:15.86,BottomCenter,,0,0,0,,of the function to print out
Dialogue: 0,0:40:16.19,0:40:19.32,BottomCenter,,0,0,0,,when it gets called and when it returns
Dialogue: 0,0:40:19.46,0:40:20.59,BottomCenter,,0,0,0,,so that we can see
Dialogue: 0,0:40:20.59,0:40:22.96,BottomCenter,,0,0,0,,exactly what's happening in what order
Dialogue: 0,0:40:23.19,0:40:25.86,BottomCenter,,0,0,0,,as we execute the body of the function
Dialogue: 0,0:40:28.86,0:40:31.00,BottomCenter,,0,0,0,,so now if I call fib zero
Dialogue: 0,0:40:32.13,0:40:33.40,BottomCenter,,0,0,0,,what trace does
Dialogue: 0,0:40:33.40,0:40:36.30,BottomCenter,,0,0,0,,is it prince out when fib zero gets called
Dialogue: 0,0:40:36.46,0:40:39.73,BottomCenter,,0,0,0,,and then when it returns it shows the return value
Dialogue: 0,0:40:41.26,0:40:42.76,BottomCenter,,0,0,0,,so fib zero and fib one
Dialogue: 0,0:40:42.76,0:40:45.09,BottomCenter,,0,0,0,,since they reach the base case immediately
Dialogue: 0,0:40:45.30,0:40:47.69,BottomCenter,,0,0,0,,have very simple traces
Dialogue: 0,0:40:48.32,0:40:49.53,BottomCenter,,0,0,0,,but fib two
Dialogue: 0,0:40:49.90,0:40:53.50,BottomCenter,,0,0,0,,involves calling fib zero and calling fib one
Dialogue: 0,0:40:53.76,0:40:55.76,BottomCenter,,0,0,0,,which returns zero and one respectively
Dialogue: 0,0:40:55.76,0:40:57.09,BottomCenter,,0,0,0,,those two are added together
Dialogue: 0,0:40:57.17,0:40:59.40,BottomCenter,,0,0,0,,and then fib two returns one
Dialogue: 0,0:41:00.32,0:41:02.53,BottomCenter,,0,0,0,,and this one at the end is the one that was always
Dialogue: 0,0:41:02.53,0:41:02.69,BottomCenter,,0,0,0,,there
Dialogue: 0,0:41:02.69,0:41:04.76,BottomCenter,,0,0,0,,that's the return value of fib two
Dialogue: 0,0:41:06.36,0:41:09.17,BottomCenter,,0,0,0,,if we call fib three we see even more structure
Dialogue: 0,0:41:09.67,0:41:12.53,BottomCenter,,0,0,0,,or fib three involves calling fib one in fib two
Dialogue: 0,0:41:12.73,0:41:14.90,BottomCenter,,0,0,0,,and calling fib two involves some
Dialogue: 0,0:41:14.90,0:41:17.07,BottomCenter,,0,0,0,,internal computation as well
Dialogue: 0,0:41:18.69,0:41:21.26,BottomCenter,,0,0,0,,okay so now we can call fib five
Dialogue: 0,0:41:21.46,0:41:22.46,BottomCenter,,0,0,0,,and see
Dialogue: 0,0:41:22.46,0:41:26.57,BottomCenter,,0,0,0,,a tree structured process unfold before our eyes
Dialogue: 0,0:41:26.92,0:41:28.17,BottomCenter,,0,0,0,,so calling fip 5
Dialogue: 0,0:41:28.26,0:41:30.86,BottomCenter,,0,0,0,,involves calling both fip iii in fib four
Dialogue: 0,0:41:31.09,0:41:33.26,BottomCenter,,0,0,0,,each of which has some internal work
Dialogue: 0,0:41:33.32,0:41:35.00,BottomCenter,,0,0,0,,so fip iii returns two
Dialogue: 0,0:41:35.19,0:41:37.40,BottomCenter,,0,0,0,,fib four returns three down here
Dialogue: 0,0:41:37.46,0:41:40.36,BottomCenter,,0,0,0,,and by the way calling fib four is quite a bit of work
Dialogue: 0,0:41:41.32,0:41:43.50,BottomCenter,,0,0,0,,so now we can see why calling fib 10
Dialogue: 0,0:41:43.59,0:41:47.19,BottomCenter,,0,0,0,,is just a much bigger process than calling fib five
Dialogue: 0,0:41:47.46,0:41:48.67,BottomCenter,,0,0,0,,because within it
Dialogue: 0,0:41:48.67,0:41:51.67,BottomCenter,,0,0,0,,or calling fib nine which went all the way up to here
Dialogue: 0,0:41:51.69,0:41:55.69,BottomCenter,,0,0,0,,and fibate which goes all the way up to the top
Dialogue: 0,0:41:57.32,0:41:58.19,BottomCenter,,0,0,0,,and within fibate
Dialogue: 0,0:41:58.19,0:42:00.19,BottomCenter,,0,0,0,,there's fib six and fib four and fib two
Dialogue: 0,0:42:00.19,0:42:02.80,BottomCenter,,0,0,0,,and all of those have recursive structures within them
Dialogue: 0,0:42:02.80,0:42:03.59,BottomCenter,,0,0,0,,as well
Dialogue: 0,0:42:04.30,0:42:06.00,BottomCenter,,0,0,0,,and if we call fib 15
Dialogue: 0,0:42:06.09,0:42:08.53,BottomCenter,,0,0,0,,all of the sudden we have really long lines
Dialogue: 0,0:42:08.53,0:42:11.36,BottomCenter,,0,0,0,,that are extending off the end of the page
Dialogue: 0,0:42:11.53,0:42:14.40,BottomCenter,,0,0,0,,and we can see that this trace just goes on forever
Dialogue: 0,0:42:15.50,0:42:17.57,BottomCenter,,0,0,0,,and so when we computed fib 35
Dialogue: 0,0:42:17.92,0:42:20.36,BottomCenter,,0,0,0,,while there was just a tremendous amount of work to do
Dialogue: 0,0:42:20.40,0:42:22.00,BottomCenter,,0,0,0,,in order to compute all of these
Dialogue: 0,0:42:22.17,0:42:23.46,BottomCenter,,0,0,0,,intermediate values
Dialogue: 0,0:42:23.46,0:42:26.00,BottomCenter,,0,0,0,,in order to sum up what we wanted to sum up
Dialogue: 0,0:42:28.40,0:42:29.19,BottomCenter,,0,0,0,,now
Dialogue: 0,0:42:29.59,0:42:30.69,BottomCenter,,0,0,0,,let's be clear
Dialogue: 0,0:42:30.90,0:42:31.80,BottomCenter,,0,0,0,,this is not an
Dialogue: 0,0:42:31.80,0:42:34.40,BottomCenter,,0,0,0,,efficient way to compute fibonacci numbers
Dialogue: 0,0:42:34.40,0:42:35.26,BottomCenter,,0,0,0,,in particular
Dialogue: 0,0:42:35.26,0:42:37.67,BottomCenter,,0,0,0,,because there's a great amount of repetition
Dialogue: 0,0:42:37.67,0:42:40.50,BottomCenter,,0,0,0,,within this tree recursive computation
Dialogue: 0,0:42:41.86,0:42:45.53,BottomCenter,,0,0,0,,fib is called on the same arguments multiple times
Dialogue: 0,0:42:45.57,0:42:48.32,BottomCenter,,0,0,0,,and the same values are computed each time
Dialogue: 0,0:42:49.67,0:42:50.67,BottomCenter,,0,0,0,,so in particular
Dialogue: 0,0:42:50.67,0:42:52.96,BottomCenter,,0,0,0,,for fib five we can see that the fib three
Dialogue: 0,0:42:52.96,0:42:55.09,BottomCenter,,0,0,0,,computation is repeated twice
Dialogue: 0,0:42:55.36,0:42:57.96,BottomCenter,,0,0,0,,and wouldn't it be nice if we could just do that once
Dialogue: 0,0:42:58.26,0:43:00.57,BottomCenter,,0,0,0,,remember the value that came out
Dialogue: 0,0:43:00.67,0:43:02.50,BottomCenter,,0,0,0,,and not try to recompute it
Dialogue: 0,0:43:02.96,0:43:03.57,BottomCenter,,0,0,0,,and in fact
Dialogue: 0,0:43:03.57,0:43:06.17,BottomCenter,,0,0,0,,we can speed up this computation dramatically
Dialogue: 0,0:43:06.57,0:43:08.26,BottomCenter,,0,0,0,,by doing exactly that
Dialogue: 0,0:43:08.32,0:43:10.13,BottomCenter,,0,0,0,,and we'll do it in a few weeks
Dialogue: 0,0:43:10.36,0:43:11.59,BottomCenter,,0,0,0,,so don't think that
Dialogue: 0,0:43:11.59,0:43:14.19,BottomCenter,,0,0,0,,tree recursive processes have to be slow
Dialogue: 0,0:43:14.32,0:43:15.59,BottomCenter,,0,0,0,,they certainly don't
Dialogue: 0,0:43:15.69,0:43:18.80,BottomCenter,,0,0,0,,but just for the moment this one is pretty slow
Dialogue: 0,0:43:22.69,0:43:23.59,BottomCenter,,0,0,0,,welcome back
Dialogue: 0,0:43:24.32,0:43:25.69,BottomCenter,,0,0,0,,at this point we've seen
Dialogue: 0,0:43:25.80,0:43:28.17,BottomCenter,,0,0,0,,a number of examples of recursion
Dialogue: 0,0:43:29.32,0:43:31.07,BottomCenter,,0,0,0,,and I think it's fair to say
Dialogue: 0,0:43:31.07,0:43:33.67,BottomCenter,,0,0,0,,that it's not immediately obvious
Dialogue: 0,0:43:33.96,0:43:36.32,BottomCenter,,0,0,0,,why we should care about recursion because
Dialogue: 0,0:43:36.53,0:43:38.59,BottomCenter,,0,0,0,,the iterative solutions looked at least as
Dialogue: 0,0:43:38.59,0:43:40.96,BottomCenter,,0,0,0,,simple for most of the examples as
Dialogue: 0,0:43:41.07,0:43:42.90,BottomCenter,,0,0,0,,the recursive solutions
Dialogue: 0,0:43:43.59,0:43:45.09,BottomCenter,,0,0,0,,but in addition to just being
Dialogue: 0,0:43:45.09,0:43:47.57,BottomCenter,,0,0,0,,this is a powerful way to think about solving problems
Dialogue: 0,0:43:47.57,0:43:48.76,BottomCenter,,0,0,0,,and computationally
Dialogue: 0,0:43:49.13,0:43:51.32,BottomCenter,,0,0,0,,it is going to as you're going to see in a minute
Dialogue: 0,0:43:51.32,0:43:52.13,BottomCenter,,0,0,0,,turn out that
Dialogue: 0,0:43:52.13,0:43:53.86,BottomCenter,,0,0,0,,there are some really interesting examples where
Dialogue: 0,0:43:53.86,0:43:56.13,BottomCenter,,0,0,0,,recursion just solves problems
Dialogue: 0,0:43:56.13,0:43:57.96,BottomCenter,,0,0,0,,so beautifully and so elegantly
Dialogue: 0,0:43:57.96,0:44:01.00,BottomCenter,,0,0,0,,in a way that would be very difficult iteratively
Dialogue: 0,0:44:01.36,0:44:03.32,BottomCenter,,0,0,0,,and to show you just one example of that
Dialogue: 0,0:44:03.32,0:44:05.36,BottomCenter,,0,0,0,,we are going to talk about the game
Dialogue: 0,0:44:05.69,0:44:06.96,BottomCenter,,0,0,0,,towers of henoi
Dialogue: 0,0:44:07.26,0:44:08.46,BottomCenter,,0,0,0,,and if you're not familiar with the game
Dialogue: 0,0:44:08.46,0:44:09.46,BottomCenter,,0,0,0,,it's a very simple game
Dialogue: 0,0:44:09.46,0:44:11.90,BottomCenter,,0,0,0,,there are three sticks
Dialogue: 0,0:44:11.92,0:44:12.46,BottomCenter,,0,0,0,,and there are
Dialogue: 0,0:44:12.46,0:44:16.00,BottomCenter,,0,0,0,,discs of varying size that form a pyramid or a tower
Dialogue: 0,0:44:16.19,0:44:19.80,BottomCenter,,0,0,0,,and your job is to move the discs from one peg
Dialogue: 0,0:44:19.90,0:44:21.09,BottomCenter,,0,0,0,,to another peg
Dialogue: 0,0:44:21.17,0:44:22.67,BottomCenter,,0,0,0,,and there's a couple of simple rules
Dialogue: 0,0:44:22.67,0:44:24.96,BottomCenter,,0,0,0,,you can only lift one disc at a time
Dialogue: 0,0:44:25.57,0:44:26.73,BottomCenter,,0,0,0,,and you can never put
Dialogue: 0,0:44:26.92,0:44:29.59,BottomCenter,,0,0,0,,a larger disc on top of a smaller disc
Dialogue: 0,0:44:29.92,0:44:31.26,BottomCenter,,0,0,0,,so that's simple rule
Dialogue: 0,0:44:31.50,0:44:33.32,BottomCenter,,0,0,0,,and if I'm going to show you a couple of examples
Dialogue: 0,0:44:33.32,0:44:35.19,BottomCenter,,0,0,0,,you can go read about the towers of annoy
Dialogue: 0,0:44:35.57,0:44:37.17,BottomCenter,,0,0,0,,but before we get into how to solve this
Dialogue: 0,0:44:37.17,0:44:38.30,BottomCenter,,0,0,0,,go ahead and watch this video
Dialogue: 0,0:44:38.30,0:44:39.32,BottomCenter,,0,0,0,,it's a video of me
Dialogue: 0,0:44:39.50,0:44:41.67,BottomCenter,,0,0,0,,playing a version of towers of annoy with four disks
Dialogue: 0,0:44:41.67,0:44:43.90,BottomCenter,,0,0,0,,and you'll get a sense of the rules and what I'm doing
Dialogue: 0,0:44:44.09,0:44:45.07,BottomCenter,,0,0,0,,and then we'll come back
Dialogue: 0,0:44:45.07,0:44:47.96,BottomCenter,,0,0,0,,and talk about how we solve this recursefully
Dialogue: 0,0:45:12.80,0:45:14.76,BottomCenter,,0,0,0,,one two peg two
Dialogue: 0,0:45:14.92,0:45:16.76,BottomCenter,,0,0,0,,well there's no hard work here
Dialogue: 0,0:45:16.76,0:45:19.90,BottomCenter,,0,0,0,,you just simply pick up the disc and you drop it down
Dialogue: 0,0:45:19.90,0:45:21.07,BottomCenter,,0,0,0,,and the reason you can do that is
Dialogue: 0,0:45:21.07,0:45:22.17,BottomCenter,,0,0,0,,you can pick up one disc
Dialogue: 0,0:45:22.26,0:45:23.50,BottomCenter,,0,0,0,,and as long as you're not putting that
Dialogue: 0,0:45:23.50,0:45:24.86,BottomCenter,,0,0,0,,on top of something that's bigger
Dialogue: 0,0:45:24.86,0:45:27.86,BottomCenter,,0,0,0,,you're done so the case with one disc is trivial
Dialogue: 0,0:45:27.86,0:45:28.17,BottomCenter,,0,0,0,,okay
Dialogue: 0,0:45:28.17,0:45:30.67,BottomCenter,,0,0,0,,I think I've probably stated the obvious at this point
Dialogue: 0,0:45:30.86,0:45:33.17,BottomCenter,,0,0,0,,let's do the case with two discs
Dialogue: 0,0:45:33.30,0:45:36.50,BottomCenter,,0,0,0,,your job is to move these two from peg one to peg two
Dialogue: 0,0:45:36.86,0:45:37.90,BottomCenter,,0,0,0,,well okay pretty obvious
Dialogue: 0,0:45:37.90,0:45:39.30,BottomCenter,,0,0,0,,to do this the small one
Dialogue: 0,0:45:39.40,0:45:41.86,BottomCenter,,0,0,0,,obviously can't go here because then the big one
Dialogue: 0,0:45:42.30,0:45:43.50,BottomCenter,,0,0,0,,wouldn't be able to go there
Dialogue: 0,0:45:43.53,0:45:45.96,BottomCenter,,0,0,0,,so we've got to move from one to three
Dialogue: 0,0:45:46.69,0:45:48.53,BottomCenter,,0,0,0,,and at this point that we're sort of done
Dialogue: 0,0:45:48.53,0:45:50.57,BottomCenter,,0,0,0,,we've cleared the air for one to move
Dialogue: 0,0:45:50.69,0:45:52.96,BottomCenter,,0,0,0,,two is free so we simply move one
Dialogue: 0,0:45:53.59,0:45:55.67,BottomCenter,,0,0,0,,disk from peg one to peg two
Dialogue: 0,0:45:55.73,0:45:57.40,BottomCenter,,0,0,0,,and then we move three back to two
Dialogue: 0,0:45:57.40,0:45:59.09,BottomCenter,,0,0,0,,and then the pyramid or the tower
Dialogue: 0,0:45:59.09,0:46:01.09,BottomCenter,,0,0,0,,has moved from one to two
Dialogue: 0,0:46:01.09,0:46:02.67,BottomCenter,,0,0,0,,so two is pretty easy to
Dialogue: 0,0:46:03.32,0:46:03.67,BottomCenter,,0,0,0,,good
Dialogue: 0,0:46:03.67,0:46:04.67,BottomCenter,,0,0,0,,let's do three
Dialogue: 0,0:46:05.40,0:46:07.50,BottomCenter,,0,0,0,,okay now at this point where do we know
Dialogue: 0,0:46:07.96,0:46:11.30,BottomCenter,,0,0,0,,we know how to move two discs from one peg to another
Dialogue: 0,0:46:11.30,0:46:13.36,BottomCenter,,0,0,0,,I moved it from one to two
Dialogue: 0,0:46:13.36,0:46:13.90,BottomCenter,,0,0,0,,right
Dialogue: 0,0:46:13.90,0:46:16.00,BottomCenter,,0,0,0,,and we know that we move the small one over to here
Dialogue: 0,0:46:16.00,0:46:18.73,BottomCenter,,0,0,0,,we move No.2 over here and we do this over here
Dialogue: 0,0:46:18.73,0:46:20.50,BottomCenter,,0,0,0,,and by the way it doesn't matter which peg
Dialogue: 0,0:46:20.53,0:46:23.36,BottomCenter,,0,0,0,,so if I wanted to move one two to either two or three
Dialogue: 0,0:46:23.46,0:46:24.19,BottomCenter,,0,0,0,,it's the same thing
Dialogue: 0,0:46:24.19,0:46:26.46,BottomCenter,,0,0,0,,if I wanted to move these two to the third peg
Dialogue: 0,0:46:26.53,0:46:28.17,BottomCenter,,0,0,0,,I would move one to here
Dialogue: 0,0:46:28.32,0:46:30.90,BottomCenter,,0,0,0,,two to here and then one pops over
Dialogue: 0,0:46:30.90,0:46:32.40,BottomCenter,,0,0,0,,right so it doesn't really matter what
Dialogue: 0,0:46:32.90,0:46:34.07,BottomCenter,,0,0,0,,the final peg is
Dialogue: 0,0:46:34.69,0:46:36.86,BottomCenter,,0,0,0,,well okay so if I want to move all three
Dialogue: 0,0:46:37.00,0:46:39.40,BottomCenter,,0,0,0,,well I already know how to move two
Dialogue: 0,0:46:39.57,0:46:41.13,BottomCenter,,0,0,0,,so without going through the steps
Dialogue: 0,0:46:41.13,0:46:42.46,BottomCenter,,0,0,0,,let's just go ahead and move
Dialogue: 0,0:46:42.53,0:46:44.86,BottomCenter,,0,0,0,,both of those over to here
Dialogue: 0,0:46:44.90,0:46:46.19,BottomCenter,,0,0,0,,okay using the same
Dialogue: 0,0:46:46.32,0:46:49.32,BottomCenter,,0,0,0,,technique that we just used on the previous slides
Dialogue: 0,0:46:49.36,0:46:51.73,BottomCenter,,0,0,0,,and at this point I'm free to move three over to two
Dialogue: 0,0:46:51.90,0:46:52.26,BottomCenter,,0,0,0,,and again
Dialogue: 0,0:46:52.26,0:46:55.17,BottomCenter,,0,0,0,,I've got to move two disks from one peg to another
Dialogue: 0,0:46:55.17,0:46:56.46,BottomCenter,,0,0,0,,but I know how to do that
Dialogue: 0,0:46:56.59,0:46:57.30,BottomCenter,,0,0,0,,we've already done that
Dialogue: 0,0:46:57.30,0:46:59.50,BottomCenter,,0,0,0,,we've already shown that you move the small one
Dialogue: 0,0:46:59.76,0:47:00.86,BottomCenter,,0,0,0,,to the spare peg
Dialogue: 0,0:47:00.86,0:47:02.50,BottomCenter,,0,0,0,,we move the next one to where it wants to go
Dialogue: 0,0:47:02.50,0:47:03.57,BottomCenter,,0,0,0,,and then you move it back
Dialogue: 0,0:47:03.57,0:47:05.59,BottomCenter,,0,0,0,,and so I can just do that on mass
Dialogue: 0,0:47:05.67,0:47:07.19,BottomCenter,,0,0,0,,okay and now you can start to
Dialogue: 0,0:47:07.19,0:47:08.86,BottomCenter,,0,0,0,,start to see where I'm going with this
Dialogue: 0,0:47:09.67,0:47:12.36,BottomCenter,,0,0,0,,you can think about solving a towers of Hanoi
Dialogue: 0,0:47:12.73,0:47:17.07,BottomCenter,,0,0,0,,with three discs as sort of solving two versions
Dialogue: 0,0:47:17.46,0:47:20.67,BottomCenter,,0,0,0,,with two discs and then just sliding that 3rd disc over
Dialogue: 0,0:47:20.67,0:47:22.96,BottomCenter,,0,0,0,,and of course we're going to be able to scale that up
Dialogue: 0,0:47:24.19,0:47:24.73,BottomCenter,,0,0,0,,okay
Dialogue: 0,0:47:24.73,0:47:27.30,BottomCenter,,0,0,0,,so let's do this now with a little bit of pseudo code
Dialogue: 0,0:47:27.30,0:47:28.92,BottomCenter,,0,0,0,,and then we'll actually write out the code
Dialogue: 0,0:47:28.92,0:47:31.73,BottomCenter,,0,0,0,,so let me just formalize what I just set
Dialogue: 0,0:47:31.76,0:47:33.67,BottomCenter,,0,0,0,,so I'm going to write a function
Dialogue: 0,0:47:34.26,0:47:36.76,BottomCenter,,0,0,0,,henoi and it takes three parameters
Dialogue: 0,0:47:37.59,0:47:38.90,BottomCenter,,0,0,0,,how many discs
Dialogue: 0,0:47:39.73,0:47:43.36,BottomCenter,,0,0,0,,what is the start peg and what is the final peg
Dialogue: 0,0:47:43.50,0:47:45.00,BottomCenter,,0,0,0,,so this says please
Dialogue: 0,0:47:45.26,0:47:51.00,BottomCenter,,0,0,0,,take three discs from peg one and move them to peg two
Dialogue: 0,0:47:51.59,0:47:52.90,BottomCenter,,0,0,0,,and or 3 1 2
Dialogue: 0,0:47:53.69,0:47:56.26,BottomCenter,,0,0,0,,now to do that what do I need to do
Dialogue: 0,0:47:56.30,0:47:59.17,BottomCenter,,0,0,0,,well I know that I need to get one and two off of
Dialogue: 0,0:47:59.17,0:48:00.36,BottomCenter,,0,0,0,,this number three's
Dialogue: 0,0:48:00.59,0:48:04.46,BottomCenter,,0,0,0,,back here so I need to move one and two over to
Dialogue: 0,0:48:05.19,0:48:06.90,BottomCenter,,0,0,0,,peg three okay
Dialogue: 0,0:48:07.07,0:48:08.13,BottomCenter,,0,0,0,,well what does that mean
Dialogue: 0,0:48:08.13,0:48:11.57,BottomCenter,,0,0,0,,well it means I want to solve henoi with two discs
Dialogue: 0,0:48:11.69,0:48:13.92,BottomCenter,,0,0,0,,starting at peg one and moving to
Dialogue: 0,0:48:13.92,0:48:15.32,BottomCenter,,0,0,0,,not peg two of course
Dialogue: 0,0:48:15.40,0:48:16.92,BottomCenter,,0,0,0,,but to peg three
Dialogue: 0,0:48:17.19,0:48:18.92,BottomCenter,,0,0,0,,so to solve this problem
Dialogue: 0,0:48:18.92,0:48:21.69,BottomCenter,,0,0,0,,what I'd like to do is to solve this problem first
Dialogue: 0,0:48:21.80,0:48:24.86,BottomCenter,,0,0,0,,take two discs from peg one to peg three
Dialogue: 0,0:48:25.00,0:48:26.90,BottomCenter,,0,0,0,,how do I do that it's precursive
Dialogue: 0,0:48:26.90,0:48:28.73,BottomCenter,,0,0,0,,don't worry about it right now we'll come back to it
Dialogue: 0,0:48:29.07,0:48:30.86,BottomCenter,,0,0,0,,and at this point what am I free to do
Dialogue: 0,0:48:30.86,0:48:33.50,BottomCenter,,0,0,0,,I'm free to move that disk from one to two
Dialogue: 0,0:48:33.59,0:48:36.09,BottomCenter,,0,0,0,,so let's go ahead and define another function called
Dialogue: 0,0:48:36.09,0:48:37.90,BottomCenter,,0,0,0,,move which is not
Dialogue: 0,0:48:37.90,0:48:40.96,BottomCenter,,0,0,0,,which is simply to actually perform an operation
Dialogue: 0,0:48:41.00,0:48:43.46,BottomCenter,,0,0,0,,so this henoi as you're going to see in a little bit
Dialogue: 0,0:48:43.59,0:48:45.57,BottomCenter,,0,0,0,,has to do is going to be the recursion
Dialogue: 0,0:48:45.73,0:48:46.59,BottomCenter,,0,0,0,,but the move is
Dialogue: 0,0:48:46.59,0:48:48.86,BottomCenter,,0,0,0,,you're actually moving a disc at this point
Dialogue: 0,0:48:49.00,0:48:50.36,BottomCenter,,0,0,0,,so now I can move
Dialogue: 0,0:48:52.40,0:48:54.92,BottomCenter,,0,0,0,,a disc three from one to two
Dialogue: 0,0:48:54.92,0:48:57.73,BottomCenter,,0,0,0,,obviously that's from one to two that comes up here
Dialogue: 0,0:48:58.17,0:48:59.07,BottomCenter,,0,0,0,,now what do I have to do
Dialogue: 0,0:48:59.07,0:49:00.90,BottomCenter,,0,0,0,,well I've got to take these two discs
Dialogue: 0,0:49:00.90,0:49:02.76,BottomCenter,,0,0,0,,and move them from three
Dialogue: 0,0:49:03.00,0:49:04.80,BottomCenter,,0,0,0,,back to two how do I do that
Dialogue: 0,0:49:04.80,0:49:06.90,BottomCenter,,0,0,0,,well just let's solve another hernoi problem
Dialogue: 0,0:49:07.46,0:49:08.86,BottomCenter,,0,0,0,,what the start and the stop
Dialogue: 0,0:49:08.86,0:49:10.69,BottomCenter,,0,0,0,,peg r doesn't really matter to me
Dialogue: 0,0:49:10.69,0:49:12.30,BottomCenter,,0,0,0,,so now I'm going to solve
Dialogue: 0,0:49:12.46,0:49:17.76,BottomCenter,,0,0,0,,please move two disks from peg three to peg two
Dialogue: 0,0:49:17.90,0:49:18.90,BottomCenter,,0,0,0,,how do I do that
Dialogue: 0,0:49:18.90,0:49:19.80,BottomCenter,,0,0,0,,it's recursive
Dialogue: 0,0:49:19.86,0:49:20.57,BottomCenter,,0,0,0,,don't worry about it
Dialogue: 0,0:49:20.57,0:49:22.26,BottomCenter,,0,0,0,,we'll get paid that back to then a little bit
Dialogue: 0,0:49:22.50,0:49:23.30,BottomCenter,,0,0,0,,okay
Dialogue: 0,0:49:23.92,0:49:24.53,BottomCenter,,0,0,0,,good
Dialogue: 0,0:49:24.53,0:49:27.90,BottomCenter,,0,0,0,,so let's now start to write out this code in python
Dialogue: 0,0:49:28.00,0:49:30.40,BottomCenter,,0,0,0,,so I'm sorry I changed the name of the function
Dialogue: 0,0:49:30.50,0:49:32.36,BottomCenter,,0,0,0,,it's now going to be called solve henoi
Dialogue: 0,0:49:32.59,0:49:34.50,BottomCenter,,0,0,0,,it takes three parameters
Dialogue: 0,0:49:34.59,0:49:37.17,BottomCenter,,0,0,0,,n which is the total number of disks
Dialogue: 0,0:49:38.26,0:49:39.76,BottomCenter,,0,0,0,,start peg and peg
Dialogue: 0,0:49:39.76,0:49:44.09,BottomCenter,,0,0,0,,so for example on the last example it was 3 1 2
Dialogue: 0,0:49:44.69,0:49:48.80,BottomCenter,,0,0,0,,three discs from peg one to peg two
Dialogue: 0,0:49:48.86,0:49:51.40,BottomCenter,,0,0,0,,okay we're going to do this recursively obviously
Dialogue: 0,0:49:51.86,0:49:53.40,BottomCenter,,0,0,0,,and so we have to think about the base case
Dialogue: 0,0:49:53.40,0:49:55.00,BottomCenter,,0,0,0,,and then we have to think about the recursive case
Dialogue: 0,0:49:55.00,0:49:57.07,BottomCenter,,0,0,0,,although we've sort of seen the recursive case albin
Dialogue: 0,0:49:57.07,0:49:58.40,BottomCenter,,0,0,0,,we also seen the base case
Dialogue: 0,0:49:58.59,0:50:00.90,BottomCenter,,0,0,0,,the base case is that if you only have one disc
Dialogue: 0,0:50:01.46,0:50:03.19,BottomCenter,,0,0,0,,if you have one disc it's a trivial problem
Dialogue: 0,0:50:03.19,0:50:05.40,BottomCenter,,0,0,0,,just move it you have to move it from
Dialogue: 0,0:50:05.73,0:50:07.67,BottomCenter,,0,0,0,,so if n is equal to one
Dialogue: 0,0:50:07.73,0:50:10.86,BottomCenter,,0,0,0,,just go ahead and move that disc from here to here
Dialogue: 0,0:50:10.86,0:50:14.09,BottomCenter,,0,0,0,,okay so if n is one then move a disk
Dialogue: 0,0:50:16.50,0:50:17.30,BottomCenter,,0,0,0,,numbered
Dialogue: 0,0:50:18.00,0:50:19.53,BottomCenter,,0,0,0,,one and sorry
Dialogue: 0,0:50:19.92,0:50:22.53,BottomCenter,,0,0,0,,from the start peg to the end peg
Dialogue: 0,0:50:22.57,0:50:24.90,BottomCenter,,0,0,0,,and what does it move to mean to move a disc
Dialogue: 0,0:50:24.96,0:50:27.09,BottomCenter,,0,0,0,,well I'm not going to go out and do all the graphics
Dialogue: 0,0:50:27.09,0:50:29.90,BottomCenter,,0,0,0,,so for move I'm simply going to print out
Dialogue: 0,0:50:30.73,0:50:31.96,BottomCenter,,0,0,0,,what is being done
Dialogue: 0,0:50:31.96,0:50:32.67,BottomCenter,,0,0,0,,what is the move
Dialogue: 0,0:50:32.67,0:50:34.69,BottomCenter,,0,0,0,,and then you can follow those instructions
Dialogue: 0,0:50:34.69,0:50:36.26,BottomCenter,,0,0,0,,so I'm going to print move disk
Dialogue: 0,0:50:36.26,0:50:39.90,BottomCenter,,0,0,0,,I'm going to print out the disk number from this peg
Dialogue: 0,0:50:40.19,0:50:43.30,BottomCenter,,0,0,0,,to this peg okay so I take these three numbers here
Dialogue: 0,0:50:43.32,0:50:45.53,BottomCenter,,0,0,0,,and I just print out an instruction
Dialogue: 0,0:50:45.69,0:50:47.13,BottomCenter,,0,0,0,,that you can then see
Dialogue: 0,0:50:47.40,0:50:48.19,BottomCenter,,0,0,0,,this gets done
Dialogue: 0,0:50:48.19,0:50:49.00,BottomCenter,,0,0,0,,this backslash
Dialogue: 0,0:50:49.00,0:50:49.40,BottomCenter,,0,0,0,,by the way
Dialogue: 0,0:50:49.40,0:50:52.09,BottomCenter,,0,0,0,,is just because I've got a line continuity here
Dialogue: 0,0:50:52.17,0:50:53.13,BottomCenter,,0,0,0,,a line brake
Dialogue: 0,0:50:54.26,0:50:55.59,BottomCenter,,0,0,0,,all right so that's the easy part
Dialogue: 0,0:50:56.32,0:50:58.90,BottomCenter,,0,0,0,,move this disc from here to here okay good
Dialogue: 0,0:51:00.73,0:51:02.17,BottomCenter,,0,0,0,,let's do the recursive part now
Dialogue: 0,0:51:02.17,0:51:05.13,BottomCenter,,0,0,0,,so if n is not one I have to do what
Dialogue: 0,0:51:05.19,0:51:08.50,BottomCenter,,0,0,0,,well I've got to get the top disks off my back
Dialogue: 0,0:51:08.67,0:51:11.73,BottomCenter,,0,0,0,,and I've got to move them to the spare pig peg
Dialogue: 0,0:51:11.80,0:51:13.17,BottomCenter,,0,0,0,,and then I've got to take
Dialogue: 0,0:51:13.17,0:51:15.07,BottomCenter,,0,0,0,,that one big distance on the bottom
Dialogue: 0,0:51:15.07,0:51:18.09,BottomCenter,,0,0,0,,move it physically move it onto the end peg
Dialogue: 0,0:51:18.13,0:51:20.09,BottomCenter,,0,0,0,,and then take those remaining end minus one
Dialogue: 0,0:51:20.09,0:51:21.40,BottomCenter,,0,0,0,,and then move them back
Dialogue: 0,0:51:21.76,0:51:22.90,BottomCenter,,0,0,0,,sounds a lot like recursion
Dialogue: 0,0:51:22.90,0:51:26.96,BottomCenter,,0,0,0,,because solving towers of hinoi with 3 2 1
Dialogue: 0,0:51:27.07,0:51:28.00,BottomCenter,,0,0,0,,it's all the same
Dialogue: 0,0:51:28.19,0:51:29.13,BottomCenter,,0,0,0,,it's the same rules
Dialogue: 0,0:51:29.13,0:51:31.17,BottomCenter,,0,0,0,,and since that bottom one is the big one
Dialogue: 0,0:51:31.53,0:51:32.96,BottomCenter,,0,0,0,,I can put anything on top of that
Dialogue: 0,0:51:32.96,0:51:35.32,BottomCenter,,0,0,0,,so there's no rules against moving anything there
Dialogue: 0,0:51:35.92,0:51:37.07,BottomCenter,,0,0,0,,so first thing first
Dialogue: 0,0:51:37.07,0:51:39.50,BottomCenter,,0,0,0,,we've got to figure out what the spare peg is
Dialogue: 0,0:51:39.76,0:51:41.32,BottomCenter,,0,0,0,,so if I want to move from
Dialogue: 0,0:51:41.36,0:51:44.69,BottomCenter,,0,0,0,,say one to two what's the spare peg three
Dialogue: 0,0:51:44.86,0:51:47.00,BottomCenter,,0,0,0,,if I want to move from one to three
Dialogue: 0,0:51:47.00,0:51:48.92,BottomCenter,,0,0,0,,what's the spare peg two
Dialogue: 0,0:51:49.07,0:51:51.69,BottomCenter,,0,0,0,,so for any start and stop and peg
Dialogue: 0,0:51:51.69,0:51:53.96,BottomCenter,,0,0,0,,I've got to be able to know what the spare peg is
Dialogue: 0,0:51:54.36,0:51:55.53,BottomCenter,,0,0,0,,now I could write it conditional
Dialogue: 0,0:51:55.53,0:51:56.69,BottomCenter,,0,0,0,,I could say if
Dialogue: 0,0:51:57.00,0:52:00.00,BottomCenter,,0,0,0,,start is one and end is two then spares three
Dialogue: 0,0:52:00.00,0:52:02.96,BottomCenter,,0,0,0,,it start is one and end is three then spares two when
Dialogue: 0,0:52:02.96,0:52:03.92,BottomCenter,,0,0,0,,so on and so forth
Dialogue: 0,0:52:04.07,0:52:07.96,BottomCenter,,0,0,0,,or I can use this clever little equation here that says
Dialogue: 0,0:52:08.19,0:52:14.13,BottomCenter,,0,0,0,,for any given startand end peg the spear peg is 6
Dialogue: 0,0:52:14.73,0:52:16.09,BottomCenter,,0,0,0,,the difference between those
Dialogue: 0,0:52:16.17,0:52:16.96,BottomCenter,,0,0,0,,first of all
Dialogue: 0,0:52:17.13,0:52:18.69,BottomCenter,,0,0,0,,first of all let's convince ourselves that that's right
Dialogue: 0,0:52:18.69,0:52:20.26,BottomCenter,,0,0,0,,and then let's ask why it's right
Dialogue: 0,0:52:20.40,0:52:24.00,BottomCenter,,0,0,0,,so if start is one and end is two
Dialogue: 0,0:52:24.13,0:52:26.90,BottomCenter,,0,0,0,,that's six minus one minus two which is three
Dialogue: 0,0:52:26.90,0:52:32.40,BottomCenter,,0,0,0,,good if start is three and end is one that's four
Dialogue: 0,0:52:32.46,0:52:34.26,BottomCenter,,0,0,0,,six minus four is two
Dialogue: 0,0:52:34.26,0:52:36.96,BottomCenter,,0,0,0,,and you can convince yourself for any start and unpag
Dialogue: 0,0:52:37.13,0:52:37.80,BottomCenter,,0,0,0,,this will be true
Dialogue: 0,0:52:37.80,0:52:39.36,BottomCenter,,0,0,0,,why is this true by the way
Dialogue: 0,0:52:39.53,0:52:43.30,BottomCenter,,0,0,0,,three plus two plus one of course is six
Dialogue: 0,0:52:43.67,0:52:45.46,BottomCenter,,0,0,0,,and so if I take the values associated with
Dialogue: 0,0:52:45.46,0:52:46.73,BottomCenter,,0,0,0,,two of the pegs
Dialogue: 0,0:52:46.73,0:52:48.69,BottomCenter,,0,0,0,,the one remaining must be 6
Dialogue: 0,0:52:48.69,0:52:51.53,BottomCenter,,0,0,0,,whatever these values are that's a clever little trick
Dialogue: 0,0:52:51.67,0:52:54.67,BottomCenter,,0,0,0,,to figure out the spare peg from these two
Dialogue: 0,0:52:54.92,0:52:55.80,BottomCenter,,0,0,0,,all right so now
Dialogue: 0,0:52:56.00,0:52:58.09,BottomCenter,,0,0,0,,and badly why do I need to know the spare peg
Dialogue: 0,0:52:58.17,0:52:59.17,BottomCenter,,0,0,0,,well when I move
Dialogue: 0,0:52:59.17,0:53:01.86,BottomCenter,,0,0,0,,if I want to move all three from say one to three
Dialogue: 0,0:53:02.00,0:53:02.92,BottomCenter,,0,0,0,,I have to move
Dialogue: 0,0:53:02.96,0:53:05.69,BottomCenter,,0,0,0,,two of the discs from one to the spare pegs
Dialogue: 0,0:53:05.69,0:53:07.00,BottomCenter,,0,0,0,,I'm going to have to be able to figure what
Dialogue: 0,0:53:07.46,0:53:09.46,BottomCenter,,0,0,0,,that is for any pair of
Dialogue: 0,0:53:09.73,0:53:10.53,BottomCenter,,0,0,0,,starting night
Dialogue: 0,0:53:11.26,0:53:13.26,BottomCenter,,0,0,0,,good now let's go back to our recursive code
Dialogue: 0,0:53:13.26,0:53:15.59,BottomCenter,,0,0,0,,so here's my simple move disc that's an instruction
Dialogue: 0,0:53:15.67,0:53:17.67,BottomCenter,,0,0,0,,here's my base recursion case
Dialogue: 0,0:53:17.80,0:53:19.26,BottomCenter,,0,0,0,,and now I'm ready to go
Dialogue: 0,0:53:20.09,0:53:22.32,BottomCenter,,0,0,0,,so first things first figure out what the spare peg is
Dialogue: 0,0:53:22.40,0:53:24.26,BottomCenter,,0,0,0,,it's 6 start minus end
Dialogue: 0,0:53:24.40,0:53:25.73,BottomCenter,,0,0,0,,why do I want to know that
Dialogue: 0,0:53:25.73,0:53:27.90,BottomCenter,,0,0,0,,well because to solve towers of henoi
Dialogue: 0,0:53:27.96,0:53:30.32,BottomCenter,,0,0,0,,with three discs from start to end
Dialogue: 0,0:53:30.67,0:53:33.30,BottomCenter,,0,0,0,,I'm going to solve a simpler problem
Dialogue: 0,0:53:33.30,0:53:34.53,BottomCenter,,0,0,0,,there's my recursion
Dialogue: 0,0:53:34.53,0:53:37.92,BottomCenter,,0,0,0,,solve henoi is solve henoi with n minus one discs
Dialogue: 0,0:53:37.92,0:53:40.67,BottomCenter,,0,0,0,,so that's the top of the thing leaving the bottom one
Dialogue: 0,0:53:40.80,0:53:41.73,BottomCenter,,0,0,0,,from the start
Dialogue: 0,0:53:41.73,0:53:44.53,BottomCenter,,0,0,0,,obviously that's where they started to not the end
Dialogue: 0,0:53:44.59,0:53:46.36,BottomCenter,,0,0,0,,but to the spare
Dialogue: 0,0:53:46.69,0:53:48.46,BottomCenter,,0,0,0,,so please solve for me take off
Dialogue: 0,0:53:48.46,0:53:50.92,BottomCenter,,0,0,0,,take these end minus one diss off my back
Dialogue: 0,0:53:50.96,0:53:52.50,BottomCenter,,0,0,0,,and put them onto the spare
Dialogue: 0,0:53:52.50,0:53:54.09,BottomCenter,,0,0,0,,how does that happen recursively
Dialogue: 0,0:53:54.09,0:53:55.67,BottomCenter,,0,0,0,,we'll walk through that in a minute
Dialogue: 0,0:53:56.30,0:53:58.50,BottomCenter,,0,0,0,,once that's solved trust that it's been solved
Dialogue: 0,0:53:58.50,0:53:59.30,BottomCenter,,0,0,0,,what do I do
Dialogue: 0,0:53:59.32,0:54:01.59,BottomCenter,,0,0,0,,well now I've got this one diss sitting on the start
Dialogue: 0,0:54:01.59,0:54:02.76,BottomCenter,,0,0,0,,and where do I want to move it
Dialogue: 0,0:54:02.86,0:54:05.13,BottomCenter,,0,0,0,,to the end and I know the end is free
Dialogue: 0,0:54:05.26,0:54:08.00,BottomCenter,,0,0,0,,because these end minus one are on the spare disc
Dialogue: 0,0:54:08.17,0:54:10.07,BottomCenter,,0,0,0,,so I'm now going to move
Dialogue: 0,0:54:10.59,0:54:11.40,BottomCenter,,0,0,0,,the
Dialogue: 0,0:54:11.59,0:54:14.50,BottomCenter,,0,0,0,,enth disc from start to end
Dialogue: 0,0:54:14.59,0:54:17.57,BottomCenter,,0,0,0,,good so I solve this I solve this
Dialogue: 0,0:54:17.57,0:54:18.80,BottomCenter,,0,0,0,,and now what do I want to do
Dialogue: 0,0:54:18.80,0:54:20.92,BottomCenter,,0,0,0,,I've got n minus one on the spare
Dialogue: 0,0:54:20.96,0:54:22.50,BottomCenter,,0,0,0,,and I want to move it to where
Dialogue: 0,0:54:23.13,0:54:24.59,BottomCenter,,0,0,0,,the end peg good
Dialogue: 0,0:54:24.59,0:54:26.32,BottomCenter,,0,0,0,,so solve that problem
Dialogue: 0,0:54:26.36,0:54:29.69,BottomCenter,,0,0,0,,solve an oy and minus one from the spare to the end
Dialogue: 0,0:54:30.17,0:54:33.50,BottomCenter,,0,0,0,,done this is the power in the beauty of recursion
Dialogue: 0,0:54:33.50,0:54:35.17,BottomCenter,,0,0,0,,it seems like I'm cheating
Dialogue: 0,0:54:35.50,0:54:36.76,BottomCenter,,0,0,0,,I'm cheating how am
Dialogue: 0,0:54:37.67,0:54:39.13,BottomCenter,,0,0,0,,I defining
Dialogue: 0,0:54:39.13,0:54:42.07,BottomCenter,,0,0,0,,the solution of this problem with complex rules
Dialogue: 0,0:54:42.09,0:54:45.17,BottomCenter,,0,0,0,,by simply saying solve a simpler version of yourself
Dialogue: 0,0:54:45.17,0:54:46.32,BottomCenter,,0,0,0,,that's the power of recursion
Dialogue: 0,0:54:46.32,0:54:48.92,BottomCenter,,0,0,0,,now let's convince ourselves that this actually works
Dialogue: 0,0:54:49.53,0:54:51.90,BottomCenter,,0,0,0,,alright so here's my little code up here
Dialogue: 0,0:54:51.90,0:54:53.73,BottomCenter,,0,0,0,,remember move disc is just a print statement
Dialogue: 0,0:54:53.73,0:54:55.13,BottomCenter,,0,0,0,,and for purposes of space
Dialogue: 0,0:54:55.19,0:54:56.73,BottomCenter,,0,0,0,,I won't print that out here
Dialogue: 0,0:54:57.00,0:54:59.59,BottomCenter,,0,0,0,,so an equals one base case you can just move the disc
Dialogue: 0,0:54:59.80,0:55:01.46,BottomCenter,,0,0,0,,if n is greater than one
Dialogue: 0,0:55:01.69,0:55:03.17,BottomCenter,,0,0,0,,figure out what the spare disc is
Dialogue: 0,0:55:04.67,0:55:07.17,BottomCenter,,0,0,0,,solve two towers of hinoi with n minus one
Dialogue: 0,0:55:07.26,0:55:08.90,BottomCenter,,0,0,0,,and then move the disc in between
Dialogue: 0,0:55:09.00,0:55:09.30,BottomCenter,,0,0,0,,all right
Dialogue: 0,0:55:09.30,0:55:11.46,BottomCenter,,0,0,0,,so let's walk through this and see how it works
Dialogue: 0,0:55:11.69,0:55:15.50,BottomCenter,,0,0,0,,in oy 3 1 2 I have three disks on peg one
Dialogue: 0,0:55:15.57,0:55:18.50,BottomCenter,,0,0,0,,please move them from 1 2 2
Dialogue: 0,0:55:18.69,0:55:20.92,BottomCenter,,0,0,0,,good how do I do that go into the code
Dialogue: 0,0:55:21.13,0:55:23.26,BottomCenter,,0,0,0,,does the base case hold of course not
Dialogue: 0,0:55:23.26,0:55:25.09,BottomCenter,,0,0,0,,so what is the spare peg
Dialogue: 0,0:55:25.09,0:55:27.46,BottomCenter,,0,0,0,,in this case the spare peg is three
Dialogue: 0,0:55:27.46,0:55:28.80,BottomCenter,,0,0,0,,six minus one
Dialogue: 0,0:55:28.86,0:55:32.09,BottomCenter,,0,0,0,,minus two so my job is to solve
Dialogue: 0,0:55:32.40,0:55:33.90,BottomCenter,,0,0,0,,sorry I've abbreviated henoi here
Dialogue: 0,0:55:33.90,0:55:35.09,BottomCenter,,0,0,0,,and I think I did that for space
Dialogue: 0,0:55:35.09,0:55:39.07,BottomCenter,,0,0,0,,so henoi here should be the solve henoi
Dialogue: 0,0:55:39.46,0:55:40.69,BottomCenter,,0,0,0,,I just did this because we're gonna run
Dialogue: 0,0:55:40.69,0:55:41.69,BottomCenter,,0,0,0,,out of space here
Dialogue: 0,0:55:42.40,0:55:46.50,BottomCenter,,0,0,0,,so move three from one to two I need to do three things
Dialogue: 0,0:55:46.69,0:55:48.13,BottomCenter,,0,0,0,,I need to move henoi
Dialogue: 0,0:55:48.69,0:55:52.09,BottomCenter,,0,0,0,,two discs from one to three that's the spare
Dialogue: 0,0:55:52.53,0:55:53.32,BottomCenter,,0,0,0,,so
Dialogue: 0,0:55:53.73,0:55:55.07,BottomCenter,,0,0,0,,two disks from here to here
Dialogue: 0,0:55:55.19,0:55:57.53,BottomCenter,,0,0,0,,move the third disks from one to two
Dialogue: 0,0:55:57.90,0:56:00.90,BottomCenter,,0,0,0,,and then move two disks from what was the spare
Dialogue: 0,0:56:01.00,0:56:02.17,BottomCenter,,0,0,0,,back to the original
Dialogue: 0,0:56:02.36,0:56:03.59,BottomCenter,,0,0,0,,and notice that I've written
Dialogue: 0,0:56:03.59,0:56:05.53,BottomCenter,,0,0,0,,all three of these out here
Dialogue: 0,0:56:05.92,0:56:07.69,BottomCenter,,0,0,0,,because that's these three lines of code
Dialogue: 0,0:56:07.69,0:56:09.26,BottomCenter,,0,0,0,,and all I've done is fill in
Dialogue: 0,0:56:09.53,0:56:11.76,BottomCenter,,0,0,0,,the values for n and minus one
Dialogue: 0,0:56:11.86,0:56:13.13,BottomCenter,,0,0,0,,start stop and end
Dialogue: 0,0:56:13.13,0:56:13.92,BottomCenter,,0,0,0,,now
Dialogue: 0,0:56:14.32,0:56:15.40,BottomCenter,,0,0,0,,what happens at this point
Dialogue: 0,0:56:15.40,0:56:17.19,BottomCenter,,0,0,0,,I've made a call to this function
Dialogue: 0,0:56:17.32,0:56:19.46,BottomCenter,,0,0,0,,that is a recursive call to this function
Dialogue: 0,0:56:19.46,0:56:21.36,BottomCenter,,0,0,0,,I'm going to expand that out in a second
Dialogue: 0,0:56:21.73,0:56:24.13,BottomCenter,,0,0,0,,but we can't forget that we have to come back
Dialogue: 0,0:56:24.40,0:56:25.76,BottomCenter,,0,0,0,,we're going to make this recursive call
Dialogue: 0,0:56:25.76,0:56:27.17,BottomCenter,,0,0,0,,which is going to lead to some more things
Dialogue: 0,0:56:27.17,0:56:28.19,BottomCenter,,0,0,0,,but when it's done
Dialogue: 0,0:56:28.32,0:56:29.13,BottomCenter,,0,0,0,,we have to come back
Dialogue: 0,0:56:29.13,0:56:31.32,BottomCenter,,0,0,0,,and do this and then do this
Dialogue: 0,0:56:31.50,0:56:33.53,BottomCenter,,0,0,0,,so that nature of the recursive call is
Dialogue: 0,0:56:33.53,0:56:36.09,BottomCenter,,0,0,0,,there is a promise to come back here
Dialogue: 0,0:56:36.19,0:56:38.92,BottomCenter,,0,0,0,,when this is done being executed
Dialogue: 0,0:56:39.00,0:56:40.59,BottomCenter,,0,0,0,,but if this leads to another call
Dialogue: 0,0:56:40.59,0:56:41.53,BottomCenter,,0,0,0,,which leads to another call
Dialogue: 0,0:56:41.53,0:56:42.80,BottomCenter,,0,0,0,,you keep going down
Dialogue: 0,0:56:42.96,0:56:44.26,BottomCenter,,0,0,0,,and then when you're done
Dialogue: 0,0:56:44.53,0:56:46.76,BottomCenter,,0,0,0,,you come back and do this it's sort of like
Dialogue: 0,0:56:47.30,0:56:49.40,BottomCenter,,0,0,0,,the examples we've done with recursion before
Dialogue: 0,0:56:49.40,0:56:51.32,BottomCenter,,0,0,0,,we build up this expression
Dialogue: 0,0:56:51.32,0:56:53.59,BottomCenter,,0,0,0,,so here we're not building up an expression
Dialogue: 0,0:56:53.76,0:56:55.86,BottomCenter,,0,0,0,,but we're building up a series of
Dialogue: 0,0:56:55.86,0:56:58.36,BottomCenter,,0,0,0,,moves that we promise to get back to
Dialogue: 0,0:56:58.53,0:57:00.59,BottomCenter,,0,0,0,,okay so let's go ahead and start expanding this out
Dialogue: 0,0:57:00.69,0:57:03.57,BottomCenter,,0,0,0,,this is a recursive call so let's go ahead and make it
Dialogue: 0,0:57:07.00,0:57:08.73,BottomCenter,,0,0,0,,now start all over again
Dialogue: 0,0:57:08.73,0:57:09.92,BottomCenter,,0,0,0,,right the
Dialogue: 0,0:57:10.50,0:57:14.73,BottomCenter,,0,0,0,,start is one the end is three so the spare is two
Dialogue: 0,0:57:15.13,0:57:17.19,BottomCenter,,0,0,0,,your job is to solve a simpler problem
Dialogue: 0,0:57:17.19,0:57:18.90,BottomCenter,,0,0,0,,one from one to the spare
Dialogue: 0,0:57:18.90,0:57:21.19,BottomCenter,,0,0,0,,so that means move this disc from here to here
Dialogue: 0,0:57:21.69,0:57:25.80,BottomCenter,,0,0,0,,and then at that 0.2 is free to move to the end peg
Dialogue: 0,0:57:25.80,0:57:29.13,BottomCenter,,0,0,0,,so two moves here and then I move one from two to three
Dialogue: 0,0:57:29.36,0:57:33.07,BottomCenter,,0,0,0,,so these three steps are going to accomplish
Dialogue: 0,0:57:33.50,0:57:34.46,BottomCenter,,0,0,0,,the following
Dialogue: 0,0:57:34.50,0:57:38.32,BottomCenter,,0,0,0,,I move one from one to two that's the current spare
Dialogue: 0,0:57:38.40,0:57:42.67,BottomCenter,,0,0,0,,I move two over to the end and then I solve henoi one
Dialogue: 0,0:57:42.67,0:57:43.90,BottomCenter,,0,0,0,,and I'm not expanding this out
Dialogue: 0,0:57:43.90,0:57:45.90,BottomCenter,,0,0,0,,because that's eventually going to hit the base case
Dialogue: 0,0:57:45.92,0:57:47.30,BottomCenter,,0,0,0,,and so I just move it
Dialogue: 0,0:57:47.86,0:57:49.40,BottomCenter,,0,0,0,,so at this point
Dialogue: 0,0:57:49.92,0:57:51.57,BottomCenter,,0,0,0,,I have now completed
Dialogue: 0,0:57:51.80,0:57:55.07,BottomCenter,,0,0,0,,this initial recursive call which required
Dialogue: 0,0:57:55.19,0:57:56.30,BottomCenter,,0,0,0,,another recursive call
Dialogue: 0,0:57:56.30,0:57:57.53,BottomCenter,,0,0,0,,a move and another recursive call
Dialogue: 0,0:57:57.53,0:57:58.53,BottomCenter,,0,0,0,,but at this point
Dialogue: 0,0:57:58.76,0:58:00.36,BottomCenter,,0,0,0,,this function is now done
Dialogue: 0,0:58:00.69,0:58:02.53,BottomCenter,,0,0,0,,will evaluate and it is done
Dialogue: 0,0:58:02.92,0:58:05.09,BottomCenter,,0,0,0,,and now I'm free to move on to the next
Dialogue: 0,0:58:05.30,0:58:07.96,BottomCenter,,0,0,0,,remembered command from the first call
Dialogue: 0,0:58:07.96,0:58:10.92,BottomCenter,,0,0,0,,which is to move three from 1 2 2
Dialogue: 0,0:58:11.30,0:58:13.76,BottomCenter,,0,0,0,,good and now I've sort of got to do it all over again
Dialogue: 0,0:58:13.76,0:58:16.53,BottomCenter,,0,0,0,,I've got to take these two discs but now from three
Dialogue: 0,0:58:16.67,0:58:17.86,BottomCenter,,0,0,0,,and move them to there
Dialogue: 0,0:58:17.86,0:58:19.13,BottomCenter,,0,0,0,,well how do I do that
Dialogue: 0,0:58:19.50,0:58:21.13,BottomCenter,,0,0,0,,another set of recursive calls
Dialogue: 0,0:58:21.17,0:58:24.40,BottomCenter,,0,0,0,,move the first disc from three to one
Dialogue: 0,0:58:24.50,0:58:27.73,BottomCenter,,0,0,0,,move the second disc to the final disc and then move
Dialogue: 0,0:58:28.13,0:58:30.32,BottomCenter,,0,0,0,,back to there so I'll just go ahead and do that
Dialogue: 0,0:58:30.57,0:58:32.73,BottomCenter,,0,0,0,,so one moves from three to one
Dialogue: 0,0:58:32.76,0:58:34.57,BottomCenter,,0,0,0,,I'm now free to move that disc
Dialogue: 0,0:58:34.57,0:58:35.69,BottomCenter,,0,0,0,,so I'm going to move it over
Dialogue: 0,0:58:35.76,0:58:37.59,BottomCenter,,0,0,0,,and then I do one more recursive call
Dialogue: 0,0:58:37.59,0:58:39.50,BottomCenter,,0,0,0,,which of course hits the base case
Dialogue: 0,0:58:39.57,0:58:41.57,BottomCenter,,0,0,0,,and then I am home
Dialogue: 0,0:58:42.46,0:58:43.09,BottomCenter,,0,0,0,,good
Dialogue: 0,0:58:43.09,0:58:45.92,BottomCenter,,0,0,0,,so you can see in some ways here I hope
Dialogue: 0,0:58:45.96,0:58:47.46,BottomCenter,,0,0,0,,the power of this recursion
Dialogue: 0,0:58:47.46,0:58:49.09,BottomCenter,,0,0,0,,that by thinking about
Dialogue: 0,0:58:49.26,0:58:51.36,BottomCenter,,0,0,0,,solving this very complex problem with
Dialogue: 0,0:58:51.36,0:58:52.86,BottomCenter,,0,0,0,,lots of different moves
Dialogue: 0,0:58:52.86,0:58:53.80,BottomCenter,,0,0,0,,and we'll talk in a second
Dialogue: 0,0:58:53.80,0:58:54.86,BottomCenter,,0,0,0,,about how many moves there are
Dialogue: 0,0:58:54.86,0:58:56.86,BottomCenter,,0,0,0,,because we've been doing simple number cases
Dialogue: 0,0:58:57.00,0:58:58.80,BottomCenter,,0,0,0,,and I thought about it is
Dialogue: 0,0:58:58.96,0:59:01.00,BottomCenter,,0,0,0,,sort of recursively in terms of well what
Dialogue: 0,0:59:01.86,0:59:03.67,BottomCenter,,0,0,0,,if I can solve a simpler problem
Dialogue: 0,0:59:03.67,0:59:06.69,BottomCenter,,0,0,0,,how does that help me solve the bigger problem
Dialogue: 0,0:59:07.59,0:59:09.36,BottomCenter,,0,0,0,,so this is a very nice example
Dialogue: 0,0:59:09.46,0:59:11.69,BottomCenter,,0,0,0,,I think I would argue that
Dialogue: 0,0:59:11.69,0:59:14.76,BottomCenter,,0,0,0,,the best iter of solutions won't be nearly so elegant
Dialogue: 0,0:59:14.80,0:59:15.92,BottomCenter,,0,0,0,,and easy to implement
Dialogue: 0,0:59:15.92,0:59:17.90,BottomCenter,,0,0,0,,because this is literally the code that you need
Dialogue: 0,0:59:17.90,0:59:21.40,BottomCenter,,0,0,0,,to do this to solve this problem and that's pretty nice
Dialogue: 0,0:59:21.86,0:59:24.09,BottomCenter,,0,0,0,,now I just mentioned the number of moves
Dialogue: 0,0:59:24.73,0:59:25.46,BottomCenter,,0,0,0,,and I just
Dialogue: 0,0:59:25.46,0:59:27.67,BottomCenter,,0,0,0,,wanted to talk about this very briefly because it's
Dialogue: 0,0:59:27.90,0:59:28.50,BottomCenter,,0,0,0,,a little bit of a
Dialogue: 0,0:59:28.50,0:59:30.69,BottomCenter,,0,0,0,,hint of something that we will be talking about
Dialogue: 0,0:59:30.90,0:59:31.80,BottomCenter,,0,0,0,,in two o six b
Dialogue: 0,0:59:31.80,0:59:33.26,BottomCenter,,0,0,0,,and it's really important
Dialogue: 0,0:59:33.30,0:59:35.09,BottomCenter,,0,0,0,,when you are thinking about algorithms
Dialogue: 0,0:59:35.09,0:59:36.76,BottomCenter,,0,0,0,,whether they are recursive or iterative
Dialogue: 0,0:59:36.76,0:59:37.96,BottomCenter,,0,0,0,,or whatever they are
Dialogue: 0,0:59:38.30,0:59:40.73,BottomCenter,,0,0,0,,which is how expensive is this algorithm
Dialogue: 0,0:59:40.73,0:59:43.50,BottomCenter,,0,0,0,,so how much time is it going to take me to run
Dialogue: 0,0:59:43.69,0:59:45.09,BottomCenter,,0,0,0,,so let's just think about
Dialogue: 0,0:59:45.50,0:59:47.30,BottomCenter,,0,0,0,,that little elder than we just did
Dialogue: 0,0:59:47.32,0:59:48.46,BottomCenter,,0,0,0,,and there's ways of really
Dialogue: 0,0:59:48.46,0:59:50.30,BottomCenter,,0,0,0,,formalizing this analysis that I'm going to do
Dialogue: 0,0:59:50.30,0:59:52.07,BottomCenter,,0,0,0,,but I'm going to do this sort of back of the envelope
Dialogue: 0,0:59:52.07,0:59:53.67,BottomCenter,,0,0,0,,until we get to 206 b
Dialogue: 0,0:59:54.40,0:59:57.19,BottomCenter,,0,0,0,,if I have one disc how many moves do I have to make
Dialogue: 0,0:59:57.53,1:00:00.17,BottomCenter,,0,0,0,,just one I just move a disc from one peg to another
Dialogue: 0,1:00:00.40,1:00:04.00,BottomCenter,,0,0,0,,if I have two disks how many moves do I have to make
Dialogue: 0,1:00:04.32,1:00:05.36,BottomCenter,,0,0,0,,well I've got to take
Dialogue: 0,1:00:05.59,1:00:07.69,BottomCenter,,0,0,0,,one of the discs and put it onto the spare peg
Dialogue: 0,1:00:07.76,1:00:10.07,BottomCenter,,0,0,0,,that's one I've got to then move the base
Dialogue: 0,1:00:10.26,1:00:12.59,BottomCenter,,0,0,0,,over to the final two and then I move
Dialogue: 0,1:00:13.17,1:00:14.86,BottomCenter,,0,0,0,,the one that's on the spare back
Dialogue: 0,1:00:14.86,1:00:16.59,BottomCenter,,0,0,0,,that's three moves I've had to make
Dialogue: 0,1:00:16.90,1:00:19.40,BottomCenter,,0,0,0,,not too bad well what about three discs
Dialogue: 0,1:00:19.46,1:00:21.76,BottomCenter,,0,0,0,,well for three discs I've got to take two discs
Dialogue: 0,1:00:21.76,1:00:23.46,BottomCenter,,0,0,0,,and move them on to a spare pag
Dialogue: 0,1:00:23.73,1:00:25.40,BottomCenter,,0,0,0,,slide one over and then do it again
Dialogue: 0,1:00:25.40,1:00:27.80,BottomCenter,,0,0,0,,well how much does it cost me to move two discs
Dialogue: 0,1:00:27.80,1:00:28.67,BottomCenter,,0,0,0,,well three
Dialogue: 0,1:00:28.90,1:00:31.26,BottomCenter,,0,0,0,,so if I've got to move two discs that cost me three
Dialogue: 0,1:00:31.46,1:00:33.36,BottomCenter,,0,0,0,,I move one disc over that's four
Dialogue: 0,1:00:33.36,1:00:36.30,BottomCenter,,0,0,0,,and then I've got to do another three that's seven
Dialogue: 0,1:00:36.36,1:00:38.86,BottomCenter,,0,0,0,,so notice for here I sort of did it recursively
Dialogue: 0,1:00:38.86,1:00:40.86,BottomCenter,,0,0,0,,I didn't have to reanalyze
Dialogue: 0,1:00:41.09,1:00:42.86,BottomCenter,,0,0,0,,move a disk move a disk move a disk
Dialogue: 0,1:00:42.90,1:00:45.59,BottomCenter,,0,0,0,,I know that two of those disks are going to move over
Dialogue: 0,1:00:45.59,1:00:47.30,BottomCenter,,0,0,0,,and I know how much it cost me to move
Dialogue: 0,1:00:47.30,1:00:48.26,BottomCenter,,0,0,0,,two of the disks
Dialogue: 0,1:00:48.50,1:00:50.67,BottomCenter,,0,0,0,,okay well what about with four discs
Dialogue: 0,1:00:50.67,1:00:51.57,BottomCenter,,0,0,0,,well I've got to solve
Dialogue: 0,1:00:51.57,1:00:54.17,BottomCenter,,0,0,0,,two versions of towers of hernoi with three disks
Dialogue: 0,1:00:54.17,1:00:55.76,BottomCenter,,0,0,0,,move three on to despair
Dialogue: 0,1:00:55.96,1:00:59.46,BottomCenter,,0,0,0,,slide one over move three back on to the resting spot
Dialogue: 0,1:00:59.67,1:01:02.86,BottomCenter,,0,0,0,,so that's going to be seven plus seven plus one fifteen
Dialogue: 0,1:01:03.40,1:01:04.80,BottomCenter,,0,0,0,,what are you noticing here
Dialogue: 0,1:01:05.13,1:01:06.86,BottomCenter,,0,0,0,,every time I add a disc
Dialogue: 0,1:01:06.86,1:01:09.36,BottomCenter,,0,0,0,,how many more steps do I have to do
Dialogue: 0,1:01:09.90,1:01:10.69,BottomCenter,,0,0,0,,double
Dialogue: 0,1:01:10.90,1:01:14.30,BottomCenter,,0,0,0,,I'm doubling right and plus one so three
Dialogue: 0,1:01:14.76,1:01:15.92,BottomCenter,,0,0,0,,double is six plus one
Dialogue: 0,1:01:15.92,1:01:18.86,BottomCenter,,0,0,0,,seven double is fourteen plus one thirty
Dialogue: 0,1:01:18.86,1:01:20.07,BottomCenter,,0,0,0,,thirty plus one
Dialogue: 0,1:01:20.53,1:01:23.40,BottomCenter,,0,0,0,,sixty four sixty two plus one and so on and so forth
Dialogue: 0,1:01:24.13,1:01:25.53,BottomCenter,,0,0,0,,that's a little scary right
Dialogue: 0,1:01:25.53,1:01:28.67,BottomCenter,,0,0,0,,because every time I increment by one here
Dialogue: 0,1:01:28.67,1:01:30.26,BottomCenter,,0,0,0,,I'm doubling my workload
Dialogue: 0,1:01:30.26,1:01:30.80,BottomCenter,,0,0,0,,well
Dialogue: 0,1:01:30.80,1:01:32.50,BottomCenter,,0,0,0,,why why is it doubling
Dialogue: 0,1:01:32.59,1:01:34.07,BottomCenter,,0,0,0,,well think about the recursion
Dialogue: 0,1:01:34.07,1:01:35.96,BottomCenter,,0,0,0,,the recursion says in order to solve
Dialogue: 0,1:01:36.17,1:01:40.17,BottomCenter,,0,0,0,,a problem with n disks I've got to solve n minus one
Dialogue: 0,1:01:40.53,1:01:43.07,BottomCenter,,0,0,0,,twice move and minus one to the spare
Dialogue: 0,1:01:43.40,1:01:46.13,BottomCenter,,0,0,0,,slide one over that's the plus one move and minus one
Dialogue: 0,1:01:46.40,1:01:49.17,BottomCenter,,0,0,0,,and so this is a very expensive computation
Dialogue: 0,1:01:49.17,1:01:51.76,BottomCenter,,0,0,0,,so that by the time you get to 64 discs
Dialogue: 0,1:01:51.90,1:01:52.76,BottomCenter,,0,0,0,,you have a very
Dialogue: 0,1:01:52.76,1:01:54.32,BottomCenter,,0,0,0,,very expensive computation
Dialogue: 0,1:01:54.32,1:01:56.40,BottomCenter,,0,0,0,,that you are probably not going to want to do
Dialogue: 0,1:01:56.50,1:01:59.26,BottomCenter,,0,0,0,,and even with just 12 discs you've gone from
Dialogue: 0,1:01:59.59,1:02:01.67,BottomCenter,,0,0,0,,only from one to 12
Dialogue: 0,1:02:01.67,1:02:04.86,BottomCenter,,0,0,0,,you've only added 12 but you've gone very rapidly
Dialogue: 0,1:02:04.86,1:02:06.92,BottomCenter,,0,0,0,,this is called exponential growth
Dialogue: 0,1:02:07.19,1:02:09.17,BottomCenter,,0,0,0,,and this is very very bad
Dialogue: 0,1:02:09.69,1:02:10.90,BottomCenter,,0,0,0,,for certain things
Dialogue: 0,1:02:10.90,1:02:12.76,BottomCenter,,0,0,0,,it's really good if something's expensive
Dialogue: 0,1:02:12.76,1:02:14.57,BottomCenter,,0,0,0,,if you're trying to protect your password
Dialogue: 0,1:02:14.57,1:02:15.96,BottomCenter,,0,0,0,,like breaking encryption
Dialogue: 0,1:02:16.09,1:02:17.57,BottomCenter,,0,0,0,,should be exponential growth
Dialogue: 0,1:02:17.80,1:02:19.30,BottomCenter,,0,0,0,,but if you're trying to actually solve a problem
Dialogue: 0,1:02:19.30,1:02:22.53,BottomCenter,,0,0,0,,exponential growth is a real problem obviously
Dialogue: 0,1:02:22.59,1:02:25.09,BottomCenter,,0,0,0,,so I just love this towers have annoyed for two reasons
Dialogue: 0,1:02:25.09,1:02:25.69,BottomCenter,,0,0,0,,one is
Dialogue: 0,1:02:25.69,1:02:28.32,BottomCenter,,0,0,0,,it shows really the power and the beauty of recursion
Dialogue: 0,1:02:28.36,1:02:29.53,BottomCenter,,0,0,0,,and it also gave me
Dialogue: 0,1:02:29.67,1:02:31.73,BottomCenter,,0,0,0,,an excuse to show you what exponential growth is
Dialogue: 0,1:02:31.73,1:02:33.40,BottomCenter,,0,0,0,,which is something we'll be talking about
Dialogue: 0,1:02:33.67,1:02:34.53,BottomCenter,,0,0,0,,down the line
Dialogue: 0,1:02:34.67,1:02:36.57,BottomCenter,,0,0,0,,much much more and much much more formally
Dialogue: 0,1:02:37.07,1:02:38.40,BottomCenter,,0,0,0,,all right that's it for recursion
Dialogue: 0,1:02:38.40,1:02:38.96,BottomCenter,,0,0,0,,a couple of things
Dialogue: 0,1:02:38.96,1:02:41.09,BottomCenter,,0,0,0,,I want to say at the end of all of this
Dialogue: 0,1:02:41.80,1:02:43.50,BottomCenter,,0,0,0,,don't get too confused
Dialogue: 0,1:02:43.59,1:02:44.96,BottomCenter,,0,0,0,,when I ask you to solve a problem
Dialogue: 0,1:02:44.96,1:02:46.90,BottomCenter,,0,0,0,,I will tell you if it's iterated recursion
Dialogue: 0,1:02:47.19,1:02:48.59,BottomCenter,,0,0,0,,and I don't expect you right now
Dialogue: 0,1:02:48.59,1:02:49.92,BottomCenter,,0,0,0,,to know which is sort of the best
Dialogue: 0,1:02:49.92,1:02:51.17,BottomCenter,,0,0,0,,I just want you to be able to
Dialogue: 0,1:02:51.17,1:02:52.53,BottomCenter,,0,0,0,,solve these problems thinking
Dialogue: 0,1:02:52.53,1:02:54.07,BottomCenter,,0,0,0,,about them a little bit differently
Dialogue: 0,1:02:54.19,1:02:56.26,BottomCenter,,0,0,0,,but don't feel like just because recursion's weird
Dialogue: 0,1:02:56.26,1:02:57.96,BottomCenter,,0,0,0,,you have to solve all the problems with that
Dialogue: 0,1:02:58.00,1:02:59.59,BottomCenter,,0,0,0,,or you should avoid them
Dialogue: 0,1:03:00.00,1:03:02.17,BottomCenter,,0,0,0,,like any design problem
Dialogue: 0,1:03:02.17,1:03:04.59,BottomCenter,,0,0,0,,you have to think about what is the best most elegant
Dialogue: 0,1:03:04.59,1:03:06.50,BottomCenter,,0,0,0,,most efficient solution
Dialogue: 0,1:03:06.50,1:03:08.26,BottomCenter,,0,0,0,,and sometimes that will be recursive in nature
Dialogue: 0,1:03:08.26,1:03:09.13,BottomCenter,,0,0,0,,and sometimes it won't
Dialogue: 0,1:03:09.13,1:03:11.07,BottomCenter,,0,0,0,,and that's okay good
Dialogue: 0,1:03:11.30,1:03:11.57,BottomCenter,,0,0,0,,all right
Dialogue: 0,1:03:11.57,1:03:14.26,BottomCenter,,0,0,0,,so at this point we're not ready to transition to
Dialogue: 0,1:03:14.50,1:03:15.69,BottomCenter,,0,0,0,,object oriented programming
Dialogue: 0,1:03:15.69,1:03:18.07,BottomCenter,,0,0,0,,so the next three full lectures
Dialogue: 0,1:03:18.07,1:03:19.67,BottomCenter,,0,0,0,,are going to be classes and objects
Dialogue: 0,1:03:19.73,1:03:20.92,BottomCenter,,0,0,0,,and at this point
Dialogue: 0,1:03:21.09,1:03:22.00,BottomCenter,,0,0,0,,we really do have
Dialogue: 0,1:03:22.00,1:03:23.80,BottomCenter,,0,0,0,,all of the scaffolding we need to be
Dialogue: 0,1:03:23.80,1:03:25.07,BottomCenter,,0,0,0,,python programmers
Dialogue: 0,1:03:25.40,1:03:26.09,BottomCenter,,0,0,0,,we have functions
Dialogue: 0,1:03:26.09,1:03:27.76,BottomCenter,,0,0,0,,we have variables we have looping constructs
Dialogue: 0,1:03:27.76,1:03:29.80,BottomCenter,,0,0,0,,we have conditionals we have return variables
Dialogue: 0,1:03:29.80,1:03:30.90,BottomCenter,,0,0,0,,we have parameters
Dialogue: 0,1:03:30.90,1:03:32.32,BottomCenter,,0,0,0,,we have recursion of course
Dialogue: 0,1:03:32.46,1:03:35.40,BottomCenter,,0,0,0,,and now we're going to start thinking about data
Dialogue: 0,1:03:35.73,1:03:37.32,BottomCenter,,0,0,0,,not just computation
Dialogue: 0,1:03:37.36,1:03:40.53,BottomCenter,,0,0,0,,but how do we store information
Dialogue: 0,1:03:40.59,1:03:41.53,BottomCenter,,0,0,0,,and make good
Dialogue: 0,1:03:41.53,1:03:43.00,BottomCenter,,0,0,0,,use of that data to solve
Dialogue: 0,1:03:43.00,1:03:46.67,BottomCenter,,0,0,0,,interesting problems in efficient and elegant ways
Dialogue: 0,1:03:46.73,1:03:47.59,BottomCenter,,0,0,0,,and so when we pick it up
Dialogue: 0,1:03:47.59,1:03:49.09,BottomCenter,,0,0,0,,we're gonna start sort of a new chapter
Dialogue: 0,1:03:49.09,1:03:51.36,BottomCenter,,0,0,0,,if you will of this class which are classes
Dialogue: 0,1:03:51.53,1:03:53.69,BottomCenter,,0,0,0,,and objects and then for the last two weeks
Dialogue: 0,1:03:53.69,1:03:55.26,BottomCenter,,0,0,0,,we'll talk about something a little bit different
Dialogue: 0,1:03:55.26,1:03:57.09,BottomCenter,,0,0,0,,as well all right I'll see you in a little bit
Dialogue: 0,1:03:59.57,1:04:02.26,BottomCenter,,0,0,0,,now we'll look at a very important example
Dialogue: 0,1:04:02.26,1:04:04.36,BottomCenter,,0,0,0,,called counting partitions
Dialogue: 0,1:04:04.80,1:04:07.67,BottomCenter,,0,0,0,,and this example is important because
Dialogue: 0,1:04:08.00,1:04:10.36,BottomCenter,,0,0,0,,it's a tree recursive process
Dialogue: 0,1:04:10.67,1:04:13.30,BottomCenter,,0,0,0,,that's actually quite hard to write without
Dialogue: 0,1:04:13.46,1:04:14.50,BottomCenter,,0,0,0,,tree recursion
Dialogue: 0,1:04:14.80,1:04:17.36,BottomCenter,,0,0,0,,so one of the reasons we learn
Dialogue: 0,1:04:17.36,1:04:19.00,BottomCenter,,0,0,0,,about recursion in this course
Dialogue: 0,1:04:19.09,1:04:21.40,BottomCenter,,0,0,0,,is to solve problems like this one
Dialogue: 0,1:04:21.57,1:04:24.46,BottomCenter,,0,0,0,,like counting the partitions of an integer
Dialogue: 0,1:04:25.57,1:04:26.46,BottomCenter,,0,0,0,,what is that
Dialogue: 0,1:04:26.92,1:04:30.67,BottomCenter,,0,0,0,,well the number of partitions of a positive integer n
Dialogue: 0,1:04:31.19,1:04:33.59,BottomCenter,,0,0,0,,using parts up to size m
Dialogue: 0,1:04:34.07,1:04:36.86,BottomCenter,,0,0,0,,is the number of different ways in which n
Dialogue: 0,1:04:36.86,1:04:39.00,BottomCenter,,0,0,0,,can be expressed as the sum
Dialogue: 0,1:04:39.59,1:04:41.32,BottomCenter,,0,0,0,,of parts up to m
Dialogue: 0,1:04:41.76,1:04:43.50,BottomCenter,,0,0,0,,in increasing order
Dialogue: 0,1:04:44.36,1:04:46.13,BottomCenter,,0,0,0,,let me show you an example
Dialogue: 0,1:04:46.67,1:04:50.26,BottomCenter,,0,0,0,,say we want to count the partitions of n equals six
Dialogue: 0,1:04:50.67,1:04:54.07,BottomCenter,,0,0,0,,using parts opticize m equals four
Dialogue: 0,1:04:55.30,1:04:57.50,BottomCenter,,0,0,0,,here are all of those partitions
Dialogue: 0,1:04:57.59,1:05:00.36,BottomCenter,,0,0,0,,and this is an exhaustive list of everything
Dialogue: 0,1:05:00.67,1:05:02.90,BottomCenter,,0,0,0,,that counts as a partition of six
Dialogue: 0,1:05:02.96,1:05:04.96,BottomCenter,,0,0,0,,using parts up to size four
Dialogue: 0,1:05:05.96,1:05:09.73,BottomCenter,,0,0,0,,so each line is a sum of different parts
Dialogue: 0,1:05:10.00,1:05:12.09,BottomCenter,,0,0,0,,where the parts are an increasing order
Dialogue: 0,1:05:12.09,1:05:13.59,BottomCenter,,0,0,0,,so we have 2+4
Dialogue: 0,1:05:13.69,1:05:15.40,BottomCenter,,0,0,0,,but we don't have 4+2
Dialogue: 0,1:05:15.40,1:05:17.09,BottomCenter,,0,0,0,,because that's a decreasing order
Dialogue: 0,1:05:17.92,1:05:21.80,BottomCenter,,0,0,0,,okay now notice that each part is always
Dialogue: 0,1:05:21.92,1:05:24.00,BottomCenter,,0,0,0,,up to four but never bigger
Dialogue: 0,1:05:24.26,1:05:27.09,BottomCenter,,0,0,0,,so we don't include 1+5
Dialogue: 0,1:05:27.36,1:05:29.69,BottomCenter,,0,0,0,,that doesn't count as a partition of six
Dialogue: 0,1:05:29.69,1:05:31.59,BottomCenter,,0,0,0,,using parts up to size four
Dialogue: 0,1:05:32.32,1:05:34.19,BottomCenter,,0,0,0,,but we do include two plus four
Dialogue: 0,1:05:34.46,1:05:36.50,BottomCenter,,0,0,0,,and one plus one plus four
Dialogue: 0,1:05:36.67,1:05:40.69,BottomCenter,,0,0,0,,as different ways of partitioning up the No.6
Dialogue: 0,1:05:41.30,1:05:43.76,BottomCenter,,0,0,0,,the idea here is we're counting the number of different
Dialogue: 0,1:05:43.76,1:05:46.32,BottomCenter,,0,0,0,,ways that we can break six into groups
Dialogue: 0,1:05:48.13,1:05:51.19,BottomCenter,,0,0,0,,now we can illustrate these different partitions
Dialogue: 0,1:05:51.40,1:05:53.50,BottomCenter,,0,0,0,,by showing what we're grouping
Dialogue: 0,1:05:53.50,1:05:56.17,BottomCenter,,0,0,0,,so we have two here and four here
Dialogue: 0,1:05:56.46,1:05:59.53,BottomCenter,,0,0,0,,or we have one and one and four here
Dialogue: 0,1:05:59.69,1:06:01.36,BottomCenter,,0,0,0,,and all of the other options
Dialogue: 0,1:06:01.46,1:06:04.07,BottomCenter,,0,0,0,,can be illustrated on a line as well
Dialogue: 0,1:06:04.73,1:06:06.09,BottomCenter,,0,0,0,,and the purpose of the count
Dialogue: 0,1:06:06.09,1:06:08.19,BottomCenter,,0,0,0,,partition's function is just to tell us
Dialogue: 0,1:06:08.19,1:06:09.57,BottomCenter,,0,0,0,,how many different
Dialogue: 0,1:06:09.69,1:06:11.26,BottomCenter,,0,0,0,,partitions there are
Dialogue: 0,1:06:11.53,1:06:13.96,BottomCenter,,0,0,0,,not necessarily to tell us what they are
Dialogue: 0,1:06:14.17,1:06:18.50,BottomCenter,,0,0,0,,so in this case there are 1 2 3 4 5 6 7 8 9
Dialogue: 0,1:06:18.50,1:06:19.69,BottomCenter,,0,0,0,,different options
Dialogue: 0,1:06:19.73,1:06:22.19,BottomCenter,,0,0,0,,so count partition six comma four
Dialogue: 0,1:06:22.32,1:06:24.00,BottomCenter,,0,0,0,,should return the No.9
Dialogue: 0,1:06:26.50,1:06:27.30,BottomCenter,,0,0,0,,okay
Dialogue: 0,1:06:27.53,1:06:32.00,BottomCenter,,0,0,0,,let's understand how we would compute this value nine
Dialogue: 0,1:06:32.96,1:06:36.40,BottomCenter,,0,0,0,,and we need a strategy that will compute partitions
Dialogue: 0,1:06:36.46,1:06:39.53,BottomCenter,,0,0,0,,for any n and nem that we pass it
Dialogue: 0,1:06:43.32,1:06:45.46,BottomCenter,,0,0,0,,so let me tell you this strategy first
Dialogue: 0,1:06:45.46,1:06:48.36,BottomCenter,,0,0,0,,and it will work on the implementation afterwards
Dialogue: 0,1:06:49.13,1:06:52.09,BottomCenter,,0,0,0,,we're going to look for a recursive decomposition
Dialogue: 0,1:06:52.09,1:06:53.13,BottomCenter,,0,0,0,,of the problem
Dialogue: 0,1:06:53.69,1:06:55.17,BottomCenter,,0,0,0,,meaning that we need to
Dialogue: 0,1:06:55.17,1:06:58.07,BottomCenter,,0,0,0,,express this problem in terms of simpler
Dialogue: 0,1:06:58.07,1:07:00.76,BottomCenter,,0,0,0,,instances of the same kind of problem
Dialogue: 0,1:07:02.13,1:07:04.09,BottomCenter,,0,0,0,,and we're going to do that by exploring
Dialogue: 0,1:07:04.09,1:07:06.13,BottomCenter,,0,0,0,,two different possibilities
Dialogue: 0,1:07:06.76,1:07:07.96,BottomCenter,,0,0,0,,one is that
Dialogue: 0,1:07:08.07,1:07:12.80,BottomCenter,,0,0,0,,will include at least one group of four or one four
Dialogue: 0,1:07:13.32,1:07:16.86,BottomCenter,,0,0,0,,in the sum of parts that we use in the partition
Dialogue: 0,1:07:18.17,1:07:19.50,BottomCenter,,0,0,0,,and the other option
Dialogue: 0,1:07:19.96,1:07:22.57,BottomCenter,,0,0,0,,which is everything that doesn't include a four
Dialogue: 0,1:07:23.19,1:07:25.07,BottomCenter,,0,0,0,,says that we're never going to include a
Dialogue: 0,1:07:25.07,1:07:26.13,BottomCenter,,0,0,0,,four in the partition
Dialogue: 0,1:07:26.13,1:07:30.40,BottomCenter,,0,0,0,,we're only going to use parts up to size three or less
Dialogue: 0,1:07:31.76,1:07:32.57,BottomCenter,,0,0,0,,now
Dialogue: 0,1:07:33.36,1:07:37.19,BottomCenter,,0,0,0,,splitting these two possibilities actually splits
Dialogue: 0,1:07:37.19,1:07:39.67,BottomCenter,,0,0,0,,the set of all things that we want to count
Dialogue: 0,1:07:40.07,1:07:42.57,BottomCenter,,0,0,0,,into two disjoint subsets
Dialogue: 0,1:07:42.69,1:07:44.96,BottomCenter,,0,0,0,,the ones that include a group of four
Dialogue: 0,1:07:45.19,1:07:46.92,BottomCenter,,0,0,0,,and the ones that don't
Dialogue: 0,1:07:50.36,1:07:52.19,BottomCenter,,0,0,0,,another observation is that everything
Dialogue: 0,1:07:52.19,1:07:53.90,BottomCenter,,0,0,0,,that includes a group of four
Dialogue: 0,1:07:54.76,1:07:56.53,BottomCenter,,0,0,0,,really just has to partition
Dialogue: 0,1:07:56.76,1:07:59.76,BottomCenter,,0,0,0,,what's left over after we subtract for
Dialogue: 0,1:08:00.26,1:08:02.26,BottomCenter,,0,0,0,,so in both of these cases
Dialogue: 0,1:08:02.40,1:08:05.53,BottomCenter,,0,0,0,,we're actually just partitioning the No.2
Dialogue: 0,1:08:06.26,1:08:09.92,BottomCenter,,0,0,0,,we can get it by just a No.2 or by 1+1
Dialogue: 0,1:08:10.26,1:08:12.90,BottomCenter,,0,0,0,,using groups up to size four still
Dialogue: 0,1:08:14.30,1:08:16.06,BottomCenter,,0,0,0,,and what about the bottom half
Dialogue: 0,1:08:16.39,1:08:19.19,BottomCenter,,0,0,0,,well the bottom half is all the ways of partitioning
Dialogue: 0,1:08:19.32,1:08:20.19,BottomCenter,,0,0,0,,six
Dialogue: 0,1:08:20.86,1:08:24.27,BottomCenter,,0,0,0,,but using parts up to size only three
Dialogue: 0,1:08:27.30,1:08:29.10,BottomCenter,,0,0,0,,so we're really solving two
Dialogue: 0,1:08:29.50,1:08:32.39,BottomCenter,,0,0,0,,simpler instances of the same problem
Dialogue: 0,1:08:32.72,1:08:33.69,BottomCenter,,0,0,0,,meaning we'll make
Dialogue: 0,1:08:33.69,1:08:36.47,BottomCenter,,0,0,0,,two recursive calls to count partitions
Dialogue: 0,1:08:37.17,1:08:40.00,BottomCenter,,0,0,0,,when we're trying to compute count partition six four
Dialogue: 0,1:08:40.60,1:08:42.47,BottomCenter,,0,0,0,,using at least one four
Dialogue: 0,1:08:42.47,1:08:45.89,BottomCenter,,0,0,0,,means that we then have to count the partitions of two
Dialogue: 0,1:08:46.52,1:08:49.06,BottomCenter,,0,0,0,,again using parts up to size four
Dialogue: 0,1:08:51.77,1:08:53.69,BottomCenter,,0,0,0,,so there's the simpler instance
Dialogue: 0,1:08:53.69,1:08:55.50,BottomCenter,,0,0,0,,of the problem that we solve
Dialogue: 0,1:08:55.69,1:08:57.17,BottomCenter,,0,0,0,,above this line
Dialogue: 0,1:08:57.39,1:08:59.86,BottomCenter,,0,0,0,,assuming that we use at least one four
Dialogue: 0,1:09:01.69,1:09:02.72,BottomCenter,,0,0,0,,the other simpler
Dialogue: 0,1:09:02.72,1:09:03.97,BottomCenter,,0,0,0,,instance is that we count
Dialogue: 0,1:09:03.97,1:09:06.36,BottomCenter,,0,0,0,,the partitions of the whole No.6
Dialogue: 0,1:09:07.19,1:09:09.50,BottomCenter,,0,0,0,,using parts that are one smaller
Dialogue: 0,1:09:09.50,1:09:11.19,BottomCenter,,0,0,0,,than the one we had before
Dialogue: 0,1:09:11.39,1:09:14.60,BottomCenter,,0,0,0,,so we're assuming we're not going to use any fours
Dialogue: 0,1:09:14.69,1:09:16.77,BottomCenter,,0,0,0,,so we'll use parts up to size three
Dialogue: 0,1:09:17.30,1:09:19.17,BottomCenter,,0,0,0,,and we need to count up all of those
Dialogue: 0,1:09:19.77,1:09:22.72,BottomCenter,,0,0,0,,so if we count up these two and we count up these seven
Dialogue: 0,1:09:22.77,1:09:24.80,BottomCenter,,0,0,0,,we'll get the nine and total that we want
Dialogue: 0,1:09:24.80,1:09:26.36,BottomCenter,,0,0,0,,in order to solve the problem
Dialogue: 0,1:09:26.89,1:09:29.32,BottomCenter,,0,0,0,,and that's the recursive decomposition that we
Dialogue: 0,1:09:29.32,1:09:31.32,BottomCenter,,0,0,0,,used in order to count the partitions of a
Dialogue: 0,1:09:31.32,1:09:32.89,BottomCenter,,0,0,0,,positive integer et
Dialogue: 0,1:09:35.10,1:09:37.97,BottomCenter,,0,0,0,,so tree recursion can be thought of as a technique
Dialogue: 0,1:09:37.97,1:09:39.72,BottomCenter,,0,0,0,,for exploring different choices
Dialogue: 0,1:09:39.72,1:09:41.30,BottomCenter,,0,0,0,,or different possibilities
Dialogue: 0,1:09:41.77,1:09:44.69,BottomCenter,,0,0,0,,these are the two possibilities we explore in this case
Dialogue: 0,1:09:45.32,1:09:46.97,BottomCenter,,0,0,0,,and what do we do with the result
Dialogue: 0,1:09:46.97,1:09:48.80,BottomCenter,,0,0,0,,will we sum the results together
Dialogue: 0,1:09:48.80,1:09:50.30,BottomCenter,,0,0,0,,because we actually want
Dialogue: 0,1:09:50.30,1:09:52.06,BottomCenter,,0,0,0,,all the different alternatives
Dialogue: 0,1:09:52.32,1:09:55.50,BottomCenter,,0,0,0,,and these two possibilities split that set
Dialogue: 0,1:09:55.77,1:09:57.17,BottomCenter,,0,0,0,,evenly right here
Dialogue: 0,1:09:59.47,1:10:02.52,BottomCenter,,0,0,0,,now when we make one of these recursive calls
Dialogue: 0,1:10:02.52,1:10:05.69,BottomCenter,,0,0,0,,that's going to involve further decomposition
Dialogue: 0,1:10:05.69,1:10:06.97,BottomCenter,,0,0,0,,in the same way
Dialogue: 0,1:10:07.52,1:10:11.39,BottomCenter,,0,0,0,,the count partitions of six using parts opticized three
Dialogue: 0,1:10:11.69,1:10:15.80,BottomCenter,,0,0,0,,will divide that set of seven up into two groups
Dialogue: 0,1:10:15.80,1:10:18.67,BottomCenter,,0,0,0,,those that use a three and those that don't
Dialogue: 0,1:10:19.10,1:10:21.47,BottomCenter,,0,0,0,,and here we have the count partitions of the three
Dialogue: 0,1:10:21.47,1:10:22.27,BottomCenter,,0,0,0,,that remain
Dialogue: 0,1:10:22.47,1:10:25.00,BottomCenter,,0,0,0,,here we have the count partitions of all six
Dialogue: 0,1:10:25.00,1:10:27.30,BottomCenter,,0,0,0,,using parts up to size only two
Dialogue: 0,1:10:28.77,1:10:32.00,BottomCenter,,0,0,0,,and each of those has recursive decompositions as well
Dialogue: 0,1:10:32.67,1:10:35.36,BottomCenter,,0,0,0,,sometimes here and sometimes here
Dialogue: 0,1:10:35.56,1:10:36.72,BottomCenter,,0,0,0,,and in this way
Dialogue: 0,1:10:36.72,1:10:39.10,BottomCenter,,0,0,0,,we explore all the different possibilities
Dialogue: 0,1:10:39.10,1:10:40.36,BottomCenter,,0,0,0,,and can compute
Dialogue: 0,1:10:40.36,1:10:42.30,BottomCenter,,0,0,0,,the final result that we want
Dialogue: 0,1:10:42.60,1:10:43.39,BottomCenter,,0,0,0,,hooray
Dialogue: 0,1:10:44.36,1:10:46.72,BottomCenter,,0,0,0,,so we're finally ready to write some coat
Dialogue: 0,1:10:47.56,1:10:50.36,BottomCenter,,0,0,0,,once we have a recursive plan in place
Dialogue: 0,1:10:50.50,1:10:52.97,BottomCenter,,0,0,0,,we just need to add an implementation
Dialogue: 0,1:10:53.06,1:10:54.60,BottomCenter,,0,0,0,,that executes that plan
Dialogue: 0,1:10:56.17,1:10:58.93,BottomCenter,,0,0,0,,so we define count partitions of a number in
Dialogue: 0,1:10:59.30,1:11:01.00,BottomCenter,,0,0,0,,using parts up to size m
Dialogue: 0,1:11:01.72,1:11:03.56,BottomCenter,,0,0,0,,and let's start with the recursive case
Dialogue: 0,1:11:03.56,1:11:05.47,BottomCenter,,0,0,0,,because that's what we've been talking about
Dialogue: 0,1:11:06.69,1:11:09.30,BottomCenter,,0,0,0,,we count the partitions of n minus m
Dialogue: 0,1:11:10.27,1:11:12.10,BottomCenter,,0,0,0,,using parts of to size m
Dialogue: 0,1:11:12.86,1:11:15.39,BottomCenter,,0,0,0,,which is all the cases in which we use at least
Dialogue: 0,1:11:15.39,1:11:17.77,BottomCenter,,0,0,0,,one part of size m
Dialogue: 0,1:11:19.72,1:11:22.56,BottomCenter,,0,0,0,,we also count the partitions of n
Dialogue: 0,1:11:22.89,1:11:26.56,BottomCenter,,0,0,0,,using parts that are smaller than m or m minus one
Dialogue: 0,1:11:28.67,1:11:30.13,BottomCenter,,0,0,0,,and then we summed together
Dialogue: 0,1:11:30.32,1:11:32.97,BottomCenter,,0,0,0,,the cases in which we used in m
Dialogue: 0,1:11:33.10,1:11:35.13,BottomCenter,,0,0,0,,and the cases in which we didn't
Dialogue: 0,1:11:35.19,1:11:37.30,BottomCenter,,0,0,0,,and that should give us all the different cases that
Dialogue: 0,1:11:37.30,1:11:38.36,BottomCenter,,0,0,0,,were interested in
Dialogue: 0,1:11:38.77,1:11:41.19,BottomCenter,,0,0,0,,and the total ways of partitioning in
Dialogue: 0,1:11:43.27,1:11:46.86,BottomCenter,,0,0,0,,so for the case of six comma four is our inputs
Dialogue: 0,1:11:47.19,1:11:50.97,BottomCenter,,0,0,0,,this with them is count partitions two comma four
Dialogue: 0,1:11:51.39,1:11:54.86,BottomCenter,,0,0,0,,and without them is count partition six comma three
Dialogue: 0,1:11:57.06,1:11:58.86,BottomCenter,,0,0,0,,now we just need base cases
Dialogue: 0,1:11:59.47,1:12:01.19,BottomCenter,,0,0,0,,if we're partitioning zero
Dialogue: 0,1:12:01.67,1:12:03.60,BottomCenter,,0,0,0,,well let's just say there's one way to do that
Dialogue: 0,1:12:03.60,1:12:05.39,BottomCenter,,0,0,0,,which is to add nothing together
Dialogue: 0,1:12:07.10,1:12:08.47,BottomCenter,,0,0,0,,if we're partitioning
Dialogue: 0,1:12:08.67,1:12:10.47,BottomCenter,,0,0,0,,non positive number
Dialogue: 0,1:12:10.56,1:12:12.93,BottomCenter,,0,0,0,,we've done something wrong along the way
Dialogue: 0,1:12:13.06,1:12:14.67,BottomCenter,,0,0,0,,there's no way to do that
Dialogue: 0,1:12:14.77,1:12:16.39,BottomCenter,,0,0,0,,and so we return zero
Dialogue: 0,1:12:16.50,1:12:19.19,BottomCenter,,0,0,0,,because we're not allowed to use negative parts
Dialogue: 0,1:12:20.13,1:12:26.13,BottomCenter,,0,0,0,,and if the maximum part size m gets to be zero or less
Dialogue: 0,1:12:26.36,1:12:28.50,BottomCenter,,0,0,0,,well there's no way to build anything
Dialogue: 0,1:12:28.52,1:12:30.19,BottomCenter,,0,0,0,,out of parts of size zero
Dialogue: 0,1:12:30.47,1:12:32.77,BottomCenter,,0,0,0,,so we return zero there as well
Dialogue: 0,1:12:34.50,1:12:35.19,BottomCenter,,0,0,0,,and that's our
Dialogue: 0,1:12:35.19,1:12:37.97,BottomCenter,,0,0,0,,complete implementation of count partitions
Dialogue: 0,1:12:38.36,1:12:39.67,BottomCenter,,0,0,0,,let's watch it work
Dialogue: 0,1:12:43.52,1:12:45.86,BottomCenter,,0,0,0,,so I'm going to define count partitions
Dialogue: 0,1:12:46.00,1:12:48.77,BottomCenter,,0,0,0,,I'll count partitions of a slightly simpler instance
Dialogue: 0,1:12:48.77,1:12:50.13,BottomCenter,,0,0,0,,then we talked about before
Dialogue: 0,1:12:50.39,1:12:52.56,BottomCenter,,0,0,0,,we're going to count partitions of five using
Dialogue: 0,1:12:52.56,1:12:53.89,BottomCenter,,0,0,0,,parts up to size three
Dialogue: 0,1:12:54.30,1:12:56.50,BottomCenter,,0,0,0,,and here all the different alternatives that we want
Dialogue: 0,1:12:56.50,1:12:57.32,BottomCenter,,0,0,0,,to sum up
Dialogue: 0,1:12:57.72,1:13:02.56,BottomCenter,,0,0,0,,1 1 1 1 1 or 1 1 1 2 or 1 2 2 or 1 1 3 or two three
Dialogue: 0,1:13:06.89,1:13:10.00,BottomCenter,,0,0,0,,so the original called account partitions with anna
Dialogue: 0,1:13:10.00,1:13:11.39,BottomCenter,,0,0,0,,five and Ms Three
Dialogue: 0,1:13:11.39,1:13:13.10,BottomCenter,,0,0,0,,involves two recursive calls
Dialogue: 0,1:13:13.10,1:13:13.97,BottomCenter,,0,0,0,,one of which
Dialogue: 0,1:13:14.39,1:13:18.52,BottomCenter,,0,0,0,,is partitioning the No.2 using parts up to size Three
Dialogue: 0,1:13:18.89,1:13:23.52,BottomCenter,,0,0,0,,which if we do some computation eventually returns
Dialogue: 0,1:13:25.89,1:13:26.93,BottomCenter,,0,0,0,,the No.2
Dialogue: 0,1:13:27.86,1:13:29.93,BottomCenter,,0,0,0,,so if we try to use an m
Dialogue: 0,1:13:30.32,1:13:32.13,BottomCenter,,0,0,0,,like if we try to use a part of size
Dialogue: 0,1:13:32.13,1:13:33.52,BottomCenter,,0,0,0,,three in order to petition two
Dialogue: 0,1:13:33.52,1:13:34.39,BottomCenter,,0,0,0,,that's impossible
Dialogue: 0,1:13:34.39,1:13:36.00,BottomCenter,,0,0,0,,so that's why we get a zero there
Dialogue: 0,1:13:36.50,1:13:38.60,BottomCenter,,0,0,0,,if we try to partition the No.2
Dialogue: 0,1:13:38.67,1:13:40.52,BottomCenter,,0,0,0,,with things smaller than three
Dialogue: 0,1:13:40.89,1:13:42.60,BottomCenter,,0,0,0,,then we find there are two different ways
Dialogue: 0,1:13:42.60,1:13:45.36,BottomCenter,,0,0,0,,1+1 and just the No.2 alone
Dialogue: 0,1:13:45.36,1:13:47.56,BottomCenter,,0,0,0,,so those are the two different alternatives
Dialogue: 0,1:13:47.67,1:13:48.86,BottomCenter,,0,0,0,,and we've computed
Dialogue: 0,1:13:49.00,1:13:51.86,BottomCenter,,0,0,0,,what we get when we count the partitions of two
Dialogue: 0,1:13:55.30,1:13:57.97,BottomCenter,,0,0,0,,now what happens when we count the partitions of five
Dialogue: 0,1:13:58.19,1:14:01.77,BottomCenter,,0,0,0,,using parts of size two or smaller
Dialogue: 0,1:14:01.93,1:14:02.39,BottomCenter,,0,0,0,,well those are
Dialogue: 0,1:14:02.39,1:14:04.69,BottomCenter,,0,0,0,,these three alternatives that we have left over
Dialogue: 0,1:14:04.93,1:14:06.60,BottomCenter,,0,0,0,,so if we run through the computation
Dialogue: 0,1:14:06.60,1:14:08.52,BottomCenter,,0,0,0,,we see many recursive calls
Dialogue: 0,1:14:08.52,1:14:10.27,BottomCenter,,0,0,0,,and after some amount of work
Dialogue: 0,1:14:10.89,1:14:14.36,BottomCenter,,0,0,0,,we compute that using m which is the number of two
Dialogue: 0,1:14:14.69,1:14:18.69,BottomCenter,,0,0,0,,we find two different ways of summing up the No.5
Dialogue: 0,1:14:18.97,1:14:20.77,BottomCenter,,0,0,0,,so here are the two different options
Dialogue: 0,1:14:20.77,1:14:22.60,BottomCenter,,0,0,0,,that involve using the No.2
Dialogue: 0,1:14:22.93,1:14:25.13,BottomCenter,,0,0,0,,with part size two or less
Dialogue: 0,1:14:26.19,1:14:27.77,BottomCenter,,0,0,0,,and the only thing we haven't accounted for
Dialogue: 0,1:14:27.77,1:14:29.50,BottomCenter,,0,0,0,,is the sum of all ones
Dialogue: 0,1:14:29.52,1:14:32.06,BottomCenter,,0,0,0,,so without m should include the sum of all ones
Dialogue: 0,1:14:32.06,1:14:33.50,BottomCenter,,0,0,0,,we run some computation
Dialogue: 0,1:14:33.50,1:14:35.39,BottomCenter,,0,0,0,,try some different alternatives
Dialogue: 0,1:14:35.69,1:14:37.00,BottomCenter,,0,0,0,,and right here
Dialogue: 0,1:14:37.52,1:14:41.10,BottomCenter,,0,0,0,,we found that without using m so using only five
Dialogue: 0,1:14:42.00,1:14:44.69,BottomCenter,,0,0,0,,so computing five with only parts one
Dialogue: 0,1:14:44.77,1:14:47.52,BottomCenter,,0,0,0,,there's a way to do that and we return that one way
Dialogue: 0,1:14:48.69,1:14:50.00,BottomCenter,,0,0,0,,so we return it here
Dialogue: 0,1:14:50.00,1:14:51.60,BottomCenter,,0,0,0,,we some two and one together
Dialogue: 0,1:14:51.80,1:14:54.60,BottomCenter,,0,0,0,,we find out that without them we get three
Dialogue: 0,1:14:54.60,1:14:56.17,BottomCenter,,0,0,0,,we some two and three together
Dialogue: 0,1:14:56.17,1:14:57.10,BottomCenter,,0,0,0,,and we get the
Dialogue: 0,1:14:57.30,1:15:00.06,BottomCenter,,0,0,0,,actual value we want which is all five ways
Dialogue: 0,1:15:00.19,1:15:01.86,BottomCenter,,0,0,0,,of counting partitions
Dialogue: 0,1:15:02.47,1:15:04.97,BottomCenter,,0,0,0,,of five using parts up to size three