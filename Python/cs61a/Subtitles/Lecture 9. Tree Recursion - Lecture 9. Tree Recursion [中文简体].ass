[Script Info]
; Script generated by Bilibili Evolved Danmaku Converter
; https://github.com/the1812/Bilibili-Evolved/
Title: Lecture 9. Tree Recursion - Lecture 9. Tree Recursion
ScriptType: v4.00+
PlayResX: 1280
PlayResY: 720
Timer: 10.0000
WrapStyle: 0
ScaledBorderAndShadow: no

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: TopLeft,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,7,32,32,32,0
Style: TopCenter,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,8,32,32,32,0
Style: TopRight,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,9,32,32,32,0
Style: BottomLeft,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,1,32,32,32,0
Style: BottomCenter,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,2,32,32,32,0
Style: BottomRight,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,3,32,32,32,0

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.73,0:00:02.53,BottomCenter,,0,0,0,,六十一八 第九章
Dialogue: 0,0:00:02.73,0:00:03.70,BottomCenter,,0,0,0,,公告
Dialogue: 0,0:00:04.50,0:00:06.07,BottomCenter,,0,0,0,,期中考试已评分
Dialogue: 0,0:00:06.10,0:00:08.57,BottomCenter,,0,0,0,,重新评分请求将于周一截止
Dialogue: 0,0:00:08.60,0:00:10.60,BottomCenter,,0,0,0,,你在年级范围内做那些
Dialogue: 0,0:00:10.97,0:00:13.37,BottomCenter,,0,0,0,,欢迎您在广场上提问
Dialogue: 0,0:00:13.80,0:00:15.37,BottomCenter,,0,0,0,,但我们不会修复
Dialogue: 0,0:00:15.37,0:00:17.13,BottomCenter,,0,0,0,,任何问题，除非你做了
Dialogue: 0,0:00:17.13,0:00:18.87,BottomCenter,,0,0,0,,等级范围重新等级请求
Dialogue: 0,0:00:19.67,0:00:20.33,BottomCenter,,0,0,0,,作为一个班级
Dialogue: 0,0:00:20.33,0:00:23.20,BottomCenter,,0,0,0,,我认为你在这个充满挑战的期中考试中表现得很好
Dialogue: 0,0:00:23.57,0:00:24.50,BottomCenter,,0,0,0,,干得好
Dialogue: 0,0:00:25.17,0:00:28.27,BottomCenter,,0,0,0,,我很高兴看到你学到了多少
Dialogue: 0,0:00:28.27,0:00:30.60,BottomCenter,,0,0,0,,现在你们中的许多人都没有解决所有的问题
Dialogue: 0,0:00:30.60,0:00:31.67,BottomCenter,,0,0,0,,没关系
Dialogue: 0,0:00:31.87,0:00:33.60,BottomCenter,,0,0,0,,重点是学习这个东西
Dialogue: 0,0:00:34.33,0:00:36.13,BottomCenter,,0,0,0,,如果你还没有完全掌握
Dialogue: 0,0:00:36.27,0:00:38.87,BottomCenter,,0,0,0,,你还有很多机会这样做
Dialogue: 0,0:00:39.17,0:00:41.67,BottomCenter,,0,0,0,,期中二和期末考试
Dialogue: 0,0:00:42.67,0:00:43.97,BottomCenter,,0,0,0,,所以继续努力吧
Dialogue: 0,0:00:44.13,0:00:46.27,BottomCenter,,0,0,0,,关注尚未点击的部分
Dialogue: 0,0:00:46.27,0:00:47.20,BottomCenter,,0,0,0,,并坚持下去
Dialogue: 0,0:00:48.00,0:00:49.73,BottomCenter,,0,0,0,,我也很高兴地说
Dialogue: 0,0:00:49.93,0:00:51.33,BottomCenter,,0,0,0,,我们一直在检查我们的
Dialogue: 0,0:00:51.33,0:00:54.77,BottomCenter,,0,0,0,,多种形式的协作检测
Dialogue: 0,0:00:54.90,0:00:56.87,BottomCenter,,0,0,0,,到目前为止已经检测到
Dialogue: 0,0:00:57.00,0:01:00.96,BottomCenter,,0,0,0,,学生之间的合作率非常低
Dialogue: 0,0:01:01.20,0:01:02.53,BottomCenter,,0,0,0,,据我所知
Dialogue: 0,0:01:02.60,0:01:06.37,BottomCenter,,0,0,0,,你们中的绝大多数人决定只参加考试
Dialogue: 0,0:01:06.37,0:01:08.53,BottomCenter,,0,0,0,,而不是向别人寻求帮助
Dialogue: 0,0:01:09.29,0:01:11.87,BottomCenter,,0,0,0,,这是正确的决定所以我很高兴你做出了这个决定
Dialogue: 0,0:01:12.59,0:01:15.17,BottomCenter,,0,0,0,,我不喜欢抓到作弊的人
Dialogue: 0,0:01:15.59,0:01:16.97,BottomCenter,,0,0,0,,相反我希望建立
Dialogue: 0,0:01:16.97,0:01:20.20,BottomCenter,,0,0,0,,我们的考试是显而易见的默认事情
Dialogue: 0,0:01:20.33,0:01:22.87,BottomCenter,,0,0,0,,就是按照规则参加考试
Dialogue: 0,0:01:23.20,0:01:24.67,BottomCenter,,0,0,0,,所以这就是为什么我们有
Dialogue: 0,0:01:24.76,0:01:27.20,BottomCenter,,0,0,0,,相当复杂的咀嚼检测量
Dialogue: 0,0:01:27.20,0:01:29.12,BottomCenter,,0,0,0,,以及视频监考以及所有这些
Dialogue: 0,0:01:29.20,0:01:31.09,BottomCenter,,0,0,0,,只是为了确保学生知道
Dialogue: 0,0:01:31.12,0:01:33.70,BottomCenter,,0,0,0,,在不与他人合作的情况下参加考试
Dialogue: 0,0:01:33.70,0:01:35.76,BottomCenter,,0,0,0,,不会让你处于不利地位
Dialogue: 0,0:01:35.76,0:01:37.80,BottomCenter,,0,0,0,,因为其他人也在这么做
Dialogue: 0,0:01:38.30,0:01:40.20,BottomCenter,,0,0,0,,而且球场也是不弯曲的
Dialogue: 0,0:01:40.26,0:01:42.26,BottomCenter,,0,0,0,,所以谁在乎别人的分数
Dialogue: 0,0:01:42.73,0:01:44.73,BottomCenter,,0,0,0,,但对你自己的分数来说最好的事情
Dialogue: 0,0:01:44.73,0:01:46.12,BottomCenter,,0,0,0,,刚刚参加考试
Dialogue: 0,0:01:46.17,0:01:47.73,BottomCenter,,0,0,0,,据我所知
Dialogue: 0,0:01:47.80,0:01:48.70,BottomCenter,,0,0,0,,是你所做的
Dialogue: 0,0:01:49.40,0:01:50.50,BottomCenter,,0,0,0,,如果您想知道是否可以
Dialogue: 0,0:01:50.50,0:01:51.59,BottomCenter,,0,0,0,,删除你的期中考试
Dialogue: 0,0:01:51.59,0:01:53.40,BottomCenter,,0,0,0,,来自您的 Google 云端硬盘的录音
Dialogue: 0,0:01:53.40,0:01:54.37,BottomCenter,,0,0,0,,请把它们留在那里
Dialogue: 0,0:01:54.37,0:01:56.00,BottomCenter,,0,0,0,,至少到周一结束
Dialogue: 0,0:01:56.12,0:01:57.76,BottomCenter,,0,0,0,,当我们完成检查时
Dialogue: 0,0:01:59.00,0:02:02.12,BottomCenter,,0,0,0,,作业二将于下周四今天发布
Dialogue: 0,0:02:02.53,0:02:04.37,BottomCenter,,0,0,0,,本周没有考试准备部分
Dialogue: 0,0:02:04.37,0:02:05.79,BottomCenter,,0,0,0,,因为你刚刚参加考试
Dialogue: 0,0:02:05.87,0:02:08.40,BottomCenter,,0,0,0,,并说我们会举行一个询问我们任何事情的会议
Dialogue: 0,0:02:08.59,0:02:12.00,BottomCenter,,0,0,0,,明天晚上 2 点 10 点与你们的两位教练一起
Dialogue: 0,0:02:12.27,0:02:14.12,BottomCenter,,0,0,0,,这不会被记录
Dialogue: 0,0:02:14.37,0:02:16.33,BottomCenter,,0,0,0,,如果您想听听我们对任何事情的回答
Dialogue: 0,0:02:16.50,0:02:17.56,BottomCenter,,0,0,0,,那么你必须来
Dialogue: 0,0:02:18.40,0:02:20.00,BottomCenter,,0,0,0,,唯一发生的另一件事是
Dialogue: 0,0:02:20.00,0:02:22.16,BottomCenter,,0,0,0,,完全可选的生猪策略竞赛
Dialogue: 0,0:02:22.56,0:02:25.12,BottomCenter,,0,0,0,,提交表格已发布在
Dialogue: 0,0:02:25.12,0:02:26.77,BottomCenter,,0,0,0,,在之前的公告视频中
Dialogue: 0,0:02:26.77,0:02:29.06,BottomCenter,,0,0,0,,我说你应该尝试确保你的代码
Dialogue: 0,0:02:29.06,0:02:30.53,BottomCenter,,0,0,0,,在合理的时间内运行
Dialogue: 0,0:02:30.56,0:02:32.69,BottomCenter,,0,0,0,,但这不再是一个要求
Dialogue: 0,0:02:32.69,0:02:35.00,BottomCenter,,0,0,0,,您的最终策略没有时间限制
Dialogue: 0,0:02:35.00,0:02:37.19,BottomCenter,,0,0,0,,只要提交完成
Dialogue: 0,0:02:37.19,0:02:38.87,BottomCenter,,0,0,0,,比赛结束前
Dialogue: 0,0:02:38.90,0:02:40.16,BottomCenter,,0,0,0,,那么就可以了
Dialogue: 0,0:02:41.47,0:02:43.93,BottomCenter,,0,0,0,,如果您提早提交
Dialogue: 0,0:02:43.93,0:02:45.19,BottomCenter,,0,0,0,,你可以看到你的立场
Dialogue: 0,0:02:45.19,0:02:47.16,BottomCenter,,0,0,0,,相对于其他提交的人
Dialogue: 0,0:02:47.37,0:02:49.40,BottomCenter,,0,0,0,,论洪策略大赛
Dialogue: 0,0:02:49.47,0:02:50.30,BottomCenter,,0,0,0,,排行榜
Dialogue: 0,0:02:51.47,0:02:53.09,BottomCenter,,0,0,0,,所以当我制作这个视频时
Dialogue: 0,0:02:53.16,0:02:55.30,BottomCenter,,0,0,0,,有一个叫做区块链的提交
Dialogue: 0,0:02:55.30,0:02:58.19,BottomCenter,,0,0,0,,战胜了所有 45 个对手
Dialogue: 0,0:02:59.06,0:03:01.46,BottomCenter,,0,0,0,,其次是黄金比例
Dialogue: 0,0:03:01.69,0:03:04.56,BottomCenter,,0,0,0,,随后有人试图破坏我们的网络应用程序
Dialogue: 0,0:03:04.56,0:03:05.72,BottomCenter,,0,0,0,,并失败了
Dialogue: 0,0:03:06.33,0:03:08.30,BottomCenter,,0,0,0,,我绝对不会点击该链接
Dialogue: 0,0:03:08.30,0:03:09.30,BottomCenter,,0,0,0,,不管是什么
Dialogue: 0,0:03:09.46,0:03:11.27,BottomCenter,,0,0,0,,你可以看到
Dialogue: 0,0:03:11.50,0:03:13.06,BottomCenter,,0,0,0,,其他人已经提出了策略
Dialogue: 0,0:03:13.06,0:03:14.12,BottomCenter,,0,0,0,,非常有效
Dialogue: 0,0:03:14.12,0:03:15.93,BottomCenter,,0,0,0,,像往常一样滚动-1
Dialogue: 0,0:03:16.59,0:03:19.47,BottomCenter,,0,0,0,,有些策略到目前为止还没有那么有效
Dialogue: 0,0:03:19.47,0:03:20.30,BottomCenter,,0,0,0,,没关系
Dialogue: 0,0:03:20.93,0:03:22.09,BottomCenter,,0,0,0,,总是迟到
Dialogue: 0,0:03:22.09,0:03:23.50,BottomCenter,,0,0,0,,还是一八次
Dialogue: 0,0:03:23.72,0:03:26.80,BottomCenter,,0,0,0,,谁是最糟糕的哦显然是斯坦福大学
Dialogue: 0,0:03:27.09,0:03:29.00,BottomCenter,,0,0,0,,好吧，他们真的应该努力去做，不是吗？
Dialogue: 0,0:03:30.77,0:03:32.27,BottomCenter,,0,0,0,,所以我鼓励你参与
Dialogue: 0,0:03:32.27,0:03:34.53,BottomCenter,,0,0,0,,这是完全可选的，但可能会很有趣
Dialogue: 0,0:03:35.09,0:03:36.69,BottomCenter,,0,0,0,,参赛作品将于接下来提交
Dialogue: 0,0:03:36.69,0:03:37.50,BottomCenter,,0,0,0,,周一
Dialogue: 0,0:03:39.00,0:03:41.12,BottomCenter,,0,0,0,,今天的讲座视频有点不同
Dialogue: 0,0:03:41.12,0:03:44.16,BottomCenter,,0,0,0,,过去最引人注目的是因为不仅仅是我
Dialogue: 0,0:03:44.53,0:03:46.90,BottomCenter,,0,0,0,,弗里德教授制作了一些视频
Dialogue: 0,0:03:47.00,0:03:48.19,BottomCenter,,0,0,0,,我认为他们很棒
Dialogue: 0,0:03:48.80,0:03:50.69,BottomCenter,,0,0,0,,接下来的第一个
Dialogue: 0,0:03:51.47,0:03:53.69,BottomCenter,,0,0,0,,这是对上一课的回顾
Dialogue: 0,0:03:54.06,0:03:55.93,BottomCenter,,0,0,0,,但他以不同的方式呈现它
Dialogue: 0,0:03:56.06,0:03:57.93,BottomCenter,,0,0,0,,我认为这样总是好的
Dialogue: 0,0:03:57.93,0:03:59.87,BottomCenter,,0,0,0,,回顾发生的基本原理
Dialogue: 0,0:03:59.87,0:04:00.77,BottomCenter,,0,0,0,,不止一个
Dialogue: 0,0:04:01.27,0:04:02.80,BottomCenter,,0,0,0,,所以看看那个视频
Dialogue: 0,0:04:03.06,0:04:05.30,BottomCenter,,0,0,0,,然后讲座的其余视频将是
Dialogue: 0,0:04:05.30,0:04:06.12,BottomCenter,,0,0,0,,新内容
Dialogue: 0,0:04:07.06,0:04:09.72,BottomCenter,,0,0,0,,而今天的内容非常重要
Dialogue: 0,0:04:09.93,0:04:12.33,BottomCenter,,0,0,0,,但通常需要一些练习才能掌握
Dialogue: 0,0:04:12.37,0:04:15.66,BottomCenter,,0,0,0,,所以这就是为什么我们下周会有一个实验室和一个家庭作业
Dialogue: 0,0:04:15.87,0:04:17.19,BottomCenter,,0,0,0,,给你一些练习
Dialogue: 0,0:04:18.12,0:04:21.10,BottomCenter,,0,0,0,,所以我们在这里讨论递归
Dialogue: 0,0:04:22.89,0:04:25.60,BottomCenter,,0,0,0,,欢迎回到课程的这一点
Dialogue: 0,0:04:25.60,0:04:26.10,BottomCenter,,0,0,0,,我们
Dialogue: 0,0:04:26.10,0:04:27.12,BottomCenter,,0,0,0,,信不信由你
Dialogue: 0,0:04:27.12,0:04:28.00,BottomCenter,,0,0,0,,覆盖
Dialogue: 0,0:04:28.30,0:04:32.73,BottomCenter,,0,0,0,,你需要了解的核心计算机器
Dialogue: 0,0:04:33.30,0:04:34.67,BottomCenter,,0,0,0,,成为一名Python程序员
Dialogue: 0,0:04:34.67,0:04:35.87,BottomCenter,,0,0,0,,有很多东西要学
Dialogue: 0,0:04:35.97,0:04:38.39,BottomCenter,,0,0,0,,有很多数据结构和算法
Dialogue: 0,0:04:38.39,0:04:42.19,BottomCenter,,0,0,0,,但就函数变量循环结构而言
Dialogue: 0,0:04:42.19,0:04:43.26,BottomCenter,,0,0,0,,而在四
Dialogue: 0,0:04:43.52,0:04:44.69,BottomCenter,,0,0,0,,条件语句
Dialogue: 0,0:04:44.69,0:04:45.19,BottomCenter,,0,0,0,,如果
Dialogue: 0,0:04:45.19,0:04:47.73,BottomCenter,,0,0,0,,如果我声明
Dialogue: 0,0:04:47.76,0:04:49.52,BottomCenter,,0,0,0,,构成了核心
Dialogue: 0,0:04:49.52,0:04:51.37,BottomCenter,,0,0,0,,编程语言
Dialogue: 0,0:04:51.80,0:04:53.80,BottomCenter,,0,0,0,,你需要知道它是通用的
Dialogue: 0,0:04:53.80,0:04:54.60,BottomCenter,,0,0,0,,蟒蛇程序员
Dialogue: 0,0:04:54.60,0:04:56.50,BottomCenter,,0,0,0,,还有很多东西需要学习
Dialogue: 0,0:04:56.50,0:04:59.00,BottomCenter,,0,0,0,,精炼磨练那些技巧写得好
Dialogue: 0,0:04:59.17,0:05:01.73,BottomCenter,,0,0,0,,高效、有据可查的智能代码
Dialogue: 0,0:05:01.87,0:05:03.73,BottomCenter,,0,0,0,,将会有经验
Dialogue: 0,0:05:04.52,0:05:05.60,BottomCenter,,0,0,0,,但这就是科尔文
Dialogue: 0,0:05:05.97,0:05:07.47,BottomCenter,,0,0,0,,现在我们要
Dialogue: 0,0:05:07.47,0:05:09.17,BottomCenter,,0,0,0,,在我们进一步讨论之前
Dialogue: 0,0:05:09.17,0:05:11.93,BottomCenter,,0,0,0,,数据结构和算法
Dialogue: 0,0:05:12.39,0:05:15.19,BottomCenter,,0,0,0,,我们称之为面向对象编程
Dialogue: 0,0:05:15.19,0:05:16.80,BottomCenter,,0,0,0,,我只想喘口气
Dialogue: 0,0:05:17.06,0:05:19.37,BottomCenter,,0,0,0,,并谈论一个叫做递归的东西
Dialogue: 0,0:05:20.00,0:05:21.37,BottomCenter,,0,0,0,,我认为递归
Dialogue: 0,0:05:21.37,0:05:24.56,BottomCenter,,0,0,0,,这是一个非常漂亮的计算结构吗
Dialogue: 0,0:05:24.73,0:05:26.67,BottomCenter,,0,0,0,,它特别美丽，因为它
Dialogue: 0,0:05:26.67,0:05:29.89,BottomCenter,,0,0,0,,与我们迄今为止所看到的一切都不同
Dialogue: 0,0:05:29.89,0:05:33.10,BottomCenter,,0,0,0,,以你思考计算本质的方式
Dialogue: 0,0:05:33.32,0:05:34.93,BottomCenter,,0,0,0,,所以我们一直在思考的一切
Dialogue: 0,0:05:34.93,0:05:36.39,BottomCenter,,0,0,0,,我们在 tamaw 所做的一切
Dialogue: 0,0:05:36.39,0:05:37.76,BottomCenter,,0,0,0,,被函数变量
Dialogue: 0,0:05:37.80,0:05:39.19,BottomCenter,,0,0,0,,循环它和条件
Dialogue: 0,0:05:39.26,0:05:40.06,BottomCenter,,0,0,0,,和递归
Dialogue: 0,0:05:40.06,0:05:41.56,BottomCenter,,0,0,0,,带来了这个非常好的和
Dialogue: 0,0:05:41.56,0:05:43.80,BottomCenter,,0,0,0,,优雅美丽的思维方式
Dialogue: 0,0:05:43.80,0:05:45.67,BottomCenter,,0,0,0,,关于计算的本质
Dialogue: 0,0:05:45.69,0:05:47.47,BottomCenter,,0,0,0,,我们会花一点时间讨论这个
Dialogue: 0,0:05:47.47,0:05:49.52,BottomCenter,,0,0,0,,因为我认为这是一个重要的结构
Dialogue: 0,0:05:49.89,0:05:52.10,BottomCenter,,0,0,0,,理解为一般目的
Dialogue: 0,0:05:52.17,0:05:54.06,BottomCenter,,0,0,0,,计算机科学家和程序员
Dialogue: 0,0:05:54.06,0:05:55.12,BottomCenter,,0,0,0,,和戴夫科学家
Dialogue: 0,0:05:55.87,0:05:56.06,BottomCenter,,0,0,0,,我
Dialogue: 0,0:05:56.06,0:06:00.10,BottomCenter,,0,0,0,,首先让我提醒您的定义
Dialogue: 0,0:06:00.26,0:06:01.87,BottomCenter,,0,0,0,,阶乘运算符
Dialogue: 0,0:06:02.60,0:06:02.97,BottomCenter,,0,0,0,,所以当然
Dialogue: 0,0:06:02.97,0:06:05.39,BottomCenter,,0,0,0,,阶乘运算符用感叹号表示
Dialogue: 0,0:06:05.39,0:06:08.32,BottomCenter,,0,0,0,,标记，它有以下定义
Dialogue: 0,0:06:08.32,0:06:10.69,BottomCenter,,0,0,0,,它的定义如下所示
Dialogue: 0,0:06:10.93,0:06:12.32,BottomCenter,,0,0,0,,仅在
Dialogue: 0,0:06:13.06,0:06:15.32,BottomCenter,,0,0,0,,大于的正整数
Dialogue: 0,0:06:15.32,0:06:16.47,BottomCenter,,0,0,0,,或等于零
Dialogue: 0,0:06:16.76,0:06:18.69,BottomCenter,,0,0,0,,所以阶乘的定义表明如果
Dialogue: 0,0:06:18.69,0:06:19.80,BottomCenter,,0,0,0,,n 为零
Dialogue: 0,0:06:19.80,0:06:21.76,BottomCenter,,0,0,0,,你当然想计算阶乘
Dialogue: 0,0:06:21.80,0:06:23.52,BottomCenter,,0,0,0,,最终阶乘等于一
Dialogue: 0,0:06:23.52,0:06:25.69,BottomCenter,,0,0,0,,所以零阶乘是一
Dialogue: 0,0:06:26.12,0:06:29.06,BottomCenter,,0,0,0,,对于所有大于零的整数
Dialogue: 0,0:06:29.32,0:06:31.50,BottomCenter,,0,0,0,,n 阶乘定义为 n
Dialogue: 0,0:06:31.56,0:06:33.89,BottomCenter,,0,0,0,,乘以 n 减一 乘以 n 减二
Dialogue: 0,0:06:34.00,0:06:36.12,BottomCenter,,0,0,0,,归结为产品
Dialogue: 0,0:06:36.39,0:06:39.06,BottomCenter,,0,0,0,,所有正整数的
Dialogue: 0,0:06:39.12,0:06:41.19,BottomCenter,,0,0,0,,从n降为1
Dialogue: 0,0:06:41.19,0:06:42.50,BottomCenter,,0,0,0,,当然我们以前见过这个
Dialogue: 0,0:06:42.50,0:06:43.80,BottomCenter,,0,0,0,,我们看到弹出窗口
Dialogue: 0,0:06:43.97,0:06:44.76,BottomCenter,,0,0,0,,在
Dialogue: 0,0:06:45.10,0:06:46.87,BottomCenter,,0,0,0,,集合论和概率论
Dialogue: 0,0:06:46.87,0:06:48.47,BottomCenter,,0,0,0,,并时时刻刻遭遇
Dialogue: 0,0:06:48.60,0:06:50.30,BottomCenter,,0,0,0,,标准数学运算符
Dialogue: 0,0:06:51.17,0:06:52.73,BottomCenter,,0,0,0,,所以在我们挖掘之前
Dialogue: 0,0:06:52.87,0:06:53.76,BottomCenter,,0,0,0,,进入递归
Dialogue: 0,0:06:53.76,0:06:55.73,BottomCenter,,0,0,0,,我想成为的主题
Dialogue: 0,0:06:55.76,0:06:56.93,BottomCenter,,0,0,0,,讲座集
Dialogue: 0,0:06:57.10,0:06:58.87,BottomCenter,,0,0,0,,让我们通过练习的方式
Dialogue: 0,0:06:59.17,0:06:59.97,BottomCenter,,0,0,0,,写
Dialogue: 0,0:07:01.19,0:07:02.60,BottomCenter,,0,0,0,,一些Python代码来计算这些
Dialogue: 0,0:07:02.60,0:07:04.19,BottomCenter,,0,0,0,,如果您愿意，您可以暂停视频
Dialogue: 0,0:07:04.19,0:07:05.56,BottomCenter,,0,0,0,,这是一个很好的小练习
Dialogue: 0,0:07:05.56,0:07:07.73,BottomCenter,,0,0,0,,但如果没有的话，我们就一起做吧
Dialogue: 0,0:07:09.60,0:07:11.32,BottomCenter,,0,0,0,,我要写一个函数
Dialogue: 0,0:07:11.50,0:07:14.39,BottomCenter,,0,0,0,,称为阶乘，接受他的输入和 n
Dialogue: 0,0:07:14.60,0:07:16.67,BottomCenter,,0,0,0,,现在让我在深入研究代码之前先说一下
Dialogue: 0,0:07:16.67,0:07:17.17,BottomCenter,,0,0,0,,真的
Dialogue: 0,0:07:17.17,0:07:19.80,BottomCenter,,0,0,0,,我应该在这里有一些代码说确保
Dialogue: 0,0:07:19.80,0:07:22.12,BottomCenter,,0,0,0,,作为一个整数，确保它大于零
Dialogue: 0,0:07:22.19,0:07:24.67,BottomCenter,,0,0,0,,在这些小例子中我通常不会这样做
Dialogue: 0,0:07:24.67,0:07:26.39,BottomCenter,,0,0,0,,因为它只会创建大量代码
Dialogue: 0,0:07:26.73,0:07:28.10,BottomCenter,,0,0,0,,但一般来说
Dialogue: 0,0:07:28.10,0:07:30.06,BottomCenter,,0,0,0,,当你有这样的功能时
Dialogue: 0,0:07:30.10,0:07:32.10,BottomCenter,,0,0,0,,对输入有限制
Dialogue: 0,0:07:32.10,0:07:35.10,BottomCenter,,0,0,0,,你应该把查克森余额放在你的代码中
Dialogue: 0,0:07:35.32,0:07:35.97,BottomCenter,,0,0,0,,确保;确定
Dialogue: 0,0:07:35.97,0:07:38.47,BottomCenter,,0,0,0,,从外部世界传入的内容
Dialogue: 0,0:07:38.52,0:07:40.32,BottomCenter,,0,0,0,,符合你的期望
Dialogue: 0,0:07:40.32,0:07:42.73,BottomCenter,,0,0,0,,但同样为了清洁我不会在这里这样做
Dialogue: 0,0:07:43.50,0:07:45.50,BottomCenter,,0,0,0,,这段代码将计算维多利亚
Dialogue: 0,0:07:45.50,0:07:47.32,BottomCenter,,0,0,0,,我们将在一秒钟内逐步完成该过程
Dialogue: 0,0:07:47.47,0:07:49.69,BottomCenter,,0,0,0,,你可以看到它在最后返回
Dialogue: 0,0:07:49.69,0:07:51.37,BottomCenter,,0,0,0,,再次记住 return 的作用
Dialogue: 0,0:07:51.37,0:07:52.60,BottomCenter,,0,0,0,,它把它发回来
Dialogue: 0,0:07:52.97,0:07:54.87,BottomCenter,,0,0,0,,到调用函数
Dialogue: 0,0:07:54.87,0:07:56.19,BottomCenter,,0,0,0,,而这种区别
Dialogue: 0,0:07:56.50,0:07:59.12,BottomCenter,,0,0,0,,返回和打印之间很重要
Dialogue: 0,0:07:59.30,0:08:01.56,BottomCenter,,0,0,0,,从来没有像现在这样重要
Dialogue: 0,0:08:01.56,0:08:02.47,BottomCenter,,0,0,0,,我们即将
Dialogue: 0,0:08:02.69,0:08:04.97,BottomCenter,,0,0,0,,几分钟后开始讨论递归
Dialogue: 0,0:08:05.19,0:08:05.60,BottomCenter,,0,0,0,,直到那时
Dialogue: 0,0:08:05.60,0:08:07.39,BottomCenter,,0,0,0,,让我们继续看一下这段代码并确保我们
Dialogue: 0,0:08:07.39,0:08:08.19,BottomCenter,,0,0,0,,明白它
Dialogue: 0,0:08:08.50,0:08:09.69,BottomCenter,,0,0,0,,所以事实上当然
Dialogue: 0,0:08:09.69,0:08:10.47,BottomCenter,,0,0,0,,你可以在这里看到
Dialogue: 0,0:08:10.47,0:08:12.80,BottomCenter,,0,0,0,,将是我发回的变量
Dialogue: 0,0:08:13.00,0:08:15.60,BottomCenter,,0,0,0,,我很抱歉它们的颜色编码应该相同
Dialogue: 0,0:08:16.26,0:08:17.80,BottomCenter,,0,0,0,,我将其初始化为一
Dialogue: 0,0:08:17.80,0:08:20.06,BottomCenter,,0,0,0,,这将坚持下去
Dialogue: 0,0:08:20.47,0:08:21.87,BottomCenter,,0,0,0,,运行产品
Dialogue: 0,0:08:22.17,0:08:24.69,BottomCenter,,0,0,0,,I 等于 1 是一个计数器
Dialogue: 0,0:08:24.80,0:08:25.87,BottomCenter,,0,0,0,,那将会
Dialogue: 0,0:08:25.87,0:08:27.37,BottomCenter,,0,0,0,,正如你在我的循环中看到的
Dialogue: 0,0:08:27.37,0:08:28.97,BottomCenter,,0,0,0,,当 I 小于等于 1 时
Dialogue: 0,0:08:29.10,0:08:31.30,BottomCenter,,0,0,0,,将从一到二到三到四
Dialogue: 0,0:08:31.30,0:08:32.39,BottomCenter,,0,0,0,,直到 n
Dialogue: 0,0:08:32.52,0:08:35.12,BottomCenter,,0,0,0,,我当然会去电脑运行产品
Dialogue: 0,0:08:35.60,0:08:37.00,BottomCenter,,0,0,0,,好吧，这是我的增量
Dialogue: 0,0:08:37.00,0:08:38.70,BottomCenter,,0,0,0,,我会在第二次回到这一行
Dialogue: 0,0:08:38.76,0:08:39.12,BottomCenter,,0,0,0,,注意
Dialogue: 0,0:08:39.12,0:08:41.39,BottomCenter,,0,0,0,,顺便说一句，我只想介绍一下简写
Dialogue: 0,0:08:41.73,0:08:42.60,BottomCenter,,0,0,0,,我想做什么
Dialogue: 0,0:08:42.60,0:08:44.50,BottomCenter,,0,0,0,,在狂野循环的每次迭代中
Dialogue: 0,0:08:44.50,0:08:46.00,BottomCenter,,0,0,0,,是我想增加
Dialogue: 0,0:08:46.16,0:08:48.37,BottomCenter,,0,0,0,,我由一我承担价值一
Dialogue: 0,0:08:48.37,0:08:51.16,BottomCenter,,0,0,0,,然后两个然后三个然后四个等等
Dialogue: 0,0:08:51.39,0:08:52.57,BottomCenter,,0,0,0,,这是一个小简写
Dialogue: 0,0:08:52.57,0:08:54.16,BottomCenter,,0,0,0,,因为这是很常见的
Dialogue: 0,0:08:54.79,0:08:56.50,BottomCenter,,0,0,0,,我们说我的表达方式
Dialogue: 0,0:08:56.70,0:09:00.52,BottomCenter,,0,0,0,,加等于一，这意味着 I 等于 I 加一
Dialogue: 0,0:09:01.20,0:09:03.76,BottomCenter,,0,0,0,,所以在每次迭代中我都会将 I 加一
Dialogue: 0,0:09:03.76,0:09:04.76,BottomCenter,,0,0,0,,我想做什么
Dialogue: 0,0:09:04.76,0:09:07.92,BottomCenter,,0,0,0,,我想保留正在运行的产品
Dialogue: 0,0:09:08.16,0:09:09.87,BottomCenter,,0,0,0,,所以事实一开始就是一个
Dialogue: 0,0:09:10.00,0:09:13.26,BottomCenter,,0,0,0,,我把它乘以一，当然是一
Dialogue: 0,0:09:13.26,0:09:14.60,BottomCenter,,0,0,0,,下次通过我有两个
Dialogue: 0,0:09:14.60,0:09:17.07,BottomCenter,,0,0,0,,将该乘积乘以二
Dialogue: 0,0:09:17.29,0:09:19.10,BottomCenter,,0,0,0,,下次通过乘以三
Dialogue: 0,0:09:19.10,0:09:20.20,BottomCenter,,0,0,0,,下次通过乘以四
Dialogue: 0,0:09:20.20,0:09:23.00,BottomCenter,,0,0,0,,你可以看到我正在保留一个正在运行的产品
Dialogue: 0,0:09:23.29,0:09:26.52,BottomCenter,,0,0,0,,fact 等于fact 的先前值
Dialogue: 0,0:09:26.66,0:09:29.10,BottomCenter,,0,0,0,,乘以 I 的当前值
Dialogue: 0,0:09:29.29,0:09:31.60,BottomCenter,,0,0,0,,我经历了狂野循环的整个过程
Dialogue: 0,0:09:31.60,0:09:34.47,BottomCenter,,0,0,0,,当然包括结束，因为结束阶乘是
Dialogue: 0,0:09:34.60,0:09:38.16,BottomCenter,,0,0,0,,结束时间并一直减一到
Dialogue: 0,0:09:38.92,0:09:40.37,BottomCenter,,0,0,0,,一然后我又胖了
Dialogue: 0,0:09:40.73,0:09:42.10,BottomCenter,,0,0,0,,顺便说一句
Dialogue: 0,0:09:42.10,0:09:43.39,BottomCenter,,0,0,0,,请注意，在前面的
Dialogue: 0,0:09:43.39,0:09:44.39,BottomCenter,,0,0,0,,阶乘的定义
Dialogue: 0,0:09:44.39,0:09:45.73,BottomCenter,,0,0,0,,特殊情况零
Dialogue: 0,0:09:46.12,0:09:48.16,BottomCenter,,0,0,0,,好吧，我说零阶乘是一
Dialogue: 0,0:09:48.29,0:09:49.89,BottomCenter,,0,0,0,,然后大于零的就是这个
Dialogue: 0,0:09:49.89,0:09:53.07,BottomCenter,,0,0,0,,我这里似乎没有零的特殊情况
Dialogue: 0,0:09:53.07,0:09:54.66,BottomCenter,,0,0,0,,所以让我们确保这有效
Dialogue: 0,0:09:54.76,0:09:56.37,BottomCenter,,0,0,0,,好的，让我们运行一下代码
Dialogue: 0,0:09:56.37,0:09:57.97,BottomCenter,,0,0,0,,是零事实是一
Dialogue: 0,0:09:57.97,0:10:00.92,BottomCenter,,0,0,0,,当 I 小于等于时 I 为 1
Dialogue: 0,0:10:00.92,0:10:03.10,BottomCenter,,0,0,0,,而 1 小于等于 0
Dialogue: 0,0:10:03.16,0:10:05.39,BottomCenter,,0,0,0,,这是否为 true 值？
Dialogue: 0,0:10:05.50,0:10:08.29,BottomCenter,,0,0,0,,那么我突然出现在这里会发生什么以及我该返回哪里
Dialogue: 0,0:10:08.60,0:10:09.26,BottomCenter,,0,0,0,,一
Dialogue: 0,0:10:09.26,0:10:10.79,BottomCenter,,0,0,0,,这是零阶乘，不错
Dialogue: 0,0:10:10.79,0:10:12.16,BottomCenter,,0,0,0,,我可以举一个特殊的例子
Dialogue: 0,0:10:12.26,0:10:13.70,BottomCenter,,0,0,0,,我可以说它等于零
Dialogue: 0,0:10:13.70,0:10:15.37,BottomCenter,,0,0,0,,否则返回一个
Dialogue: 0,0:10:15.37,0:10:17.47,BottomCenter,,0,0,0,,但它只是因为方式而出现
Dialogue: 0,0:10:17.57,0:10:20.16,BottomCenter,,0,0,0,,阶乘在此迭代方案中定义
Dialogue: 0,0:10:21.60,0:10:23.57,BottomCenter,,0,0,0,,完美找到迭代方案
Dialogue: 0,0:10:23.57,0:10:27.00,BottomCenter,,0,0,0,,让我们回顾一下并确保我们了解如何
Dialogue: 0,0:10:27.33,0:10:29.10,BottomCenter,,0,0,0,,事实和我正在递增
Dialogue: 0,0:10:29.10,0:10:31.10,BottomCenter,,0,0,0,,因为这将引导我们到达我们想去的地方
Dialogue: 0,0:10:31.10,0:10:33.00,BottomCenter,,0,0,0,,当我们开始谈论递归时
Dialogue: 0,0:10:33.33,0:10:35.66,BottomCenter,,0,0,0,,假设我想用 5 来调用阶乘
Dialogue: 0,0:10:35.66,0:10:37.00,BottomCenter,,0,0,0,,所以我想计算
Dialogue: 0,0:10:37.29,0:10:39.50,BottomCenter,,0,0,0,,五次 四次 三次 两次
Dialogue: 0,0:10:39.52,0:10:40.33,BottomCenter,,0,0,0,,一
Dialogue: 0,0:10:41.00,0:10:41.73,BottomCenter,,0,0,0,,好的
Dialogue: 0,0:10:41.73,0:10:42.73,BottomCenter,,0,0,0,,第一次迭代通过
Dialogue: 0,0:10:42.73,0:10:44.73,BottomCenter,,0,0,0,,第一次通过事实是我曾经
Dialogue: 0,0:10:44.73,0:10:45.57,BottomCenter,,0,0,0,,我要
Dialogue: 0,0:10:45.60,0:10:48.92,BottomCenter,,0,0,0,,当我迭代时，在这里做两列显示这些值
Dialogue: 0,0:10:49.26,0:10:52.07,BottomCenter,,0,0,0,,该布尔表达式当然评估 true
Dialogue: 0,0:10:52.12,0:10:53.76,BottomCenter,,0,0,0,,所以我开始讨论
Dialogue: 0,0:10:54.07,0:10:55.87,BottomCenter,,0,0,0,,进入狂野之瓶，我该怎么办
Dialogue: 0,0:10:55.87,0:10:58.66,BottomCenter,,0,0,0,,我说事实等于事实乘以我
Dialogue: 0,0:10:58.66,0:11:00.20,BottomCenter,,0,0,0,,那么事实会怎样
Dialogue: 0,0:11:00.20,0:11:02.37,BottomCenter,,0,0,0,,一以及我将成为什么
Dialogue: 0,0:11:02.39,0:11:04.76,BottomCenter,,0,0,0,,两个，因为我就在那里加了 1
Dialogue: 0,0:11:05.10,0:11:07.57,BottomCenter,,0,0,0,,回来二仍然小于等于五
Dialogue: 0,0:11:07.87,0:11:10.10,BottomCenter,,0,0,0,,请潜回狂野蓝色的身体里
Dialogue: 0,0:11:10.29,0:11:12.92,BottomCenter,,0,0,0,,现在fact将是fact的当前值
Dialogue: 0,0:11:12.92,0:11:14.66,BottomCenter,,0,0,0,,乘以 I 的当前值
Dialogue: 0,0:11:14.66,0:11:15.79,BottomCenter,,0,0,0,,一乘二
Dialogue: 0,0:11:15.92,0:11:17.52,BottomCenter,,0,0,0,,很好，所以事实是两个
Dialogue: 0,0:11:17.70,0:11:19.07,BottomCenter,,0,0,0,,将 I 加一
Dialogue: 0,0:11:19.10,0:11:21.37,BottomCenter,,0,0,0,,返回蓝色表达式为 true
Dialogue: 0,0:11:21.50,0:11:24.39,BottomCenter,,0,0,0,,将这两个相乘我得到六个增量
Dialogue: 0,0:11:24.70,0:11:25.60,BottomCenter,,0,0,0,,让我们再来一次
Dialogue: 0,0:11:26.73,0:11:29.20,BottomCenter,,0,0,0,,六和四二十四增量的乘积
Dialogue: 0,0:11:29.20,0:11:30.79,BottomCenter,,0,0,0,,好吧，现在我们得开始小心点了
Dialogue: 0,0:11:30.79,0:11:32.10,BottomCenter,,0,0,0,,因为我们已经接近尾声了
Dialogue: 0,0:11:32.79,0:11:35.39,BottomCenter,,0,0,0,,所以我五岁了我回来了
Dialogue: 0,0:11:35.39,0:11:37.73,BottomCenter,,0,0,0,,五小于或等于五
Dialogue: 0,0:11:37.76,0:11:39.73,BottomCenter,,0,0,0,,肯定会回来
Dialogue: 0,0:11:39.92,0:11:42.87,BottomCenter,,0,0,0,,当然，将这两个值相乘即可得到 120
Dialogue: 0,0:11:43.07,0:11:44.70,BottomCenter,,0,0,0,,现在将 I 加一
Dialogue: 0,0:11:44.73,0:11:45.60,BottomCenter,,0,0,0,,我回来了
Dialogue: 0,0:11:45.60,0:11:47.57,BottomCenter,,0,0,0,,六 lescenter 等于五
Dialogue: 0,0:11:47.57,0:11:49.33,BottomCenter,,0,0,0,,不回来了
Dialogue: 0,0:11:49.33,0:11:51.70,BottomCenter,,0,0,0,,跳出 while 循环体返回事实
Dialogue: 0,0:11:51.73,0:11:53.89,BottomCenter,,0,0,0,,我已经完成了，我已经有 120 个了
Dialogue: 0,0:11:54.33,0:11:55.12,BottomCenter,,0,0,0,,好的
Dialogue: 0,0:11:55.87,0:11:57.87,BottomCenter,,0,0,0,,你可以在这里看到我们所做的是
Dialogue: 0,0:11:57.87,0:11:58.87,BottomCenter,,0,0,0,,在每次迭代中
Dialogue: 0,0:11:58.87,0:12:01.16,BottomCenter,,0,0,0,,我们已经准确地计算出了我们所承诺的
Dialogue: 0,0:12:01.37,0:12:04.87,BottomCenter,,0,0,0,,这条线正在计算一个正在运行的产品
Dialogue: 0,0:12:05.00,0:12:06.89,BottomCenter,,0,0,0,,所以当我进行第五次迭代时
Dialogue: 0,0:12:06.89,0:12:09.10,BottomCenter,,0,0,0,,我乘以五乘以四乘以三
Dialogue: 0,0:12:09.10,0:12:10.26,BottomCenter,,0,0,0,,乘以二乘以一
Dialogue: 0,0:12:10.33,0:12:11.66,BottomCenter,,0,0,0,,当我进行这次迭代时
Dialogue: 0,0:12:11.66,0:12:13.97,BottomCenter,,0,0,0,,我乘以四乘三乘二乘一
Dialogue: 0,0:12:13.97,0:12:15.12,BottomCenter,,0,0,0,,等等等等
Dialogue: 0,0:12:15.70,0:12:17.73,BottomCenter,,0,0,0,,现在有一些有趣的东西看起来
Dialogue: 0,0:12:17.79,0:12:20.07,BottomCenter,,0,0,0,,在这个迭代过程中
Dialogue: 0,0:12:20.39,0:12:23.07,BottomCenter,,0,0,0,,因为你在这里注意到的是
Dialogue: 0,0:12:23.33,0:12:26.16,BottomCenter,,0,0,0,,当我计算五个阶乘时
Dialogue: 0,0:12:26.20,0:12:27.60,BottomCenter,,0,0,0,,一路上
Dialogue: 0,0:12:27.79,0:12:29.70,BottomCenter,,0,0,0,,我还计算了四个阶乘
Dialogue: 0,0:12:29.70,0:12:31.70,BottomCenter,,0,0,0,,一路上我计算了三个阶乘
Dialogue: 0,0:12:31.70,0:12:33.60,BottomCenter,,0,0,0,,二阶乘和一阶乘
Dialogue: 0,0:12:34.26,0:12:34.76,BottomCenter,,0,0,0,,那种
Dialogue: 0,0:12:34.76,0:12:35.92,BottomCenter,,0,0,0,,如果你想一想，这是有道理的
Dialogue: 0,0:12:35.92,0:12:37.33,BottomCenter,,0,0,0,,产品的性质
Dialogue: 0,0:12:37.66,0:12:39.16,BottomCenter,,0,0,0,,那么什么是端阶乘
Dialogue: 0,0:12:39.16,0:12:41.76,BottomCenter,,0,0,0,,结束时间 结束减一 结束减二
Dialogue: 0,0:12:41.76,0:12:43.89,BottomCenter,,0,0,0,,归结为一口井减去一阶乘的结果是多少
Dialogue: 0,0:12:43.89,0:12:46.50,BottomCenter,,0,0,0,,减一结束减二减一
Dialogue: 0,0:12:46.73,0:12:48.60,BottomCenter,,0,0,0,,所以得到最终阶乘
Dialogue: 0,0:12:48.60,0:12:50.37,BottomCenter,,0,0,0,,我有点必须结束减一
Dialogue: 0,0:12:50.37,0:12:51.52,BottomCenter,,0,0,0,,并得到结果减一
Dialogue: 0,0:12:51.52,0:12:53.39,BottomCenter,,0,0,0,,我必须起床并减去两点
Dialogue: 0,0:12:53.97,0:12:55.37,BottomCenter,,0,0,0,,所以我可以
Dialogue: 0,0:12:55.52,0:12:58.00,BottomCenter,,0,0,0,,稍微不同地思考这个定义
Dialogue: 0,0:12:58.00,0:13:01.92,BottomCenter,,0,0,0,,我可以定义端阶乘或五阶乘
Dialogue: 0,0:13:01.92,0:13:03.50,BottomCenter,,0,0,0,,假设要实例化它
Dialogue: 0,0:13:03.57,0:13:05.50,BottomCenter,,0,0,0,,五乘以四阶乘
Dialogue: 0,0:13:05.70,0:13:07.07,BottomCenter,,0,0,0,,四阶乘是什么
Dialogue: 0,0:13:07.07,0:13:08.97,BottomCenter,,0,0,0,,它是四乘以三的阶乘
Dialogue: 0,0:13:09.26,0:13:10.33,BottomCenter,,0,0,0,,这是有道理的吧
Dialogue: 0,0:13:10.33,0:13:13.57,BottomCenter,,0,0,0,,因为它是 3 2 1 乘积的四倍
Dialogue: 0,0:13:13.57,0:13:16.57,BottomCenter,,0,0,0,,或者 3 2 1 的乘积是多少，它是三个阶乘
Dialogue: 0,0:13:17.12,0:13:18.10,BottomCenter,,0,0,0,,这有点有趣
Dialogue: 0,0:13:18.10,0:13:19.97,BottomCenter,,0,0,0,,所以让我重新定义
Dialogue: 0,0:13:20.39,0:13:21.89,BottomCenter,,0,0,0,,阶乘的这个定义
Dialogue: 0,0:13:21.89,0:13:23.92,BottomCenter,,0,0,0,,所以我们对阶乘的最初定义是
Dialogue: 0,0:13:23.97,0:13:26.26,BottomCenter,,0,0,0,,如果零结尾和阶乘是一则好
Dialogue: 0,0:13:26.26,0:13:27.07,BottomCenter,,0,0,0,,简单的
Dialogue: 0,0:13:27.89,0:13:29.07,BottomCenter,,0,0,0,,如果大于零
Dialogue: 0,0:13:29.07,0:13:31.76,BottomCenter,,0,0,0,,那么它是 n 之间的整数的乘积
Dialogue: 0,0:13:31.76,0:13:32.73,BottomCenter,,0,0,0,,和一个
Dialogue: 0,0:13:33.50,0:13:34.76,BottomCenter,,0,0,0,,所以让我拿走我们的
Dialogue: 0,0:13:34.76,0:13:37.60,BottomCenter,,0,0,0,,我们刚刚从迭代代码中获得的见解
Dialogue: 0,0:13:37.70,0:13:40.70,BottomCenter,,0,0,0,,并重新定义阶乘
Dialogue: 0,0:13:40.76,0:13:42.57,BottomCenter,,0,0,0,,这里是递归的
Dialogue: 0,0:13:42.92,0:13:43.57,BottomCenter,,0,0,0,,我要定义
Dialogue: 0,0:13:43.57,0:13:45.00,BottomCenter,,0,0,0,,我会告诉你递归是什么意思
Dialogue: 0,0:13:45.00,0:13:47.73,BottomCenter,,0,0,0,,一般来说，在一秒钟内
Dialogue: 0,0:13:48.50,0:13:51.50,BottomCenter,,0,0,0,,递归定义有两个组成部分
Dialogue: 0,0:13:51.50,0:13:54.10,BottomCenter,,0,0,0,,基本情况和递归情况
Dialogue: 0,0:13:54.10,0:13:56.00,BottomCenter,,0,0,0,,有时你可以有多个基本案例
Dialogue: 0,0:13:56.00,0:13:58.60,BottomCenter,,0,0,0,,顺便说一下，所以基本情况保持不变
Dialogue: 0,0:13:58.70,0:14:01.33,BottomCenter,,0,0,0,,你能做的最简单的事情就是说给我
Dialogue: 0,0:14:01.76,0:14:04.07,BottomCenter,,0,0,0,,零阶乘，我只告诉你一个
Dialogue: 0,0:14:04.07,0:14:06.92,BottomCenter,,0,0,0,,没有什么可以计算的，这就是字面上的定义
Dialogue: 0,0:14:07.66,0:14:10.00,BottomCenter,,0,0,0,,对于所有其他大于零的整数
Dialogue: 0,0:14:10.10,0:14:11.87,BottomCenter,,0,0,0,,而不是定义感染性磅
Dialogue: 0,0:14:11.87,0:14:13.70,BottomCenter,,0,0,0,,n 乘以 n 减一倍 z 再减二
Dialogue: 0,0:14:13.87,0:14:14.87,BottomCenter,,0,0,0,,奇怪地减少到一
Dialogue: 0,0:14:14.89,0:14:17.26,BottomCenter,,0,0,0,,我要定义 n 阶乘 vn 次
Dialogue: 0,0:14:17.26,0:14:18.79,BottomCenter,,0,0,0,,并减去一阶乘
Dialogue: 0,0:14:19.00,0:14:22.60,BottomCenter,,0,0,0,,首先我们同意绝对是 100%
Dialogue: 0,0:14:22.79,0:14:24.10,BottomCenter,,0,0,0,,正确的原因
Dialogue: 0,0:14:24.12,0:14:24.87,BottomCenter,,0,0,0,,因为
Dialogue: 0,0:14:24.87,0:14:27.73,BottomCenter,,0,0,0,,负一阶乘等于负一乘以负二
Dialogue: 0,0:14:27.76,0:14:29.20,BottomCenter,,0,0,0,,通过前面的定义
Dialogue: 0,0:14:29.73,0:14:32.16,BottomCenter,,0,0,0,,但想象一下我没有给你之前的定义
Dialogue: 0,0:14:32.16,0:14:33.97,BottomCenter,,0,0,0,,假设你不知道阶乘是什么
Dialogue: 0,0:14:33.97,0:14:35.07,BottomCenter,,0,0,0,,你来找我说
Dialogue: 0,0:14:35.10,0:14:36.10,BottomCenter,,0,0,0,,嘿按一个品种
Dialogue: 0,0:14:36.37,0:14:38.70,BottomCenter,,0,0,0,,什么是最终阶乘，我说哦，这真的很简单
Dialogue: 0,0:14:38.70,0:14:41.29,BottomCenter,,0,0,0,,如果你问我阶乘为零，答案是一
Dialogue: 0,0:14:41.29,0:14:44.00,BottomCenter,,0,0,0,,如果对于所有其他值
Dialogue: 0,0:14:44.47,0:14:46.52,BottomCenter,,0,0,0,,结束阶乘等于结束时间
Dialogue: 0,0:14:46.52,0:14:48.10,BottomCenter,,0,0,0,,并减去一阶乘
Dialogue: 0,0:14:49.33,0:14:50.39,BottomCenter,,0,0,0,,你可能会说好
Dialogue: 0,0:14:50.52,0:14:52.87,BottomCenter,,0,0,0,,好的，但是减去一个阶乘后结果是多少
Dialogue: 0,0:14:52.87,0:14:53.92,BottomCenter,,0,0,0,,我是一个很容易的人
Dialogue: 0,0:14:53.92,0:14:57.07,BottomCenter,,0,0,0,,最后减去一倍再减去二阶乘
Dialogue: 0,0:14:57.60,0:14:58.92,BottomCenter,,0,0,0,,你会感觉到我有点
Dialogue: 0,0:14:58.92,0:15:00.52,BottomCenter,,0,0,0,,和你玩弄一点
Dialogue: 0,0:15:00.73,0:15:02.97,BottomCenter,,0,0,0,,因为我有点定义
Dialogue: 0,0:15:03.26,0:15:05.92,BottomCenter,,0,0,0,,就其自身而言的函数
Dialogue: 0,0:15:05.92,0:15:08.10,BottomCenter,,0,0,0,,这正是递归的含义
Dialogue: 0,0:15:08.10,0:15:10.16,BottomCenter,,0,0,0,,但我实际上并没有惹你生气
Dialogue: 0,0:15:10.20,0:15:13.20,BottomCenter,,0,0,0,,事实上这个定义是有效的所以让我们看看为什么
Dialogue: 0,0:15:14.66,0:15:16.89,BottomCenter,,0,0,0,,假设你问我三阶乘是什么
Dialogue: 0,0:15:16.89,0:15:19.07,BottomCenter,,0,0,0,,我说它是三乘以二的阶乘
Dialogue: 0,0:15:19.60,0:15:21.52,BottomCenter,,0,0,0,,所以你取得了一点进步
Dialogue: 0,0:15:21.52,0:15:22.97,BottomCenter,,0,0,0,,你知道这是三倍的东西
Dialogue: 0,0:15:22.97,0:15:24.57,BottomCenter,,0,0,0,,但你不知道那是什么
Dialogue: 0,0:15:24.70,0:15:26.37,BottomCenter,,0,0,0,,所以你问我两个阶乘是多少
Dialogue: 0,0:15:26.37,0:15:28.00,BottomCenter,,0,0,0,,我告诉你两次是什么
Dialogue: 0,0:15:28.20,0:15:29.29,BottomCenter,,0,0,0,,一个阶乘
Dialogue: 0,0:15:29.89,0:15:31.47,BottomCenter,,0,0,0,,我们取得了一些进步
Dialogue: 0,0:15:31.47,0:15:33.29,BottomCenter,,0,0,0,,一个阶乘是多少哦，这很简单
Dialogue: 0,0:15:33.29,0:15:35.00,BottomCenter,,0,0,0,,这是一次零阶乘
Dialogue: 0,0:15:35.26,0:15:36.47,BottomCenter,,0,0,0,,什么是零阶乘
Dialogue: 0,0:15:36.47,0:15:37.26,BottomCenter,,0,0,0,,啊哈
Dialogue: 0,0:15:37.60,0:15:38.66,BottomCenter,,0,0,0,,基本情况
Dialogue: 0,0:15:38.66,0:15:40.07,BottomCenter,,0,0,0,,零阶乘是一
Dialogue: 0,0:15:40.47,0:15:41.87,BottomCenter,,0,0,0,,现在你知道什么
Dialogue: 0,0:15:41.92,0:15:43.20,BottomCenter,,0,0,0,,你知道三个工厂
Dialogue: 0,0:15:43.20,0:15:46.29,BottomCenter,,0,0,0,,三乘二乘一乘一基本情况
Dialogue: 0,0:15:46.60,0:15:49.73,BottomCenter,,0,0,0,,所以这似乎是一个奇怪的定义
Dialogue: 0,0:15:49.73,0:15:50.89,BottomCenter,,0,0,0,,因为我正在定义
Dialogue: 0,0:15:50.89,0:15:52.97,BottomCenter,,0,0,0,,就其自身而言的函数
Dialogue: 0,0:15:53.39,0:15:56.20,BottomCenter,,0,0,0,,但最终如果我沿着那条路走下去
Dialogue: 0,0:15:56.20,0:15:56.57,BottomCenter,,0,0,0,,因为
Dialogue: 0,0:15:56.57,0:15:58.39,BottomCenter,,0,0,0,,注意到这个问题变得越来越简单
Dialogue: 0,0:15:58.39,0:15:59.79,BottomCenter,,0,0,0,,减一
Dialogue: 0,0:15:59.89,0:16:01.66,BottomCenter,,0,0,0,,我最终会到达
Dialogue: 0,0:16:01.76,0:16:02.76,BottomCenter,,0,0,0,,基本情况
Dialogue: 0,0:16:02.89,0:16:04.52,BottomCenter,,0,0,0,,我将会建立起
Dialogue: 0,0:16:04.60,0:16:06.47,BottomCenter,,0,0,0,,一路上的表情
Dialogue: 0,0:16:06.87,0:16:08.12,BottomCenter,,0,0,0,,当你问我三个阶乘时
Dialogue: 0,0:16:08.12,0:16:09.87,BottomCenter,,0,0,0,,我说的是三乘以二的阶乘
Dialogue: 0,0:16:09.92,0:16:10.26,BottomCenter,,0,0,0,,进而
Dialogue: 0,0:16:10.26,0:16:11.92,BottomCenter,,0,0,0,,你去弄清楚什么是二阶乘
Dialogue: 0,0:16:11.92,0:16:13.00,BottomCenter,,0,0,0,,然后你回来说
Dialogue: 0,0:16:13.00,0:16:14.87,BottomCenter,,0,0,0,,赔率是该数量的三倍
Dialogue: 0,0:16:15.00,0:16:17.37,BottomCenter,,0,0,0,,然后你对两个和一个做同样的事情
Dialogue: 0,0:16:17.37,0:16:18.66,BottomCenter,,0,0,0,,最终为零
Dialogue: 0,0:16:18.66,0:16:21.76,BottomCenter,,0,0,0,,这就是递归定义的本质
Dialogue: 0,0:16:21.89,0:16:22.73,BottomCenter,,0,0,0,,而且当然
Dialogue: 0,0:16:22.73,0:16:25.37,BottomCenter,,0,0,0,,我们现在可以在 python 中实现它
Dialogue: 0,0:16:25.37,0:16:26.60,BottomCenter,,0,0,0,,以非常美丽的方式
Dialogue: 0,0:16:26.60,0:16:29.20,BottomCenter,,0,0,0,,所以让我们继续进行递归
Dialogue: 0,0:16:29.50,0:16:30.70,BottomCenter,,0,0,0,,与迭代
Dialogue: 0,0:16:30.70,0:16:33.92,BottomCenter,,0,0,0,,所以我将参考狂野和四循环实现
Dialogue: 0,0:16:33.92,0:16:35.29,BottomCenter,,0,0,0,,作为迭代解决方案
Dialogue: 0,0:16:35.29,0:16:36.52,BottomCenter,,0,0,0,,因为你正在迭代
Dialogue: 0,0:16:36.70,0:16:38.87,BottomCenter,,0,0,0,,我们要做的就是递归
Dialogue: 0,0:16:38.87,0:16:40.79,BottomCenter,,0,0,0,,一会儿你就会明白为什么
Dialogue: 0,0:16:40.79,0:16:41.92,BottomCenter,,0,0,0,,这两者之间的区别
Dialogue: 0,0:16:41.92,0:16:43.10,BottomCenter,,0,0,0,,区别是什么
Dialogue: 0,0:16:44.66,0:16:46.07,BottomCenter,,0,0,0,,请定义请
Dialogue: 0,0:16:46.07,0:16:46.70,BottomCenter,,0,0,0,,我写一个函数
Dialogue: 0,0:16:46.70,0:16:47.97,BottomCenter,,0,0,0,,递归函数
Dialogue: 0,0:16:47.97,0:16:49.89,BottomCenter,,0,0,0,,接受参数 end 的阶乘
Dialogue: 0,0:16:49.89,0:16:52.07,BottomCenter,,0,0,0,,再次我不会检查参数是否大于
Dialogue: 0,0:16:52.07,0:16:52.92,BottomCenter,,0,0,0,,我们归零
Dialogue: 0,0:16:53.60,0:16:54.70,BottomCenter,,0,0,0,,基本情况很简单
Dialogue: 0,0:16:54.70,0:16:56.70,BottomCenter,,0,0,0,,如果 n 等于 0 返回 1
Dialogue: 0,0:16:56.70,0:16:57.33,BottomCenter,,0,0,0,,并注意这里
Dialogue: 0,0:16:57.33,0:16:59.66,BottomCenter,,0,0,0,,我现在要明确基本情况
Dialogue: 0,0:16:59.79,0:17:02.29,BottomCenter,,0,0,0,,好的，这很简单而且绝对正确
Dialogue: 0,0:17:02.37,0:17:03.39,BottomCenter,,0,0,0,,不是一个很有用的功能
Dialogue: 0,0:17:03.39,0:17:04.59,BottomCenter,,0,0,0,,因为对于所有不同的事件
Dialogue: 0,0:17:04.59,0:17:05.56,BottomCenter,,0,0,0,,无事可做
Dialogue: 0,0:17:05.93,0:17:08.97,BottomCenter,,0,0,0,,现在如果 n 大于零我该怎么办
Dialogue: 0,0:17:09.29,0:17:10.97,BottomCenter,,0,0,0,,如果 end 大于零
Dialogue: 0,0:17:11.20,0:17:14.93,BottomCenter,,0,0,0,,我想计算结束时间并减去一个阶乘
Dialogue: 0,0:17:15.09,0:17:17.29,BottomCenter,,0,0,0,,那么我如何计算 end 减去一阶乘
Dialogue: 0,0:17:17.47,0:17:18.86,BottomCenter,,0,0,0,,我有一个函数可以做到这一点
Dialogue: 0,0:17:19.52,0:17:21.67,BottomCenter,,0,0,0,,那么如果我只是说会发生什么
Dialogue: 0,0:17:21.86,0:17:25.36,BottomCenter,,0,0,0,,返回 n 减一的结束时间阶乘
Dialogue: 0,0:17:25.50,0:17:26.90,BottomCenter,,0,0,0,,有递归
Dialogue: 0,0:17:26.97,0:17:29.76,BottomCenter,,0,0,0,,该函数定义和该函数调用
Dialogue: 0,0:17:29.76,0:17:30.97,BottomCenter,,0,0,0,,是同一件事
Dialogue: 0,0:17:31.17,0:17:33.97,BottomCenter,,0,0,0,,你正在递归地调用自己
Dialogue: 0,0:17:34.47,0:17:36.36,BottomCenter,,0,0,0,,现在也注意到这个返回
Dialogue: 0,0:17:36.36,0:17:38.13,BottomCenter,,0,0,0,,我之前说过当我们做解决方案的编辑时
Dialogue: 0,0:17:38.13,0:17:40.26,BottomCenter,,0,0,0,,这真的非常非常重要
Dialogue: 0,0:17:40.26,0:17:42.29,BottomCenter,,0,0,0,,一会儿你就会明白为什么它很重要
Dialogue: 0,0:17:42.50,0:17:45.13,BottomCenter,,0,0,0,,但请注意我没有打印我没有分配
Dialogue: 0,0:17:45.13,0:17:46.47,BottomCenter,,0,0,0,,事实上这里没有变量
Dialogue: 0,0:17:46.47,0:17:49.20,BottomCenter,,0,0,0,,没有事实 没有事实等于
Dialogue: 0,0:17:49.20,0:17:51.52,BottomCenter,,0,0,0,,我只是构建一个表达式
Dialogue: 0,0:17:51.52,0:17:53.13,BottomCenter,,0,0,0,,我们马上就会看到
Dialogue: 0,0:17:53.86,0:17:55.47,BottomCenter,,0,0,0,,将其放入 python 中即可运行
Dialogue: 0,0:17:55.47,0:17:56.76,BottomCenter,,0,0,0,,它会为你返回
Dialogue: 0,0:17:57.00,0:17:59.17,BottomCenter,,0,0,0,,5 阶乘 10 阶乘 随便你
Dialogue: 0,0:18:00.29,0:18:02.50,BottomCenter,,0,0,0,,看起来有点像我们在作弊
Dialogue: 0,0:18:02.79,0:18:04.52,BottomCenter,,0,0,0,,看起来不应该起作用
Dialogue: 0,0:18:04.52,0:18:06.97,BottomCenter,,0,0,0,,但现在让我们看看它为什么有效
Dialogue: 0,0:18:07.52,0:18:09.06,BottomCenter,,0,0,0,,和这里的魔力
Dialogue: 0,0:18:09.20,0:18:11.32,BottomCenter,,0,0,0,,是不是虽然看起来我们是
Dialogue: 0,0:18:11.32,0:18:12.52,BottomCenter,,0,0,0,,我们正在做的一切
Dialogue: 0,0:18:12.59,0:18:15.20,BottomCenter,,0,0,0,,一遍又一遍地调用这个函数
Dialogue: 0,0:18:15.20,0:18:17.90,BottomCenter,,0,0,0,,请注意，我们正在此处构建一个表达式
Dialogue: 0,0:18:18.20,0:18:19.59,BottomCenter,,0,0,0,,所以我已经剥掉了
Dialogue: 0,0:18:19.59,0:18:21.26,BottomCenter,,0,0,0,,我把问题简化了一点
Dialogue: 0,0:18:21.26,0:18:24.47,BottomCenter,,0,0,0,,我说过三阶乘是三倍
Dialogue: 0,0:18:24.90,0:18:25.67,BottomCenter,,0,0,0,,那是什么东西
Dialogue: 0,0:18:25.67,0:18:26.76,BottomCenter,,0,0,0,,好吧，继续弄清楚吧
Dialogue: 0,0:18:26.76,0:18:27.40,BottomCenter,,0,0,0,,当你完成后
Dialogue: 0,0:18:27.40,0:18:30.17,BottomCenter,,0,0,0,,回来帮我把它变成这个表达
Dialogue: 0,0:18:30.17,0:18:32.13,BottomCenter,,0,0,0,,我会告诉你最终的答案是什么
Dialogue: 0,0:18:32.56,0:18:33.36,BottomCenter,,0,0,0,,所以
Dialogue: 0,0:18:33.67,0:18:35.52,BottomCenter,,0,0,0,,这个小东西就在这里，就是这样
Dialogue: 0,0:18:35.79,0:18:37.50,BottomCenter,,0,0,0,,以及这个值的返回
Dialogue: 0,0:18:37.50,0:18:38.09,BottomCenter,,0,0,0,,那就是那里
Dialogue: 0,0:18:38.09,0:18:40.00,BottomCenter,,0,0,0,,计算的本质正在发生
Dialogue: 0,0:18:40.00,0:18:42.86,BottomCenter,,0,0,0,,现在你可以明白为什么递归如此不同了
Dialogue: 0,0:18:42.86,0:18:45.26,BottomCenter,,0,0,0,,没有变量，没有赋值运算符
Dialogue: 0,0:18:45.47,0:18:47.52,BottomCenter,,0,0,0,,你正在构建这个表达式
Dialogue: 0,0:18:47.52,0:18:49.47,BottomCenter,,0,0,0,,现在让我们确保我们可以出发
Dialogue: 0,0:18:49.79,0:18:50.47,BottomCenter,,0,0,0,,看到那个
Dialogue: 0,0:18:50.47,0:18:52.73,BottomCenter,,0,0,0,,让我们通过调用三个阶乘来做到这一点
Dialogue: 0,0:18:52.79,0:18:54.20,BottomCenter,,0,0,0,,这是我的函数定义
Dialogue: 0,0:18:54.20,0:18:57.00,BottomCenter,,0,0,0,,如果生态为零则返回一否则返回结束时间
Dialogue: 0,0:18:57.00,0:18:59.13,BottomCenter,,0,0,0,,对我自己的递归调用
Dialogue: 0,0:18:59.29,0:19:01.59,BottomCenter,,0,0,0,,以和减一作为参数
Dialogue: 0,0:19:01.73,0:19:03.26,BottomCenter,,0,0,0,,我称三个阶乘
Dialogue: 0,0:19:03.40,0:19:05.20,BottomCenter,,0,0,0,,现在你只需遵循代码即可
Dialogue: 0,0:19:05.20,0:19:05.76,BottomCenter,,0,0,0,,就像所有
Dialogue: 0,0:19:05.76,0:19:07.90,BottomCenter,,0,0,0,,到目前为止我们所做的一切只是写出代码
Dialogue: 0,0:19:07.90,0:19:09.00,BottomCenter,,0,0,0,,发生什么事了好吧
Dialogue: 0,0:19:09.17,0:19:10.09,BottomCenter,,0,0,0,,三个进来
Dialogue: 0,0:19:10.09,0:19:11.09,BottomCenter,,0,0,0,,它不等于零
Dialogue: 0,0:19:11.09,0:19:13.13,BottomCenter,,0,0,0,,所以我进入声明并返回
Dialogue: 0,0:19:13.70,0:19:16.76,BottomCenter,,0,0,0,,给用户三乘二的阶乘
Dialogue: 0,0:19:17.40,0:19:19.70,BottomCenter,,0,0,0,,但我还不能完全将其返回给用户
Dialogue: 0,0:19:19.70,0:19:22.20,BottomCenter,,0,0,0,,因为那不是我能做到的价值
Dialogue: 0,0:19:22.56,0:19:24.00,BottomCenter,,0,0,0,,计算乘法
Dialogue: 0,0:19:24.00,0:19:26.36,BottomCenter,,0,0,0,,所以我必须去调用两个的阶乘
Dialogue: 0,0:19:26.73,0:19:30.09,BottomCenter,,0,0,0,,所以这有点像我说了三次返回
Dialogue: 0,0:19:30.56,0:19:32.17,BottomCenter,,0,0,0,,27 的平方根
Dialogue: 0,0:19:32.32,0:19:34.47,BottomCenter,,0,0,0,,我必须去计算 27 的平方根
Dialogue: 0,0:19:34.76,0:19:36.17,BottomCenter,,0,0,0,,这不是递归调用
Dialogue: 0,0:19:36.26,0:19:37.32,BottomCenter,,0,0,0,,回来
Dialogue: 0,0:19:37.56,0:19:41.17,BottomCenter,,0,0,0,,可以进行算术然后将其发送回用户
Dialogue: 0,0:19:41.50,0:19:42.36,BottomCenter,,0,0,0,,这里也是一样的
Dialogue: 0,0:19:42.36,0:19:44.50,BottomCenter,,0,0,0,,唯一的区别是我称呼自己
Dialogue: 0,0:19:44.50,0:19:46.00,BottomCenter,,0,0,0,,我只需要记住
Dialogue: 0,0:19:46.17,0:19:48.50,BottomCenter,,0,0,0,,当我最终在这里得到答案时
Dialogue: 0,0:19:48.52,0:19:50.70,BottomCenter,,0,0,0,,我必须乘以三
Dialogue: 0,0:19:50.70,0:19:52.86,BottomCenter,,0,0,0,,最终会被送回
Dialogue: 0,0:19:52.97,0:19:54.06,BottomCenter,,0,0,0,,调用函数
Dialogue: 0,0:19:54.47,0:19:57.09,BottomCenter,,0,0,0,,好吧，暂时忘掉三遍吧
Dialogue: 0,0:19:57.09,0:19:59.93,BottomCenter,,0,0,0,,我们会记住它，是的，它被称为员工
Dialogue: 0,0:20:00.93,0:20:02.29,BottomCenter,,0,0,0,,让我们计算两个阶乘
Dialogue: 0,0:20:02.29,0:20:04.86,BottomCenter,,0,0,0,,这就是我们完成这个表达式所需要的
Dialogue: 0,0:20:05.13,0:20:05.56,BottomCenter,,0,0,0,,好的
Dialogue: 0,0:20:05.56,0:20:08.26,BottomCenter,,0,0,0,,两个进入这里它不为零，所以我们返回什么
Dialogue: 0,0:20:08.29,0:20:10.67,BottomCenter,,0,0,0,,二次一阶乘
Dialogue: 0,0:20:11.09,0:20:11.97,BottomCenter,,0,0,0,,可以，然后呢
Dialogue: 0,0:20:12.59,0:20:13.79,BottomCenter,,0,0,0,,我们已经到达某个地方了
Dialogue: 0,0:20:13.79,0:20:15.29,BottomCenter,,0,0,0,,我们有点没有 是的
Dialogue: 0,0:20:15.36,0:20:16.90,BottomCenter,,0,0,0,,所以三个阶乘
Dialogue: 0,0:20:16.90,0:20:18.90,BottomCenter,,0,0,0,,需要知道两个阶乘的答案
Dialogue: 0,0:20:19.13,0:20:21.17,BottomCenter,,0,0,0,,两个阶乘有两倍的东西
Dialogue: 0,0:20:21.17,0:20:22.97,BottomCenter,,0,0,0,,但我还不知道那是什么
Dialogue: 0,0:20:23.13,0:20:23.86,BottomCenter,,0,0,0,,所以我有一个
Dialogue: 0,0:20:23.86,0:20:25.47,BottomCenter,,0,0,0,,好吧，我得去解决这个问题
Dialogue: 0,0:20:25.47,0:20:27.17,BottomCenter,,0,0,0,,然后我最终会计算这个
Dialogue: 0,0:20:27.17,0:20:28.76,BottomCenter,,0,0,0,,然后我最终会计算这个
Dialogue: 0,0:20:28.97,0:20:30.67,BottomCenter,,0,0,0,,让我们来计算一个阶乘
Dialogue: 0,0:20:31.52,0:20:32.56,BottomCenter,,0,0,0,,一个阶乘进来
Dialogue: 0,0:20:32.56,0:20:36.17,BottomCenter,,0,0,0,,这不是真的，所以返回一倍零阶乘
Dialogue: 0,0:20:36.17,0:20:37.29,BottomCenter,,0,0,0,,就在那里
Dialogue: 0,0:20:37.73,0:20:39.52,BottomCenter,,0,0,0,,好吧，现在我们越来越近了
Dialogue: 0,0:20:39.76,0:20:41.52,BottomCenter,,0,0,0,,是的，因为将会发生什么
Dialogue: 0,0:20:41.70,0:20:43.79,BottomCenter,,0,0,0,,当我调用零阶乘时
Dialogue: 0,0:20:44.09,0:20:47.32,BottomCenter,,0,0,0,,零进入这里，零返回一
Dialogue: 0,0:20:47.47,0:20:48.79,BottomCenter,,0,0,0,,我在这里有一个价值
Dialogue: 0,0:20:48.90,0:20:51.00,BottomCenter,,0,0,0,,所以这会发生并调用一些东西
Dialogue: 0,0:20:51.26,0:20:53.67,BottomCenter,,0,0,0,,它将返回一个实际值
Dialogue: 0,0:20:53.67,0:20:56.13,BottomCenter,,0,0,0,,不再有递归，我们遇到了面部情况
Dialogue: 0,0:20:56.13,0:20:57.56,BottomCenter,,0,0,0,,不再有递归情况
Dialogue: 0,0:20:58.20,0:20:59.59,BottomCenter,,0,0,0,,好吧，现在让我们看看会发生什么
Dialogue: 0,0:20:59.59,0:21:00.70,BottomCenter,,0,0,0,,让我们忘记这三个
Dialogue: 0,0:21:00.70,0:21:01.79,BottomCenter,,0,0,0,,暂时忘记这两个
Dialogue: 0,0:21:01.79,0:21:03.73,BottomCenter,,0,0,0,,让我们看看下面的一个
Dialogue: 0,0:21:03.76,0:21:07.20,BottomCenter,,0,0,0,,是的，所以一阶乘是零阶乘的一倍
Dialogue: 0,0:21:07.20,0:21:09.00,BottomCenter,,0,0,0,,零阶乘是一个函数
Dialogue: 0,0:21:09.00,0:21:11.20,BottomCenter,,0,0,0,,碰巧是递归的，但老实说我不在乎
Dialogue: 0,0:21:11.56,0:21:12.90,BottomCenter,,0,0,0,,它返回一个
Dialogue: 0,0:21:13.29,0:21:16.26,BottomCenter,,0,0,0,,现在就是这样
Dialogue: 0,0:21:16.29,0:21:18.26,BottomCenter,,0,0,0,,这是一个返回语句
Dialogue: 0,0:21:18.70,0:21:19.93,BottomCenter,,0,0,0,,为什么这很重要
Dialogue: 0,0:21:20.13,0:21:22.17,BottomCenter,,0,0,0,,因为那是一个函数调用
Dialogue: 0,0:21:22.36,0:21:24.29,BottomCenter,,0,0,0,,这意味着我要发送一个值
Dialogue: 0,0:21:24.32,0:21:25.13,BottomCenter,,0,0,0,,进入该函数
Dialogue: 0,0:21:25.13,0:21:27.13,BottomCenter,,0,0,0,,它必须给我发回一些东西
Dialogue: 0,0:21:27.13,0:21:28.17,BottomCenter,,0,0,0,,我可以用它
Dialogue: 0,0:21:28.17,0:21:30.73,BottomCenter,,0,0,0,,表达式就像调用平方根一样
Dialogue: 0,0:21:30.86,0:21:33.00,BottomCenter,,0,0,0,,你不能打印平方根，这对我没有好处
Dialogue: 0,0:21:33.00,0:21:34.76,BottomCenter,,0,0,0,,我正在尝试在表达式中使用它
Dialogue: 0,0:21:34.90,0:21:36.52,BottomCenter,,0,0,0,,你必须把它还给我
Dialogue: 0,0:21:36.52,0:21:39.97,BottomCenter,,0,0,0,,返回给我，以便我可以在表达中使用它
Dialogue: 0,0:21:40.32,0:21:40.52,BottomCenter,,0,0,0,,好的
Dialogue: 0,0:21:40.52,0:21:44.13,BottomCenter,,0,0,0,,一个人会被弹出来调用你的阶乘
Dialogue: 0,0:21:44.13,0:21:44.93,BottomCenter,,0,0,0,,现在
Dialogue: 0,0:21:45.06,0:21:47.09,BottomCenter,,0,0,0,,我会做算术 我会做乘法
Dialogue: 0,0:21:47.09,0:21:48.93,BottomCenter,,0,0,0,,所以我要乘以一乘一
Dialogue: 0,0:21:49.70,0:21:52.73,BottomCenter,,0,0,0,,现在我有了一个阶乘的答案
Dialogue: 0,0:21:52.93,0:21:55.86,BottomCenter,,0,0,0,,因为它评估为实际值
Dialogue: 0,0:21:55.86,0:21:57.67,BottomCenter,,0,0,0,,并且它正在被退回
Dialogue: 0,0:21:57.86,0:22:00.97,BottomCenter,,0,0,0,,因为那里的 return 语句而返回
Dialogue: 0,0:22:01.29,0:22:03.97,BottomCenter,,0,0,0,,所以现在那里的那个被替换了
Dialogue: 0,0:22:04.13,0:22:06.00,BottomCenter,,0,0,0,,现在我有两次一
Dialogue: 0,0:22:06.00,0:22:08.47,BottomCenter,,0,0,0,,是两个阶乘的答案
Dialogue: 0,0:22:08.50,0:22:11.36,BottomCenter,,0,0,0,,两个回到那个
Dialogue: 0,0:22:13.73,0:22:17.13,BottomCenter,,0,0,0,,两者返回二的阶乘
Dialogue: 0,0:22:17.26,0:22:20.13,BottomCenter,,0,0,0,,现在我有一个可以评估的表达式
Dialogue: 0,0:22:20.13,0:22:22.40,BottomCenter,,0,0,0,,所以最终花了一点时间
Dialogue: 0,0:22:22.70,0:22:24.26,BottomCenter,,0,0,0,,最终发生了什么
Dialogue: 0,0:22:24.50,0:22:27.47,BottomCenter,,0,0,0,,两个阶乘称为一个阶乘
Dialogue: 0,0:22:27.47,0:22:28.40,BottomCenter,,0,0,0,,这称为零因子
Dialogue: 0,0:22:28.40,0:22:29.67,BottomCenter,,0,0,0,,这符合基本情况
Dialogue: 0,0:22:29.73,0:22:31.93,BottomCenter,,0,0,0,,然后我开始出现这些表情
Dialogue: 0,0:22:31.93,0:22:33.52,BottomCenter,,0,0,0,,现在我有一个表情
Dialogue: 0,0:22:33.59,0:22:36.00,BottomCenter,,0,0,0,,我当然会回来六
Dialogue: 0,0:22:36.93,0:22:41.09,BottomCenter,,0,0,0,,所以递归的本质是我们建立
Dialogue: 0,0:22:41.32,0:22:46.20,BottomCenter,,0,0,0,,使用函数的递归定义的表达式
Dialogue: 0,0:22:46.40,0:22:48.36,BottomCenter,,0,0,0,,这些返回语句
Dialogue: 0,0:22:48.50,0:22:51.86,BottomCenter,,0,0,0,,本质上保留了该表达的记忆
Dialogue: 0,0:22:51.97,0:22:53.86,BottomCenter,,0,0,0,,正在建设中
Dialogue: 0,0:22:54.17,0:22:55.76,BottomCenter,,0,0,0,,所以你可以看到这里真的是
Dialogue: 0,0:22:55.76,0:22:57.73,BottomCenter,,0,0,0,,真正不同的思维方式
Dialogue: 0,0:22:57.76,0:22:59.90,BottomCenter,,0,0,0,,关于计算的本质
Dialogue: 0,0:23:00.06,0:23:02.17,BottomCenter,,0,0,0,,没有对错之分，没有好坏之分
Dialogue: 0,0:23:02.17,0:23:03.32,BottomCenter,,0,0,0,,有时会好一点
Dialogue: 0,0:23:03.32,0:23:04.79,BottomCenter,,0,0,0,,有时更优雅一点
Dialogue: 0,0:23:04.93,0:23:05.93,BottomCenter,,0,0,0,,有时情况会更糟
Dialogue: 0,0:23:05.93,0:23:07.13,BottomCenter,,0,0,0,,有时效率较低
Dialogue: 0,0:23:07.13,0:23:07.73,BottomCenter,,0,0,0,,因为你必须
Dialogue: 0,0:23:07.73,0:23:10.09,BottomCenter,,0,0,0,,保留所有这些事情的记忆
Dialogue: 0,0:23:10.56,0:23:12.26,BottomCenter,,0,0,0,,但这是一个非常强大的概念
Dialogue: 0,0:23:12.26,0:23:13.70,BottomCenter,,0,0,0,,我认为这是一个重要的方式
Dialogue: 0,0:23:13.70,0:23:15.70,BottomCenter,,0,0,0,,思考计算的本质
Dialogue: 0,0:23:15.79,0:23:16.86,BottomCenter,,0,0,0,,所以我们要花一点点
Dialogue: 0,0:23:16.86,0:23:19.13,BottomCenter,,0,0,0,,是时候看一些更多的递归示例
Dialogue: 0,0:23:19.13,0:23:20.00,BottomCenter,,0,0,0,,并确保我们
Dialogue: 0,0:23:20.00,0:23:23.00,BottomCenter,,0,0,0,,理解这种计算范式
Dialogue: 0,0:23:23.06,0:23:25.26,BottomCenter,,0,0,0,,我们回来后几分钟后就会取走它
Dialogue: 0,0:23:29.29,0:23:32.32,BottomCenter,,0,0,0,,理解递归调用的顺序很重要
Dialogue: 0,0:23:32.32,0:23:32.86,BottomCenter,,0,0,0,,和
Dialogue: 0,0:23:32.86,0:23:34.20,BottomCenter,,0,0,0,,理解行为
Dialogue: 0,0:23:34.47,0:23:36.20,BottomCenter,,0,0,0,,递归函数
Dialogue: 0,0:23:36.93,0:23:38.76,BottomCenter,,0,0,0,,需要记住的是
Dialogue: 0,0:23:38.86,0:23:40.47,BottomCenter,,0,0,0,,当你进行函数调用时
Dialogue: 0,0:23:40.56,0:23:41.56,BottomCenter,,0,0,0,,你得等一等
Dialogue: 0,0:23:41.59,0:23:44.32,BottomCenter,,0,0,0,,在你做任何其他事情之前让它返回
Dialogue: 0,0:23:44.56,0:23:46.79,BottomCenter,,0,0,0,,所以如果一个函数调用另一个函数
Dialogue: 0,0:23:46.90,0:23:48.79,BottomCenter,,0,0,0,,然后做一些事
Dialogue: 0,0:23:49.09,0:23:51.67,BottomCenter,,0,0,0,,该函数调用必须返回
Dialogue: 0,0:23:51.90,0:23:53.93,BottomCenter,,0,0,0,,在接下来发生任何事情之前
Dialogue: 0,0:23:54.97,0:23:58.73,BottomCenter,,0,0,0,,让我用级联函数来说明我的意思
Dialogue: 0,0:23:59.40,0:24:01.09,BottomCenter,,0,0,0,,级联函数
Dialogue: 0,0:24:02.29,0:24:04.56,BottomCenter,,0,0,0,,取一个正整数n
Dialogue: 0,0:24:05.29,0:24:08.67,BottomCenter,,0,0,0,,如果 n 小于 10，则仅打印出来
Dialogue: 0,0:24:10.67,0:24:11.47,BottomCenter,,0,0,0,,蚂蚁
Dialogue: 0,0:24:11.76,0:24:12.56,BottomCenter,,0,0,0,,否则
Dialogue: 0,0:24:13.36,0:24:14.90,BottomCenter,,0,0,0,,第一王子结局
Dialogue: 0,0:24:15.09,0:24:18.13,BottomCenter,,0,0,0,,然后递归调用cascade
Dialogue: 0,0:24:18.50,0:24:19.93,BottomCenter,,0,0,0,,在较小的数字上
Dialogue: 0,0:24:20.20,0:24:22.93,BottomCenter,,0,0,0,,这就是除了最后一位数字之外的所有内容
Dialogue: 0,0:24:23.09,0:24:25.09,BottomCenter,,0,0,0,,或除以 10
Dialogue: 0,0:24:25.17,0:24:26.86,BottomCenter,,0,0,0,,剩下的被扔掉
Dialogue: 0,0:24:27.52,0:24:31.56,BottomCenter,,0,0,0,,最后在递归调用级联之后
Dialogue: 0,0:24:31.67,0:24:33.20,BottomCenter,,0,0,0,,它再次打印结束
Dialogue: 0,0:24:34.26,0:24:36.86,BottomCenter,,0,0,0,,让我们看一下这个函数的行为
Dialogue: 0,0:24:37.29,0:24:40.70,BottomCenter,,0,0,0,,所以如果我只级联 5 号，那就是基本情况
Dialogue: 0,0:24:40.70,0:24:42.50,BottomCenter,,0,0,0,,然后我打印出No.5
Dialogue: 0,0:24:42.70,0:24:45.17,BottomCenter,,0,0,0,,但如果我级联 1 2 3 4 5
Dialogue: 0,0:24:45.32,0:24:47.52,BottomCenter,,0,0,0,,然后我看到了这个漂亮的设计
Dialogue: 0,0:24:48.29,0:24:50.26,BottomCenter,,0,0,0,,打印 4 1 2 3 4 5
Dialogue: 0,0:24:50.59,0:24:55.13,BottomCenter,,0,0,0,,然后我们看到一系列较小的版本
Dialogue: 0,0:24:55.29,0:24:55.97,BottomCenter,,0,0,0,,顺便说一下
Dialogue: 0,0:24:55.97,0:24:59.09,BottomCenter,,0,0,0,,最后再次打印原始数字
Dialogue: 0,0:24:59.56,0:25:01.09,BottomCenter,,0,0,0,,现在是第一个和最后一个
Dialogue: 0,0:25:01.09,0:25:03.20,BottomCenter,,0,0,0,,所有行都来自此 print 语句
Dialogue: 0,0:25:04.13,0:25:06.40,BottomCenter,,0,0,0,,事实上你在这里看到的大部分行
Dialogue: 0,0:25:06.40,0:25:08.40,BottomCenter,,0,0,0,,来自此 print 语句或此
Dialogue: 0,0:25:08.40,0:25:09.32,BottomCenter,,0,0,0,,打印声明
Dialogue: 0,0:25:09.52,0:25:12.47,BottomCenter,,0,0,0,,仅适用于 No.1 的基本情况
Dialogue: 0,0:25:12.47,0:25:14.00,BottomCenter,,0,0,0,,来自这个打印声明
Dialogue: 0,0:25:15.36,0:25:17.86,BottomCenter,,0,0,0,,这应该说明的是
Dialogue: 0,0:25:18.17,0:25:20.86,BottomCenter,,0,0,0,,所有递归发生的级联
Dialogue: 0,0:25:20.90,0:25:23.26,BottomCenter,,0,0,0,,发生在最终打印之前
Dialogue: 0,0:25:23.40,0:25:26.36,BottomCenter,,0,0,0,,这就是为什么你会得到这个漂亮的嵌套结构
Dialogue: 0,0:25:27.09,0:25:29.40,BottomCenter,,0,0,0,,我们看一下环境图
Dialogue: 0,0:25:29.40,0:25:32.06,BottomCenter,,0,0,0,,这样我们就可以准确地看到发生了什么
Dialogue: 0,0:25:34.59,0:25:38.32,BottomCenter,,0,0,0,,所以我们定义了级联，然后在 1 2 3 上调用它
Dialogue: 0,0:25:40.70,0:25:42.09,BottomCenter,,0,0,0,,原来的通话
Dialogue: 0,0:25:42.93,0:25:44.70,BottomCenter,,0,0,0,,检查基本情况
Dialogue: 0,0:25:44.97,0:25:48.47,BottomCenter,,0,0,0,,找不到它，所以打印出 1 2 3
Dialogue: 0,0:25:49.59,0:25:50.79,BottomCenter,,0,0,0,,在Python导师中
Dialogue: 0,0:25:50.79,0:25:53.76,BottomCenter,,0,0,0,,你可以看到到目前为止生成的程序输出
Dialogue: 0,0:25:53.76,0:25:54.93,BottomCenter,,0,0,0,,只是第一名
Dialogue: 0,0:25:54.93,0:25:57.70,BottomCenter,,0,0,0,,两个三个我们仍然需要生成其余的所有内容
Dialogue: 0,0:25:58.50,0:26:01.36,BottomCenter,,0,0,0,,我们如何生成小于 1 2 3 的所有值
Dialogue: 0,0:26:01.47,0:26:04.70,BottomCenter,,0,0,0,,虽然这涉及到级联的递归调用
Dialogue: 0,0:26:04.90,0:26:07.76,BottomCenter,,0,0,0,,在这种情况下，我们丢弃了最后一位数字
Dialogue: 0,0:26:07.76,0:26:09.67,BottomCenter,,0,0,0,,只剩下一两个
Dialogue: 0,0:26:10.47,0:26:10.86,BottomCenter,,0,0,0,,所以
Dialogue: 0,0:26:10.86,0:26:13.73,BottomCenter,,0,0,0,,重要的是这个调用 tecascade 将
Dialogue: 0,0:26:13.79,0:26:14.59,BottomCenter,,0,0,0,,完全的
Dialogue: 0,0:26:14.86,0:26:16.09,BottomCenter,,0,0,0,,在我们回去之前
Dialogue: 0,0:26:16.09,0:26:17.00,BottomCenter,,0,0,0,,并完成
Dialogue: 0,0:26:17.40,0:26:18.73,BottomCenter,,0,0,0,,原来的
Dialogue: 0,0:26:19.52,0:26:21.06,BottomCenter,,0,0,0,,那么我所说的完整是什么意思
Dialogue: 0,0:26:21.20,0:26:24.52,BottomCenter,,0,0,0,,好吧，它会打印 12 make a recursive call
Dialogue: 0,0:26:24.73,0:26:26.13,BottomCenter,,0,0,0,,等于一
Dialogue: 0,0:26:26.13,0:26:28.59,BottomCenter,,0,0,0,,这是打印出来的基本情况
Dialogue: 0,0:26:28.67,0:26:30.79,BottomCenter,,0,0,0,,所以现在我们已经一路向下级联了
Dialogue: 0,0:26:31.13,0:26:33.52,BottomCenter,,0,0,0,,我们是如何一路级联备份的
Dialogue: 0,0:26:33.59,0:26:36.86,BottomCenter,,0,0,0,,我们的第三次调用级联返回
Dialogue: 0,0:26:36.90,0:26:39.06,BottomCenter,,0,0,0,,它返回什么
Dialogue: 0,0:26:39.52,0:26:40.32,BottomCenter,,0,0,0,,为什么
Dialogue: 0,0:26:40.50,0:26:43.00,BottomCenter,,0,0,0,,因为根本没有 return 语句
Dialogue: 0,0:26:43.47,0:26:46.86,BottomCenter,,0,0,0,,如果执行函数体时
Dialogue: 0,0:26:46.86,0:26:48.47,BottomCenter,,0,0,0,,你到达了身体的尽头
Dialogue: 0,0:26:48.47,0:26:50.73,BottomCenter,,0,0,0,,没有看到 return 语句
Dialogue: 0,0:26:50.79,0:26:52.90,BottomCenter,,0,0,0,,你总是不返回任何内容
Dialogue: 0,0:26:53.90,0:26:56.09,BottomCenter,,0,0,0,,好吧，现在我们必须问自己
Dialogue: 0,0:26:56.09,0:26:57.70,BottomCenter,,0,0,0,,我们要回到哪里
Dialogue: 0,0:26:57.97,0:27:01.26,BottomCenter,,0,0,0,,当我们正在调用级联时
Dialogue: 0,0:27:01.67,0:27:04.29,BottomCenter,,0,0,0,,其中涉及到这一行
Dialogue: 0,0:27:04.86,0:27:08.52,BottomCenter,,0,0,0,,最后我们发现它的值是 none
Dialogue: 0,0:27:08.52,0:27:11.17,BottomCenter,,0,0,0,,然后我们继续打印
Dialogue: 0,0:27:11.32,0:27:13.79,BottomCenter,,0,0,0,,n 就是 12 就在那里
Dialogue: 0,0:27:14.86,0:27:18.26,BottomCenter,,0,0,0,,当我们打印出来时，我们实际上看到 12 出现
Dialogue: 0,0:27:18.50,0:27:21.50,BottomCenter,,0,0,0,,这次调用的返回值为 none
Dialogue: 0,0:27:21.56,0:27:22.59,BottomCenter,,0,0,0,,这意味着我们可以
Dialogue: 0,0:27:22.59,0:27:25.79,BottomCenter,,0,0,0,,最后回到我们原来对cascade的调用
Dialogue: 0,0:27:26.26,0:27:27.70,BottomCenter,,0,0,0,,并完成
Dialogue: 0,0:27:27.70,0:27:29.52,BottomCenter,,0,0,0,,所以我们对此进行了评估
Dialogue: 0,0:27:30.50,0:27:33.26,BottomCenter,,0,0,0,,在评估的过程中
Dialogue: 0,0:27:33.26,0:27:34.93,BottomCenter,,0,0,0,,我们生成了所有这些输出
Dialogue: 0,0:27:34.97,0:27:37.73,BottomCenter,,0,0,0,,最后我们要在最后打印
Dialogue: 0,0:27:38.47,0:27:39.36,BottomCenter,,0,0,0,,现在我们完成了
Dialogue: 0,0:27:40.70,0:27:41.29,BottomCenter,,0,0,0,,可以，然后呢
Dialogue: 0,0:27:41.29,0:27:44.56,BottomCenter,,0,0,0,,环境图中的关键时刻是
Dialogue: 0,0:27:44.70,0:27:48.13,BottomCenter,,0,0,0,,我们已经从第二次调用级联返回
Dialogue: 0,0:27:48.17,0:27:50.86,BottomCenter,,0,0,0,,但我们还没有打完第一个电话
Dialogue: 0,0:27:51.70,0:27:53.97,BottomCenter,,0,0,0,,所以第一个电话已经打印在
Dialogue: 0,0:27:54.00,0:27:56.90,BottomCenter,,0,0,0,,它一直级联到十二
Dialogue: 0,0:27:56.90,0:27:57.79,BottomCenter,,0,0,0,,一和十二
Dialogue: 0,0:27:57.93,0:27:59.70,BottomCenter,,0,0,0,,但还没有打印出来
Dialogue: 0,0:28:00.00,0:28:03.93,BottomCenter,,0,0,0,,这是级联的最后一步
Dialogue: 0,0:28:04.90,0:28:06.50,BottomCenter,,0,0,0,,所以每个级联帧
Dialogue: 0,0:28:06.73,0:28:08.90,BottomCenter,,0,0,0,,来自对级联的不同调用
Dialogue: 0,0:28:08.90,0:28:11.52,BottomCenter,,0,0,0,,直到出现返回值
Dialogue: 0,0:28:11.59,0:28:13.93,BottomCenter,,0,0,0,,该通话尚未完成
Dialogue: 0,0:28:14.67,0:28:18.06,BottomCenter,,0,0,0,,所以在该调用之后发生的任何工作
Dialogue: 0,0:28:18.06,0:28:19.47,BottomCenter,,0,0,0,,还没有发生
Dialogue: 0,0:28:19.93,0:28:22.56,BottomCenter,,0,0,0,,任何语句都可以出现在之前或之后
Dialogue: 0,0:28:22.67,0:28:23.76,BottomCenter,,0,0,0,,递归调用
Dialogue: 0,0:28:24.00,0:28:26.47,BottomCenter,,0,0,0,,有前有后
Dialogue: 0,0:28:28.09,0:28:28.76,BottomCenter,,0,0,0,,它是
Dialogue: 0,0:28:28.76,0:28:32.00,BottomCenter,,0,0,0,,第三次调用级联，打印出 No.1
Dialogue: 0,0:28:32.29,0:28:35.40,BottomCenter,,0,0,0,,这是打印出来的第二次级联调用
Dialogue: 0,0:28:35.40,0:28:36.50,BottomCenter,,0,0,0,,这十二个都
Dialogue: 0,0:28:36.50,0:28:39.90,BottomCenter,,0,0,0,,打印第一张之前一张和打印第一张之后一张
Dialogue: 0,0:28:40.36,0:28:43.26,BottomCenter,,0,0,0,,最后第一次调用打印了 1 2 3
Dialogue: 0,0:28:43.26,0:28:46.13,BottomCenter,,0,0,0,,即将在最后打印 1 2 3
Dialogue: 0,0:28:47.29,0:28:50.40,BottomCenter,,0,0,0,,现在这不是定义 cas gateway 的唯一方法
Dialogue: 0,0:28:51.97,0:28:54.20,BottomCenter,,0,0,0,,更短的版本会说得好
Dialogue: 0,0:28:54.20,0:28:55.36,BottomCenter,,0,0,0,,在基本情况下
Dialogue: 0,0:28:55.36,0:28:58.40,BottomCenter,,0,0,0,,或者在递归情况下我总是先打印
Dialogue: 0,0:28:58.52,0:29:00.97,BottomCenter,,0,0,0,,那么为什么不把它放在最上面呢
Dialogue: 0,0:29:01.29,0:29:03.17,BottomCenter,,0,0,0,,然后实际上就没什么可做的了
Dialogue: 0,0:29:03.17,0:29:04.29,BottomCenter,,0,0,0,,在基本情况下
Dialogue: 0,0:29:04.40,0:29:05.59,BottomCenter,,0,0,0,,所以我可以改变
Dialogue: 0,0:29:05.59,0:29:08.73,BottomCenter,,0,0,0,,zif 语句全部与递归情况有关
Dialogue: 0,0:29:08.90,0:29:11.17,BottomCenter,,0,0,0,,即当 n 大于 10 时
Dialogue: 0,0:29:11.97,0:29:14.86,BottomCenter,,0,0,0,,我将级联然后再次打印
Dialogue: 0,0:29:19.20,0:29:21.93,BottomCenter,,0,0,0,,所以现在如果我级联 1 2 3 4 5
Dialogue: 0,0:29:22.47,0:29:23.76,BottomCenter,,0,0,0,,它仍然有效
Dialogue: 0,0:29:23.79,0:29:26.47,BottomCenter,,0,0,0,,我有一个稍微短一点的函数定义
Dialogue: 0,0:29:27.06,0:29:30.00,BottomCenter,,0,0,0,,顺便说一句，即使我添加更多数字，这也有效
Dialogue: 0,0:29:30.00,0:29:32.32,BottomCenter,,0,0,0,,它只会变得更加美丽
Dialogue: 0,0:29:33.56,0:29:35.70,BottomCenter,,0,0,0,,但哪个版本的级联更好
Dialogue: 0,0:29:35.70,0:29:36.70,BottomCenter,,0,0,0,,所以我们有一个
Dialogue: 0,0:29:36.70,0:29:38.09,BottomCenter,,0,0,0,,打破了基地
Dialogue: 0,0:29:38.09,0:29:39.50,BottomCenter,,0,0,0,,情况和递归情况
Dialogue: 0,0:29:39.50,0:29:41.06,BottomCenter,,0,0,0,,并告诉您在每个步骤中要做什么
Dialogue: 0,0:29:41.40,0:29:44.20,BottomCenter,,0,0,0,,我们还有另一个可以找到相似内容的
Dialogue: 0,0:29:44.20,0:29:46.76,BottomCenter,,0,0,0,,介于两者之间并尽量不重蹈覆辙
Dialogue: 0,0:29:47.90,0:29:50.29,BottomCenter,,0,0,0,,两个实现同样清晰
Dialogue: 0,0:29:50.70,0:29:50.93,BottomCenter,,0,0,0,,然后
Dialogue: 0,0:29:50.93,0:29:53.67,BottomCenter,,0,0,0,,我认为通常选择较短的更好
Dialogue: 0,0:29:53.73,0:29:56.73,BottomCenter,,0,0,0,,只是因为其他人花更少的时间来阅读它
Dialogue: 0,0:29:57.52,0:30:00.20,BottomCenter,,0,0,0,,在这种情况下，较长的实施会更加清晰
Dialogue: 0,0:30:00.20,0:30:01.26,BottomCenter,,0,0,0,,至少对我来说
Dialogue: 0,0:30:01.36,0:30:02.90,BottomCenter,,0,0,0,,因为它明显爆发了
Dialogue: 0,0:30:02.90,0:30:05.50,BottomCenter,,0,0,0,,什么是基本情况以及什么是递归情况
Dialogue: 0,0:30:05.56,0:30:06.47,BottomCenter,,0,0,0,,以该顺序
Dialogue: 0,0:30:06.59,0:30:08.36,BottomCenter,,0,0,0,,这就是我习惯的阅读方式
Dialogue: 0,0:30:08.36,0:30:09.73,BottomCenter,,0,0,0,,递归函数
Dialogue: 0,0:30:10.56,0:30:12.56,BottomCenter,,0,0,0,,所以当学习编写递归函数时
Dialogue: 0,0:30:12.56,0:30:14.29,BottomCenter,,0,0,0,,我也建议这样做
Dialogue: 0,0:30:14.36,0:30:15.52,BottomCenter,,0,0,0,,但你不必
Dialogue: 0,0:30:16.67,0:30:19.29,BottomCenter,,0,0,0,,但这两个都是递归函数，即使
Dialogue: 0,0:30:19.29,0:30:22.06,BottomCenter,,0,0,0,,只有左边那个有典型的结构
Dialogue: 0,0:30:22.97,0:30:25.56,BottomCenter,,0,0,0,,如果您想在其中之一之间进行选择
Dialogue: 0,0:30:26.36,0:30:28.50,BottomCenter,,0,0,0,,请记住，当您编写程序时
Dialogue: 0,0:30:28.50,0:30:30.86,BottomCenter,,0,0,0,,它们应该写给别人阅读
Dialogue: 0,0:30:31.20,0:30:35.13,BottomCenter,,0,0,0,,并且只是顺便让计算机执行它们
Dialogue: 0,0:30:35.90,0:30:39.09,BottomCenter,,0,0,0,,所以想想你想读哪一本
Dialogue: 0,0:30:39.29,0:30:41.52,BottomCenter,,0,0,0,,如果你正在阅读别人的节目
Dialogue: 0,0:30:41.67,0:30:43.06,BottomCenter,,0,0,0,,并在那里做出你的选择
Dialogue: 0,0:30:47.52,0:30:49.13,BottomCenter,,0,0,0,,让你尝试一下
Dialogue: 0,0:30:49.90,0:30:51.50,BottomCenter,,0,0,0,,现在我们要写一个函数
Dialogue: 0,0:30:51.90,0:30:54.29,BottomCenter,,0,0,0,,计算逆级联
Dialogue: 0,0:30:54.59,0:30:55.52,BottomCenter,,0,0,0,,那是什么
Dialogue: 0,0:30:55.79,0:30:58.97,BottomCenter,,0,0,0,,好吧，如果我们传入数字一二三四
Dialogue: 0,0:30:59.17,0:31:02.29,BottomCenter,,0,0,0,,我们希望它打印出以下几行
Dialogue: 0,0:31:02.86,0:31:04.97,BottomCenter,,0,0,0,,1 1 2 1 2 3 1 2 3 4
Dialogue: 0,0:31:04.97,0:31:07.20,BottomCenter,,0,0,0,,然后在下降过程中变小
Dialogue: 0,0:31:08.06,0:31:09.09,BottomCenter,,0,0,0,,现在如果你愿意的话
Dialogue: 0,0:31:09.36,0:31:11.52,BottomCenter,,0,0,0,,你可以尝试从头开始实现这个
Dialogue: 0,0:31:13.79,0:31:15.97,BottomCenter,,0,0,0,,我现在就给你一些结构
Dialogue: 0,0:31:16.36,0:31:19.56,BottomCenter,,0,0,0,,这样你就可以以特定的方式实现它
Dialogue: 0,0:31:19.73,0:31:22.06,BottomCenter,,0,0,0,,使用高阶函数
Dialogue: 0,0:31:23.26,0:31:25.93,BottomCenter,,0,0,0,,第一个是我们将使用的实现
Dialogue: 0,0:31:26.17,0:31:27.47,BottomCenter,,0,0,0,,我们称之为成长
Dialogue: 0,0:31:28.09,0:31:31.00,BottomCenter,,0,0,0,,打印一、二和 1 2 3
Dialogue: 0,0:31:31.26,0:31:32.73,BottomCenter,,0,0,0,,我们将调用打印
Dialogue: 0,0:31:32.76,0:31:35.00,BottomCenter,,0,0,0,,为了打印最长的行
Dialogue: 0,0:31:35.36,0:31:36.73,BottomCenter,,0,0,0,,然后我们会调用收缩
Dialogue: 0,0:31:38.70,0:31:40.32,BottomCenter,,0,0,0,,现在什么正在增长缩小
Dialogue: 0,0:31:40.90,0:31:42.00,BottomCenter,,0,0,0,,虽然他们都是
Dialogue: 0,0:31:42.32,0:31:43.32,BottomCenter,,0,0,0,,将
Dialogue: 0,0:31:43.32,0:31:46.59,BottomCenter,,0,0,0,,与以下高阶函数相关
Dialogue: 0,0:31:46.86,0:31:49.29,BottomCenter,,0,0,0,,它接受两个函数 f 和 g
Dialogue: 0,0:31:49.52,0:31:50.86,BottomCenter,,0,0,0,,和一个数字 n
Dialogue: 0,0:31:51.09,0:31:54.09,BottomCenter,,0,0,0,,if n 表示 n 不为零
Dialogue: 0,0:31:54.86,0:31:57.56,BottomCenter,,0,0,0,,零是数字的唯一假值
Dialogue: 0,0:31:57.76,0:31:59.29,BottomCenter,,0,0,0,,所以如果 fn 不为零
Dialogue: 0,0:31:59.40,0:32:01.36,BottomCenter,,0,0,0,,然后我们会调用 f 然后我们会调用 g
Dialogue: 0,0:32:01.56,0:32:03.17,BottomCenter,,0,0,0,,以该顺序
Dialogue: 0,0:32:04.73,0:32:06.32,BottomCenter,,0,0,0,,所以这是对你的挑战
Dialogue: 0,0:32:06.76,0:32:08.73,BottomCenter,,0,0,0,,定义增长和收缩
Dialogue: 0,0:32:09.00,0:32:12.36,BottomCenter,,0,0,0,,它们都是单个参数的函数
Dialogue: 0,0:32:12.36,0:32:16.09,BottomCenter,,0,0,0,,对于调用 n 演变调用 fng
Dialogue: 0,0:32:16.52,0:32:17.97,BottomCenter,,0,0,0,,在一些论点上
Dialogue: 0,0:32:18.76,0:32:20.56,BottomCenter,,0,0,0,,所以你现在的目标是弄清楚
Dialogue: 0,0:32:20.56,0:32:22.67,BottomCenter,,0,0,0,,我们可以传入什么参数
Dialogue: 0,0:32:22.93,0:32:23.86,BottomCenter,,0,0,0,,为了
Dialogue: 0,0:32:23.86,0:32:27.29,BottomCenter,,0,0,0,,完成逆kestgate的实现
Dialogue: 0,0:32:28.00,0:32:29.93,BottomCenter,,0,0,0,,暂停视频并思考一下
Dialogue: 0,0:32:30.32,0:32:34.40,BottomCenter,,0,0,0,,我会在321告诉你答案
Dialogue: 0,0:32:37.26,0:32:39.97,BottomCenter,,0,0,0,,实现逆级联的一种方法
Dialogue: 0,0:32:40.17,0:32:41.79,BottomCenter,,0,0,0,,具有增长功能
Dialogue: 0,0:32:42.20,0:32:45.70,BottomCenter,,0,0,0,,首先生长然后打印
Dialogue: 0,0:32:46.26,0:32:49.00,BottomCenter,,0,0,0,,那么为什么增长会增长然后打印得很好
Dialogue: 0,0:32:49.13,0:32:51.97,BottomCenter,,0,0,0,,因为我们想先做小事
Dialogue: 0,0:32:52.00,0:32:53.32,BottomCenter,,0,0,0,,然后是大事
Dialogue: 0,0:32:53.70,0:32:56.29,BottomCenter,,0,0,0,,我们首先调用它
Dialogue: 0,0:32:56.59,0:32:57.93,BottomCenter,,0,0,0,,然后传入
Dialogue: 0,0:32:58.26,0:32:59.79,BottomCenter,,0,0,0,,除以 10
Dialogue: 0,0:32:59.79,0:33:02.50,BottomCenter,,0,0,0,,传入并除以 10 等
Dialogue: 0,0:33:03.50,0:33:06.50,BottomCenter,,0,0,0,,所以先生长然后印刷
Dialogue: 0,0:33:06.50,0:33:08.90,BottomCenter,,0,0,0,,我们从最小到最大
Dialogue: 0,0:33:09.50,0:33:10.09,BottomCenter,,0,0,0,,收缩
Dialogue: 0,0:33:10.09,0:33:12.86,BottomCenter,,0,0,0,,先打印然后再缩小一些
Dialogue: 0,0:33:13.29,0:33:15.73,BottomCenter,,0,0,0,,这样当我们传入大量数字时
Dialogue: 0,0:33:16.29,0:33:18.09,BottomCenter,,0,0,0,,我们首先打印出来
Dialogue: 0,0:33:18.20,0:33:20.86,BottomCenter,,0,0,0,,然后我们打印出剩下的较小的
Dialogue: 0,0:33:20.86,0:33:22.56,BottomCenter,,0,0,0,,按降序排列
Dialogue: 0,0:33:27.20,0:33:28.70,BottomCenter,,0,0,0,,树递归
Dialogue: 0,0:33:29.47,0:33:31.40,BottomCenter,,0,0,0,,当一个函数发生时
Dialogue: 0,0:33:31.59,0:33:34.59,BottomCenter,,0,0,0,,进行多次递归调用
Dialogue: 0,0:33:35.76,0:33:36.93,BottomCenter,,0,0,0,,所以树递归
Dialogue: 0,0:33:36.93,0:33:40.26,BottomCenter,,0,0,0,,创建树形过程，每当
Dialogue: 0,0:33:40.26,0:33:42.00,BottomCenter,,0,0,0,,执行递归体
Dialogue: 0,0:33:42.00,0:33:43.00,BottomCenter,,0,0,0,,函数使超过
Dialogue: 0,0:33:43.00,0:33:43.90,BottomCenter,,0,0,0,,一通电话
Dialogue: 0,0:33:44.13,0:33:45.47,BottomCenter,,0,0,0,,到那个函数
Dialogue: 0,0:33:46.36,0:33:48.79,BottomCenter,,0,0,0,,有一个例子几乎每一个
Dialogue: 0,0:33:48.79,0:33:50.00,BottomCenter,,0,0,0,,类包括
Dialogue: 0,0:33:50.00,0:33:51.00,BottomCenter,,0,0,0,,树递归
Dialogue: 0,0:33:51.00,0:33:52.47,BottomCenter,,0,0,0,,在某个时刻覆盖
Dialogue: 0,0:33:52.93,0:33:54.90,BottomCenter,,0,0,0,,斐波那契数列
Dialogue: 0,0:33:55.06,0:33:56.90,BottomCenter,,0,0,0,,这是我们的朋友斐波那契
Dialogue: 0,0:33:58.70,0:34:02.29,BottomCenter,,0,0,0,,他从零开始索引他的数字
Dialogue: 0,0:34:03.26,0:34:05.70,BottomCenter,,0,0,0,,所以第零个数是零
Dialogue: 0,0:34:06.09,0:34:08.36,BottomCenter,,0,0,0,,第一个斐波那契数是 1
Dialogue: 0,0:34:08.53,0:34:10.73,BottomCenter,,0,0,0,,第二个也是一个
Dialogue: 0,0:34:11.00,0:34:12.86,BottomCenter,,0,0,0,,第三个是二
Dialogue: 0,0:34:13.32,0:34:14.92,BottomCenter,,0,0,0,,然后一加二等于三
Dialogue: 0,0:34:14.92,0:34:16.40,BottomCenter,,0,0,0,,二加三等于五
Dialogue: 0,0:34:16.40,0:34:17.73,BottomCenter,,0,0,0,,三加五等于八
Dialogue: 0,0:34:17.73,0:34:19.36,BottomCenter,,0,0,0,,五加八等于 13
Dialogue: 0,0:34:19.36,0:34:22.07,BottomCenter,,0,0,0,,所以每个都是前两个的总和
Dialogue: 0,0:34:22.86,0:34:25.59,BottomCenter,,0,0,0,,除了基本情况零和一之外
Dialogue: 0,0:34:25.59,0:34:28.09,BottomCenter,,0,0,0,,仅定义为零和一
Dialogue: 0,0:34:29.96,0:34:31.86,BottomCenter,,0,0,0,,现在增长就是流动
Dialogue: 0,0:34:31.86,0:34:34.76,BottomCenter,,0,0,0,,在斐波那契数列的早期阶段
Dialogue: 0,0:34:35.76,0:34:36.96,BottomCenter,,0,0,0,,但如你所见
Dialogue: 0,0:34:37.30,0:34:38.80,BottomCenter,,0,0,0,,数字开始增长
Dialogue: 0,0:34:38.90,0:34:42.50,BottomCenter,,0,0,0,,当你知道 n 是 8 时，速度会快一点
Dialogue: 0,0:34:42.86,0:34:46.00,BottomCenter,,0,0,0,,但是如果我们一直到 n 是 35 会发生什么
Dialogue: 0,0:34:46.69,0:34:48.92,BottomCenter,,0,0,0,,事实证明斐波那数列
Dialogue: 0,0:34:49.17,0:34:50.57,BottomCenter,,0,0,0,,增长得很快
Dialogue: 0,0:34:51.32,0:34:57.26,BottomCenter,,0,0,0,,一直到 9,227,465
Dialogue: 0,0:34:57.92,0:35:01.00,BottomCenter,,0,0,0,,是斐波那契数 35
Dialogue: 0,0:35:03.76,0:35:05.92,BottomCenter,,0,0,0,,所以让我们看一下树递归方式
Dialogue: 0,0:35:05.92,0:35:08.07,BottomCenter,,0,0,0,,计算斐巴那奇数
Dialogue: 0,0:35:08.76,0:35:11.53,BottomCenter,,0,0,0,,我们将定义 fib 来接受 n
Dialogue: 0,0:35:13.40,0:35:15.36,BottomCenter,,0,0,0,,如果 n 为零则返回零
Dialogue: 0,0:35:15.40,0:35:17.40,BottomCenter,,0,0,0,,如果 n 为 1 将返回 1
Dialogue: 0,0:35:17.40,0:35:19.26,BottomCenter,,0,0,0,,这是两个基本情况
Dialogue: 0,0:35:19.46,0:35:21.30,BottomCenter,,0,0,0,,递归的情况是什么
Dialogue: 0,0:35:21.57,0:35:21.76,BottomCenter,,0,0,0,,出色地
Dialogue: 0,0:35:21.76,0:35:24.92,BottomCenter,,0,0,0,,每个斐波那契数都是前两个数之和
Dialogue: 0,0:35:25.46,0:35:27.96,BottomCenter,,0,0,0,,我们可以将其写为 fib 和负二
Dialogue: 0,0:35:27.96,0:35:29.86,BottomCenter,,0,0,0,,加 fib 减 1
Dialogue: 0,0:35:30.90,0:35:33.80,BottomCenter,,0,0,0,,这是一个树递归函数，因为
Dialogue: 0,0:35:33.96,0:35:36.96,BottomCenter,,0,0,0,,计算 fib 我必须再次调用 fib 和 fib
Dialogue: 0,0:35:37.13,0:35:40.46,BottomCenter,,0,0,0,,所以 fib 的正文中有不止一次对 fib 的调用
Dialogue: 0,0:35:42.96,0:35:44.76,BottomCenter,,0,0,0,,的计算过程
Dialogue: 0,0:35:44.76,0:35:46.36,BottomCenter,,0,0,0,,计算斐波那契数
Dialogue: 0,0:35:46.36,0:35:49.57,BottomCenter,,0,0,0,,这样就演化成了树形结构
Dialogue: 0,0:35:50.13,0:35:51.90,BottomCenter,,0,0,0,,所以计算小纤维五
Dialogue: 0,0:35:52.30,0:35:55.30,BottomCenter,,0,0,0,,涉及计算纤维三和纤维四
Dialogue: 0,0:35:56.17,0:35:59.19,BottomCenter,,0,0,0,,fib 3 涉及计算 fib 2 中的 fib 1
Dialogue: 0,0:35:59.73,0:36:02.69,BottomCenter,,0,0,0,,纤维二涉及计算纤维一中的纤维零
Dialogue: 0,0:36:04.07,0:36:05.80,BottomCenter,,0,0,0,,这些都是基本情况
Dialogue: 0,0:36:06.30,0:36:08.80,BottomCenter,,0,0,0,,返回函数值的位置
Dialogue: 0,0:36:08.90,0:36:11.53,BottomCenter,,0,0,0,,直接执行，无需任何递归调用
Dialogue: 0,0:36:12.30,0:36:14.19,BottomCenter,,0,0,0,,好吧，计算小纤维四怎么样？
Dialogue: 0,0:36:14.19,0:36:15.32,BottomCenter,,0,0,0,,我们还没有完成
Dialogue: 0,0:36:15.32,0:36:17.86,BottomCenter,,0,0,0,,涉及计算纤维二和纤维三
Dialogue: 0,0:36:18.07,0:36:20.09,BottomCenter,,0,0,0,,每一个都有一个非常小的
Dialogue: 0,0:36:20.26,0:36:23.36,BottomCenter,,0,0,0,,计算的结构化过程
Dialogue: 0,0:36:24.00,0:36:27.07,BottomCenter,,0,0,0,,整个图是树形结构的
Dialogue: 0,0:36:27.30,0:36:28.96,BottomCenter,,0,0,0,,如果你把它倒过来
Dialogue: 0,0:36:29.09,0:36:32.57,BottomCenter,,0,0,0,,然后你可以看到有一个根，然后是驼峰树枝
Dialogue: 0,0:36:32.73,0:36:36.07,BottomCenter,,0,0,0,,这些分支有自己较小的分支等
Dialogue: 0,0:36:37.86,0:36:39.50,BottomCenter,,0,0,0,,所以计算 fib 5
Dialogue: 0,0:36:40.30,0:36:44.26,BottomCenter,,0,0,0,,实际上就是遍历这个树结构的计算
Dialogue: 0,0:36:44.30,0:36:45.73,BottomCenter,,0,0,0,,通过以下方式
Dialogue: 0,0:36:46.73,0:36:51.07,BottomCenter,,0,0,0,,为了计算 fib 五，首先计算 fib 三
Dialogue: 0,0:36:51.07,0:36:53.26,BottomCenter,,0,0,0,,这是 n 减二
Dialogue: 0,0:36:54.50,0:36:57.80,BottomCenter,,0,0,0,,为了计算 fib 3，我们计算 fib 1
Dialogue: 0,0:36:58.09,0:36:59.76,BottomCenter,,0,0,0,,这给了我们第一
Dialogue: 0,0:37:00.07,0:37:02.80,BottomCenter,,0,0,0,,所以我在这里放了一个蓝点来表示这是第一个
Dialogue: 0,0:37:02.80,0:37:05.26,BottomCenter,,0,0,0,,返回我们曾经达到的值
Dialogue: 0,0:37:05.40,0:37:07.26,BottomCenter,,0,0,0,,当我们计算小纤维五时
Dialogue: 0,0:37:08.19,0:37:11.59,BottomCenter,,0,0,0,,然后我们找到 fib 0 和 fib 1 的返回值
Dialogue: 0,0:37:11.59,0:37:14.57,BottomCenter,,0,0,0,,最后对 fib 2 的调用可以返回
Dialogue: 0,0:37:14.76,0:37:16.69,BottomCenter,,0,0,0,,现在我们有了价值观一
Dialogue: 0,0:37:17.46,0:37:20.07,BottomCenter,,0,0,0,,一个我们可以加起来得到两个
Dialogue: 0,0:37:20.07,0:37:23.19,BottomCenter,,0,0,0,,对 fib 3 的调用返回
Dialogue: 0,0:37:23.92,0:37:25.73,BottomCenter,,0,0,0,,所以在小五以内
Dialogue: 0,0:37:25.73,0:37:29.30,BottomCenter,,0,0,0,,我们现在已经计算出 fib 和负二或 fib 三
Dialogue: 0,0:37:29.50,0:37:31.69,BottomCenter,,0,0,0,,但我们仍然需要计算小纤维四
Dialogue: 0,0:37:31.80,0:37:33.26,BottomCenter,,0,0,0,,或小纤维并减一
Dialogue: 0,0:37:33.46,0:37:35.86,BottomCenter,,0,0,0,,为了将这两个值加在一起
Dialogue: 0,0:37:35.86,0:37:38.07,BottomCenter,,0,0,0,,最终得到我们想要的答案
Dialogue: 0,0:37:38.40,0:37:41.09,BottomCenter,,0,0,0,,这是另一个树形结构的过程
Dialogue: 0,0:37:41.09,0:37:42.67,BottomCenter,,0,0,0,,我们从这个和这个返回的地方
Dialogue: 0,0:37:42.67,0:37:43.46,BottomCenter,,0,0,0,,然后我们就可以
Dialogue: 0,0:37:43.46,0:37:44.90,BottomCenter,,0,0,0,,最后使用那些返回
Dialogue: 0,0:37:44.90,0:37:46.92,BottomCenter,,0,0,0,,值以计算 fib 2
Dialogue: 0,0:37:47.69,0:37:49.09,BottomCenter,,0,0,0,,为了计算 fib 3
Dialogue: 0,0:37:49.30,0:37:50.73,BottomCenter,,0,0,0,,我们必须计算虚构事实一
Dialogue: 0,0:37:50.76,0:37:53.07,BottomCenter,,0,0,0,,和纤维零和纤维一得到纤维二
Dialogue: 0,0:37:53.13,0:37:55.30,BottomCenter,,0,0,0,,然后使用这些我们得到谎言三
Dialogue: 0,0:37:55.36,0:37:56.36,BottomCenter,,0,0,0,,现在终于
Dialogue: 0,0:37:56.36,0:37:58.07,BottomCenter,,0,0,0,,计算出纤维二值和纤维三
Dialogue: 0,0:37:58.07,0:37:59.26,BottomCenter,,0,0,0,,我们可以得到小谎言四
Dialogue: 0,0:37:59.53,0:38:01.80,BottomCenter,,0,0,0,,最终小谎五
Dialogue: 0,0:38:04.76,0:38:06.73,BottomCenter,,0,0,0,,好吧，我给你讲了一个故事
Dialogue: 0,0:38:06.73,0:38:08.53,BottomCenter,,0,0,0,,这个递归过程如何
Dialogue: 0,0:38:09.00,0:38:10.80,BottomCenter,,0,0,0,,进行计算
Dialogue: 0,0:38:11.59,0:38:14.92,BottomCenter,,0,0,0,,让我们看看是否可以使用程序来说明
Dialogue: 0,0:38:15.96,0:38:18.36,BottomCenter,,0,0,0,,所以我要做的第一件事就是定义 fib
Dialogue: 0,0:38:18.69,0:38:20.32,BottomCenter,,0,0,0,,就像我告诉你的
Dialogue: 0,0:38:28.36,0:38:31.32,BottomCenter,,0,0,0,,递归情况返回 fib
Dialogue: 0,0:38:31.80,0:38:32.92,BottomCenter,,0,0,0,,并减去二
Dialogue: 0,0:38:34.30,0:38:36.73,BottomCenter,,0,0,0,,加 fib 减 1
Dialogue: 0,0:38:39.86,0:38:42.30,BottomCenter,,0,0,0,,如果我们现在计算斐波那契数
Dialogue: 0,0:38:42.36,0:38:44.67,BottomCenter,,0,0,0,,基本情况是我们所期望的
Dialogue: 0,0:38:44.76,0:38:47.90,BottomCenter,,0,0,0,,下一个是一 下一个是二
Dialogue: 0,0:38:49.07,0:38:50.76,BottomCenter,,0,0,0,,第五个是五
Dialogue: 0,0:38:51.00,0:38:53.40,BottomCenter,,0,0,0,,那8号呢，就是21号
Dialogue: 0,0:38:53.80,0:38:55.73,BottomCenter,,0,0,0,,10 等于 55 怎么样
Dialogue: 0,0:38:55.73,0:38:58.36,BottomCenter,,0,0,0,,20 怎么样，已经有 6000 了
Dialogue: 0,0:38:58.53,0:39:04.76,BottomCenter,,0,0,0,,第三十个是 832,000 第三十五个是 832,000
Dialogue: 0,0:39:05.07,0:39:07.17,BottomCenter,,0,0,0,,仍在计算
Dialogue: 0,0:39:08.00,0:39:09.30,BottomCenter,,0,0,0,,什么是真正努力工作
Dialogue: 0,0:39:09.30,0:39:11.07,BottomCenter,,0,0,0,,我以为电脑很快
Dialogue: 0,0:39:11.26,0:39:12.67,BottomCenter,,0,0,0,,这是怎么回事
Dialogue: 0,0:39:13.30,0:39:14.26,BottomCenter,,0,0,0,,一会儿好
Dialogue: 0,0:39:14.26,0:39:16.69,BottomCenter,,0,0,0,,我们将尝试说明计算过程
Dialogue: 0,0:39:16.69,0:39:20.00,BottomCenter,,0,0,0,,试图理解为什么计算需要这么长时间
Dialogue: 0,0:39:20.19,0:39:25.09,BottomCenter,,0,0,0,,9,227,465
Dialogue: 0,0:39:26.36,0:39:28.09,BottomCenter,,0,0,0,,现在让我停下来说有
Dialogue: 0,0:39:28.09,0:39:31.00,BottomCenter,,0,0,0,,计算斐波那契数的更快方法
Dialogue: 0,0:39:31.00,0:39:33.09,BottomCenter,,0,0,0,,所以我们不需要等那么久
Dialogue: 0,0:39:33.09,0:39:35.90,BottomCenter,,0,0,0,,但这个特定的实现
Dialogue: 0,0:39:36.07,0:39:37.36,BottomCenter,,0,0,0,,与这个特殊的
Dialogue: 0,0:39:37.53,0:39:39.80,BottomCenter,,0,0,0,,树形结构的计算过程
Dialogue: 0,0:39:39.92,0:39:41.36,BottomCenter,,0,0,0,,确实需要一点时间
Dialogue: 0,0:39:42.73,0:39:44.36,BottomCenter,,0,0,0,,好的，它在做什么
Dialogue: 0,0:39:45.07,0:39:47.73,BottomCenter,,0,0,0,,好吧，让我向您展示一个我给您的函数
Dialogue: 0,0:39:47.73,0:39:49.07,BottomCenter,,0,0,0,,您项目的一部分
Dialogue: 0,0:39:49.30,0:39:49.57,BottomCenter,,0,0,0,,和
Dialogue: 0,0:39:49.57,0:39:52.30,BottomCenter,,0,0,0,,也许您也想在未来的项目中使用它
Dialogue: 0,0:39:54.13,0:39:56.40,BottomCenter,,0,0,0,,这就是所谓的踪迹
Dialogue: 0,0:39:58.50,0:40:02.00,BottomCenter,,0,0,0,,它是从我提供的 ucb 模块导入的
Dialogue: 0,0:40:02.19,0:40:03.36,BottomCenter,,0,0,0,,与你的项目
Dialogue: 0,0:40:04.53,0:40:06.46,BottomCenter,,0,0,0,,Trace 被称为装饰器
Dialogue: 0,0:40:07.07,0:40:09.00,BottomCenter,,0,0,0,,你把它和广告牌放在一起
Dialogue: 0,0:40:09.17,0:40:12.00,BottomCenter,,0,0,0,,就在您要定义的函数之前
Dialogue: 0,0:40:12.40,0:40:14.00,BottomCenter,,0,0,0,,它改变了行为
Dialogue: 0,0:40:14.00,0:40:15.86,BottomCenter,,0,0,0,,要打印的函数
Dialogue: 0,0:40:16.19,0:40:19.32,BottomCenter,,0,0,0,,当它被调用和返回时
Dialogue: 0,0:40:19.46,0:40:20.59,BottomCenter,,0,0,0,,这样我们就可以看到
Dialogue: 0,0:40:20.59,0:40:22.96,BottomCenter,,0,0,0,,到底发生了什么，按什么顺序
Dialogue: 0,0:40:23.19,0:40:25.86,BottomCenter,,0,0,0,,当我们执行函数体时
Dialogue: 0,0:40:28.86,0:40:31.00,BottomCenter,,0,0,0,,所以现在如果我称小纤维为零
Dialogue: 0,0:40:32.13,0:40:33.40,BottomCenter,,0,0,0,,痕迹做什么
Dialogue: 0,0:40:33.40,0:40:36.30,BottomCenter,,0,0,0,,当零号被叫出时，王子就出局了吗？
Dialogue: 0,0:40:36.46,0:40:39.73,BottomCenter,,0,0,0,,然后当它返回时显示返回值
Dialogue: 0,0:40:41.26,0:40:42.76,BottomCenter,,0,0,0,,所以小纤维零和小纤维一
Dialogue: 0,0:40:42.76,0:40:45.09,BottomCenter,,0,0,0,,因为他们立即到达基本情况
Dialogue: 0,0:40:45.30,0:40:47.69,BottomCenter,,0,0,0,,有非常简单的痕迹
Dialogue: 0,0:40:48.32,0:40:49.53,BottomCenter,,0,0,0,,但撒了两个谎
Dialogue: 0,0:40:49.90,0:40:53.50,BottomCenter,,0,0,0,,涉及调用 fib 0 和调用 fib 1
Dialogue: 0,0:40:53.76,0:40:55.76,BottomCenter,,0,0,0,,分别返回零和一
Dialogue: 0,0:40:55.76,0:40:57.09,BottomCenter,,0,0,0,,这两个加在一起
Dialogue: 0,0:40:57.17,0:40:59.40,BottomCenter,,0,0,0,,然后 fib 2 返回 1
Dialogue: 0,0:41:00.32,0:41:02.53,BottomCenter,,0,0,0,,最后的这个是一直以来的那个
Dialogue: 0,0:41:02.53,0:41:02.69,BottomCenter,,0,0,0,,那里
Dialogue: 0,0:41:02.69,0:41:04.76,BottomCenter,,0,0,0,,这是 fib 2 的返回值
Dialogue: 0,0:41:06.36,0:41:09.17,BottomCenter,,0,0,0,,如果我们将 fib 称为 3，我们会看到更多结构
Dialogue: 0,0:41:09.67,0:41:12.53,BottomCenter,,0,0,0,,或纤维三涉及在纤维二中调用纤维一
Dialogue: 0,0:41:12.73,0:41:14.90,BottomCenter,,0,0,0,,称谎言二涉及一些
Dialogue: 0,0:41:14.90,0:41:17.07,BottomCenter,,0,0,0,,内部计算也是如此
Dialogue: 0,0:41:18.69,0:41:21.26,BottomCenter,,0,0,0,,好的，现在我们可以称之为小谎言五
Dialogue: 0,0:41:21.46,0:41:22.46,BottomCenter,,0,0,0,,并看到
Dialogue: 0,0:41:22.46,0:41:26.57,BottomCenter,,0,0,0,,树状结构的流程展现在我们眼前
Dialogue: 0,0:41:26.92,0:41:28.17,BottomCenter,,0,0,0,,所以调用 fip 5
Dialogue: 0,0:41:28.26,0:41:30.86,BottomCenter,,0,0,0,,涉及在 fib 4 中调用 fip iii
Dialogue: 0,0:41:31.09,0:41:33.26,BottomCenter,,0,0,0,,每个都有一些内部工作
Dialogue: 0,0:41:33.32,0:41:35.00,BottomCenter,,0,0,0,,所以 fip iii 返回 2
Dialogue: 0,0:41:35.19,0:41:37.40,BottomCenter,,0,0,0,,谎言四在这里返回三
Dialogue: 0,0:41:37.46,0:41:40.36,BottomCenter,,0,0,0,,顺便说一句，调用 fib 4 是一项相当大的工作
Dialogue: 0,0:41:41.32,0:41:43.50,BottomCenter,,0,0,0,,现在我们可以明白为什么调用 fib 10
Dialogue: 0,0:41:43.59,0:41:47.19,BottomCenter,,0,0,0,,只是一个比调用 fib 5 更大的过程
Dialogue: 0,0:41:47.46,0:41:48.67,BottomCenter,,0,0,0,,因为在其中
Dialogue: 0,0:41:48.67,0:41:51.67,BottomCenter,,0,0,0,,或者拨打小谎九一直到这里
Dialogue: 0,0:41:51.69,0:41:55.69,BottomCenter,,0,0,0,,和 fibate 一直到顶部
Dialogue: 0,0:41:57.32,0:41:58.19,BottomCenter,,0,0,0,,并在 fibate 内
Dialogue: 0,0:41:58.19,0:42:00.19,BottomCenter,,0,0,0,,有小谎言六、小谎言四和小谎言二
Dialogue: 0,0:42:00.19,0:42:02.80,BottomCenter,,0,0,0,,所有这些都有递归结构
Dialogue: 0,0:42:02.80,0:42:03.59,BottomCenter,,0,0,0,,还有
Dialogue: 0,0:42:04.30,0:42:06.00,BottomCenter,,0,0,0,,如果我们称 fib 15
Dialogue: 0,0:42:06.09,0:42:08.53,BottomCenter,,0,0,0,,突然间我们排起了长队
Dialogue: 0,0:42:08.53,0:42:11.36,BottomCenter,,0,0,0,,超出页面末尾的部分
Dialogue: 0,0:42:11.53,0:42:14.40,BottomCenter,,0,0,0,,我们可以看到这条痕迹永远持续下去
Dialogue: 0,0:42:15.50,0:42:17.57,BottomCenter,,0,0,0,,所以当我们计算 fib 35 时
Dialogue: 0,0:42:17.92,0:42:20.36,BottomCenter,,0,0,0,,虽然还有大量工作要做
Dialogue: 0,0:42:20.40,0:42:22.00,BottomCenter,,0,0,0,,为了计算所有这些
Dialogue: 0,0:42:22.17,0:42:23.46,BottomCenter,,0,0,0,,中间值
Dialogue: 0,0:42:23.46,0:42:26.00,BottomCenter,,0,0,0,,为了总结我们想要总结的内容
Dialogue: 0,0:42:28.40,0:42:29.19,BottomCenter,,0,0,0,,现在
Dialogue: 0,0:42:29.59,0:42:30.69,BottomCenter,,0,0,0,,让我们明确一点
Dialogue: 0,0:42:30.90,0:42:31.80,BottomCenter,,0,0,0,,这不是一个
Dialogue: 0,0:42:31.80,0:42:34.40,BottomCenter,,0,0,0,,计算斐波那契数的有效方法
Dialogue: 0,0:42:34.40,0:42:35.26,BottomCenter,,0,0,0,,尤其
Dialogue: 0,0:42:35.26,0:42:37.67,BottomCenter,,0,0,0,,因为有大量的重复
Dialogue: 0,0:42:37.67,0:42:40.50,BottomCenter,,0,0,0,,在这棵树中递归计算
Dialogue: 0,0:42:41.86,0:42:45.53,BottomCenter,,0,0,0,,fib 被多次调用相同的参数
Dialogue: 0,0:42:45.57,0:42:48.32,BottomCenter,,0,0,0,,并且每次都会计算相同的值
Dialogue: 0,0:42:49.67,0:42:50.67,BottomCenter,,0,0,0,,所以特别是
Dialogue: 0,0:42:50.67,0:42:52.96,BottomCenter,,0,0,0,,对于小纤维五，我们可以看到小纤维三
Dialogue: 0,0:42:52.96,0:42:55.09,BottomCenter,,0,0,0,,计算重复两次
Dialogue: 0,0:42:55.36,0:42:57.96,BottomCenter,,0,0,0,,如果我们能这样做一次岂不是很好
Dialogue: 0,0:42:58.26,0:43:00.57,BottomCenter,,0,0,0,,记住出来的值
Dialogue: 0,0:43:00.67,0:43:02.50,BottomCenter,,0,0,0,,并且不要尝试重新计算它
Dialogue: 0,0:43:02.96,0:43:03.57,BottomCenter,,0,0,0,,事实上
Dialogue: 0,0:43:03.57,0:43:06.17,BottomCenter,,0,0,0,,我们可以大大加快计算速度
Dialogue: 0,0:43:06.57,0:43:08.26,BottomCenter,,0,0,0,,正是这样做
Dialogue: 0,0:43:08.32,0:43:10.13,BottomCenter,,0,0,0,,我们将在几周内完成
Dialogue: 0,0:43:10.36,0:43:11.59,BottomCenter,,0,0,0,,所以不要这么认为
Dialogue: 0,0:43:11.59,0:43:14.19,BottomCenter,,0,0,0,,树递归过程必须很慢
Dialogue: 0,0:43:14.32,0:43:15.59,BottomCenter,,0,0,0,,他们当然不
Dialogue: 0,0:43:15.69,0:43:18.80,BottomCenter,,0,0,0,,但就目前而言，这个速度相当慢
Dialogue: 0,0:43:22.69,0:43:23.59,BottomCenter,,0,0,0,,欢迎回来
Dialogue: 0,0:43:24.32,0:43:25.69,BottomCenter,,0,0,0,,此时我们已经看到
Dialogue: 0,0:43:25.80,0:43:28.17,BottomCenter,,0,0,0,,一些递归的例子
Dialogue: 0,0:43:29.32,0:43:31.07,BottomCenter,,0,0,0,,我认为可以公平地说
Dialogue: 0,0:43:31.07,0:43:33.67,BottomCenter,,0,0,0,,这并不是立即显而易见的
Dialogue: 0,0:43:33.96,0:43:36.32,BottomCenter,,0,0,0,,为什么我们应该关心递归因为
Dialogue: 0,0:43:36.53,0:43:38.59,BottomCenter,,0,0,0,,迭代解决方案至少看起来像
Dialogue: 0,0:43:38.59,0:43:40.96,BottomCenter,,0,0,0,,对于大多数例子来说都很简单
Dialogue: 0,0:43:41.07,0:43:42.90,BottomCenter,,0,0,0,,递归解决方案
Dialogue: 0,0:43:43.59,0:43:45.09,BottomCenter,,0,0,0,,但除了只是
Dialogue: 0,0:43:45.09,0:43:47.57,BottomCenter,,0,0,0,,这是思考解决问题的有效方法
Dialogue: 0,0:43:47.57,0:43:48.76,BottomCenter,,0,0,0,,并通过计算
Dialogue: 0,0:43:49.13,0:43:51.32,BottomCenter,,0,0,0,,正如你稍后会看到的那样
Dialogue: 0,0:43:51.32,0:43:52.13,BottomCenter,,0,0,0,,事实证明
Dialogue: 0,0:43:52.13,0:43:53.86,BottomCenter,,0,0,0,,有一些非常有趣的例子
Dialogue: 0,0:43:53.86,0:43:56.13,BottomCenter,,0,0,0,,递归只是解决问题
Dialogue: 0,0:43:56.13,0:43:57.96,BottomCenter,,0,0,0,,如此美丽、如此优雅
Dialogue: 0,0:43:57.96,0:44:01.00,BottomCenter,,0,0,0,,以一种非常困难的迭代方式
Dialogue: 0,0:44:01.36,0:44:03.32,BottomCenter,,0,0,0,,并向您展示其中的一个例子
Dialogue: 0,0:44:03.32,0:44:05.36,BottomCenter,,0,0,0,,我们要谈谈游戏
Dialogue: 0,0:44:05.69,0:44:06.96,BottomCenter,,0,0,0,,河内塔
Dialogue: 0,0:44:07.26,0:44:08.46,BottomCenter,,0,0,0,,如果你不熟悉这个游戏
Dialogue: 0,0:44:08.46,0:44:09.46,BottomCenter,,0,0,0,,这是一个非常简单的游戏
Dialogue: 0,0:44:09.46,0:44:11.90,BottomCenter,,0,0,0,,有三根棍子
Dialogue: 0,0:44:11.92,0:44:12.46,BottomCenter,,0,0,0,,并且有
Dialogue: 0,0:44:12.46,0:44:16.00,BottomCenter,,0,0,0,,形成金字塔或塔的不同大小的圆盘
Dialogue: 0,0:44:16.19,0:44:19.80,BottomCenter,,0,0,0,,你的工作就是把圆盘从一个钉子上移开
Dialogue: 0,0:44:19.90,0:44:21.09,BottomCenter,,0,0,0,,到另一个钉子
Dialogue: 0,0:44:21.17,0:44:22.67,BottomCenter,,0,0,0,,有几个简单的规则
Dialogue: 0,0:44:22.67,0:44:24.96,BottomCenter,,0,0,0,,您一次只能举起一张光盘
Dialogue: 0,0:44:25.57,0:44:26.73,BottomCenter,,0,0,0,,你永远不能把
Dialogue: 0,0:44:26.92,0:44:29.59,BottomCenter,,0,0,0,,较大的圆盘位于较小的圆盘之上
Dialogue: 0,0:44:29.92,0:44:31.26,BottomCenter,,0,0,0,,这就是简单的规则
Dialogue: 0,0:44:31.50,0:44:33.32,BottomCenter,,0,0,0,,如果我要给你看几个例子
Dialogue: 0,0:44:33.32,0:44:35.19,BottomCenter,,0,0,0,,你可以去阅读有关烦恼之塔的内容
Dialogue: 0,0:44:35.57,0:44:37.17,BottomCenter,,0,0,0,,但在我们讨论如何解决这个问题之前
Dialogue: 0,0:44:37.17,0:44:38.30,BottomCenter,,0,0,0,,继续观看这个视频
Dialogue: 0,0:44:38.30,0:44:39.32,BottomCenter,,0,0,0,,这是我的视频
Dialogue: 0,0:44:39.50,0:44:41.67,BottomCenter,,0,0,0,,用四盘玩《烦恼之塔》的版本
Dialogue: 0,0:44:41.67,0:44:43.90,BottomCenter,,0,0,0,,你会了解规则和我在做什么
Dialogue: 0,0:44:44.09,0:44:45.07,BottomCenter,,0,0,0,,然后我们会回来
Dialogue: 0,0:44:45.07,0:44:47.96,BottomCenter,,0,0,0,,并讨论我们如何递归地解决这个问题
Dialogue: 0,0:45:12.80,0:45:14.76,BottomCenter,,0,0,0,,一二钉二
Dialogue: 0,0:45:14.92,0:45:16.76,BottomCenter,,0,0,0,,嗯，这里没有辛苦的工作
Dialogue: 0,0:45:16.76,0:45:19.90,BottomCenter,,0,0,0,,您只需拿起光盘然后将其放下即可
Dialogue: 0,0:45:19.90,0:45:21.07,BottomCenter,,0,0,0,,你能这样做的原因是
Dialogue: 0,0:45:21.07,0:45:22.17,BottomCenter,,0,0,0,,你可以拿起一张光盘
Dialogue: 0,0:45:22.26,0:45:23.50,BottomCenter,,0,0,0,,只要你不把那个
Dialogue: 0,0:45:23.50,0:45:24.86,BottomCenter,,0,0,0,,在更大的东西之上
Dialogue: 0,0:45:24.86,0:45:27.86,BottomCenter,,0,0,0,,你已经完成了，所以一张光盘的情况是微不足道的
Dialogue: 0,0:45:27.86,0:45:28.17,BottomCenter,,0,0,0,,好的
Dialogue: 0,0:45:28.17,0:45:30.67,BottomCenter,,0,0,0,,我想我现在可能已经说出了显而易见的事情
Dialogue: 0,0:45:30.86,0:45:33.17,BottomCenter,,0,0,0,,让我们用两张光盘来做这个例子
Dialogue: 0,0:45:33.30,0:45:36.50,BottomCenter,,0,0,0,,你的工作是将这两个从钉子一移到钉子二
Dialogue: 0,0:45:36.86,0:45:37.90,BottomCenter,,0,0,0,,好吧，很明显
Dialogue: 0,0:45:37.90,0:45:39.30,BottomCenter,,0,0,0,,做这个小事
Dialogue: 0,0:45:39.40,0:45:41.86,BottomCenter,,0,0,0,,显然不能去这里，因为那里很大
Dialogue: 0,0:45:42.30,0:45:43.50,BottomCenter,,0,0,0,,不能去那里
Dialogue: 0,0:45:43.53,0:45:45.96,BottomCenter,,0,0,0,,所以我们必须从一变为三
Dialogue: 0,0:45:46.69,0:45:48.53,BottomCenter,,0,0,0,,现在我们已经完成了
Dialogue: 0,0:45:48.53,0:45:50.57,BottomCenter,,0,0,0,,我们已经为行动扫清了障碍
Dialogue: 0,0:45:50.69,0:45:52.96,BottomCenter,,0,0,0,,两个是免费的，所以我们只需移动一个
Dialogue: 0,0:45:53.59,0:45:55.67,BottomCenter,,0,0,0,,磁盘从桩一到桩二
Dialogue: 0,0:45:55.73,0:45:57.40,BottomCenter,,0,0,0,,然后我们将三个移回两个
Dialogue: 0,0:45:57.40,0:45:59.09,BottomCenter,,0,0,0,,然后是金字塔或塔
Dialogue: 0,0:45:59.09,0:46:01.09,BottomCenter,,0,0,0,,已从 1 个变为 2 个
Dialogue: 0,0:46:01.09,0:46:02.67,BottomCenter,,0,0,0,,所以两个很容易
Dialogue: 0,0:46:03.32,0:46:03.67,BottomCenter,,0,0,0,,好的
Dialogue: 0,0:46:03.67,0:46:04.67,BottomCenter,,0,0,0,,让我们做三个
Dialogue: 0,0:46:05.40,0:46:07.50,BottomCenter,,0,0,0,,好吧，现在我们在哪里知道
Dialogue: 0,0:46:07.96,0:46:11.30,BottomCenter,,0,0,0,,我们知道如何将两个光盘从一个钉子移到另一个钉子上
Dialogue: 0,0:46:11.30,0:46:13.36,BottomCenter,,0,0,0,,我把它从一个移到了两个
Dialogue: 0,0:46:13.36,0:46:13.90,BottomCenter,,0,0,0,,正确的
Dialogue: 0,0:46:13.90,0:46:16.00,BottomCenter,,0,0,0,,我们知道我们要把小的移到这里
Dialogue: 0,0:46:16.00,0:46:18.73,BottomCenter,,0,0,0,,我们把 2 号移到这里，我们在这里做这个
Dialogue: 0,0:46:18.73,0:46:20.50,BottomCenter,,0,0,0,,顺便说一句，哪个钉子并不重要
Dialogue: 0,0:46:20.53,0:46:23.36,BottomCenter,,0,0,0,,所以如果我想将一二移动到二或三
Dialogue: 0,0:46:23.46,0:46:24.19,BottomCenter,,0,0,0,,这是同一件事
Dialogue: 0,0:46:24.19,0:46:26.46,BottomCenter,,0,0,0,,如果我想把这两个移到第三个钉子上
Dialogue: 0,0:46:26.53,0:46:28.17,BottomCenter,,0,0,0,,我会把一个搬到这里
Dialogue: 0,0:46:28.32,0:46:30.90,BottomCenter,,0,0,0,,两个到这里，然后一个弹出来
Dialogue: 0,0:46:30.90,0:46:32.40,BottomCenter,,0,0,0,,是的，所以什么并不重要
Dialogue: 0,0:46:32.90,0:46:34.07,BottomCenter,,0,0,0,,最终的钉子是
Dialogue: 0,0:46:34.69,0:46:36.86,BottomCenter,,0,0,0,,好吧，如果我想移动所有三个
Dialogue: 0,0:46:37.00,0:46:39.40,BottomCenter,,0,0,0,,好吧，我已经知道如何移动两个
Dialogue: 0,0:46:39.57,0:46:41.13,BottomCenter,,0,0,0,,所以无需执行这些步骤
Dialogue: 0,0:46:41.13,0:46:42.46,BottomCenter,,0,0,0,,让我们继续前进吧
Dialogue: 0,0:46:42.53,0:46:44.86,BottomCenter,,0,0,0,,两个都到这里
Dialogue: 0,0:46:44.90,0:46:46.19,BottomCenter,,0,0,0,,好的，使用相同的
Dialogue: 0,0:46:46.32,0:46:49.32,BottomCenter,,0,0,0,,我们刚刚在之前的幻灯片中使用的技术
Dialogue: 0,0:46:49.36,0:46:51.73,BottomCenter,,0,0,0,,此时我可以自由地将三个移动到两个
Dialogue: 0,0:46:51.90,0:46:52.26,BottomCenter,,0,0,0,,然后再次
Dialogue: 0,0:46:52.26,0:46:55.17,BottomCenter,,0,0,0,,我必须将两个磁盘从一个钉子移到另一个钉子上
Dialogue: 0,0:46:55.17,0:46:56.46,BottomCenter,,0,0,0,,但我知道该怎么做
Dialogue: 0,0:46:56.59,0:46:57.30,BottomCenter,,0,0,0,,我们已经做到了
Dialogue: 0,0:46:57.30,0:46:59.50,BottomCenter,,0,0,0,,我们已经证明你移动了小那个
Dialogue: 0,0:46:59.76,0:47:00.86,BottomCenter,,0,0,0,,到备用钉
Dialogue: 0,0:47:00.86,0:47:02.50,BottomCenter,,0,0,0,,我们将下一个移动到它想去的地方
Dialogue: 0,0:47:02.50,0:47:03.57,BottomCenter,,0,0,0,,然后你把它移回来
Dialogue: 0,0:47:03.57,0:47:05.59,BottomCenter,,0,0,0,,所以我可以在质量上做到这一点
Dialogue: 0,0:47:05.67,0:47:07.19,BottomCenter,,0,0,0,,好的，现在你可以开始了
Dialogue: 0,0:47:07.19,0:47:08.86,BottomCenter,,0,0,0,,开始看看我要做什么
Dialogue: 0,0:47:09.67,0:47:12.36,BottomCenter,,0,0,0,,你可以考虑解决河内塔
Dialogue: 0,0:47:12.73,0:47:17.07,BottomCenter,,0,0,0,,用三张光盘来解决两个版本
Dialogue: 0,0:47:17.46,0:47:20.67,BottomCenter,,0,0,0,,有两个圆盘，然后将第三个圆盘滑过去
Dialogue: 0,0:47:20.67,0:47:22.96,BottomCenter,,0,0,0,,当然我们能够扩大规模
Dialogue: 0,0:47:24.19,0:47:24.73,BottomCenter,,0,0,0,,好的
Dialogue: 0,0:47:24.73,0:47:27.30,BottomCenter,,0,0,0,,所以现在让我们用一些伪代码来做这件事
Dialogue: 0,0:47:27.30,0:47:28.92,BottomCenter,,0,0,0,,然后我们实际写出代码
Dialogue: 0,0:47:28.92,0:47:31.73,BottomCenter,,0,0,0,,所以让我正式确定我刚刚设置的内容
Dialogue: 0,0:47:31.76,0:47:33.67,BottomCenter,,0,0,0,,所以我要写一个函数
Dialogue: 0,0:47:34.26,0:47:36.76,BottomCenter,,0,0,0,,henoi ，它需要三个参数
Dialogue: 0,0:47:37.59,0:47:38.90,BottomCenter,,0,0,0,,有多少张光盘
Dialogue: 0,0:47:39.73,0:47:43.36,BottomCenter,,0,0,0,,什么是起始挂钩，什么是最终挂钩
Dialogue: 0,0:47:43.50,0:47:45.00,BottomCenter,,0,0,0,,所以这说的是请
Dialogue: 0,0:47:45.26,0:47:51.00,BottomCenter,,0,0,0,,从第一个桩上取出三个圆盘并将它们移到第二个桩上
Dialogue: 0,0:47:51.59,0:47:52.90,BottomCenter,,0,0,0,,和或 3 1 2
Dialogue: 0,0:47:53.69,0:47:56.26,BottomCenter,,0,0,0,,现在我需要做什么
Dialogue: 0,0:47:56.30,0:47:59.17,BottomCenter,,0,0,0,,好吧，我知道我需要得到一和二
Dialogue: 0,0:47:59.17,0:48:00.36,BottomCenter,,0,0,0,,这个数字三
Dialogue: 0,0:48:00.59,0:48:04.46,BottomCenter,,0,0,0,,回到这里，所以我需要将一和二移到
Dialogue: 0,0:48:05.19,0:48:06.90,BottomCenter,,0,0,0,,钉三好
Dialogue: 0,0:48:07.07,0:48:08.13,BottomCenter,,0,0,0,,那是什么意思
Dialogue: 0,0:48:08.13,0:48:11.57,BottomCenter,,0,0,0,,好吧，这意味着我想用两张光盘来解决 henoi
Dialogue: 0,0:48:11.69,0:48:13.92,BottomCenter,,0,0,0,,从第一个钉子开始并移动到
Dialogue: 0,0:48:13.92,0:48:15.32,BottomCenter,,0,0,0,,当然不是钉两个
Dialogue: 0,0:48:15.40,0:48:16.92,BottomCenter,,0,0,0,,但要钉住三个
Dialogue: 0,0:48:17.19,0:48:18.92,BottomCenter,,0,0,0,,所以为了解决这个问题
Dialogue: 0,0:48:18.92,0:48:21.69,BottomCenter,,0,0,0,,我想做的是先解决这个问题
Dialogue: 0,0:48:21.80,0:48:24.86,BottomCenter,,0,0,0,,将两张圆盘从第一个钉子放到第三个钉子上
Dialogue: 0,0:48:25.00,0:48:26.90,BottomCenter,,0,0,0,,我该怎么做，它是前置的
Dialogue: 0,0:48:26.90,0:48:28.73,BottomCenter,,0,0,0,,现在先别担心，我们稍后再讨论
Dialogue: 0,0:48:29.07,0:48:30.86,BottomCenter,,0,0,0,,此时我可以做什么
Dialogue: 0,0:48:30.86,0:48:33.50,BottomCenter,,0,0,0,,我可以随意将该磁盘从一个移动到两个
Dialogue: 0,0:48:33.59,0:48:36.09,BottomCenter,,0,0,0,,所以让我们继续定义另一个函数
Dialogue: 0,0:48:36.09,0:48:37.90,BottomCenter,,0,0,0,,移动不是
Dialogue: 0,0:48:37.90,0:48:40.96,BottomCenter,,0,0,0,,这只是实际执行一个操作
Dialogue: 0,0:48:41.00,0:48:43.46,BottomCenter,,0,0,0,,所以你稍后会看到这个河内
Dialogue: 0,0:48:43.59,0:48:45.57,BottomCenter,,0,0,0,,要做的就是递归
Dialogue: 0,0:48:45.73,0:48:46.59,BottomCenter,,0,0,0,,但此举是
Dialogue: 0,0:48:46.59,0:48:48.86,BottomCenter,,0,0,0,,此时您实际上正在移动光盘
Dialogue: 0,0:48:49.00,0:48:50.36,BottomCenter,,0,0,0,,所以现在我可以移动了
Dialogue: 0,0:48:52.40,0:48:54.92,BottomCenter,,0,0,0,,一盘三从一到二
Dialogue: 0,0:48:54.92,0:48:57.73,BottomCenter,,0,0,0,,显然这里出现的是一到二
Dialogue: 0,0:48:58.17,0:48:59.07,BottomCenter,,0,0,0,,现在我该怎么办
Dialogue: 0,0:48:59.07,0:49:00.90,BottomCenter,,0,0,0,,好吧，我得把这两张光盘拿走
Dialogue: 0,0:49:00.90,0:49:02.76,BottomCenter,,0,0,0,,并将它们从三个中移动
Dialogue: 0,0:49:03.00,0:49:04.80,BottomCenter,,0,0,0,,回到两个我该怎么做
Dialogue: 0,0:49:04.80,0:49:06.90,BottomCenter,,0,0,0,,好吧，让我们解决另一个 Hernoi 问题
Dialogue: 0,0:49:07.46,0:49:08.86,BottomCenter,,0,0,0,,开始和结束是什么
Dialogue: 0,0:49:08.86,0:49:10.69,BottomCenter,,0,0,0,,peg r 对我来说并不重要
Dialogue: 0,0:49:10.69,0:49:12.30,BottomCenter,,0,0,0,,所以现在我要解决
Dialogue: 0,0:49:12.46,0:49:17.76,BottomCenter,,0,0,0,,请将两个磁盘从桩号 3 移至桩号 2
Dialogue: 0,0:49:17.90,0:49:18.90,BottomCenter,,0,0,0,,我怎么做
Dialogue: 0,0:49:18.90,0:49:19.80,BottomCenter,,0,0,0,,它是递归的
Dialogue: 0,0:49:19.86,0:49:20.57,BottomCenter,,0,0,0,,不用担心
Dialogue: 0,0:49:20.57,0:49:22.26,BottomCenter,,0,0,0,,到那时我们会得到一点报酬
Dialogue: 0,0:49:22.50,0:49:23.30,BottomCenter,,0,0,0,,好的
Dialogue: 0,0:49:23.92,0:49:24.53,BottomCenter,,0,0,0,,好的
Dialogue: 0,0:49:24.53,0:49:27.90,BottomCenter,,0,0,0,,现在让我们开始用 python 编写这段代码
Dialogue: 0,0:49:28.00,0:49:30.40,BottomCenter,,0,0,0,,所以很抱歉我更改了函数的名称
Dialogue: 0,0:49:30.50,0:49:32.36,BottomCenter,,0,0,0,,现在将被称为“解决河内”
Dialogue: 0,0:49:32.59,0:49:34.50,BottomCenter,,0,0,0,,它需要三个参数
Dialogue: 0,0:49:34.59,0:49:37.17,BottomCenter,,0,0,0,,n 是磁盘总数
Dialogue: 0,0:49:38.26,0:49:39.76,BottomCenter,,0,0,0,,启动挂钩和挂钩
Dialogue: 0,0:49:39.76,0:49:44.09,BottomCenter,,0,0,0,,例如，在最后一个例子中，它是 3 1 2
Dialogue: 0,0:49:44.69,0:49:48.80,BottomCenter,,0,0,0,,三张光盘，从第一个钉子到第二个钉子
Dialogue: 0,0:49:48.86,0:49:51.40,BottomCenter,,0,0,0,,好吧，我们显然会递归地执行此操作
Dialogue: 0,0:49:51.86,0:49:53.40,BottomCenter,,0,0,0,,所以我们必须考虑基本情况
Dialogue: 0,0:49:53.40,0:49:55.00,BottomCenter,,0,0,0,,然后我们必须考虑递归情况
Dialogue: 0,0:49:55.00,0:49:57.07,BottomCenter,,0,0,0,,虽然我们已经看到了递归情况 albin
Dialogue: 0,0:49:57.07,0:49:58.40,BottomCenter,,0,0,0,,我们还看到了基本情况
Dialogue: 0,0:49:58.59,0:50:00.90,BottomCenter,,0,0,0,,基本情况是，如果您只有一张光盘
Dialogue: 0,0:50:01.46,0:50:03.19,BottomCenter,,0,0,0,,如果你只有一张光盘，那就是一个小问题
Dialogue: 0,0:50:03.19,0:50:05.40,BottomCenter,,0,0,0,,只是移动它 你必须将它移走
Dialogue: 0,0:50:05.73,0:50:07.67,BottomCenter,,0,0,0,,所以如果 n 等于 1
Dialogue: 0,0:50:07.73,0:50:10.86,BottomCenter,,0,0,0,,继续将该光盘从这里移动到这里
Dialogue: 0,0:50:10.86,0:50:14.09,BottomCenter,,0,0,0,,好的，如果 n 为 1，则移动磁盘
Dialogue: 0,0:50:16.50,0:50:17.30,BottomCenter,,0,0,0,,编号的
Dialogue: 0,0:50:18.00,0:50:19.53,BottomCenter,,0,0,0,,一、抱歉
Dialogue: 0,0:50:19.92,0:50:22.53,BottomCenter,,0,0,0,,从起始桩到结束桩
Dialogue: 0,0:50:22.57,0:50:24.90,BottomCenter,,0,0,0,,移动光盘是什么意思
Dialogue: 0,0:50:24.96,0:50:27.09,BottomCenter,,0,0,0,,好吧，我不会出去做所有的图形
Dialogue: 0,0:50:27.09,0:50:29.90,BottomCenter,,0,0,0,,所以对于移动我只需打印出来
Dialogue: 0,0:50:30.73,0:50:31.96,BottomCenter,,0,0,0,,正在做什么
Dialogue: 0,0:50:31.96,0:50:32.67,BottomCenter,,0,0,0,,什么是举动
Dialogue: 0,0:50:32.67,0:50:34.69,BottomCenter,,0,0,0,,然后您可以按照这些说明进行操作
Dialogue: 0,0:50:34.69,0:50:36.26,BottomCenter,,0,0,0,,所以我要打印移动磁盘
Dialogue: 0,0:50:36.26,0:50:39.90,BottomCenter,,0,0,0,,我将从这个钉子上打印出磁盘号
Dialogue: 0,0:50:40.19,0:50:43.30,BottomCenter,,0,0,0,,到这个钉子上，好吧，所以我在这里取这三个数字
Dialogue: 0,0:50:43.32,0:50:45.53,BottomCenter,,0,0,0,,我只是打印出一份说明
Dialogue: 0,0:50:45.69,0:50:47.13,BottomCenter,,0,0,0,,然后你就可以看到
Dialogue: 0,0:50:47.40,0:50:48.19,BottomCenter,,0,0,0,,这完成了
Dialogue: 0,0:50:48.19,0:50:49.00,BottomCenter,,0,0,0,,这个反斜杠
Dialogue: 0,0:50:49.00,0:50:49.40,BottomCenter,,0,0,0,,顺便一提
Dialogue: 0,0:50:49.40,0:50:52.09,BottomCenter,,0,0,0,,只是因为我在这里有线条连续性
Dialogue: 0,0:50:52.17,0:50:53.13,BottomCenter,,0,0,0,,线制动器
Dialogue: 0,0:50:54.26,0:50:55.59,BottomCenter,,0,0,0,,好吧，这是最简单的部分
Dialogue: 0,0:50:56.32,0:50:58.90,BottomCenter,,0,0,0,,将此光盘从这里移动到这里 好的好的
Dialogue: 0,0:51:00.73,0:51:02.17,BottomCenter,,0,0,0,,现在让我们进行递归部分
Dialogue: 0,0:51:02.17,0:51:05.13,BottomCenter,,0,0,0,,所以如果 n 不是 1 我必须做什么
Dialogue: 0,0:51:05.19,0:51:08.50,BottomCenter,,0,0,0,,好吧，我得把最上面的磁盘从我背上拿下来
Dialogue: 0,0:51:08.67,0:51:11.73,BottomCenter,,0,0,0,,我得把它们移到备用猪钉上
Dialogue: 0,0:51:11.80,0:51:13.17,BottomCenter,,0,0,0,,然后我必须采取
Dialogue: 0,0:51:13.17,0:51:15.07,BottomCenter,,0,0,0,,底部的一大段距离
Dialogue: 0,0:51:15.07,0:51:18.09,BottomCenter,,0,0,0,,物理移动它 将其移动到末端钉上
Dialogue: 0,0:51:18.13,0:51:20.09,BottomCenter,,0,0,0,,然后将剩下的那一端减一
Dialogue: 0,0:51:20.09,0:51:21.40,BottomCenter,,0,0,0,,然后将它们移回来
Dialogue: 0,0:51:21.76,0:51:22.90,BottomCenter,,0,0,0,,听起来很像递归
Dialogue: 0,0:51:22.90,0:51:26.96,BottomCenter,,0,0,0,,因为用 3 2 1 解决 hinoi 塔
Dialogue: 0,0:51:27.07,0:51:28.00,BottomCenter,,0,0,0,,全部都是一样
Dialogue: 0,0:51:28.19,0:51:29.13,BottomCenter,,0,0,0,,规则是一样的
Dialogue: 0,0:51:29.13,0:51:31.17,BottomCenter,,0,0,0,,因为底部的那个是最大的
Dialogue: 0,0:51:31.53,0:51:32.96,BottomCenter,,0,0,0,,我可以在上面放任何东西
Dialogue: 0,0:51:32.96,0:51:35.32,BottomCenter,,0,0,0,,所以没有禁止在那里移动任何东西的规则
Dialogue: 0,0:51:35.92,0:51:37.07,BottomCenter,,0,0,0,,所以首先
Dialogue: 0,0:51:37.07,0:51:39.50,BottomCenter,,0,0,0,,我们必须弄清楚备用钉子是什么
Dialogue: 0,0:51:39.76,0:51:41.32,BottomCenter,,0,0,0,,所以如果我想从
Dialogue: 0,0:51:41.36,0:51:44.69,BottomCenter,,0,0,0,,说一到二，备用的钉子三是什么
Dialogue: 0,0:51:44.86,0:51:47.00,BottomCenter,,0,0,0,,如果我想从一增加到三
Dialogue: 0,0:51:47.00,0:51:48.92,BottomCenter,,0,0,0,,备用钉子二是什么
Dialogue: 0,0:51:49.07,0:51:51.69,BottomCenter,,0,0,0,,所以对于任何开始、停止和挂钩
Dialogue: 0,0:51:51.69,0:51:53.96,BottomCenter,,0,0,0,,我必须知道备用钉子是什么
Dialogue: 0,0:51:54.36,0:51:55.53,BottomCenter,,0,0,0,,现在我可以有条件地写它
Dialogue: 0,0:51:55.53,0:51:56.69,BottomCenter,,0,0,0,,我可以说如果
Dialogue: 0,0:51:57.00,0:52:00.00,BottomCenter,,0,0,0,,开始是一，结束是二，然后备用三
Dialogue: 0,0:52:00.00,0:52:02.96,BottomCenter,,0,0,0,,它的开始是一，结束是三，然后备用两个
Dialogue: 0,0:52:02.96,0:52:03.92,BottomCenter,,0,0,0,,等等等等
Dialogue: 0,0:52:04.07,0:52:07.96,BottomCenter,,0,0,0,,或者我可以在这里使用这个聪明的小方程，它表示
Dialogue: 0,0:52:08.19,0:52:14.13,BottomCenter,,0,0,0,,对于任何给定的起始钉和结束钉，矛钉为 6
Dialogue: 0,0:52:14.73,0:52:16.09,BottomCenter,,0,0,0,,那些之间的区别
Dialogue: 0,0:52:16.17,0:52:16.96,BottomCenter,,0,0,0,,首先
Dialogue: 0,0:52:17.13,0:52:18.69,BottomCenter,,0,0,0,,首先让我们说服自己这是对的
Dialogue: 0,0:52:18.69,0:52:20.26,BottomCenter,,0,0,0,,然后我们再问为什么它是对的
Dialogue: 0,0:52:20.40,0:52:24.00,BottomCenter,,0,0,0,,所以如果开始是一而结束是二
Dialogue: 0,0:52:24.13,0:52:26.90,BottomCenter,,0,0,0,,六减一减二等于三
Dialogue: 0,0:52:26.90,0:52:32.40,BottomCenter,,0,0,0,,如果开始是三，结束是四，那就好
Dialogue: 0,0:52:32.46,0:52:34.26,BottomCenter,,0,0,0,,六减四等于二
Dialogue: 0,0:52:34.26,0:52:36.96,BottomCenter,,0,0,0,,你可以说服自己开始并取消分页
Dialogue: 0,0:52:37.13,0:52:37.80,BottomCenter,,0,0,0,,这将是真的
Dialogue: 0,0:52:37.80,0:52:39.36,BottomCenter,,0,0,0,,顺便说一句，为什么这是真的
Dialogue: 0,0:52:39.53,0:52:43.30,BottomCenter,,0,0,0,,三加二加一当然是六
Dialogue: 0,0:52:43.67,0:52:45.46,BottomCenter,,0,0,0,,所以如果我取与相关的值
Dialogue: 0,0:52:45.46,0:52:46.73,BottomCenter,,0,0,0,,两个钉子
Dialogue: 0,0:52:46.73,0:52:48.69,BottomCenter,,0,0,0,,剩下的必须是 6
Dialogue: 0,0:52:48.69,0:52:51.53,BottomCenter,,0,0,0,,无论这些值是什么，这都是一个聪明的小技巧
Dialogue: 0,0:52:51.67,0:52:54.67,BottomCenter,,0,0,0,,从这两个中找出备用的钉子
Dialogue: 0,0:52:54.92,0:52:55.80,BottomCenter,,0,0,0,,好吧，现在
Dialogue: 0,0:52:56.00,0:52:58.09,BottomCenter,,0,0,0,,糟糕的是为什么我需要知道备用钉子
Dialogue: 0,0:52:58.17,0:52:59.17,BottomCenter,,0,0,0,,好吧，当我搬家时
Dialogue: 0,0:52:59.17,0:53:01.86,BottomCenter,,0,0,0,,如果我想将所有三个从一移动到三
Dialogue: 0,0:53:02.00,0:53:02.92,BottomCenter,,0,0,0,,我必须搬家
Dialogue: 0,0:53:02.96,0:53:05.69,BottomCenter,,0,0,0,,两张光盘从一张到备用钉
Dialogue: 0,0:53:05.69,0:53:07.00,BottomCenter,,0,0,0,,我必须能够弄清楚什么
Dialogue: 0,0:53:07.46,0:53:09.46,BottomCenter,,0,0,0,,这对于任何一对
Dialogue: 0,0:53:09.73,0:53:10.53,BottomCenter,,0,0,0,,开始的夜晚
Dialogue: 0,0:53:11.26,0:53:13.26,BottomCenter,,0,0,0,,好现在让我们回到递归代码
Dialogue: 0,0:53:13.26,0:53:15.59,BottomCenter,,0,0,0,,这是我的简单移动光盘，这是一个说明
Dialogue: 0,0:53:15.67,0:53:17.67,BottomCenter,,0,0,0,,这是我的基本递归案例
Dialogue: 0,0:53:17.80,0:53:19.26,BottomCenter,,0,0,0,,现在我准备好了
Dialogue: 0,0:53:20.09,0:53:22.32,BottomCenter,,0,0,0,,所以首先要弄清楚备用钉子是什么
Dialogue: 0,0:53:22.40,0:53:24.26,BottomCenter,,0,0,0,,6 开始减去结束
Dialogue: 0,0:53:24.40,0:53:25.73,BottomCenter,,0,0,0,,我为什么想知道
Dialogue: 0,0:53:25.73,0:53:27.90,BottomCenter,,0,0,0,,好吧，因为要解决河内塔
Dialogue: 0,0:53:27.96,0:53:30.32,BottomCenter,,0,0,0,,从头到尾三张光盘
Dialogue: 0,0:53:30.67,0:53:33.30,BottomCenter,,0,0,0,,我要解决一个更简单的问题
Dialogue: 0,0:53:33.30,0:53:34.53,BottomCenter,,0,0,0,,这是我的递归
Dialogue: 0,0:53:34.53,0:53:37.92,BottomCenter,,0,0,0,,解决 henoi 是解决 henoi 与 n 减去 1 圆盘
Dialogue: 0,0:53:37.92,0:53:40.67,BottomCenter,,0,0,0,,这就是顶部的东西，留下底部的东西
Dialogue: 0,0:53:40.80,0:53:41.73,BottomCenter,,0,0,0,,从头开始
Dialogue: 0,0:53:41.73,0:53:44.53,BottomCenter,,0,0,0,,显然这就是他们开始的地方而不是结束的地方
Dialogue: 0,0:53:44.59,0:53:46.36,BottomCenter,,0,0,0,,但为了备用
Dialogue: 0,0:53:46.69,0:53:48.46,BottomCenter,,0,0,0,,所以请帮我解决起飞问题
Dialogue: 0,0:53:48.46,0:53:50.92,BottomCenter,,0,0,0,,把这些结束从我的背上减去一个diss
Dialogue: 0,0:53:50.96,0:53:52.50,BottomCenter,,0,0,0,,并将它们放在备用的
Dialogue: 0,0:53:52.50,0:53:54.09,BottomCenter,,0,0,0,,这是如何递归发生的
Dialogue: 0,0:53:54.09,0:53:55.67,BottomCenter,,0,0,0,,我们稍后会详细介绍
Dialogue: 0,0:53:56.30,0:53:58.50,BottomCenter,,0,0,0,,一旦问题解决了，相信它已经解决了
Dialogue: 0,0:53:58.50,0:53:59.30,BottomCenter,,0,0,0,,我该怎么办
Dialogue: 0,0:53:59.32,0:54:01.59,BottomCenter,,0,0,0,,好吧，现在我一开始就遇到了这个diss
Dialogue: 0,0:54:01.59,0:54:02.76,BottomCenter,,0,0,0,,我想把它移到哪里
Dialogue: 0,0:54:02.86,0:54:05.13,BottomCenter,,0,0,0,,直到最后，我知道结局是免费的
Dialogue: 0,0:54:05.26,0:54:08.00,BottomCenter,,0,0,0,,因为这些减一的结尾在备用光盘上
Dialogue: 0,0:54:08.17,0:54:10.07,BottomCenter,,0,0,0,,所以我现在要搬家
Dialogue: 0,0:54:10.59,0:54:11.40,BottomCenter,,0,0,0,,这
Dialogue: 0,0:54:11.59,0:54:14.50,BottomCenter,,0,0,0,,第en张盘从头到尾
Dialogue: 0,0:54:14.59,0:54:17.57,BottomCenter,,0,0,0,,很好，所以我解决了这个问题 我解决了这个问题
Dialogue: 0,0:54:17.57,0:54:18.80,BottomCenter,,0,0,0,,现在我想做什么
Dialogue: 0,0:54:18.80,0:54:20.92,BottomCenter,,0,0,0,,我还有 n 减 1 的备用
Dialogue: 0,0:54:20.96,0:54:22.50,BottomCenter,,0,0,0,,我想把它移到哪里
Dialogue: 0,0:54:23.13,0:54:24.59,BottomCenter,,0,0,0,,最后的钉子很好
Dialogue: 0,0:54:24.59,0:54:26.32,BottomCenter,,0,0,0,,所以解决这个问题
Dialogue: 0,0:54:26.36,0:54:29.69,BottomCenter,,0,0,0,,从备用到末尾解决 oy 和减 1
Dialogue: 0,0:54:30.17,0:54:33.50,BottomCenter,,0,0,0,,完成这就是递归之美的力量
Dialogue: 0,0:54:33.50,0:54:35.17,BottomCenter,,0,0,0,,看来我在作弊
Dialogue: 0,0:54:35.50,0:54:36.76,BottomCenter,,0,0,0,,我在作弊怎么办
Dialogue: 0,0:54:37.67,0:54:39.13,BottomCenter,,0,0,0,,我定义
Dialogue: 0,0:54:39.13,0:54:42.07,BottomCenter,,0,0,0,,用复杂的规则解决这个问题
Dialogue: 0,0:54:42.09,0:54:45.17,BottomCenter,,0,0,0,,简单地说解决你自己的一个更简单的版本
Dialogue: 0,0:54:45.17,0:54:46.32,BottomCenter,,0,0,0,,这就是递归的力量
Dialogue: 0,0:54:46.32,0:54:48.92,BottomCenter,,0,0,0,,现在让我们说服自己这确实有效
Dialogue: 0,0:54:49.53,0:54:51.90,BottomCenter,,0,0,0,,好吧，这是我的小代码
Dialogue: 0,0:54:51.90,0:54:53.73,BottomCenter,,0,0,0,,记住移动光盘只是一个打印语句
Dialogue: 0,0:54:53.73,0:54:55.13,BottomCenter,,0,0,0,,以及为了空间的目的
Dialogue: 0,0:54:55.19,0:54:56.73,BottomCenter,,0,0,0,,我不会在这里打印出来
Dialogue: 0,0:54:57.00,0:54:59.59,BottomCenter,,0,0,0,,所以 a 等于 1 基本情况你可以移动光盘
Dialogue: 0,0:54:59.80,0:55:01.46,BottomCenter,,0,0,0,,如果 n 大于 1
Dialogue: 0,0:55:01.69,0:55:03.17,BottomCenter,,0,0,0,,找出备用光盘是什么
Dialogue: 0,0:55:04.67,0:55:07.17,BottomCenter,,0,0,0,,用 n 减一解决两座 hinoi 塔
Dialogue: 0,0:55:07.26,0:55:08.90,BottomCenter,,0,0,0,,然后将光盘移到中间
Dialogue: 0,0:55:09.00,0:55:09.30,BottomCenter,,0,0,0,,好的
Dialogue: 0,0:55:09.30,0:55:11.46,BottomCenter,,0,0,0,,让我们来看看它是如何工作的
Dialogue: 0,0:55:11.69,0:55:15.50,BottomCenter,,0,0,0,,在 oy 3 1 2 中，我在第一个钉子上有三个磁盘
Dialogue: 0,0:55:15.57,0:55:18.50,BottomCenter,,0,0,0,,请将它们从 1 2 2 移开
Dialogue: 0,0:55:18.69,0:55:20.92,BottomCenter,,0,0,0,,好，我该怎么做，进入代码
Dialogue: 0,0:55:21.13,0:55:23.26,BottomCenter,,0,0,0,,基本情况当然不成立吗
Dialogue: 0,0:55:23.26,0:55:25.09,BottomCenter,,0,0,0,,那么备用钉子是什么
Dialogue: 0,0:55:25.09,0:55:27.46,BottomCenter,,0,0,0,,在这种情况下，备用钉子是三个
Dialogue: 0,0:55:27.46,0:55:28.80,BottomCenter,,0,0,0,,六减一
Dialogue: 0,0:55:28.86,0:55:32.09,BottomCenter,,0,0,0,,减二所以我的工作是解决
Dialogue: 0,0:55:32.40,0:55:33.90,BottomCenter,,0,0,0,,抱歉，我在这里缩写了河内
Dialogue: 0,0:55:33.90,0:55:35.09,BottomCenter,,0,0,0,,我想我这样做是为了太空
Dialogue: 0,0:55:35.09,0:55:39.07,BottomCenter,,0,0,0,,所以河内这里应该是解决河内
Dialogue: 0,0:55:39.46,0:55:40.69,BottomCenter,,0,0,0,,我这样做是因为我们要逃跑
Dialogue: 0,0:55:40.69,0:55:41.69,BottomCenter,,0,0,0,,这里空间不足
Dialogue: 0,0:55:42.40,0:55:46.50,BottomCenter,,0,0,0,,所以把三从一移到二我需要做三件事
Dialogue: 0,0:55:46.69,0:55:48.13,BottomCenter,,0,0,0,,我需要搬到河内
Dialogue: 0,0:55:48.69,0:55:52.09,BottomCenter,,0,0,0,,两张光盘从一到三是备用的
Dialogue: 0,0:55:52.53,0:55:53.32,BottomCenter,,0,0,0,,所以
Dialogue: 0,0:55:53.73,0:55:55.07,BottomCenter,,0,0,0,,从这里到这里有两个磁盘
Dialogue: 0,0:55:55.19,0:55:57.53,BottomCenter,,0,0,0,,将第三个圆盘从一个移动到两个
Dialogue: 0,0:55:57.90,0:56:00.90,BottomCenter,,0,0,0,,然后从备用磁盘中移动两个磁盘
Dialogue: 0,0:56:01.00,0:56:02.17,BottomCenter,,0,0,0,,回到原来的样子
Dialogue: 0,0:56:02.36,0:56:03.59,BottomCenter,,0,0,0,,请注意我已经写了
Dialogue: 0,0:56:03.59,0:56:05.53,BottomCenter,,0,0,0,,这三个都在这里
Dialogue: 0,0:56:05.92,0:56:07.69,BottomCenter,,0,0,0,,因为这就是这三行代码
Dialogue: 0,0:56:07.69,0:56:09.26,BottomCenter,,0,0,0,,我所做的就是填写
Dialogue: 0,0:56:09.53,0:56:11.76,BottomCenter,,0,0,0,,n 和减一的值
Dialogue: 0,0:56:11.86,0:56:13.13,BottomCenter,,0,0,0,,开始停止和结束
Dialogue: 0,0:56:13.13,0:56:13.92,BottomCenter,,0,0,0,,现在
Dialogue: 0,0:56:14.32,0:56:15.40,BottomCenter,,0,0,0,,此时会发生什么
Dialogue: 0,0:56:15.40,0:56:17.19,BottomCenter,,0,0,0,,我已经调用了这个函数
Dialogue: 0,0:56:17.32,0:56:19.46,BottomCenter,,0,0,0,,这是对此函数的递归调用
Dialogue: 0,0:56:19.46,0:56:21.36,BottomCenter,,0,0,0,,我将在一秒钟内扩展它
Dialogue: 0,0:56:21.73,0:56:24.13,BottomCenter,,0,0,0,,但我们不能忘记我们必须回来
Dialogue: 0,0:56:24.40,0:56:25.76,BottomCenter,,0,0,0,,我们将进行这个递归调用
Dialogue: 0,0:56:25.76,0:56:27.17,BottomCenter,,0,0,0,,这会导致更多的事情
Dialogue: 0,0:56:27.17,0:56:28.19,BottomCenter,,0,0,0,,但当它完成时
Dialogue: 0,0:56:28.32,0:56:29.13,BottomCenter,,0,0,0,,我们必须回来
Dialogue: 0,0:56:29.13,0:56:31.32,BottomCenter,,0,0,0,,然后做这个然后做这个
Dialogue: 0,0:56:31.50,0:56:33.53,BottomCenter,,0,0,0,,所以递归调用的性质是
Dialogue: 0,0:56:33.53,0:56:36.09,BottomCenter,,0,0,0,,有一个承诺会回到这里
Dialogue: 0,0:56:36.19,0:56:38.92,BottomCenter,,0,0,0,,当执行完成时
Dialogue: 0,0:56:39.00,0:56:40.59,BottomCenter,,0,0,0,,但如果这导致另一个电话
Dialogue: 0,0:56:40.59,0:56:41.53,BottomCenter,,0,0,0,,这会导致另一个电话
Dialogue: 0,0:56:41.53,0:56:42.80,BottomCenter,,0,0,0,,你继续往下走
Dialogue: 0,0:56:42.96,0:56:44.26,BottomCenter,,0,0,0,,然后当你完成后
Dialogue: 0,0:56:44.53,0:56:46.76,BottomCenter,,0,0,0,,你回来做这件事有点像
Dialogue: 0,0:56:47.30,0:56:49.40,BottomCenter,,0,0,0,,我们之前用递归做过的例子
Dialogue: 0,0:56:49.40,0:56:51.32,BottomCenter,,0,0,0,,我们构建这个表达式
Dialogue: 0,0:56:51.32,0:56:53.59,BottomCenter,,0,0,0,,所以这里我们不建立一个表达式
Dialogue: 0,0:56:53.76,0:56:55.86,BottomCenter,,0,0,0,,但我们正在建立一系列
Dialogue: 0,0:56:55.86,0:56:58.36,BottomCenter,,0,0,0,,我们承诺会继续采取的行动
Dialogue: 0,0:56:58.53,0:57:00.59,BottomCenter,,0,0,0,,好吧，让我们继续并开始扩展它
Dialogue: 0,0:57:00.69,0:57:03.57,BottomCenter,,0,0,0,,这是一个递归调用，所以让我们继续进行
Dialogue: 0,0:57:07.00,0:57:08.73,BottomCenter,,0,0,0,,现在重新开始
Dialogue: 0,0:57:08.73,0:57:09.92,BottomCenter,,0,0,0,,正确的
Dialogue: 0,0:57:10.50,0:57:14.73,BottomCenter,,0,0,0,,开始是一，结束是三，所以备用是二
Dialogue: 0,0:57:15.13,0:57:17.19,BottomCenter,,0,0,0,,你的工作是解决一个更简单的问题
Dialogue: 0,0:57:17.19,0:57:18.90,BottomCenter,,0,0,0,,一从一到备用
Dialogue: 0,0:57:18.90,0:57:21.19,BottomCenter,,0,0,0,,这意味着将这张光盘从这里移动到这里
Dialogue: 0,0:57:21.69,0:57:25.80,BottomCenter,,0,0,0,,然后 0.2 可以自由移动到最后的钉子
Dialogue: 0,0:57:25.80,0:57:29.13,BottomCenter,,0,0,0,,所以这里移动两步，然后我将一从二移动到三
Dialogue: 0,0:57:29.36,0:57:33.07,BottomCenter,,0,0,0,,所以这三个步骤将完成
Dialogue: 0,0:57:33.50,0:57:34.46,BottomCenter,,0,0,0,,下列
Dialogue: 0,0:57:34.50,0:57:38.32,BottomCenter,,0,0,0,,我将一个从一个移动到两个，这是当前的备用
Dialogue: 0,0:57:38.40,0:57:42.67,BottomCenter,,0,0,0,,我把两个移到最后，然后解决河内一个
Dialogue: 0,0:57:42.67,0:57:43.90,BottomCenter,,0,0,0,,我不会扩展这个
Dialogue: 0,0:57:43.90,0:57:45.90,BottomCenter,,0,0,0,,因为这最终会达到基本情况
Dialogue: 0,0:57:45.92,0:57:47.30,BottomCenter,,0,0,0,,所以我只是移动它
Dialogue: 0,0:57:47.86,0:57:49.40,BottomCenter,,0,0,0,,所以此时
Dialogue: 0,0:57:49.92,0:57:51.57,BottomCenter,,0,0,0,,我现在已经完成了
Dialogue: 0,0:57:51.80,0:57:55.07,BottomCenter,,0,0,0,,这个初始递归调用需要
Dialogue: 0,0:57:55.19,0:57:56.30,BottomCenter,,0,0,0,,另一个递归调用
Dialogue: 0,0:57:56.30,0:57:57.53,BottomCenter,,0,0,0,,一次移动和另一次递归调用
Dialogue: 0,0:57:57.53,0:57:58.53,BottomCenter,,0,0,0,,但此时
Dialogue: 0,0:57:58.76,0:58:00.36,BottomCenter,,0,0,0,,这个功能现在已经完成了
Dialogue: 0,0:58:00.69,0:58:02.53,BottomCenter,,0,0,0,,将评估并完成
Dialogue: 0,0:58:02.92,0:58:05.09,BottomCenter,,0,0,0,,现在我可以继续下一步了
Dialogue: 0,0:58:05.30,0:58:07.96,BottomCenter,,0,0,0,,记住第一次通话时的命令
Dialogue: 0,0:58:07.96,0:58:10.92,BottomCenter,,0,0,0,,也就是从 1 2 2 移 3 个
Dialogue: 0,0:58:11.30,0:58:13.76,BottomCenter,,0,0,0,,很好，现在我得重来一遍
Dialogue: 0,0:58:13.76,0:58:16.53,BottomCenter,,0,0,0,,我必须拿走这两张光盘，但现在从三张
Dialogue: 0,0:58:16.67,0:58:17.86,BottomCenter,,0,0,0,,并将它们移到那里
Dialogue: 0,0:58:17.86,0:58:19.13,BottomCenter,,0,0,0,,我该怎么做
Dialogue: 0,0:58:19.50,0:58:21.13,BottomCenter,,0,0,0,,另一组递归调用
Dialogue: 0,0:58:21.17,0:58:24.40,BottomCenter,,0,0,0,,将第一个圆盘从三个移动到一个
Dialogue: 0,0:58:24.50,0:58:27.73,BottomCenter,,0,0,0,,将第二个圆盘移动到最后一个圆盘，然后移动
Dialogue: 0,0:58:28.13,0:58:30.32,BottomCenter,,0,0,0,,回到那里所以我会继续这样做
Dialogue: 0,0:58:30.57,0:58:32.73,BottomCenter,,0,0,0,,所以一从三变成一
Dialogue: 0,0:58:32.76,0:58:34.57,BottomCenter,,0,0,0,,我现在可以自由移动该光盘
Dialogue: 0,0:58:34.57,0:58:35.69,BottomCenter,,0,0,0,,所以我要把它移过来
Dialogue: 0,0:58:35.76,0:58:37.59,BottomCenter,,0,0,0,,然后我再进行一次递归调用
Dialogue: 0,0:58:37.59,0:58:39.50,BottomCenter,,0,0,0,,这当然符合基本情况
Dialogue: 0,0:58:39.57,0:58:41.57,BottomCenter,,0,0,0,,然后我就到家了
Dialogue: 0,0:58:42.46,0:58:43.09,BottomCenter,,0,0,0,,好的
Dialogue: 0,0:58:43.09,0:58:45.92,BottomCenter,,0,0,0,,所以你可以在这里以某种方式看到我希望
Dialogue: 0,0:58:45.96,0:58:47.46,BottomCenter,,0,0,0,,这种递归的力量
Dialogue: 0,0:58:47.46,0:58:49.09,BottomCenter,,0,0,0,,通过思考
Dialogue: 0,0:58:49.26,0:58:51.36,BottomCenter,,0,0,0,,解决这个非常复杂的问题
Dialogue: 0,0:58:51.36,0:58:52.86,BottomCenter,,0,0,0,,很多不同的动作
Dialogue: 0,0:58:52.86,0:58:53.80,BottomCenter,,0,0,0,,我们稍后再谈
Dialogue: 0,0:58:53.80,0:58:54.86,BottomCenter,,0,0,0,,关于有多少步
Dialogue: 0,0:58:54.86,0:58:56.86,BottomCenter,,0,0,0,,因为我们一直在做简单的数字案例
Dialogue: 0,0:58:57.00,0:58:58.80,BottomCenter,,0,0,0,,我想的是
Dialogue: 0,0:58:58.96,0:59:01.00,BottomCenter,,0,0,0,,就什么而言递归地
Dialogue: 0,0:59:01.86,0:59:03.67,BottomCenter,,0,0,0,,如果我能解决一个更简单的问题
Dialogue: 0,0:59:03.67,0:59:06.69,BottomCenter,,0,0,0,,这如何帮助我解决更大的问题
Dialogue: 0,0:59:07.59,0:59:09.36,BottomCenter,,0,0,0,,所以这是一个非常好的例子
Dialogue: 0,0:59:09.46,0:59:11.69,BottomCenter,,0,0,0,,我想我会争辩说
Dialogue: 0,0:59:11.69,0:59:14.76,BottomCenter,,0,0,0,,最好的迭代解决方案不会那么优雅
Dialogue: 0,0:59:14.80,0:59:15.92,BottomCenter,,0,0,0,,并且易于实施
Dialogue: 0,0:59:15.92,0:59:17.90,BottomCenter,,0,0,0,,因为这实际上就是您需要的代码
Dialogue: 0,0:59:17.90,0:59:21.40,BottomCenter,,0,0,0,,这样做来解决这个问题，这很好
Dialogue: 0,0:59:21.86,0:59:24.09,BottomCenter,,0,0,0,,现在我刚刚提到了移动次数
Dialogue: 0,0:59:24.73,0:59:25.46,BottomCenter,,0,0,0,,我只是
Dialogue: 0,0:59:25.46,0:59:27.67,BottomCenter,,0,0,0,,我想简单地谈谈这个，因为它是
Dialogue: 0,0:59:27.90,0:59:28.50,BottomCenter,,0,0,0,,一点点
Dialogue: 0,0:59:28.50,0:59:30.69,BottomCenter,,0,0,0,,暗示我们将要讨论的事情
Dialogue: 0,0:59:30.90,0:59:31.80,BottomCenter,,0,0,0,,两点六分
Dialogue: 0,0:59:31.80,0:59:33.26,BottomCenter,,0,0,0,,这真的很重要
Dialogue: 0,0:59:33.30,0:59:35.09,BottomCenter,,0,0,0,,当你思考算法时
Dialogue: 0,0:59:35.09,0:59:36.76,BottomCenter,,0,0,0,,它们是递归的还是迭代的
Dialogue: 0,0:59:36.76,0:59:37.96,BottomCenter,,0,0,0,,或者无论它们是什么
Dialogue: 0,0:59:38.30,0:59:40.73,BottomCenter,,0,0,0,,这个算法有多昂贵
Dialogue: 0,0:59:40.73,0:59:43.50,BottomCenter,,0,0,0,,那么我要花多少时间才能跑完
Dialogue: 0,0:59:43.69,0:59:45.09,BottomCenter,,0,0,0,,所以让我们想想
Dialogue: 0,0:59:45.50,0:59:47.30,BottomCenter,,0,0,0,,比我们刚才那个小长辈
Dialogue: 0,0:59:47.32,0:59:48.46,BottomCenter,,0,0,0,,确实有办法
Dialogue: 0,0:59:48.46,0:59:50.30,BottomCenter,,0,0,0,,将我要做的分析正式化
Dialogue: 0,0:59:50.30,0:59:52.07,BottomCenter,,0,0,0,,但我会做这种信封背面的事情
Dialogue: 0,0:59:52.07,0:59:53.67,BottomCenter,,0,0,0,,直到我们到达 206 b
Dialogue: 0,0:59:54.40,0:59:57.19,BottomCenter,,0,0,0,,如果我有一张光盘，我需要走多少步
Dialogue: 0,0:59:57.53,1:00:00.17,BottomCenter,,0,0,0,,只是一个 我只是将一张光盘从一个钉子移到另一个钉子上
Dialogue: 0,1:00:00.40,1:00:04.00,BottomCenter,,0,0,0,,如果我有两个圆盘，我需要移动多少次
Dialogue: 0,1:00:04.32,1:00:05.36,BottomCenter,,0,0,0,,好吧，我必须接受
Dialogue: 0,1:00:05.59,1:00:07.69,BottomCenter,,0,0,0,,其中一张光盘并将其放在备用挂钩上
Dialogue: 0,1:00:07.76,1:00:10.07,BottomCenter,,0,0,0,,这就是我必须移动底座的地方
Dialogue: 0,1:00:10.26,1:00:12.59,BottomCenter,,0,0,0,,到最后两个，然后我移动
Dialogue: 0,1:00:13.17,1:00:14.86,BottomCenter,,0,0,0,,备用背部的那个
Dialogue: 0,1:00:14.86,1:00:16.59,BottomCenter,,0,0,0,,这是我必须采取的三个行动
Dialogue: 0,1:00:16.90,1:00:19.40,BottomCenter,,0,0,0,,还不错，三张光盘怎么样？
Dialogue: 0,1:00:19.46,1:00:21.76,BottomCenter,,0,0,0,,对于三张光盘来说，我必须带两张光盘
Dialogue: 0,1:00:21.76,1:00:23.46,BottomCenter,,0,0,0,,并将它们移动到备用页面
Dialogue: 0,1:00:23.73,1:00:25.40,BottomCenter,,0,0,0,,滑过一张然后再做一次
Dialogue: 0,1:00:25.40,1:00:27.80,BottomCenter,,0,0,0,,那么移动两张光盘要花多少钱
Dialogue: 0,1:00:27.80,1:00:28.67,BottomCenter,,0,0,0,,三号井
Dialogue: 0,1:00:28.90,1:00:31.26,BottomCenter,,0,0,0,,所以如果我要移动两张光盘，那我就花了三张光盘
Dialogue: 0,1:00:31.46,1:00:33.36,BottomCenter,,0,0,0,,我将一张光盘移动到四张光盘上
Dialogue: 0,1:00:33.36,1:00:36.30,BottomCenter,,0,0,0,,然后我还得做另外三件事，也就是七件事
Dialogue: 0,1:00:36.36,1:00:38.86,BottomCenter,,0,0,0,,所以注意这里我有点递归地做到了
Dialogue: 0,1:00:38.86,1:00:40.86,BottomCenter,,0,0,0,,我不必重新分析
Dialogue: 0,1:00:41.09,1:00:42.86,BottomCenter,,0,0,0,,移动一个磁盘 移动一个磁盘 移动一个磁盘
Dialogue: 0,1:00:42.90,1:00:45.59,BottomCenter,,0,0,0,,我知道其中两个磁盘将移过来
Dialogue: 0,1:00:45.59,1:00:47.30,BottomCenter,,0,0,0,,我知道搬家要花多少钱
Dialogue: 0,1:00:47.30,1:00:48.26,BottomCenter,,0,0,0,,两个磁盘
Dialogue: 0,1:00:48.50,1:00:50.67,BottomCenter,,0,0,0,,好吧，四张光盘怎么样？
Dialogue: 0,1:00:50.67,1:00:51.57,BottomCenter,,0,0,0,,好吧，我必须解决
Dialogue: 0,1:00:51.57,1:00:54.17,BottomCenter,,0,0,0,,埃尔诺伊塔的两个版本，带有三个圆盘
Dialogue: 0,1:00:54.17,1:00:55.76,BottomCenter,,0,0,0,,移动三到绝望
Dialogue: 0,1:00:55.96,1:00:59.46,BottomCenter,,0,0,0,,将一滑过 将三移回休息位置
Dialogue: 0,1:00:59.67,1:01:02.86,BottomCenter,,0,0,0,,所以这将是七加七加一十五
Dialogue: 0,1:01:03.40,1:01:04.80,BottomCenter,,0,0,0,,你在这里注意到什么
Dialogue: 0,1:01:05.13,1:01:06.86,BottomCenter,,0,0,0,,每次我添加光盘时
Dialogue: 0,1:01:06.86,1:01:09.36,BottomCenter,,0,0,0,,我还需要做多少步
Dialogue: 0,1:01:09.90,1:01:10.69,BottomCenter,,0,0,0,,双倍的
Dialogue: 0,1:01:10.90,1:01:14.30,BottomCenter,,0,0,0,,我将权利加倍，再加一，那么三
Dialogue: 0,1:01:14.76,1:01:15.92,BottomCenter,,0,0,0,,双倍等于六加一
Dialogue: 0,1:01:15.92,1:01:18.86,BottomCenter,,0,0,0,,七双等于十四加一三十
Dialogue: 0,1:01:18.86,1:01:20.07,BottomCenter,,0,0,0,,三十加一
Dialogue: 0,1:01:20.53,1:01:23.40,BottomCenter,,0,0,0,,六十四六十二加一等等
Dialogue: 0,1:01:24.13,1:01:25.53,BottomCenter,,0,0,0,,有点吓人吧
Dialogue: 0,1:01:25.53,1:01:28.67,BottomCenter,,0,0,0,,因为每次我在这里加一
Dialogue: 0,1:01:28.67,1:01:30.26,BottomCenter,,0,0,0,,我的工作量加倍
Dialogue: 0,1:01:30.26,1:01:30.80,BottomCenter,,0,0,0,,出色地
Dialogue: 0,1:01:30.80,1:01:32.50,BottomCenter,,0,0,0,,为什么为什么会翻倍
Dialogue: 0,1:01:32.59,1:01:34.07,BottomCenter,,0,0,0,,好好考虑一下递归
Dialogue: 0,1:01:34.07,1:01:35.96,BottomCenter,,0,0,0,,递归说为了解决
Dialogue: 0,1:01:36.17,1:01:40.17,BottomCenter,,0,0,0,,n 个磁盘的问题我必须解决 n 减一
Dialogue: 0,1:01:40.53,1:01:43.07,BottomCenter,,0,0,0,,移动两次并减一到备用位置
Dialogue: 0,1:01:43.40,1:01:46.13,BottomCenter,,0,0,0,,滑过一个就是加一减一
Dialogue: 0,1:01:46.40,1:01:49.17,BottomCenter,,0,0,0,,所以这是一个非常昂贵的计算
Dialogue: 0,1:01:49.17,1:01:51.76,BottomCenter,,0,0,0,,这样当你达到 64 张光盘时
Dialogue: 0,1:01:51.90,1:01:52.76,BottomCenter,,0,0,0,,你有一个非常
Dialogue: 0,1:01:52.76,1:01:54.32,BottomCenter,,0,0,0,,非常昂贵的计算
Dialogue: 0,1:01:54.32,1:01:56.40,BottomCenter,,0,0,0,,你可能不想做的事
Dialogue: 0,1:01:56.50,1:01:59.26,BottomCenter,,0,0,0,,即使你只用了 12 张光盘
Dialogue: 0,1:01:59.59,1:02:01.67,BottomCenter,,0,0,0,,仅从 1 到 12
Dialogue: 0,1:02:01.67,1:02:04.86,BottomCenter,,0,0,0,,你只增加了 12 个，但速度却很快
Dialogue: 0,1:02:04.86,1:02:06.92,BottomCenter,,0,0,0,,这就是所谓的指数增长
Dialogue: 0,1:02:07.19,1:02:09.17,BottomCenter,,0,0,0,,这非常非常糟糕
Dialogue: 0,1:02:09.69,1:02:10.90,BottomCenter,,0,0,0,,对于某些事情
Dialogue: 0,1:02:10.90,1:02:12.76,BottomCenter,,0,0,0,,如果东西贵的话真的很好
Dialogue: 0,1:02:12.76,1:02:14.57,BottomCenter,,0,0,0,,如果您想保护您的密码
Dialogue: 0,1:02:14.57,1:02:15.96,BottomCenter,,0,0,0,,就像破解加密一样
Dialogue: 0,1:02:16.09,1:02:17.57,BottomCenter,,0,0,0,,应该呈指数增长
Dialogue: 0,1:02:17.80,1:02:19.30,BottomCenter,,0,0,0,,但如果你想真正解决一个问题
Dialogue: 0,1:02:19.30,1:02:22.53,BottomCenter,,0,0,0,,指数增长显然是一个真正的问题
Dialogue: 0,1:02:22.59,1:02:25.09,BottomCenter,,0,0,0,,所以我只是喜欢这座塔有两个原因惹恼了
Dialogue: 0,1:02:25.09,1:02:25.69,BottomCenter,,0,0,0,,一个是
Dialogue: 0,1:02:25.69,1:02:28.32,BottomCenter,,0,0,0,,它真正展示了递归的力量和美丽
Dialogue: 0,1:02:28.36,1:02:29.53,BottomCenter,,0,0,0,,它也给了我
Dialogue: 0,1:02:29.67,1:02:31.73,BottomCenter,,0,0,0,,一个向你展示什么是指数增长的借口
Dialogue: 0,1:02:31.73,1:02:33.40,BottomCenter,,0,0,0,,这是我们将要讨论的事情
Dialogue: 0,1:02:33.67,1:02:34.53,BottomCenter,,0,0,0,,下线
Dialogue: 0,1:02:34.67,1:02:36.57,BottomCenter,,0,0,0,,越来越正式
Dialogue: 0,1:02:37.07,1:02:38.40,BottomCenter,,0,0,0,,好吧，这就是递归
Dialogue: 0,1:02:38.40,1:02:38.96,BottomCenter,,0,0,0,,有几件事
Dialogue: 0,1:02:38.96,1:02:41.09,BottomCenter,,0,0,0,,我想说在这一切的最后
Dialogue: 0,1:02:41.80,1:02:43.50,BottomCenter,,0,0,0,,别太困惑
Dialogue: 0,1:02:43.59,1:02:44.96,BottomCenter,,0,0,0,,当我请你解决问题时
Dialogue: 0,1:02:44.96,1:02:46.90,BottomCenter,,0,0,0,,我告诉你这是不是迭代递归
Dialogue: 0,1:02:47.19,1:02:48.59,BottomCenter,,0,0,0,,我现在不期待你
Dialogue: 0,1:02:48.59,1:02:49.92,BottomCenter,,0,0,0,,知道哪个是最好的
Dialogue: 0,1:02:49.92,1:02:51.17,BottomCenter,,0,0,0,,我只是希望你能够
Dialogue: 0,1:02:51.17,1:02:52.53,BottomCenter,,0,0,0,,解决这些问题的思考
Dialogue: 0,1:02:52.53,1:02:54.07,BottomCenter,,0,0,0,,关于他们有点不同
Dialogue: 0,1:02:54.19,1:02:56.26,BottomCenter,,0,0,0,,但不要仅仅因为递归很奇怪而觉得
Dialogue: 0,1:02:56.26,1:02:57.96,BottomCenter,,0,0,0,,你必须解决所有的问题
Dialogue: 0,1:02:58.00,1:02:59.59,BottomCenter,,0,0,0,,或者你应该避免它们
Dialogue: 0,1:03:00.00,1:03:02.17,BottomCenter,,0,0,0,,就像任何设计问题一样
Dialogue: 0,1:03:02.17,1:03:04.59,BottomCenter,,0,0,0,,你要思考什么是最好最优雅的
Dialogue: 0,1:03:04.59,1:03:06.50,BottomCenter,,0,0,0,,最有效的解决方案
Dialogue: 0,1:03:06.50,1:03:08.26,BottomCenter,,0,0,0,,有时这本质上是递归的
Dialogue: 0,1:03:08.26,1:03:09.13,BottomCenter,,0,0,0,,有时不会
Dialogue: 0,1:03:09.13,1:03:11.07,BottomCenter,,0,0,0,,没关系，很好
Dialogue: 0,1:03:11.30,1:03:11.57,BottomCenter,,0,0,0,,好的
Dialogue: 0,1:03:11.57,1:03:14.26,BottomCenter,,0,0,0,,所以目前我们还没有准备好过渡到
Dialogue: 0,1:03:14.50,1:03:15.69,BottomCenter,,0,0,0,,面向对象编程
Dialogue: 0,1:03:15.69,1:03:18.07,BottomCenter,,0,0,0,,所以接下来的三堂完整讲座
Dialogue: 0,1:03:18.07,1:03:19.67,BottomCenter,,0,0,0,,将是类和对象
Dialogue: 0,1:03:19.73,1:03:20.92,BottomCenter,,0,0,0,,此时
Dialogue: 0,1:03:21.09,1:03:22.00,BottomCenter,,0,0,0,,我们确实有
Dialogue: 0,1:03:22.00,1:03:23.80,BottomCenter,,0,0,0,,我们需要的所有脚手架
Dialogue: 0,1:03:23.80,1:03:25.07,BottomCenter,,0,0,0,,蟒蛇程序员
Dialogue: 0,1:03:25.40,1:03:26.09,BottomCenter,,0,0,0,,我们有函数
Dialogue: 0,1:03:26.09,1:03:27.76,BottomCenter,,0,0,0,,我们有变量 我们有循环结构
Dialogue: 0,1:03:27.76,1:03:29.80,BottomCenter,,0,0,0,,我们有条件语句 我们有返回变量
Dialogue: 0,1:03:29.80,1:03:30.90,BottomCenter,,0,0,0,,我们有参数
Dialogue: 0,1:03:30.90,1:03:32.32,BottomCenter,,0,0,0,,我们当然有递归
Dialogue: 0,1:03:32.46,1:03:35.40,BottomCenter,,0,0,0,,现在我们要开始考虑数据
Dialogue: 0,1:03:35.73,1:03:37.32,BottomCenter,,0,0,0,,不仅仅是计算
Dialogue: 0,1:03:37.36,1:03:40.53,BottomCenter,,0,0,0,,但我们如何存储信息
Dialogue: 0,1:03:40.59,1:03:41.53,BottomCenter,,0,0,0,,并做好
Dialogue: 0,1:03:41.53,1:03:43.00,BottomCenter,,0,0,0,,使用该数据来解决
Dialogue: 0,1:03:43.00,1:03:46.67,BottomCenter,,0,0,0,,以高效且优雅的方式解决有趣的问题
Dialogue: 0,1:03:46.73,1:03:47.59,BottomCenter,,0,0,0,,所以当我们拿起它时
Dialogue: 0,1:03:47.59,1:03:49.09,BottomCenter,,0,0,0,,我们将开始新的篇章
Dialogue: 0,1:03:49.09,1:03:51.36,BottomCenter,,0,0,0,,如果你愿意的话，这个班级是哪些班级
Dialogue: 0,1:03:51.53,1:03:53.69,BottomCenter,,0,0,0,,和物体，然后是过去两周
Dialogue: 0,1:03:53.69,1:03:55.26,BottomCenter,,0,0,0,,我们将讨论一些稍微不同的事情
Dialogue: 0,1:03:55.26,1:03:57.09,BottomCenter,,0,0,0,,好吧，一会儿见
Dialogue: 0,1:03:59.57,1:04:02.26,BottomCenter,,0,0,0,,现在我们来看一个非常重要的例子
Dialogue: 0,1:04:02.26,1:04:04.36,BottomCenter,,0,0,0,,称为计数分区
Dialogue: 0,1:04:04.80,1:04:07.67,BottomCenter,,0,0,0,,这个例子很重要，因为
Dialogue: 0,1:04:08.00,1:04:10.36,BottomCenter,,0,0,0,,这是一个树递归过程
Dialogue: 0,1:04:10.67,1:04:13.30,BottomCenter,,0,0,0,,如果没有的话，实际上很难写
Dialogue: 0,1:04:13.46,1:04:14.50,BottomCenter,,0,0,0,,树递归
Dialogue: 0,1:04:14.80,1:04:17.36,BottomCenter,,0,0,0,,所以我们学习的原因之一
Dialogue: 0,1:04:17.36,1:04:19.00,BottomCenter,,0,0,0,,关于本课程中的递归
Dialogue: 0,1:04:19.09,1:04:21.40,BottomCenter,,0,0,0,,就是为了解决这样的问题
Dialogue: 0,1:04:21.57,1:04:24.46,BottomCenter,,0,0,0,,就像计算一个整数的分区一样
Dialogue: 0,1:04:25.57,1:04:26.46,BottomCenter,,0,0,0,,那是什么
Dialogue: 0,1:04:26.92,1:04:30.67,BottomCenter,,0,0,0,,以及正整数 n 的分区数
Dialogue: 0,1:04:31.19,1:04:33.59,BottomCenter,,0,0,0,,使用尺寸最大为 m 的零件
Dialogue: 0,1:04:34.07,1:04:36.86,BottomCenter,,0,0,0,,是 n 的不同方式的数量
Dialogue: 0,1:04:36.86,1:04:39.00,BottomCenter,,0,0,0,,可以表示为总和
Dialogue: 0,1:04:39.59,1:04:41.32,BottomCenter,,0,0,0,,零件数量最多为 m
Dialogue: 0,1:04:41.76,1:04:43.50,BottomCenter,,0,0,0,,按递增顺序
Dialogue: 0,1:04:44.36,1:04:46.13,BottomCenter,,0,0,0,,让我给你举个例子
Dialogue: 0,1:04:46.67,1:04:50.26,BottomCenter,,0,0,0,,假设我们要计算 n 等于 6 的分区数
Dialogue: 0,1:04:50.67,1:04:54.07,BottomCenter,,0,0,0,,使用零件光学化 m 等于四
Dialogue: 0,1:04:55.30,1:04:57.50,BottomCenter,,0,0,0,,这是所有这些分区
Dialogue: 0,1:04:57.59,1:05:00.36,BottomCenter,,0,0,0,,这是所有内容的详尽清单
Dialogue: 0,1:05:00.67,1:05:02.90,BottomCenter,,0,0,0,,算作六个分区
Dialogue: 0,1:05:02.96,1:05:04.96,BottomCenter,,0,0,0,,使用尺寸最大为四的零件
Dialogue: 0,1:05:05.96,1:05:09.73,BottomCenter,,0,0,0,,所以每一行都是不同部分的总和
Dialogue: 0,1:05:10.00,1:05:12.09,BottomCenter,,0,0,0,,其中零件的顺序是递增的
Dialogue: 0,1:05:12.09,1:05:13.59,BottomCenter,,0,0,0,,所以我们有2+4
Dialogue: 0,1:05:13.69,1:05:15.40,BottomCenter,,0,0,0,,但我们没有4+2
Dialogue: 0,1:05:15.40,1:05:17.09,BottomCenter,,0,0,0,,因为这是一个递减的顺序
Dialogue: 0,1:05:17.92,1:05:21.80,BottomCenter,,0,0,0,,好吧，现在请注意，每个部分总是
Dialogue: 0,1:05:21.92,1:05:24.00,BottomCenter,,0,0,0,,最多四个但不会更大
Dialogue: 0,1:05:24.26,1:05:27.09,BottomCenter,,0,0,0,,所以我们不包括 1+5
Dialogue: 0,1:05:27.36,1:05:29.69,BottomCenter,,0,0,0,,这不算作六的划分
Dialogue: 0,1:05:29.69,1:05:31.59,BottomCenter,,0,0,0,,使用尺寸最大为四的零件
Dialogue: 0,1:05:32.32,1:05:34.19,BottomCenter,,0,0,0,,但我们确实包括二加四
Dialogue: 0,1:05:34.46,1:05:36.50,BottomCenter,,0,0,0,,和一加一加四
Dialogue: 0,1:05:36.67,1:05:40.69,BottomCenter,,0,0,0,,作为划分 6 号的不同方式
Dialogue: 0,1:05:41.30,1:05:43.76,BottomCenter,,0,0,0,,这里的想法是我们正在计算不同的数量
Dialogue: 0,1:05:43.76,1:05:46.32,BottomCenter,,0,0,0,,我们可以将六个人分成组的方法
Dialogue: 0,1:05:48.13,1:05:51.19,BottomCenter,,0,0,0,,现在我们可以说明这些不同的分区
Dialogue: 0,1:05:51.40,1:05:53.50,BottomCenter,,0,0,0,,通过显示我们正在分组的内容
Dialogue: 0,1:05:53.50,1:05:56.17,BottomCenter,,0,0,0,,所以我们这里有两个，这里有四个
Dialogue: 0,1:05:56.46,1:05:59.53,BottomCenter,,0,0,0,,或者我们这里有一、一和四
Dialogue: 0,1:05:59.69,1:06:01.36,BottomCenter,,0,0,0,,以及所有其他选项
Dialogue: 0,1:06:01.46,1:06:04.07,BottomCenter,,0,0,0,,也可以用一条线来表示
Dialogue: 0,1:06:04.73,1:06:06.09,BottomCenter,,0,0,0,,以及计数的目的
Dialogue: 0,1:06:06.09,1:06:08.19,BottomCenter,,0,0,0,,分区的作用只是告诉我们
Dialogue: 0,1:06:08.19,1:06:09.57,BottomCenter,,0,0,0,,有多少不同的
Dialogue: 0,1:06:09.69,1:06:11.26,BottomCenter,,0,0,0,,分区有
Dialogue: 0,1:06:11.53,1:06:13.96,BottomCenter,,0,0,0,,不一定要告诉我们它们是什么
Dialogue: 0,1:06:14.17,1:06:18.50,BottomCenter,,0,0,0,,所以在这种情况下有 1 2 3 4 5 6 7 8 9
Dialogue: 0,1:06:18.50,1:06:19.69,BottomCenter,,0,0,0,,不同的选择
Dialogue: 0,1:06:19.73,1:06:22.19,BottomCenter,,0,0,0,,所以计算分区六逗号四
Dialogue: 0,1:06:22.32,1:06:24.00,BottomCenter,,0,0,0,,应该返回9号
Dialogue: 0,1:06:26.50,1:06:27.30,BottomCenter,,0,0,0,,好的
Dialogue: 0,1:06:27.53,1:06:32.00,BottomCenter,,0,0,0,,让我们了解如何计算这个值 9
Dialogue: 0,1:06:32.96,1:06:36.40,BottomCenter,,0,0,0,,我们需要一个计算分区的策略
Dialogue: 0,1:06:36.46,1:06:39.53,BottomCenter,,0,0,0,,对于我们传递的任何 n 和 nem
Dialogue: 0,1:06:43.32,1:06:45.46,BottomCenter,,0,0,0,,所以让我先告诉你这个策略
Dialogue: 0,1:06:45.46,1:06:48.36,BottomCenter,,0,0,0,,后续将抓紧落实
Dialogue: 0,1:06:49.13,1:06:52.09,BottomCenter,,0,0,0,,我们要寻找递归分解
Dialogue: 0,1:06:52.09,1:06:53.13,BottomCenter,,0,0,0,,问题的
Dialogue: 0,1:06:53.69,1:06:55.17,BottomCenter,,0,0,0,,这意味着我们需要
Dialogue: 0,1:06:55.17,1:06:58.07,BottomCenter,,0,0,0,,用更简单的方式表达这个问题
Dialogue: 0,1:06:58.07,1:07:00.76,BottomCenter,,0,0,0,,同类问题的实例
Dialogue: 0,1:07:02.13,1:07:04.09,BottomCenter,,0,0,0,,我们将通过探索来做到这一点
Dialogue: 0,1:07:04.09,1:07:06.13,BottomCenter,,0,0,0,,两种不同的可能性
Dialogue: 0,1:07:06.76,1:07:07.96,BottomCenter,,0,0,0,,其一是
Dialogue: 0,1:07:08.07,1:07:12.80,BottomCenter,,0,0,0,,将包括至少一组四人或一个四人
Dialogue: 0,1:07:13.32,1:07:16.86,BottomCenter,,0,0,0,,我们在分区中使用的部分的总和
Dialogue: 0,1:07:18.17,1:07:19.50,BottomCenter,,0,0,0,,和另一个选项
Dialogue: 0,1:07:19.96,1:07:22.57,BottomCenter,,0,0,0,,这是不包括四的所有内容
Dialogue: 0,1:07:23.19,1:07:25.07,BottomCenter,,0,0,0,,说我们永远不会包括
Dialogue: 0,1:07:25.07,1:07:26.13,BottomCenter,,0,0,0,,分区中有四个
Dialogue: 0,1:07:26.13,1:07:30.40,BottomCenter,,0,0,0,,我们只会使用尺寸不超过三号的零件
Dialogue: 0,1:07:31.76,1:07:32.57,BottomCenter,,0,0,0,,现在
Dialogue: 0,1:07:33.36,1:07:37.19,BottomCenter,,0,0,0,,分裂这两种可能性实际上是分裂
Dialogue: 0,1:07:37.19,1:07:39.67,BottomCenter,,0,0,0,,我们想要计算的所有事物的集合
Dialogue: 0,1:07:40.07,1:07:42.57,BottomCenter,,0,0,0,,分成两个不相交的子集
Dialogue: 0,1:07:42.69,1:07:44.96,BottomCenter,,0,0,0,,四人一组的
Dialogue: 0,1:07:45.19,1:07:46.92,BottomCenter,,0,0,0,,以及那些没有的
Dialogue: 0,1:07:50.36,1:07:52.19,BottomCenter,,0,0,0,,另一个观察是一切
Dialogue: 0,1:07:52.19,1:07:53.90,BottomCenter,,0,0,0,,其中包括四人一组
Dialogue: 0,1:07:54.76,1:07:56.53,BottomCenter,,0,0,0,,真的只需要分区
Dialogue: 0,1:07:56.76,1:07:59.76,BottomCenter,,0,0,0,,减去后剩下什么
Dialogue: 0,1:08:00.26,1:08:02.26,BottomCenter,,0,0,0,,所以在这两种情况下
Dialogue: 0,1:08:02.40,1:08:05.53,BottomCenter,,0,0,0,,我们实际上只是划分了No.2
Dialogue: 0,1:08:06.26,1:08:09.92,BottomCenter,,0,0,0,,我们可以通过2号或者1+1得到它
Dialogue: 0,1:08:10.26,1:08:12.90,BottomCenter,,0,0,0,,仍然使用最多四人组
Dialogue: 0,1:08:14.30,1:08:16.06,BottomCenter,,0,0,0,,下半部分怎么样
Dialogue: 0,1:08:16.39,1:08:19.19,BottomCenter,,0,0,0,,下半部分是所有分区方式
Dialogue: 0,1:08:19.32,1:08:20.19,BottomCenter,,0,0,0,,六
Dialogue: 0,1:08:20.86,1:08:24.27,BottomCenter,,0,0,0,,但使用的零件尺寸最多只有三个
Dialogue: 0,1:08:27.30,1:08:29.10,BottomCenter,,0,0,0,,所以我们真的要解决两个问题
Dialogue: 0,1:08:29.50,1:08:32.39,BottomCenter,,0,0,0,,同一问题的更简单的实例
Dialogue: 0,1:08:32.72,1:08:33.69,BottomCenter,,0,0,0,,意味着我们会做
Dialogue: 0,1:08:33.69,1:08:36.47,BottomCenter,,0,0,0,,两次递归调用来计算分区数
Dialogue: 0,1:08:37.17,1:08:40.00,BottomCenter,,0,0,0,,当我们尝试计算计数分区六四时
Dialogue: 0,1:08:40.60,1:08:42.47,BottomCenter,,0,0,0,,至少使用四
Dialogue: 0,1:08:42.47,1:08:45.89,BottomCenter,,0,0,0,,意味着我们必须计算两个的分区
Dialogue: 0,1:08:46.52,1:08:49.06,BottomCenter,,0,0,0,,再次使用尺寸最大为四的零件
Dialogue: 0,1:08:51.77,1:08:53.69,BottomCenter,,0,0,0,,所以有一个更简单的例子
Dialogue: 0,1:08:53.69,1:08:55.50,BottomCenter,,0,0,0,,我们解决的问题
Dialogue: 0,1:08:55.69,1:08:57.17,BottomCenter,,0,0,0,,这条线上方
Dialogue: 0,1:08:57.39,1:08:59.86,BottomCenter,,0,0,0,,假设我们至少使用四
Dialogue: 0,1:09:01.69,1:09:02.72,BottomCenter,,0,0,0,,另一个更简单
Dialogue: 0,1:09:02.72,1:09:03.97,BottomCenter,,0,0,0,,实例是我们计算
Dialogue: 0,1:09:03.97,1:09:06.36,BottomCenter,,0,0,0,,整个No.6的隔断
Dialogue: 0,1:09:07.19,1:09:09.50,BottomCenter,,0,0,0,,使用更小的零件
Dialogue: 0,1:09:09.50,1:09:11.19,BottomCenter,,0,0,0,,比我们之前的那个
Dialogue: 0,1:09:11.39,1:09:14.60,BottomCenter,,0,0,0,,所以我们假设我们不会使用任何四肢
Dialogue: 0,1:09:14.69,1:09:16.77,BottomCenter,,0,0,0,,所以我们将使用最大尺寸为 3 的零件
Dialogue: 0,1:09:17.30,1:09:19.17,BottomCenter,,0,0,0,,我们需要计算所有这些
Dialogue: 0,1:09:19.77,1:09:22.72,BottomCenter,,0,0,0,,所以如果我们数出这两个 再数出这七个
Dialogue: 0,1:09:22.77,1:09:24.80,BottomCenter,,0,0,0,,我们会得到我们想要的九个和总数
Dialogue: 0,1:09:24.80,1:09:26.36,BottomCenter,,0,0,0,,为了解决问题
Dialogue: 0,1:09:26.89,1:09:29.32,BottomCenter,,0,0,0,,这就是我们的递归分解
Dialogue: 0,1:09:29.32,1:09:31.32,BottomCenter,,0,0,0,,用于计算 a 的分区数
Dialogue: 0,1:09:31.32,1:09:32.89,BottomCenter,,0,0,0,,正整数 et
Dialogue: 0,1:09:35.10,1:09:37.97,BottomCenter,,0,0,0,,所以树递归可以被认为是一种技术
Dialogue: 0,1:09:37.97,1:09:39.72,BottomCenter,,0,0,0,,探索不同的选择
Dialogue: 0,1:09:39.72,1:09:41.30,BottomCenter,,0,0,0,,或不同的可能性
Dialogue: 0,1:09:41.77,1:09:44.69,BottomCenter,,0,0,0,,这是我们在本例中探索的两种可能性
Dialogue: 0,1:09:45.32,1:09:46.97,BottomCenter,,0,0,0,,我们如何处理结果
Dialogue: 0,1:09:46.97,1:09:48.80,BottomCenter,,0,0,0,,我们将结果相加吗
Dialogue: 0,1:09:48.80,1:09:50.30,BottomCenter,,0,0,0,,因为我们实际上想要
Dialogue: 0,1:09:50.30,1:09:52.06,BottomCenter,,0,0,0,,所有不同的选择
Dialogue: 0,1:09:52.32,1:09:55.50,BottomCenter,,0,0,0,,这两种可能性分裂了这个集合
Dialogue: 0,1:09:55.77,1:09:57.17,BottomCenter,,0,0,0,,均匀地就在这里
Dialogue: 0,1:09:59.47,1:10:02.52,BottomCenter,,0,0,0,,现在当我们进行这些递归调用之一时
Dialogue: 0,1:10:02.52,1:10:05.69,BottomCenter,,0,0,0,,这将涉及进一步分解
Dialogue: 0,1:10:05.69,1:10:06.97,BottomCenter,,0,0,0,,以同样的方式
Dialogue: 0,1:10:07.52,1:10:11.39,BottomCenter,,0,0,0,,计数分区为 6，使用光学部件 3
Dialogue: 0,1:10:11.69,1:10:15.80,BottomCenter,,0,0,0,,将把这组七人分成两组
Dialogue: 0,1:10:15.80,1:10:18.67,BottomCenter,,0,0,0,,使用 3 的和不使用 3 的
Dialogue: 0,1:10:19.10,1:10:21.47,BottomCenter,,0,0,0,,这里我们有三个分区的计数
Dialogue: 0,1:10:21.47,1:10:22.27,BottomCenter,,0,0,0,,剩下的
Dialogue: 0,1:10:22.47,1:10:25.00,BottomCenter,,0,0,0,,这里我们有所有六个分区的计数
Dialogue: 0,1:10:25.00,1:10:27.30,BottomCenter,,0,0,0,,使用尺寸最大为两个的零件
Dialogue: 0,1:10:28.77,1:10:32.00,BottomCenter,,0,0,0,,其中每一个也都有递归分解
Dialogue: 0,1:10:32.67,1:10:35.36,BottomCenter,,0,0,0,,有时在这里有时在这里
Dialogue: 0,1:10:35.56,1:10:36.72,BottomCenter,,0,0,0,,并以这种方式
Dialogue: 0,1:10:36.72,1:10:39.10,BottomCenter,,0,0,0,,我们探索所有不同的可能性
Dialogue: 0,1:10:39.10,1:10:40.36,BottomCenter,,0,0,0,,并且可以计算
Dialogue: 0,1:10:40.36,1:10:42.30,BottomCenter,,0,0,0,,我们想要的最终结果
Dialogue: 0,1:10:42.60,1:10:43.39,BottomCenter,,0,0,0,,万岁
Dialogue: 0,1:10:44.36,1:10:46.72,BottomCenter,,0,0,0,,所以我们终于准备好写一些外套了
Dialogue: 0,1:10:47.56,1:10:50.36,BottomCenter,,0,0,0,,一旦我们制定了递归计划
Dialogue: 0,1:10:50.50,1:10:52.97,BottomCenter,,0,0,0,,我们只需要添加一个实现
Dialogue: 0,1:10:53.06,1:10:54.60,BottomCenter,,0,0,0,,执行该计划的
Dialogue: 0,1:10:56.17,1:10:58.93,BottomCenter,,0,0,0,,所以我们定义一个数字的计数分区
Dialogue: 0,1:10:59.30,1:11:01.00,BottomCenter,,0,0,0,,使用尺寸最大为 m 的零件
Dialogue: 0,1:11:01.72,1:11:03.56,BottomCenter,,0,0,0,,让我们从递归案例开始
Dialogue: 0,1:11:03.56,1:11:05.47,BottomCenter,,0,0,0,,因为这就是我们一直在谈论的
Dialogue: 0,1:11:06.69,1:11:09.30,BottomCenter,,0,0,0,,我们计算 n 减 m 的分区
Dialogue: 0,1:11:10.27,1:11:12.10,BottomCenter,,0,0,0,,使用尺寸为 m 的零件
Dialogue: 0,1:11:12.86,1:11:15.39,BottomCenter,,0,0,0,,这是我们至少使用的所有情况
Dialogue: 0,1:11:15.39,1:11:17.77,BottomCenter,,0,0,0,,尺寸 m 的一部分
Dialogue: 0,1:11:19.72,1:11:22.56,BottomCenter,,0,0,0,,我们还计算 n 的分区
Dialogue: 0,1:11:22.89,1:11:26.56,BottomCenter,,0,0,0,,使用小于 m 或 m 减一的部分
Dialogue: 0,1:11:28.67,1:11:30.13,BottomCenter,,0,0,0,,然后我们一起总结
Dialogue: 0,1:11:30.32,1:11:32.97,BottomCenter,,0,0,0,,我们在 m 中使用的情况
Dialogue: 0,1:11:33.10,1:11:35.13,BottomCenter,,0,0,0,,以及我们没有做到的情况
Dialogue: 0,1:11:35.19,1:11:37.30,BottomCenter,,0,0,0,,这应该给我们所有不同的情况
Dialogue: 0,1:11:37.30,1:11:38.36,BottomCenter,,0,0,0,,感兴趣
Dialogue: 0,1:11:38.77,1:11:41.19,BottomCenter,,0,0,0,,以及划分的总方式
Dialogue: 0,1:11:43.27,1:11:46.86,BottomCenter,,0,0,0,,所以对于六个逗号的情况，四个是我们的输入
Dialogue: 0,1:11:47.19,1:11:50.97,BottomCenter,,0,0,0,,这与他们一起计数分区二逗号四
Dialogue: 0,1:11:51.39,1:11:54.86,BottomCenter,,0,0,0,,如果没有它们，计数分区六逗号三
Dialogue: 0,1:11:57.06,1:11:58.86,BottomCenter,,0,0,0,,现在我们只需要基本案例
Dialogue: 0,1:11:59.47,1:12:01.19,BottomCenter,,0,0,0,,如果我们分区为零
Dialogue: 0,1:12:01.67,1:12:03.60,BottomCenter,,0,0,0,,好吧，我们只是说有一种方法可以做到这一点
Dialogue: 0,1:12:03.60,1:12:05.39,BottomCenter,,0,0,0,,就是什么都不加在一起
Dialogue: 0,1:12:07.10,1:12:08.47,BottomCenter,,0,0,0,,如果我们要分区
Dialogue: 0,1:12:08.67,1:12:10.47,BottomCenter,,0,0,0,,非正数
Dialogue: 0,1:12:10.56,1:12:12.93,BottomCenter,,0,0,0,,我们一路上做错了事
Dialogue: 0,1:12:13.06,1:12:14.67,BottomCenter,,0,0,0,,没有办法做到这一点
Dialogue: 0,1:12:14.77,1:12:16.39,BottomCenter,,0,0,0,,所以我们返回零
Dialogue: 0,1:12:16.50,1:12:19.19,BottomCenter,,0,0,0,,因为我们不允许使用负数部分
Dialogue: 0,1:12:20.13,1:12:26.13,BottomCenter,,0,0,0,,如果最大零件尺寸 m 为零或更小
Dialogue: 0,1:12:26.36,1:12:28.50,BottomCenter,,0,0,0,,好吧，没有办法建造任何东西
Dialogue: 0,1:12:28.52,1:12:30.19,BottomCenter,,0,0,0,,零件尺寸为零
Dialogue: 0,1:12:30.47,1:12:32.77,BottomCenter,,0,0,0,,所以我们也返回零
Dialogue: 0,1:12:34.50,1:12:35.19,BottomCenter,,0,0,0,,这就是我们的
Dialogue: 0,1:12:35.19,1:12:37.97,BottomCenter,,0,0,0,,计数分区的完整实现
Dialogue: 0,1:12:38.36,1:12:39.67,BottomCenter,,0,0,0,,让我们看看它的工作原理
Dialogue: 0,1:12:43.52,1:12:45.86,BottomCenter,,0,0,0,,所以我要定义计数分区
Dialogue: 0,1:12:46.00,1:12:48.77,BottomCenter,,0,0,0,,我将计算一个稍微简单的实例的分区
Dialogue: 0,1:12:48.77,1:12:50.13,BottomCenter,,0,0,0,,然后我们之前谈到
Dialogue: 0,1:12:50.39,1:12:52.56,BottomCenter,,0,0,0,,我们将使用以下方法来计算五个分区
Dialogue: 0,1:12:52.56,1:12:53.89,BottomCenter,,0,0,0,,尺寸最大为三的零件
Dialogue: 0,1:12:54.30,1:12:56.50,BottomCenter,,0,0,0,,这里有我们想要的所有不同的选择
Dialogue: 0,1:12:56.50,1:12:57.32,BottomCenter,,0,0,0,,总结
Dialogue: 0,1:12:57.72,1:13:02.56,BottomCenter,,0,0,0,,1 1 1 1 1 或 1 1 1 2 或 1 2 2 或 1 1 3 或二三
Dialogue: 0,1:13:06.89,1:13:10.00,BottomCenter,,0,0,0,,所以最初称为与安娜的帐户分区
Dialogue: 0,1:13:10.00,1:13:11.39,BottomCenter,,0,0,0,,五和三女士
Dialogue: 0,1:13:11.39,1:13:13.10,BottomCenter,,0,0,0,,涉及两次递归调用
Dialogue: 0,1:13:13.10,1:13:13.97,BottomCenter,,0,0,0,,其中之一
Dialogue: 0,1:13:14.39,1:13:18.52,BottomCenter,,0,0,0,,正在使用尺寸为 3 的零件来划分 2 号
Dialogue: 0,1:13:18.89,1:13:23.52,BottomCenter,,0,0,0,,如果我们进行一些计算最终会返回
Dialogue: 0,1:13:25.89,1:13:26.93,BottomCenter,,0,0,0,,2号
Dialogue: 0,1:13:27.86,1:13:29.93,BottomCenter,,0,0,0,,所以如果我们尝试使用 m
Dialogue: 0,1:13:30.32,1:13:32.13,BottomCenter,,0,0,0,,就像我们尝试使用尺寸的一部分
Dialogue: 0,1:13:32.13,1:13:33.52,BottomCenter,,0,0,0,,为了请愿两个而三个
Dialogue: 0,1:13:33.52,1:13:34.39,BottomCenter,,0,0,0,,这不可能
Dialogue: 0,1:13:34.39,1:13:36.00,BottomCenter,,0,0,0,,所以这就是为什么我们得到零
Dialogue: 0,1:13:36.50,1:13:38.60,BottomCenter,,0,0,0,,如果我们尝试划分No.2
Dialogue: 0,1:13:38.67,1:13:40.52,BottomCenter,,0,0,0,,小于三的东西
Dialogue: 0,1:13:40.89,1:13:42.60,BottomCenter,,0,0,0,,然后我们发现有两种不同的方法
Dialogue: 0,1:13:42.60,1:13:45.36,BottomCenter,,0,0,0,,1+1，只有No.2
Dialogue: 0,1:13:45.36,1:13:47.56,BottomCenter,,0,0,0,,所以这是两种不同的选择
Dialogue: 0,1:13:47.67,1:13:48.86,BottomCenter,,0,0,0,,我们已经计算出
Dialogue: 0,1:13:49.00,1:13:51.86,BottomCenter,,0,0,0,,当我们计算两个的分区时我们会得到什么
Dialogue: 0,1:13:55.30,1:13:57.97,BottomCenter,,0,0,0,,现在当我们计算五个分区时会发生什么
Dialogue: 0,1:13:58.19,1:14:01.77,BottomCenter,,0,0,0,,使用尺寸为 2 或更小的零件
Dialogue: 0,1:14:01.93,1:14:02.39,BottomCenter,,0,0,0,,好吧，那些是
Dialogue: 0,1:14:02.39,1:14:04.69,BottomCenter,,0,0,0,,我们留下的这三种选择
Dialogue: 0,1:14:04.93,1:14:06.60,BottomCenter,,0,0,0,,所以如果我们进行计算
Dialogue: 0,1:14:06.60,1:14:08.52,BottomCenter,,0,0,0,,我们看到很多递归调用
Dialogue: 0,1:14:08.52,1:14:10.27,BottomCenter,,0,0,0,,经过一些工作后
Dialogue: 0,1:14:10.89,1:14:14.36,BottomCenter,,0,0,0,,我们使用 m 来计算，m 是二的数量
Dialogue: 0,1:14:14.69,1:14:18.69,BottomCenter,,0,0,0,,我们找到了两种不同的方式来总结第五条
Dialogue: 0,1:14:18.97,1:14:20.77,BottomCenter,,0,0,0,,所以这里有两个不同的选择
Dialogue: 0,1:14:20.77,1:14:22.60,BottomCenter,,0,0,0,,涉及使用No.2
Dialogue: 0,1:14:22.93,1:14:25.13,BottomCenter,,0,0,0,,零件尺寸为 2 或更小
Dialogue: 0,1:14:26.19,1:14:27.77,BottomCenter,,0,0,0,,唯一我们没有考虑到的事情
Dialogue: 0,1:14:27.77,1:14:29.50,BottomCenter,,0,0,0,,是所有的总和
Dialogue: 0,1:14:29.52,1:14:32.06,BottomCenter,,0,0,0,,所以没有 m 应该包括所有的总和
Dialogue: 0,1:14:32.06,1:14:33.50,BottomCenter,,0,0,0,,我们进行一些计算
Dialogue: 0,1:14:33.50,1:14:35.39,BottomCenter,,0,0,0,,尝试一些不同的选择
Dialogue: 0,1:14:35.69,1:14:37.00,BottomCenter,,0,0,0,,就在这里
Dialogue: 0,1:14:37.52,1:14:41.10,BottomCenter,,0,0,0,,我们发现不使用 m 所以只使用 5
Dialogue: 0,1:14:42.00,1:14:44.69,BottomCenter,,0,0,0,,所以只用第一部分计算五
Dialogue: 0,1:14:44.77,1:14:47.52,BottomCenter,,0,0,0,,有一种方法可以做到这一点，我们以一种方式返回
Dialogue: 0,1:14:48.69,1:14:50.00,BottomCenter,,0,0,0,,所以我们把它返回这里
Dialogue: 0,1:14:50.00,1:14:51.60,BottomCenter,,0,0,0,,我们两个和一个在一起
Dialogue: 0,1:14:51.80,1:14:54.60,BottomCenter,,0,0,0,,我们发现没有他们我们会得到三个
Dialogue: 0,1:14:54.60,1:14:56.17,BottomCenter,,0,0,0,,我们两三个人在一起
Dialogue: 0,1:14:56.17,1:14:57.10,BottomCenter,,0,0,0,,我们得到
Dialogue: 0,1:14:57.30,1:15:00.06,BottomCenter,,0,0,0,,我们想要的实际价值有五种方式
Dialogue: 0,1:15:00.19,1:15:01.86,BottomCenter,,0,0,0,,计数分区数
Dialogue: 0,1:15:02.47,1:15:04.97,BottomCenter,,0,0,0,,五个使用尺寸最大为 3 的零件
