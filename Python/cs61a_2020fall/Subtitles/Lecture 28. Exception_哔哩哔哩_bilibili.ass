[Script Info]
Title: Lecture 28. Exception_哔哩哔哩_bilibili
ScriptType: v4.00+
Collisions: Reverse
PlayResX: 1280
PlayResY: 720
WrapStyle: 3
ScaledBorderAndShadow: yes
; ----------------------
; 本字幕由CC字幕助手自动转换
; 字幕来源https://www.bilibili.com/video/BV1s3411G7yM?p=66&vd_source=6ffca0aa1006734a4fba52f389036611
; 脚本地址https://greasyfork.org/scripts/378513
; 设置了字幕过长自动换行，但若字幕中没有空格换行将无效
; 字体大小依据720p 48号字体等比缩放
; 如显示不正常请尝试使用SRT格式

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Segoe UI,48,&H00FFFFFF,&HF0000000,&H00000000,&HF0000000,1,0,0,0,100,100,0,0.00,1,1,3,2,30,30,20,1

[Events]
Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.57,0:00:02.53,*Default,NTP,0000,0000,0000,,sixty one eight lecture No.28
Dialogue: 0,0:00:03.13,0:00:04.00,*Default,NTP,0000,0000,0000,,announcements
Dialogue: 0,0:00:04.53,0:00:05.97,*Default,NTP,0000,0000,0000,,for lab and homework this week
Dialogue: 0,0:00:05.97,0:00:07.77,*Default,NTP,0000,0000,0000,,you'll need to use scheme
Dialogue: 0,0:00:08.07,0:00:10.77,*Default,NTP,0000,0000,0000,,you can use code cs sixty one eight org
Dialogue: 0,0:00:10.80,0:00:12.93,*Default,NTP,0000,0000,0000,,or we distribute a scheme interpreter
Dialogue: 0,0:00:12.93,0:00:14.93,*Default,NTP,0000,0000,0000,,with every scheme assignment
Dialogue: 0,0:00:14.97,0:00:16.87,*Default,NTP,0000,0000,0000,,including the lab in the homework
Dialogue: 0,0:00:16.93,0:00:18.50,*Default,NTP,0000,0000,0000,,and here's the direct link
Dialogue: 0,0:00:19.47,0:00:22.13,*Default,NTP,0000,0000,0000,,so if you save this file and run it from the terminal
Dialogue: 0,0:00:22.30,0:00:25.07,*Default,NTP,0000,0000,0000,,then you'll be ready to read the scheme files
Dialogue: 0,0:00:25.30,0:00:27.60,*Default,NTP,0000,0000,0000,,or use scheme interactively
Dialogue: 0,0:00:28.87,0:00:31.00,*Default,NTP,0000,0000,0000,,lab 10 was extended to Wednesday
Dialogue: 0,0:00:31.20,0:00:33.50,*Default,NTP,0000,0000,0000,,so that it wouldn't be due on election day
Dialogue: 0,0:00:34.20,0:00:36.67,*Default,NTP,0000,0000,0000,,homework six is due on Thursday
Dialogue: 0,0:00:36.97,0:00:38.77,*Default,NTP,0000,0000,0000,,let's take a quick look together
Dialogue: 0,0:00:39.20,0:00:40.90,*Default,NTP,0000,0000,0000,,it's only three problems
Dialogue: 0,0:00:41.30,0:00:43.73,*Default,NTP,0000,0000,0000,,and none of them are particularly involved
Dialogue: 0,0:00:44.40,0:00:46.70,*Default,NTP,0000,0000,0000,,they just help you get started with scheme
Dialogue: 0,0:00:47.53,0:00:50.60,*Default,NTP,0000,0000,0000,,today we'll have a homework party on zoom as usual
Dialogue: 0,0:00:50.90,0:00:52.87,*Default,NTP,0000,0000,0000,,click here for details on piazza
Dialogue: 0,0:00:53.10,0:00:55.10,*Default,NTP,0000,0000,0000,,that will run from seven to 9:00pm
Dialogue: 0,0:00:55.90,0:00:57.07,*Default,NTP,0000,0000,0000,,and on Thursday
Dialogue: 0,0:00:57.30,0:00:59.17,*Default,NTP,0000,0000,0000,,some tas intuitors are going to hold
Dialogue: 0,0:00:59.17,0:01:00.80,*Default,NTP,0000,0000,0000,,conceptual office hours
Dialogue: 0,0:01:00.93,0:01:03.50,*Default,NTP,0000,0000,0000,,I think these are one to 2:00pm but I'm not sure
Dialogue: 0,0:01:03.53,0:01:05.97,*Default,NTP,0000,0000,0000,,so I'll just let you check piazza for details
Dialogue: 0,0:01:06.20,0:01:07.90,*Default,NTP,0000,0000,0000,,and we'll update this announcement
Dialogue: 0,0:01:07.97,0:01:10.07,*Default,NTP,0000,0000,0000,,once those details are all settled
Dialogue: 0,0:01:11.33,0:01:12.80,*Default,NTP,0000,0000,0000,,take a look at your midterm to
Dialogue: 0,0:01:12.80,0:01:13.37,*Default,NTP,0000,0000,0000,,and please
Dialogue: 0,0:01:13.37,0:01:15.77,*Default,NTP,0000,0000,0000,,let us know if there's anything we need to regrade
Dialogue: 0,0:01:15.90,0:01:17.17,*Default,NTP,0000,0000,0000,,by Monday
Dialogue: 0,0:01:18.10,0:01:20.40,*Default,NTP,0000,0000,0000,,and finally please don't forget to vote
Dialogue: 0,0:01:20.40,0:01:21.47,*Default,NTP,0000,0000,0000,,if you're in the us
Dialogue: 0,0:01:23.00,0:01:25.97,*Default,NTP,0000,0000,0000,,today's lecture is going to be about python again
Dialogue: 0,0:01:26.30,0:01:28.93,*Default,NTP,0000,0000,0000,,we're going to touch on just one more python topic
Dialogue: 0,0:01:29.20,0:01:30.60,*Default,NTP,0000,0000,0000,,that will be important
Dialogue: 0,0:01:30.87,0:01:33.00,*Default,NTP,0000,0000,0000,,and learning how to interpret
Dialogue: 0,0:01:33.13,0:01:35.47,*Default,NTP,0000,0000,0000,,programs in another programming language
Dialogue: 0,0:01:37.37,0:01:39.50,*Default,NTP,0000,0000,0000,,today we'll talk about exceptions
Dialogue: 0,0:01:40.67,0:01:42.47,*Default,NTP,0000,0000,0000,,so the topic of the day in general
Dialogue: 0,0:01:42.47,0:01:44.97,*Default,NTP,0000,0000,0000,,is about handling errors and how to do
Dialogue: 0,0:01:45.80,0:01:48.40,*Default,NTP,0000,0000,0000,,so sometimes computer programs behave in non
Dialogue: 0,0:01:48.40,0:01:49.57,*Default,NTP,0000,0000,0000,,standard ways
Dialogue: 0,0:01:50.20,0:01:51.37,*Default,NTP,0000,0000,0000,,because for instance
Dialogue: 0,0:01:51.37,0:01:53.53,*Default,NTP,0000,0000,0000,,a function could receive an argument value
Dialogue: 0,0:01:53.53,0:01:54.70,*Default,NTP,0000,0000,0000,,of an improper type
Dialogue: 0,0:01:54.70,0:01:56.10,*Default,NTP,0000,0000,0000,,that it doesn't know what to do with
Dialogue: 0,0:01:56.60,0:01:57.67,*Default,NTP,0000,0000,0000,,but there are lots of other
Dialogue: 0,0:01:57.67,0:01:58.90,*Default,NTP,0000,0000,0000,,problems that you could have
Dialogue: 0,0:01:59.00,0:02:00.90,*Default,NTP,0000,0000,0000,,some resources such as a file
Dialogue: 0,0:02:01.00,0:02:02.80,*Default,NTP,0000,0000,0000,,might just not be where you'd think they are
Dialogue: 0,0:02:03.37,0:02:04.20,*Default,NTP,0000,0000,0000,,a network connection
Dialogue: 0,0:02:04.20,0:02:06.50,*Default,NTP,0000,0000,0000,,could be lost in the middle of data transmission
Dialogue: 0,0:02:07.70,0:02:08.77,*Default,NTP,0000,0000,0000,,just anything
Dialogue: 0,0:02:08.87,0:02:10.50,*Default,NTP,0000,0000,0000,,conceivable could go wrong
Dialogue: 0,0:02:10.50,0:02:13.20,*Default,NTP,0000,0000,0000,,in the course of executing a computer program
Dialogue: 0,0:02:14.80,0:02:17.10,*Default,NTP,0000,0000,0000,,what you see here is an excerpt from
Dialogue: 0,0:02:17.13,0:02:19.50,*Default,NTP,0000,0000,0000,,grace hopper's notebook in 1947
Dialogue: 0,0:02:20.13,0:02:22.60,*Default,NTP,0000,0000,0000,,when she was working on one of the first computers
Dialogue: 0,0:02:23.30,0:02:25.20,*Default,NTP,0000,0000,0000,,and she was documenting her work
Dialogue: 0,0:02:25.67,0:02:28.93,*Default,NTP,0000,0000,0000,,and the computer shut down because there was a moth
Dialogue: 0,0:02:29.30,0:02:31.37,*Default,NTP,0000,0000,0000,,in relay No.70
Dialogue: 0,0:02:31.37,0:02:35.27,*Default,NTP,0000,0000,0000,,so this was noted as the first actual case of a bug
Dialogue: 0,0:02:35.90,0:02:38.53,*Default,NTP,0000,0000,0000,,in a computer causing it to shut down
Dialogue: 0,0:02:39.37,0:02:41.13,*Default,NTP,0000,0000,0000,,the moth found in the mark ii
Dialogue: 0,0:02:41.57,0:02:42.97,*Default,NTP,0000,0000,0000,,so the point is
Dialogue: 0,0:02:42.97,0:02:45.13,*Default,NTP,0000,0000,0000,,there's lots of different issues that it can arise
Dialogue: 0,0:02:45.13,0:02:47.20,*Default,NTP,0000,0000,0000,,and you need to write your programs
Dialogue: 0,0:02:47.20,0:02:49.60,*Default,NTP,0000,0000,0000,,in such a way that they're prepared to handle
Dialogue: 0,0:02:49.80,0:02:50.90,*Default,NTP,0000,0000,0000,,these problems
Dialogue: 0,0:02:51.10,0:02:52.90,*Default,NTP,0000,0000,0000,,not necessarily the moth problem
Dialogue: 0,0:02:52.90,0:02:53.97,*Default,NTP,0000,0000,0000,,although you should
Dialogue: 0,0:02:53.97,0:02:57.47,*Default,NTP,0000,0000,0000,,not always assume that your hardware is reliable
Dialogue: 0,0:02:59.30,0:03:00.67,*Default,NTP,0000,0000,0000,,how a program handles
Dialogue: 0,0:03:00.67,0:03:03.20,*Default,NTP,0000,0000,0000,,errors depends on what sort of program
Dialogue: 0,0:03:03.40,0:03:04.20,*Default,NTP,0000,0000,0000,,you're writing
Dialogue: 0,0:03:04.57,0:03:06.90,*Default,NTP,0000,0000,0000,,and how people interact with it
Dialogue: 0,0:03:07.60,0:03:10.10,*Default,NTP,0000,0000,0000,,so if you're building a web service that
Dialogue: 0,0:03:10.37,0:03:10.57,*Default,NTP,0000,0000,0000,,you know
Dialogue: 0,0:03:10.57,0:03:12.57,*Default,NTP,0000,0000,0000,,everyone in the world is supposed to be able to use
Dialogue: 0,0:03:12.57,0:03:13.40,*Default,NTP,0000,0000,0000,,whether they
Dialogue: 0,0:03:13.50,0:03:15.90,*Default,NTP,0000,0000,0000,,understand how computers really work or not
Dialogue: 0,0:03:16.40,0:03:17.57,*Default,NTP,0000,0000,0000,,then you want to make sure
Dialogue: 0,0:03:17.87,0:03:19.87,*Default,NTP,0000,0000,0000,,that your service keeps running
Dialogue: 0,0:03:19.97,0:03:22.67,*Default,NTP,0000,0000,0000,,regardless of what errors crop up
Dialogue: 0,0:03:22.87,0:03:25.20,*Default,NTP,0000,0000,0000,,if there's a huge power outage and one
Dialogue: 0,0:03:25.37,0:03:26.60,*Default,NTP,0000,0000,0000,,half of the world
Dialogue: 0,0:03:27.07,0:03:27.53,*Default,NTP,0000,0000,0000,,you'd
Dialogue: 0,0:03:27.53,0:03:30.07,*Default,NTP,0000,0000,0000,,still want as much of your service to keep running
Dialogue: 0,0:03:30.13,0:03:31.77,*Default,NTP,0000,0000,0000,,on servers in the other half
Dialogue: 0,0:03:32.40,0:03:35.77,*Default,NTP,0000,0000,0000,,now on the other hand the python interpreter
Dialogue: 0,0:03:36.37,0:03:39.67,*Default,NTP,0000,0000,0000,,is a program that stops immediately when an
Dialogue: 0,0:03:39.67,0:03:41.00,*Default,NTP,0000,0000,0000,,error arises
Dialogue: 0,0:03:41.10,0:03:43.57,*Default,NTP,0000,0000,0000,,and that's because the programmer who's using it
Dialogue: 0,0:03:43.67,0:03:45.97,*Default,NTP,0000,0000,0000,,needs to know about that error as soon as possible
Dialogue: 0,0:03:46.07,0:03:48.17,*Default,NTP,0000,0000,0000,,so that they can address it in their program
Dialogue: 0,0:03:48.53,0:03:50.20,*Default,NTP,0000,0000,0000,,so just different kinds of programs need
Dialogue: 0,0:03:50.20,0:03:51.70,*Default,NTP,0000,0000,0000,,different sorts of policies
Dialogue: 0,0:03:51.87,0:03:53.60,*Default,NTP,0000,0000,0000,,in order to handle their errors
Dialogue: 0,0:03:53.60,0:03:55.17,*Default,NTP,0000,0000,0000,,there's no one right way
Dialogue: 0,0:03:55.50,0:03:57.73,*Default,NTP,0000,0000,0000,,but it's always the case that you have to think about
Dialogue: 0,0:03:57.93,0:04:00.60,*Default,NTP,0000,0000,0000,,how errors are going to be handled in any program
Dialogue: 0,0:04:04.47,0:04:05.90,*Default,NTP,0000,0000,0000,,the way that we handle
Dialogue: 0,0:04:06.27,0:04:09.50,*Default,NTP,0000,0000,0000,,errors in python is called the exception mechanism
Dialogue: 0,0:04:10.53,0:04:13.70,*Default,NTP,0000,0000,0000,,so it's a built in mechanism in a programming language
Dialogue: 0,0:04:13.87,0:04:16.33,*Default,NTP,0000,0000,0000,,to declare that an error has occurred
Dialogue: 0,0:04:16.73,0:04:18.07,*Default,NTP,0000,0000,0000,,and then elsewhere
Dialogue: 0,0:04:18.13,0:04:18.80,*Default,NTP,0000,0000,0000,,you say
Dialogue: 0,0:04:18.80,0:04:22.20,*Default,NTP,0000,0000,0000,,how to respond to various exceptional conditions
Dialogue: 0,0:04:22.40,0:04:24.30,*Default,NTP,0000,0000,0000,,various issues that have happened
Dialogue: 0,0:04:24.37,0:04:27.37,*Default,NTP,0000,0000,0000,,that are just not the standard way in which a program
Dialogue: 0,0:04:27.37,0:04:28.53,*Default,NTP,0000,0000,0000,,is met a rut
Dialogue: 0,0:04:29.53,0:04:31.90,*Default,NTP,0000,0000,0000,,so we have special vocabulary for this
Dialogue: 0,0:04:31.90,0:04:34.20,*Default,NTP,0000,0000,0000,,and special syntax in the language
Dialogue: 0,0:04:34.37,0:04:35.90,*Default,NTP,0000,0000,0000,,and special objects
Dialogue: 0,0:04:36.17,0:04:38.73,*Default,NTP,0000,0000,0000,,we say that python raises an exception
Dialogue: 0,0:04:39.20,0:04:40.77,*Default,NTP,0000,0000,0000,,whenever an error occurs
Dialogue: 0,0:04:40.77,0:04:42.60,*Default,NTP,0000,0000,0000,,or whenever we want to signal to something
Dialogue: 0,0:04:42.60,0:04:44.20,*Default,NTP,0000,0000,0000,,non standard has happened
Dialogue: 0,0:04:45.47,0:04:47.47,*Default,NTP,0000,0000,0000,,exceptions can be handled
Dialogue: 0,0:04:47.67,0:04:50.10,*Default,NTP,0000,0000,0000,,by the same program that raised them
Dialogue: 0,0:04:50.80,0:04:52.97,*Default,NTP,0000,0000,0000,,preventing the interpreter from halting
Dialogue: 0,0:04:53.20,0:04:56.07,*Default,NTP,0000,0000,0000,,so the default behavior is that python will halt
Dialogue: 0,0:04:56.80,0:04:59.97,*Default,NTP,0000,0000,0000,,so unhandled exceptions will cause python to halt
Dialogue: 0,0:04:59.97,0:05:03.00,*Default,NTP,0000,0000,0000,,execution and print a stack trace
Dialogue: 0,0:05:03.00,0:05:04.87,*Default,NTP,0000,0000,0000,,that's that long error message
Dialogue: 0,0:05:04.90,0:05:07.60,*Default,NTP,0000,0000,0000,,that tells you what line and what file
Dialogue: 0,0:05:08.10,0:05:10.70,*Default,NTP,0000,0000,0000,,cause the error that happened
Dialogue: 0,0:05:10.77,0:05:13.70,*Default,NTP,0000,0000,0000,,and all of the function calls that were in process
Dialogue: 0,0:05:13.70,0:05:14.87,*Default,NTP,0000,0000,0000,,when that occurred
Dialogue: 0,0:05:15.67,0:05:18.47,*Default,NTP,0000,0000,0000,,so these unhandled exceptions are what we've seen
Dialogue: 0,0:05:18.47,0:05:19.93,*Default,NTP,0000,0000,0000,,all the way through the course
Dialogue: 0,0:05:20.37,0:05:23.47,*Default,NTP,0000,0000,0000,,but as of today we'll learn how to handle exceptions
Dialogue: 0,0:05:23.53,0:05:26.73,*Default,NTP,0000,0000,0000,,so that python doesn't always have to halt execution
Dialogue: 0,0:05:26.90,0:05:29.47,*Default,NTP,0000,0000,0000,,it could recover from the problem when keep going
Dialogue: 0,0:05:30.67,0:05:34.10,*Default,NTP,0000,0000,0000,,so here are some key tips for mastering exceptions
Dialogue: 0,0:05:34.27,0:05:37.47,*Default,NTP,0000,0000,0000,,one is that exceptions are a type of object
Dialogue: 0,0:05:37.67,0:05:39.87,*Default,NTP,0000,0000,0000,,and you know how the object system works
Dialogue: 0,0:05:40.13,0:05:43.00,*Default,NTP,0000,0000,0000,,so exceptions will have classes with constructors
Dialogue: 0,0:05:43.17,0:05:44.80,*Default,NTP,0000,0000,0000,,just like any other object
Dialogue: 0,0:05:46.37,0:05:49.17,*Default,NTP,0000,0000,0000,,they're special because they enable
Dialogue: 0,0:05:49.60,0:05:52.73,*Default,NTP,0000,0000,0000,,non local continuations of control
Dialogue: 0,0:05:53.50,0:05:56.27,*Default,NTP,0000,0000,0000,,these are not like non local assignment statements
Dialogue: 0,0:05:56.27,0:05:57.57,*Default,NTP,0000,0000,0000,,they're a little bit different
Dialogue: 0,0:05:58.60,0:06:00.17,*Default,NTP,0000,0000,0000,,the idea is that
Dialogue: 0,0:06:00.40,0:06:02.67,*Default,NTP,0000,0000,0000,,when you have a chain of function calls
Dialogue: 0,0:06:02.67,0:06:05.53,*Default,NTP,0000,0000,0000,,so f calls g and g calls h
Dialogue: 0,0:06:05.90,0:06:07.67,*Default,NTP,0000,0000,0000,,normally what happens is that h
Dialogue: 0,0:06:07.67,0:06:09.60,*Default,NTP,0000,0000,0000,,returns and then we continue
Dialogue: 0,0:06:10.13,0:06:11.77,*Default,NTP,0000,0000,0000,,executing the body of g
Dialogue: 0,0:06:12.07,0:06:14.97,*Default,NTP,0000,0000,0000,,and then when g returns that's when you go back to f
Dialogue: 0,0:06:15.57,0:06:16.40,*Default,NTP,0000,0000,0000,,so you always
Dialogue: 0,0:06:16.53,0:06:19.00,*Default,NTP,0000,0000,0000,,finish returning from functions in the order that you
Dialogue: 0,0:06:19.00,0:06:19.80,*Default,NTP,0000,0000,0000,,called them
Dialogue: 0,0:06:20.47,0:06:22.73,*Default,NTP,0000,0000,0000,,but exceptions can change the rules there
Dialogue: 0,0:06:23.73,0:06:27.17,*Default,NTP,0000,0000,0000,,so exceptions can shift control directly from h to f
Dialogue: 0,0:06:27.33,0:06:29.80,*Default,NTP,0000,0000,0000,,by passing g along the way
Dialogue: 0,0:06:30.50,0:06:31.37,*Default,NTP,0000,0000,0000,,meaning that
Dialogue: 0,0:06:31.47,0:06:33.77,*Default,NTP,0000,0000,0000,,you can return to a different place than you otherwise
Dialogue: 0,0:06:33.77,0:06:36.40,*Default,NTP,0000,0000,0000,,would now it's not quite returning anymore
Dialogue: 0,0:06:36.67,0:06:38.93,*Default,NTP,0000,0000,0000,,it's raising an exception and handling it
Dialogue: 0,0:06:39.00,0:06:41.07,*Default,NTP,0000,0000,0000,,which is going to feel a little bit different
Dialogue: 0,0:06:41.37,0:06:42.50,*Default,NTP,0000,0000,0000,,but the point is
Dialogue: 0,0:06:42.87,0:06:45.10,*Default,NTP,0000,0000,0000,,that when one statement is executed
Dialogue: 0,0:06:45.10,0:06:46.90,*Default,NTP,0000,0000,0000,,and then the next statement is executed
Dialogue: 0,0:06:46.97,0:06:47.97,*Default,NTP,0000,0000,0000,,they may be in
Dialogue: 0,0:06:48.10,0:06:50.53,*Default,NTP,0000,0000,0000,,functions that are separated by other functions
Dialogue: 0,0:06:50.60,0:06:54.50,*Default,NTP,0000,0000,0000,,in between that's non local continuations of control
Dialogue: 0,0:06:56.77,0:06:57.90,*Default,NTP,0000,0000,0000,,also by the way
Dialogue: 0,0:06:58.10,0:07:00.17,*Default,NTP,0000,0000,0000,,exception handling tends to be slow
Dialogue: 0,0:07:00.37,0:07:02.13,*Default,NTP,0000,0000,0000,,so it's not something that we use
Dialogue: 0,0:07:02.30,0:07:04.33,*Default,NTP,0000,0000,0000,,for the standard approach to a program
Dialogue: 0,0:07:04.33,0:07:07.13,*Default,NTP,0000,0000,0000,,only for non standard situations
Dialogue: 0,0:07:10.17,0:07:12.53,*Default,NTP,0000,0000,0000,,so there are two parts of the exception mechanism
Dialogue: 0,0:07:12.70,0:07:15.13,*Default,NTP,0000,0000,0000,,raising exceptions and then handling them
Dialogue: 0,0:07:15.30,0:07:17.60,*Default,NTP,0000,0000,0000,,let's first talk about raising exceptions
Dialogue: 0,0:07:18.17,0:07:20.70,*Default,NTP,0000,0000,0000,,so the easiest way to raise an exception
Dialogue: 0,0:07:21.27,0:07:22.60,*Default,NTP,0000,0000,0000,,is with an assert statement
Dialogue: 0,0:07:22.60,0:07:24.20,*Default,NTP,0000,0000,0000,,and we've seen these throughout the course
Dialogue: 0,0:07:24.67,0:07:27.13,*Default,NTP,0000,0000,0000,,so assert statements raise a particular kind of
Dialogue: 0,0:07:27.13,0:07:28.20,*Default,NTP,0000,0000,0000,,exception called
Dialogue: 0,0:07:28.53,0:07:29.97,*Default,NTP,0000,0000,0000,,an assertion error
Dialogue: 0,0:07:30.53,0:07:32.97,*Default,NTP,0000,0000,0000,,so I say assert I give some expression
Dialogue: 0,0:07:33.77,0:07:35.07,*Default,NTP,0000,0000,0000,,if that expression
Dialogue: 0,0:07:35.13,0:07:37.80,*Default,NTP,0000,0000,0000,,is not a true value but a false value
Dialogue: 0,0:07:38.07,0:07:40.33,*Default,NTP,0000,0000,0000,,that an assertion error is created
Dialogue: 0,0:07:40.73,0:07:42.77,*Default,NTP,0000,0000,0000,,using the string as an argument
Dialogue: 0,0:07:43.37,0:07:45.07,*Default,NTP,0000,0000,0000,,and that's what gets raised
Dialogue: 0,0:07:45.87,0:07:48.40,*Default,NTP,0000,0000,0000,,so assertions are designed to be used liberally
Dialogue: 0,0:07:48.67,0:07:50.10,*Default,NTP,0000,0000,0000,,all over your program
Dialogue: 0,0:07:50.73,0:07:52.97,*Default,NTP,0000,0000,0000,,if once you've decided that your program
Dialogue: 0,0:07:52.97,0:07:54.30,*Default,NTP,0000,0000,0000,,needs to run a little bit faster
Dialogue: 0,0:07:54.30,0:07:56.07,*Default,NTP,0000,0000,0000,,and assertions are slowing you down
Dialogue: 0,0:07:56.13,0:07:57.73,*Default,NTP,0000,0000,0000,,you can turn them all off
Dialogue: 0,0:07:58.70,0:07:59.90,*Default,NTP,0000,0000,0000,,so you can ignore
Dialogue: 0,0:08:00.17,0:08:01.57,*Default,NTP,0000,0000,0000,,all assertions in order
Dialogue: 0,0:08:01.57,0:08:03.10,*Default,NTP,0000,0000,0000,,to increase efficiency
Dialogue: 0,0:08:03.10,0:08:05.37,*Default,NTP,0000,0000,0000,,by running python with the dash o flag
Dialogue: 0,0:08:05.37,0:08:07.10,*Default,NTP,0000,0000,0000,,where o stands for optimized
Dialogue: 0,0:08:07.40,0:08:09.60,*Default,NTP,0000,0000,0000,,so if you just run python three dash show
Dialogue: 0,0:08:09.73,0:08:11.93,*Default,NTP,0000,0000,0000,,that means none of your assert statements are going
Dialogue: 0,0:08:11.93,0:08:13.53,*Default,NTP,0000,0000,0000,,to be executed
Dialogue: 0,0:08:14.97,0:08:15.53,*Default,NTP,0000,0000,0000,,you can always
Dialogue: 0,0:08:15.53,0:08:17.50,*Default,NTP,0000,0000,0000,,tell whether assertions are enabled or not
Dialogue: 0,0:08:17.73,0:08:20.53,*Default,NTP,0000,0000,0000,,buy our bull with a special name debug
Dialogue: 0,0:08:21.53,0:08:23.57,*Default,NTP,0000,0000,0000,,and we can try this out
Dialogue: 0,0:08:25.07,0:08:26.90,*Default,NTP,0000,0000,0000,,okay so we'll start up pipe on three
Dialogue: 0,0:08:27.10,0:08:29.30,*Default,NTP,0000,0000,0000,,and we'll assert false
Dialogue: 0,0:08:30.10,0:08:30.90,*Default,NTP,0000,0000,0000,,error
Dialogue: 0,0:08:31.40,0:08:32.70,*Default,NTP,0000,0000,0000,,and what happened there was
Dialogue: 0,0:08:32.70,0:08:34.53,*Default,NTP,0000,0000,0000,,that we raised an assertion error
Dialogue: 0,0:08:34.90,0:08:37.90,*Default,NTP,0000,0000,0000,,so now we know this is the class of the exception
Dialogue: 0,0:08:37.90,0:08:38.87,*Default,NTP,0000,0000,0000,,that was raised
Dialogue: 0,0:08:39.10,0:08:41.87,*Default,NTP,0000,0000,0000,,and then following the colon is the message associated
Dialogue: 0,0:08:41.87,0:08:42.97,*Default,NTP,0000,0000,0000,,with the exception
Dialogue: 0,0:08:44.53,0:08:46.73,*Default,NTP,0000,0000,0000,,and assert true has no effect
Dialogue: 0,0:08:47.20,0:08:50.20,*Default,NTP,0000,0000,0000,,now instead I run python with the dash o
Dialogue: 0,0:08:51.20,0:08:54.53,*Default,NTP,0000,0000,0000,,then I'll notice that debug is a false value
Dialogue: 0,0:08:54.60,0:08:57.07,*Default,NTP,0000,0000,0000,,and if I assert false error
Dialogue: 0,0:08:57.80,0:08:59.50,*Default,NTP,0000,0000,0000,,nothing will happen at all
Dialogue: 0,0:09:00.47,0:09:02.97,*Default,NTP,0000,0000,0000,,before in normal python
Dialogue: 0,0:09:03.47,0:09:05.47,*Default,NTP,0000,0000,0000,,I saw an assertion error raised
Dialogue: 0,0:09:05.60,0:09:08.13,*Default,NTP,0000,0000,0000,,but now I've turned off assertions
Dialogue: 0,0:09:10.37,0:09:12.80,*Default,NTP,0000,0000,0000,,now you can also raise any kind of exception
Dialogue: 0,0:09:12.80,0:09:15.60,*Default,NTP,0000,0000,0000,,not just a sushion error with a raised statement
Dialogue: 0,0:09:16.13,0:09:18.30,*Default,NTP,0000,0000,0000,,so exceptions are raised with a raised statement
Dialogue: 0,0:09:18.30,0:09:20.20,*Default,NTP,0000,0000,0000,,that says raised expression
Dialogue: 0,0:09:20.90,0:09:23.73,*Default,NTP,0000,0000,0000,,if you want to attach some sort of message
Dialogue: 0,0:09:24.13,0:09:27.10,*Default,NTP,0000,0000,0000,,to that error that you're raising
Dialogue: 0,0:09:27.13,0:09:30.13,*Default,NTP,0000,0000,0000,,you have to do it by making it a part
Dialogue: 0,0:09:30.47,0:09:33.10,*Default,NTP,0000,0000,0000,,of the exception instance that you raise
Dialogue: 0,0:09:33.80,0:09:36.97,*Default,NTP,0000,0000,0000,,so expression must evaluate to a subclass
Dialogue: 0,0:09:37.17,0:09:38.90,*Default,NTP,0000,0000,0000,,of the base exception
Dialogue: 0,0:09:38.93,0:09:42.67,*Default,NTP,0000,0000,0000,,which is the base class for all exceptions in python
Dialogue: 0,0:09:43.07,0:09:44.67,*Default,NTP,0000,0000,0000,,so we can put a class there
Dialogue: 0,0:09:44.67,0:09:46.33,*Default,NTP,0000,0000,0000,,or we can put an instance of one
Dialogue: 0,0:09:47.17,0:09:49.97,*Default,NTP,0000,0000,0000,,and exceptions are constructed like any other object
Dialogue: 0,0:09:50.30,0:09:52.13,*Default,NTP,0000,0000,0000,,so for instance if I wanted to put
Dialogue: 0,0:09:52.37,0:09:55.00,*Default,NTP,0000,0000,0000,,a type error that says I've passed in a bad argument
Dialogue: 0,0:09:55.10,0:09:58.60,*Default,NTP,0000,0000,0000,,and I would raise type error and pass in a message
Dialogue: 0,0:09:58.70,0:10:01.17,*Default,NTP,0000,0000,0000,,because that's what type errors take on construction
Dialogue: 0,0:10:02.93,0:10:06.60,*Default,NTP,0000,0000,0000,,now there are some built in different classes of errors
Dialogue: 0,0:10:06.60,0:10:07.53,*Default,NTP,0000,0000,0000,,a type error
Dialogue: 0,0:10:07.53,0:10:09.17,*Default,NTP,0000,0000,0000,,is something that's meant to indicate
Dialogue: 0,0:10:09.17,0:10:10.00,*Default,NTP,0000,0000,0000,,that a function was
Dialogue: 0,0:10:10.00,0:10:11.10,*Default,NTP,0000,0000,0000,,past the wrong number
Dialogue: 0,0:10:11.10,0:10:13.00,*Default,NTP,0000,0000,0000,,or type of argument
Dialogue: 0,0:10:13.80,0:10:14.73,*Default,NTP,0000,0000,0000,,a name error
Dialogue: 0,0:10:14.73,0:10:16.97,*Default,NTP,0000,0000,0000,,means that a name wasn't found when it was looked up
Dialogue: 0,0:10:16.97,0:10:18.37,*Default,NTP,0000,0000,0000,,in the current environment
Dialogue: 0,0:10:18.90,0:10:20.07,*Default,NTP,0000,0000,0000,,a key error
Dialogue: 0,0:10:20.33,0:10:22.77,*Default,NTP,0000,0000,0000,,means that a key wasn't found in a dictionary
Dialogue: 0,0:10:23.67,0:10:26.47,*Default,NTP,0000,0000,0000,,and a runtime error indicates that something else bad
Dialogue: 0,0:10:26.47,0:10:27.20,*Default,NTP,0000,0000,0000,,happened
Dialogue: 0,0:10:27.20,0:10:29.50,*Default,NTP,0000,0000,0000,,so it was just a catch all for troubles that happened
Dialogue: 0,0:10:29.50,0:10:31.20,*Default,NTP,0000,0000,0000,,during interpretation
Dialogue: 0,0:10:31.20,0:10:32.73,*Default,NTP,0000,0000,0000,,raised by the interpreter
Dialogue: 0,0:10:33.93,0:10:36.07,*Default,NTP,0000,0000,0000,,okay let's see a few of these in action
Dialogue: 0,0:10:38.77,0:10:40.13,*Default,NTP,0000,0000,0000,,so I can raise
Dialogue: 0,0:10:41.13,0:10:42.57,*Default,NTP,0000,0000,0000,,a tight bearer
Dialogue: 0,0:10:44.37,0:10:46.37,*Default,NTP,0000,0000,0000,,that says bad argument
Dialogue: 0,0:10:46.67,0:10:50.13,*Default,NTP,0000,0000,0000,,and what happens when I do that is that I get a
Dialogue: 0,0:10:50.93,0:10:51.60,*Default,NTP,0000,0000,0000,,stack trace
Dialogue: 0,0:10:51.60,0:10:53.80,*Default,NTP,0000,0000,0000,,that's what this part is called words has what line
Dialogue: 0,0:10:54.30,0:10:55.37,*Default,NTP,0000,0000,0000,,different things happen
Dialogue: 0,0:10:56.53,0:10:58.97,*Default,NTP,0000,0000,0000,,and then it says the name of the class that I created
Dialogue: 0,0:10:58.97,0:10:59.90,*Default,NTP,0000,0000,0000,,the tight bear
Dialogue: 0,0:11:00.00,0:11:01.50,*Default,NTP,0000,0000,0000,,and it says bad argument
Dialogue: 0,0:11:02.27,0:11:03.50,*Default,NTP,0000,0000,0000,,which is the same kind of thing
Dialogue: 0,0:11:03.60,0:11:06.20,*Default,NTP,0000,0000,0000,,that you get if you pass in a string
Dialogue: 0,0:11:06.47,0:11:07.57,*Default,NTP,0000,0000,0000,,into the absolute value
Dialogue: 0,0:11:07.57,0:11:09.27,*Default,NTP,0000,0000,0000,,this says tight bear again
Dialogue: 0,0:11:10.07,0:11:13.13,*Default,NTP,0000,0000,0000,,and this has a more descriptive message
Dialogue: 0,0:11:13.33,0:11:15.10,*Default,NTP,0000,0000,0000,,because the more descriptive and error message
Dialogue: 0,0:11:15.10,0:11:15.77,*Default,NTP,0000,0000,0000,,you can give
Dialogue: 0,0:11:15.77,0:11:18.13,*Default,NTP,0000,0000,0000,,the easier it is for your user to understand
Dialogue: 0,0:11:18.30,0:11:19.37,*Default,NTP,0000,0000,0000,,what went wrong
Dialogue: 0,0:11:19.70,0:11:21.00,*Default,NTP,0000,0000,0000,,so that's a type error
Dialogue: 0,0:11:21.37,0:11:24.00,*Default,NTP,0000,0000,0000,,there is a name error hello is not defined
Dialogue: 0,0:11:25.47,0:11:29.77,*Default,NTP,0000,0000,0000,,what us we were interested in having a key error
Dialogue: 0,0:11:30.00,0:11:31.30,*Default,NTP,0000,0000,0000,,so if I look up hello
Dialogue: 0,0:11:31.30,0:11:33.47,*Default,NTP,0000,0000,0000,,in the empty dictionary and it will tell me
Dialogue: 0,0:11:33.47,0:11:34.67,*Default,NTP,0000,0000,0000,,there's a key error
Dialogue: 0,0:11:35.40,0:11:36.93,*Default,NTP,0000,0000,0000,,and what about a runtime error
Dialogue: 0,0:11:36.93,0:11:40.30,*Default,NTP,0000,0000,0000,,well let's define a function that calls itself
Dialogue: 0,0:11:41.87,0:11:44.50,*Default,NTP,0000,0000,0000,,since I don't have a base case this will run forever
Dialogue: 0,0:11:44.67,0:11:46.87,*Default,NTP,0000,0000,0000,,and at the bottom here it says
Dialogue: 0,0:11:47.30,0:11:49.70,*Default,NTP,0000,0000,0000,,maximum recursion death exceeded
Dialogue: 0,0:11:50.30,0:11:52.37,*Default,NTP,0000,0000,0000,,and that is a runtime error
Dialogue: 0,0:11:56.70,0:11:57.80,*Default,NTP,0000,0000,0000,,now that we can
Dialogue: 0,0:11:57.97,0:12:00.40,*Default,NTP,0000,0000,0000,,raise exceptions we need to be able to handle them
Dialogue: 0,0:12:00.60,0:12:02.57,*Default,NTP,0000,0000,0000,,and we do that with a tria statement
Dialogue: 0,0:12:03.70,0:12:06.07,*Default,NTP,0000,0000,0000,,so a tri statement handles exceptions
Dialogue: 0,0:12:06.30,0:12:08.13,*Default,NTP,0000,0000,0000,,it has the following syntax
Dialogue: 0,0:12:08.17,0:12:09.53,*Default,NTP,0000,0000,0000,,first you say try
Dialogue: 0,0:12:09.67,0:12:13.00,*Default,NTP,0000,0000,0000,,that's the whole header line that begins the statement
Dialogue: 0,0:12:13.80,0:12:18.30,*Default,NTP,0000,0000,0000,,then a tri suite can contain arbitrary statements
Dialogue: 0,0:12:18.57,0:12:19.90,*Default,NTP,0000,0000,0000,,but you get executed
Dialogue: 0,0:12:20.70,0:12:23.90,*Default,NTP,0000,0000,0000,,now during the course of executing the tri suite
Dialogue: 0,0:12:24.13,0:12:26.33,*Default,NTP,0000,0000,0000,,it could be the case that something goes wrong
Dialogue: 0,0:12:26.33,0:12:28.07,*Default,NTP,0000,0000,0000,,that an exception is raised
Dialogue: 0,0:12:28.47,0:12:29.50,*Default,NTP,0000,0000,0000,,and therefore
Dialogue: 0,0:12:29.77,0:12:32.70,*Default,NTP,0000,0000,0000,,control may be transferred to the except suite
Dialogue: 0,0:12:33.50,0:12:34.50,*Default,NTP,0000,0000,0000,,based on whether
Dialogue: 0,0:12:34.77,0:12:36.70,*Default,NTP,0000,0000,0000,,this tri statement handles
Dialogue: 0,0:12:36.77,0:12:39.20,*Default,NTP,0000,0000,0000,,the kind of exception that was raised
Dialogue: 0,0:12:39.33,0:12:42.17,*Default,NTP,0000,0000,0000,,which is determined by the exception class
Dialogue: 0,0:12:42.80,0:12:46.53,*Default,NTP,0000,0000,0000,,so here's the whole execution rule for this statement
Dialogue: 0,0:12:47.13,0:12:49.13,*Default,NTP,0000,0000,0000,,first we execute the tri suite
Dialogue: 0,0:12:49.67,0:12:53.17,*Default,NTP,0000,0000,0000,,if nothing goes wrong that is no exceptions are raised
Dialogue: 0,0:12:53.17,0:12:54.40,*Default,NTP,0000,0000,0000,,that's all we do
Dialogue: 0,0:12:54.60,0:12:57.87,*Default,NTP,0000,0000,0000,,but if during the course of executing the tri suite
Dialogue: 0,0:12:58.07,0:13:01.00,*Default,NTP,0000,0000,0000,,an exception is raised that is not otherwise handled
Dialogue: 0,0:13:02.07,0:13:03.37,*Default,NTP,0000,0000,0000,,and it's the case
Dialogue: 0,0:13:03.53,0:13:06.50,*Default,NTP,0000,0000,0000,,that the class of the exception inherits
Dialogue: 0,0:13:06.57,0:13:08.80,*Default,NTP,0000,0000,0000,,from the exception class that's given
Dialogue: 0,0:13:09.10,0:13:10.73,*Default,NTP,0000,0000,0000,,in the accept line
Dialogue: 0,0:13:11.50,0:13:14.40,*Default,NTP,0000,0000,0000,,then the except suite is executed
Dialogue: 0,0:13:14.70,0:13:16.60,*Default,NTP,0000,0000,0000,,with name bound to the exception
Dialogue: 0,0:13:16.77,0:13:19.57,*Default,NTP,0000,0000,0000,,and we say that the exception is handled
Dialogue: 0,0:13:20.13,0:13:23.47,*Default,NTP,0000,0000,0000,,meaning that your interpreter won't halt
Dialogue: 0,0:13:23.47,0:13:26.07,*Default,NTP,0000,0000,0000,,instead you can just execute that except suite
Dialogue: 0,0:13:26.10,0:13:28.10,*Default,NTP,0000,0000,0000,,which does whatever we wanted to do
Dialogue: 0,0:13:28.33,0:13:30.67,*Default,NTP,0000,0000,0000,,in exceptional circumstances
Dialogue: 0,0:13:32.30,0:13:34.40,*Default,NTP,0000,0000,0000,,okay so that's how we handle exceptions
Dialogue: 0,0:13:34.40,0:13:35.73,*Default,NTP,0000,0000,0000,,with the tri statement
Dialogue: 0,0:13:36.07,0:13:38.70,*Default,NTP,0000,0000,0000,,and this can prevent our program from terminating
Dialogue: 0,0:13:39.13,0:13:40.17,*Default,NTP,0000,0000,0000,,so for instance
Dialogue: 0,0:13:40.40,0:13:42.40,*Default,NTP,0000,0000,0000,,I can write the following tri statement
Dialogue: 0,0:13:42.67,0:13:46.57,*Default,NTP,0000,0000,0000,,try to bind the name x to one divided by zero
Dialogue: 0,0:13:47.37,0:13:49.57,*Default,NTP,0000,0000,0000,,what will happen when I divide one by zero
Dialogue: 0,0:13:49.77,0:13:52.40,*Default,NTP,0000,0000,0000,,I'll raise a zero division error
Dialogue: 0,0:13:53.27,0:13:54.07,*Default,NTP,0000,0000,0000,,so
Dialogue: 0,0:13:54.27,0:13:57.47,*Default,NTP,0000,0000,0000,,I'm going to have an except claws in my tri statement
Dialogue: 0,0:13:57.50,0:14:00.60,*Default,NTP,0000,0000,0000,,that says when there's a zero division error
Dialogue: 0,0:14:01.00,0:14:03.47,*Default,NTP,0000,0000,0000,,in the tri suite which is up here
Dialogue: 0,0:14:04.30,0:14:06.37,*Default,NTP,0000,0000,0000,,then I'm going to handle it
Dialogue: 0,0:14:06.73,0:14:08.67,*Default,NTP,0000,0000,0000,,and bind it to the name e
Dialogue: 0,0:14:09.10,0:14:12.40,*Default,NTP,0000,0000,0000,,at which point I will print handling a
Dialogue: 0,0:14:12.53,0:14:13.80,*Default,NTP,0000,0000,0000,,and then the type of e
Dialogue: 0,0:14:13.80,0:14:15.60,*Default,NTP,0000,0000,0000,,which will be a zero division error
Dialogue: 0,0:14:16.20,0:14:18.40,*Default,NTP,0000,0000,0000,,and then I'll bind x to zero
Dialogue: 0,0:14:19.73,0:14:21.30,*Default,NTP,0000,0000,0000,,now why might I do this
Dialogue: 0,0:14:21.53,0:14:22.33,*Default,NTP,0000,0000,0000,,well
Dialogue: 0,0:14:23.17,0:14:25.40,*Default,NTP,0000,0000,0000,,x will never be bound up here
Dialogue: 0,0:14:25.70,0:14:28.13,*Default,NTP,0000,0000,0000,,because the error occurs when we're in the middle
Dialogue: 0,0:14:28.70,0:14:30.77,*Default,NTP,0000,0000,0000,,of executing the assignment statement
Dialogue: 0,0:14:30.80,0:14:33.07,*Default,NTP,0000,0000,0000,,one we're still in the process of evaluating
Dialogue: 0,0:14:33.07,0:14:34.40,*Default,NTP,0000,0000,0000,,with on the right hand side
Dialogue: 0,0:14:35.07,0:14:37.33,*Default,NTP,0000,0000,0000,,so this is a very typical pattern
Dialogue: 0,0:14:37.40,0:14:40.30,*Default,NTP,0000,0000,0000,,that when we're trying to bind a name to a value
Dialogue: 0,0:14:40.50,0:14:41.87,*Default,NTP,0000,0000,0000,,and it doesn't work out
Dialogue: 0,0:14:42.10,0:14:45.33,*Default,NTP,0000,0000,0000,,we're gonna bind the name to some default value instead
Dialogue: 0,0:14:46.40,0:14:47.60,*Default,NTP,0000,0000,0000,,that's not required
Dialogue: 0,0:14:47.60,0:14:50.60,*Default,NTP,0000,0000,0000,,it just sometimes makes it easier to program
Dialogue: 0,0:14:50.70,0:14:53.37,*Default,NTP,0000,0000,0000,,because then we know no matter what happens
Dialogue: 0,0:14:53.53,0:14:54.97,*Default,NTP,0000,0000,0000,,x will be bound to something
Dialogue: 0,0:14:55.13,0:14:57.27,*Default,NTP,0000,0000,0000,,after this tri statement is executed
Dialogue: 0,0:14:57.50,0:14:59.00,*Default,NTP,0000,0000,0000,,okay so we execute it
Dialogue: 0,0:14:59.13,0:15:02.00,*Default,NTP,0000,0000,0000,,and it prints out handling a zero division error
Dialogue: 0,0:15:04.37,0:15:06.57,*Default,NTP,0000,0000,0000,,but if we look at what x is bound to now
Dialogue: 0,0:15:06.57,0:15:07.73,*Default,NTP,0000,0000,0000,,it's bound to zero
Dialogue: 0,0:15:07.73,0:15:09.30,*Default,NTP,0000,0000,0000,,and that's because of this line
Dialogue: 0,0:15:11.57,0:15:14.10,*Default,NTP,0000,0000,0000,,okay so there's the first example of just the simplest
Dialogue: 0,0:15:14.10,0:15:15.60,*Default,NTP,0000,0000,0000,,tri statement we can come up with
Dialogue: 0,0:15:16.53,0:15:19.47,*Default,NTP,0000,0000,0000,,you can have multiple tri statements in your program
Dialogue: 0,0:15:19.70,0:15:21.53,*Default,NTP,0000,0000,0000,,they can be nested within each other
Dialogue: 0,0:15:22.13,0:15:24.53,*Default,NTP,0000,0000,0000,,and what happens when an exception is raised
Dialogue: 0,0:15:24.93,0:15:27.07,*Default,NTP,0000,0000,0000,,will control jumps to the except suite
Dialogue: 0,0:15:27.40,0:15:29.27,*Default,NTP,0000,0000,0000,,of the most recent tri statement
Dialogue: 0,0:15:29.27,0:15:31.17,*Default,NTP,0000,0000,0000,,so that innermost tri statement
Dialogue: 0,0:15:31.47,0:15:33.37,*Default,NTP,0000,0000,0000,,that handles that type of exception
Dialogue: 0,0:15:36.53,0:15:38.20,*Default,NTP,0000,0000,0000,,let's look at a demonstration
Dialogue: 0,0:15:40.70,0:15:41.77,*Default,NTP,0000,0000,0000,,okay so
Dialogue: 0,0:15:42.80,0:15:44.13,*Default,NTP,0000,0000,0000,,let's define
Dialogue: 0,0:15:45.20,0:15:47.17,*Default,NTP,0000,0000,0000,,a function called invert
Dialogue: 0,0:15:48.00,0:15:49.80,*Default,NTP,0000,0000,0000,,which takes in a number x
Dialogue: 0,0:15:52.00,0:15:54.10,*Default,NTP,0000,0000,0000,,binds y to one over x
Dialogue: 0,0:15:55.30,0:15:57.00,*Default,NTP,0000,0000,0000,,prince a message
Dialogue: 0,0:15:58.07,0:16:00.13,*Default,NTP,0000,0000,0000,,never printed if
Dialogue: 0,0:16:00.87,0:16:02.80,*Default,NTP,0000,0000,0000,,x is zero
Dialogue: 0,0:16:05.33,0:16:06.80,*Default,NTP,0000,0000,0000,,and then returns why
Dialogue: 0,0:16:08.60,0:16:10.93,*Default,NTP,0000,0000,0000,,okay so that's what inverting does
Dialogue: 0,0:16:15.57,0:16:20.40,*Default,NTP,0000,0000,0000,,if we load this file and we invert two will get 0.5
Dialogue: 0,0:16:20.57,0:16:21.80,*Default,NTP,0000,0000,0000,,and this is printed
Dialogue: 0,0:16:24.27,0:16:26.00,*Default,NTP,0000,0000,0000,,because x is not zero
Dialogue: 0,0:16:26.00,0:16:27.50,*Default,NTP,0000,0000,0000,,but when x is zero
Dialogue: 0,0:16:27.87,0:16:30.33,*Default,NTP,0000,0000,0000,,then we raise a zero division error
Dialogue: 0,0:16:31.20,0:16:34.50,*Default,NTP,0000,0000,0000,,y is never bound and the print statement is
Dialogue: 0,0:16:34.73,0:16:37.00,*Default,NTP,0000,0000,0000,,this print expression is never evaluated
Dialogue: 0,0:16:37.00,0:16:38.93,*Default,NTP,0000,0000,0000,,and so we never print anything at all
Dialogue: 0,0:16:40.57,0:16:44.77,*Default,NTP,0000,0000,0000,,okay and then let's also define invert safe
Dialogue: 0,0:16:45.40,0:16:46.30,*Default,NTP,0000,0000,0000,,which will
Dialogue: 0,0:16:47.10,0:16:49.47,*Default,NTP,0000,0000,0000,,handle all zero division errors
Dialogue: 0,0:16:50.27,0:16:51.80,*Default,NTP,0000,0000,0000,,so it takes in x
Dialogue: 0,0:16:51.93,0:16:54.33,*Default,NTP,0000,0000,0000,,it tries to return
Dialogue: 0,0:16:54.97,0:16:56.77,*Default,NTP,0000,0000,0000,,invert x
Dialogue: 0,0:16:59.70,0:17:03.53,*Default,NTP,0000,0000,0000,,if it's the case that there is a zero division error
Dialogue: 0,0:17:05.13,0:17:05.93,*Default,NTP,0000,0000,0000,,oops
Dialogue: 0,0:17:06.37,0:17:07.70,*Default,NTP,0000,0000,0000,,we will handle it
Dialogue: 0,0:17:08.07,0:17:09.50,*Default,NTP,0000,0000,0000,,so the except lines has
Dialogue: 0,0:17:09.50,0:17:11.27,*Default,NTP,0000,0000,0000,,we're handling zero division errors
Dialogue: 0,0:17:11.33,0:17:12.30,*Default,NTP,0000,0000,0000,,what should we do
Dialogue: 0,0:17:12.33,0:17:14.30,*Default,NTP,0000,0000,0000,,well let's print out that we handled it
Dialogue: 0,0:17:16.90,0:17:18.53,*Default,NTP,0000,0000,0000,,and let's return zero
Dialogue: 0,0:17:22.57,0:17:24.73,*Default,NTP,0000,0000,0000,,okay so now we can invert
Dialogue: 0,0:17:25.87,0:17:27.50,*Default,NTP,0000,0000,0000,,safe two
Dialogue: 0,0:17:27.87,0:17:30.97,*Default,NTP,0000,0000,0000,,and what will happen will invert safe will call invert
Dialogue: 0,0:17:31.30,0:17:35.53,*Default,NTP,0000,0000,0000,,invert will compute 0.5 print out never printed
Dialogue: 0,0:17:35.53,0:17:37.50,*Default,NTP,0000,0000,0000,,if x is zero return
Dialogue: 0,0:17:37.93,0:17:41.20,*Default,NTP,0000,0000,0000,,0.5 which is returned from invert safe
Dialogue: 0,0:17:41.30,0:17:43.70,*Default,NTP,0000,0000,0000,,and nothing ever happens with the except part
Dialogue: 0,0:17:43.70,0:17:46.07,*Default,NTP,0000,0000,0000,,because there never was a zero division error
Dialogue: 0,0:17:46.10,0:17:47.70,*Default,NTP,0000,0000,0000,,or an error of any kind
Dialogue: 0,0:17:50.30,0:17:52.67,*Default,NTP,0000,0000,0000,,but what happens when we invert save zero
Dialogue: 0,0:17:53.27,0:17:55.37,*Default,NTP,0000,0000,0000,,well this is never printed
Dialogue: 0,0:17:55.40,0:17:57.77,*Default,NTP,0000,0000,0000,,because even though we got all the way down here
Dialogue: 0,0:17:57.80,0:17:59.13,*Default,NTP,0000,0000,0000,,inside invert
Dialogue: 0,0:17:59.30,0:18:01.97,*Default,NTP,0000,0000,0000,,we raised in exception
Dialogue: 0,0:18:02.93,0:18:04.80,*Default,NTP,0000,0000,0000,,that exception was handled here
Dialogue: 0,0:18:06.17,0:18:08.53,*Default,NTP,0000,0000,0000,,we printed out the fact that we handled that error
Dialogue: 0,0:18:09.30,0:18:10.77,*Default,NTP,0000,0000,0000,,and then we returned zero
Dialogue: 0,0:18:11.17,0:18:12.73,*Default,NTP,0000,0000,0000,,and why does this hate division by zero
Dialogue: 0,0:18:12.73,0:18:14.73,*Default,NTP,0000,0000,0000,,well that's the message that you get
Dialogue: 0,0:18:16.17,0:18:19.13,*Default,NTP,0000,0000,0000,,in a zero division error division by zero right there
Dialogue: 0,0:18:22.70,0:18:23.50,*Default,NTP,0000,0000,0000,,okay
Dialogue: 0,0:18:25.77,0:18:27.30,*Default,NTP,0000,0000,0000,,so there's a basic example
Dialogue: 0,0:18:27.30,0:18:29.70,*Default,NTP,0000,0000,0000,,let's look at some slightly more complicated examples
Dialogue: 0,0:18:29.70,0:18:31.07,*Default,NTP,0000,0000,0000,,and see if we can figure out
Dialogue: 0,0:18:31.17,0:18:33.20,*Default,NTP,0000,0000,0000,,what python would do
Dialogue: 0,0:18:34.30,0:18:35.60,*Default,NTP,0000,0000,0000,,what would python do
Dialogue: 0,0:18:36.10,0:18:37.37,*Default,NTP,0000,0000,0000,,so here's the same
Dialogue: 0,0:18:38.17,0:18:38.97,*Default,NTP,0000,0000,0000,,program
Dialogue: 0,0:18:39.50,0:18:42.13,*Default,NTP,0000,0000,0000,,except instead of why I used result this time
Dialogue: 0,0:18:44.47,0:18:47.30,*Default,NTP,0000,0000,0000,,and invert safe is slightly different
Dialogue: 0,0:18:47.30,0:18:49.57,*Default,NTP,0000,0000,0000,,because it's just going to return a string version
Dialogue: 0,0:18:49.73,0:18:51.77,*Default,NTP,0000,0000,0000,,of e instead of returning zero
Dialogue: 0,0:18:52.77,0:18:54.50,*Default,NTP,0000,0000,0000,,same thing okay
Dialogue: 0,0:18:54.50,0:18:57.90,*Default,NTP,0000,0000,0000,,so what happens about invert safe one divided by zero
Dialogue: 0,0:19:01.47,0:19:02.73,*Default,NTP,0000,0000,0000,,well what's going to happen
Dialogue: 0,0:19:03.17,0:19:06.40,*Default,NTP,0000,0000,0000,,is that before we ever even call invert safe
Dialogue: 0,0:19:06.47,0:19:08.13,*Default,NTP,0000,0000,0000,,we figure out what we're calling
Dialogue: 0,0:19:08.27,0:19:10.50,*Default,NTP,0000,0000,0000,,and then we evaluate the operand to figure out
Dialogue: 0,0:19:10.50,0:19:11.67,*Default,NTP,0000,0000,0000,,what we're calling it on
Dialogue: 0,0:19:12.13,0:19:13.57,*Default,NTP,0000,0000,0000,,and what we're calling it on
Dialogue: 0,0:19:15.10,0:19:16.57,*Default,NTP,0000,0000,0000,,doesn't have a value
Dialogue: 0,0:19:16.73,0:19:18.90,*Default,NTP,0000,0000,0000,,because dividing one by zero here
Dialogue: 0,0:19:18.93,0:19:20.90,*Default,NTP,0000,0000,0000,,what raise is zero divisionary
Dialogue: 0,0:19:21.53,0:19:23.90,*Default,NTP,0000,0000,0000,,so this tri statement is never executed
Dialogue: 0,0:19:23.90,0:19:26.07,*Default,NTP,0000,0000,0000,,because this function is never called
Dialogue: 0,0:19:26.27,0:19:28.73,*Default,NTP,0000,0000,0000,,because before we ever have a chance to call it
Dialogue: 0,0:19:28.80,0:19:31.10,*Default,NTP,0000,0000,0000,,we already have raised an exception
Dialogue: 0,0:19:32.33,0:19:35.17,*Default,NTP,0000,0000,0000,,so the answer is invert safe zero
Dialogue: 0,0:19:36.70,0:19:39.37,*Default,NTP,0000,0000,0000,,one over zero will raise a zero division error
Dialogue: 0,0:19:39.50,0:19:41.20,*Default,NTP,0000,0000,0000,,we haven't handled that case
Dialogue: 0,0:19:42.90,0:19:45.77,*Default,NTP,0000,0000,0000,,okay what about try invert safe zero
Dialogue: 0,0:19:46.07,0:19:49.47,*Default,NTP,0000,0000,0000,,except zero division error and print handled
Dialogue: 0,0:19:51.50,0:19:52.67,*Default,NTP,0000,0000,0000,,let's try it up
Dialogue: 0,0:19:55.57,0:19:57.67,*Default,NTP,0000,0000,0000,,so we're gonna try to invert safe
Dialogue: 0,0:19:59.17,0:20:00.40,*Default,NTP,0000,0000,0000,,we're gonna handle
Dialogue: 0,0:20:00.87,0:20:03.33,*Default,NTP,0000,0000,0000,,a zero division error
Dialogue: 0,0:20:07.60,0:20:10.13,*Default,NTP,0000,0000,0000,,and we'll just print out handled
Dialogue: 0,0:20:13.00,0:20:14.90,*Default,NTP,0000,0000,0000,,we execute that tri statement
Dialogue: 0,0:20:15.20,0:20:16.80,*Default,NTP,0000,0000,0000,,it doesn't say handled
Dialogue: 0,0:20:17.00,0:20:18.57,*Default,NTP,0000,0000,0000,,notice no exclamation mark
Dialogue: 0,0:20:18.73,0:20:22.13,*Default,NTP,0000,0000,0000,,instead it just says handled division by zero
Dialogue: 0,0:20:22.17,0:20:24.17,*Default,NTP,0000,0000,0000,,which is what we get from this line
Dialogue: 0,0:20:25.77,0:20:28.30,*Default,NTP,0000,0000,0000,,when invert safe handles this exception
Dialogue: 0,0:20:28.30,0:20:29.77,*Default,NTP,0000,0000,0000,,the exception is gone
Dialogue: 0,0:20:29.77,0:20:31.33,*Default,NTP,0000,0000,0000,,it's already been handled
Dialogue: 0,0:20:31.33,0:20:34.30,*Default,NTP,0000,0000,0000,,and so it's never raised to this outer tri statement
Dialogue: 0,0:20:34.57,0:20:36.97,*Default,NTP,0000,0000,0000,,so this one is outside of this one
Dialogue: 0,0:20:37.30,0:20:39.17,*Default,NTP,0000,0000,0000,,because this line try
Dialogue: 0,0:20:39.60,0:20:43.10,*Default,NTP,0000,0000,0000,,was executed before this line try because try
Dialogue: 0,0:20:43.73,0:20:46.10,*Default,NTP,0000,0000,0000,,first we first execute this try
Dialogue: 0,0:20:46.27,0:20:47.20,*Default,NTP,0000,0000,0000,,which means we
Dialogue: 0,0:20:48.47,0:20:49.77,*Default,NTP,0000,0000,0000,,call invert safe
Dialogue: 0,0:20:49.77,0:20:52.87,*Default,NTP,0000,0000,0000,,and invert safe has its own inner tri statement
Dialogue: 0,0:20:55.50,0:20:58.77,*Default,NTP,0000,0000,0000,,what about invert safe one divided by zero
Dialogue: 0,0:20:59.00,0:21:01.17,*Default,NTP,0000,0000,0000,,what sort of problem does that cause
Dialogue: 0,0:21:01.40,0:21:03.73,*Default,NTP,0000,0000,0000,,well we should have another zero division arrow right
Dialogue: 0,0:21:04.00,0:21:06.60,*Default,NTP,0000,0000,0000,,not quite if we invert
Dialogue: 0,0:21:07.77,0:21:09.47,*Default,NTP,0000,0000,0000,,safe one over zero
Dialogue: 0,0:21:10.30,0:21:12.17,*Default,NTP,0000,0000,0000,,then what we get is a name error
Dialogue: 0,0:21:12.20,0:21:15.27,*Default,NTP,0000,0000,0000,,because the operator is evaluated before the operator
Dialogue: 0,0:21:15.30,0:21:18.37,*Default,NTP,0000,0000,0000,,so we never even get a chance to divide one by zero
Dialogue: 0,0:21:18.50,0:21:20.80,*Default,NTP,0000,0000,0000,,because we've already failed to figure out
Dialogue: 0,0:21:20.80,0:21:22.87,*Default,NTP,0000,0000,0000,,what inverts safe meets
Dialogue: 0,0:21:24.47,0:21:26.40,*Default,NTP,0000,0000,0000,,let's look at an example of where we might
Dialogue: 0,0:21:26.40,0:21:27.93,*Default,NTP,0000,0000,0000,,use exception handling
Dialogue: 0,0:21:29.07,0:21:30.10,*Default,NTP,0000,0000,0000,,this is an
Dialogue: 0,0:21:30.17,0:21:32.97,*Default,NTP,0000,0000,0000,,important higher order function called reduce
Dialogue: 0,0:21:33.97,0:21:34.77,*Default,NTP,0000,0000,0000,,reduce is
Dialogue: 0,0:21:34.77,0:21:37.27,*Default,NTP,0000,0000,0000,,there to reduce a whole sequence of values to a single
Dialogue: 0,0:21:37.27,0:21:38.07,*Default,NTP,0000,0000,0000,,value
Dialogue: 0,0:21:39.10,0:21:41.93,*Default,NTP,0000,0000,0000,,here is a description of the reduce function
Dialogue: 0,0:21:42.40,0:21:44.60,*Default,NTP,0000,0000,0000,,there is a built in version of reduce
Dialogue: 0,0:21:44.70,0:21:46.33,*Default,NTP,0000,0000,0000,,in the inter tools module
Dialogue: 0,0:21:46.47,0:21:47.90,*Default,NTP,0000,0000,0000,,but we can also write our own
Dialogue: 0,0:21:48.33,0:21:49.40,*Default,NTP,0000,0000,0000,,it takes a function
Dialogue: 0,0:21:49.40,0:21:51.40,*Default,NTP,0000,0000,0000,,a sequence in an initial value
Dialogue: 0,0:21:51.40,0:21:53.87,*Default,NTP,0000,0000,0000,,and combines the elements of the sequence pairwise
Dialogue: 0,0:21:53.87,0:21:54.73,*Default,NTP,0000,0000,0000,,using the function
Dialogue: 0,0:21:54.73,0:21:56.10,*Default,NTP,0000,0000,0000,,which takes two arguments
Dialogue: 0,0:21:56.50,0:21:58.07,*Default,NTP,0000,0000,0000,,starting with the initial value
Dialogue: 0,0:21:58.67,0:22:01.70,*Default,NTP,0000,0000,0000,,for example if we are reduced using multiplication
Dialogue: 0,0:22:01.70,0:22:02.53,*Default,NTP,0000,0000,0000,,two four and eight
Dialogue: 0,0:22:02.53,0:22:03.27,*Default,NTP,0000,0000,0000,,starting with one
Dialogue: 0,0:22:03.27,0:22:05.47,*Default,NTP,0000,0000,0000,,that's the equivalent of multiplying one by two
Dialogue: 0,0:22:05.47,0:22:07.10,*Default,NTP,0000,0000,0000,,wrote multiplying that result by four
Dialogue: 0,0:22:07.10,0:22:08.87,*Default,NTP,0000,0000,0000,,and then multiplying that result by eight
Dialogue: 0,0:22:08.93,0:22:10.37,*Default,NTP,0000,0000,0000,,which gives us 64
Dialogue: 0,0:22:11.33,0:22:13.07,*Default,NTP,0000,0000,0000,,so f is a two argument function
Dialogue: 0,0:22:13.17,0:22:15.73,*Default,NTP,0000,0000,0000,,s is a sequence of values that can all be the second
Dialogue: 0,0:22:15.73,0:22:17.13,*Default,NTP,0000,0000,0000,,argument to that function
Dialogue: 0,0:22:17.13,0:22:20.13,*Default,NTP,0000,0000,0000,,f an initial has to be a value that can be the first
Dialogue: 0,0:22:20.13,0:22:20.93,*Default,NTP,0000,0000,0000,,argument
Dialogue: 0,0:22:21.00,0:22:23.77,*Default,NTP,0000,0000,0000,,the last constraint is that the return value of f
Dialogue: 0,0:22:23.80,0:22:26.57,*Default,NTP,0000,0000,0000,,must also be able to be the first argument to f
Dialogue: 0,0:22:26.77,0:22:28.37,*Default,NTP,0000,0000,0000,,because when you call f
Dialogue: 0,0:22:28.60,0:22:30.67,*Default,NTP,0000,0000,0000,,you're going to pass that value right back
Dialogue: 0,0:22:30.70,0:22:32.10,*Default,NTP,0000,0000,0000,,into another call to f
Dialogue: 0,0:22:33.70,0:22:35.20,*Default,NTP,0000,0000,0000,,if we reduce power
Dialogue: 0,0:22:36.27,0:22:39.90,*Default,NTP,0000,0000,0000,,1 2 3 4 starting with an initial value two
Dialogue: 0,0:22:39.90,0:22:41.50,*Default,NTP,0000,0000,0000,,what will happen is that we'll raise
Dialogue: 0,0:22:41.60,0:22:44.30,*Default,NTP,0000,0000,0000,,two to earth progressively larger power
Dialogue: 0,0:22:45.20,0:22:48.80,*Default,NTP,0000,0000,0000,,so we start out by raising two to the power of one
Dialogue: 0,0:22:48.80,0:22:50.00,*Default,NTP,0000,0000,0000,,which gives us two
Dialogue: 0,0:22:50.17,0:22:51.20,*Default,NTP,0000,0000,0000,,we then raise
Dialogue: 0,0:22:51.40,0:22:54.40,*Default,NTP,0000,0000,0000,,that two to the power of two giving us four
Dialogue: 0,0:22:54.70,0:22:56.90,*Default,NTP,0000,0000,0000,,we then raise four to the power three
Dialogue: 0,0:22:56.93,0:22:58.20,*Default,NTP,0000,0000,0000,,giving us sixty four
Dialogue: 0,0:22:58.30,0:23:00.10,*Default,NTP,0000,0000,0000,,and sixty four to the power of four
Dialogue: 0,0:23:00.13,0:23:02.00,*Default,NTP,0000,0000,0000,,is all of a sudden a very large number
Dialogue: 0,0:23:02.60,0:23:04.27,*Default,NTP,0000,0000,0000,,so that's what it means to reduce
Dialogue: 0,0:23:04.40,0:23:06.33,*Default,NTP,0000,0000,0000,,we'll end up getting 16 million
Dialogue: 0,0:23:06.40,0:23:08.27,*Default,NTP,0000,0000,0000,,just by raising two to the first
Dialogue: 0,0:23:08.27,0:23:09.47,*Default,NTP,0000,0000,0000,,and then the result of the second
Dialogue: 0,0:23:09.47,0:23:10.37,*Default,NTP,0000,0000,0000,,then the result of the third
Dialogue: 0,0:23:10.37,0:23:11.73,*Default,NTP,0000,0000,0000,,then the result to the fourth
Dialogue: 0,0:23:13.37,0:23:14.87,*Default,NTP,0000,0000,0000,,let's implement this function
Dialogue: 0,0:23:16.10,0:23:19.53,*Default,NTP,0000,0000,0000,,reduce takes f a sequence s and an initial value
Dialogue: 0,0:23:22.30,0:23:23.90,*Default,NTP,0000,0000,0000,,the point is to combine
Dialogue: 0,0:23:24.33,0:23:26.87,*Default,NTP,0000,0000,0000,,elements of s using f
Dialogue: 0,0:23:27.37,0:23:29.13,*Default,NTP,0000,0000,0000,,starting with initial
Dialogue: 0,0:23:30.73,0:23:33.73,*Default,NTP,0000,0000,0000,,and the example that we looked at was to reduce
Dialogue: 0,0:23:34.93,0:23:35.97,*Default,NTP,0000,0000,0000,,using mall
Dialogue: 0,0:23:37.70,0:23:39.77,*Default,NTP,0000,0000,0000,,two four and eight
Dialogue: 0,0:23:41.57,0:23:43.07,*Default,NTP,0000,0000,0000,,starting with the No.1
Dialogue: 0,0:23:44.17,0:23:45.97,*Default,NTP,0000,0000,0000,,and that's supposed to give us 64
Dialogue: 0,0:23:47.33,0:23:50.77,*Default,NTP,0000,0000,0000,,or for instance we could reduce using ad one two
Dialogue: 0,0:23:50.77,0:23:52.13,*Default,NTP,0000,0000,0000,,three and four
Dialogue: 0,0:23:52.77,0:23:55.27,*Default,NTP,0000,0000,0000,,starting with zero and that would give us 10
Dialogue: 0,0:23:57.07,0:23:58.17,*Default,NTP,0000,0000,0000,,from operator
Dialogue: 0,0:23:58.80,0:24:00.93,*Default,NTP,0000,0000,0000,,in torque ad and mole
Dialogue: 0,0:24:01.77,0:24:03.00,*Default,NTP,0000,0000,0000,,the simplest
Dialogue: 0,0:24:03.27,0:24:07.50,*Default,NTP,0000,0000,0000,,implementation I could think of is to say for x and s
Dialogue: 0,0:24:08.33,0:24:10.47,*Default,NTP,0000,0000,0000,,initial equals f
Dialogue: 0,0:24:10.97,0:24:14.00,*Default,NTP,0000,0000,0000,,of initial and x
Dialogue: 0,0:24:14.40,0:24:16.00,*Default,NTP,0000,0000,0000,,and then we return initial
Dialogue: 0,0:24:22.07,0:24:23.77,*Default,NTP,0000,0000,0000,,that passes the dock tests
Dialogue: 0,0:24:24.67,0:24:26.53,*Default,NTP,0000,0000,0000,,we could also write this recursively
Dialogue: 0,0:24:27.30,0:24:28.77,*Default,NTP,0000,0000,0000,,so for instance we'd write
Dialogue: 0,0:24:29.47,0:24:33.97,*Default,NTP,0000,0000,0000,,if not s so it's empty then we'll just return initial
Dialogue: 0,0:24:34.10,0:24:36.33,*Default,NTP,0000,0000,0000,,there's no more work to do otherwise
Dialogue: 0,0:24:36.47,0:24:38.97,*Default,NTP,0000,0000,0000,,we get the first and the rest of s
Dialogue: 0,0:24:43.90,0:24:48.33,*Default,NTP,0000,0000,0000,,and we return the result of calling reduce on f
Dialogue: 0,0:24:48.60,0:24:49.90,*Default,NTP,0000,0000,0000,,the rest of s
Dialogue: 0,0:24:49.90,0:24:53.07,*Default,NTP,0000,0000,0000,,and then updating initial to be f of initial
Dialogue: 0,0:24:53.10,0:24:54.27,*Default,NTP,0000,0000,0000,,and the first value
Dialogue: 0,0:24:55.97,0:24:58.10,*Default,NTP,0000,0000,0000,,that passes our doctors as well
Dialogue: 0,0:24:59.87,0:25:01.53,*Default,NTP,0000,0000,0000,,now how way we use reduce
Dialogue: 0,0:25:01.77,0:25:02.80,*Default,NTP,0000,0000,0000,,well for instance
Dialogue: 0,0:25:03.27,0:25:05.57,*Default,NTP,0000,0000,0000,,let's say we want to write a function divide all
Dialogue: 0,0:25:05.57,0:25:08.70,*Default,NTP,0000,0000,0000,,which takes enumerator and a sequence of denominators
Dialogue: 0,0:25:08.70,0:25:11.87,*Default,NTP,0000,0000,0000,,and divides the numerator by all the denominators
Dialogue: 0,0:25:11.93,0:25:13.27,*Default,NTP,0000,0000,0000,,that's just reduce
Dialogue: 0,0:25:14.17,0:25:16.00,*Default,NTP,0000,0000,0000,,when we reduce with a division function
Dialogue: 0,0:25:16.47,0:25:19.60,*Default,NTP,0000,0000,0000,,all of the denominators starting with the numerator
Dialogue: 0,0:25:22.50,0:25:23.30,*Default,NTP,0000,0000,0000,,so
Dialogue: 0,0:25:23.90,0:25:25.37,*Default,NTP,0000,0000,0000,,we can call divide all
Dialogue: 0,0:25:25.90,0:25:28.60,*Default,NTP,0000,0000,0000,,on 1024 is our numerator
Dialogue: 0,0:25:28.70,0:25:31.50,*Default,NTP,0000,0000,0000,,dividing out two and four and eight
Dialogue: 0,0:25:32.13,0:25:33.73,*Default,NTP,0000,0000,0000,,and the result will be 16
Dialogue: 0,0:25:33.73,0:25:34.60,*Default,NTP,0000,0000,0000,,that's what's left over
Dialogue: 0,0:25:34.60,0:25:36.53,*Default,NTP,0000,0000,0000,,when you divide by all of these numbers
Dialogue: 0,0:25:37.30,0:25:39.20,*Default,NTP,0000,0000,0000,,now what if there's a zero in the middle of this
Dialogue: 0,0:25:39.27,0:25:41.10,*Default,NTP,0000,0000,0000,,there's a zero division error
Dialogue: 0,0:25:41.50,0:25:44.10,*Default,NTP,0000,0000,0000,,and let's say that's not what we want divide all to do
Dialogue: 0,0:25:44.50,0:25:45.73,*Default,NTP,0000,0000,0000,,what we want it to do
Dialogue: 0,0:25:45.97,0:25:50.80,*Default,NTP,0000,0000,0000,,is compute the result of dividing by all the ds
Dialogue: 0,0:25:51.17,0:25:55.10,*Default,NTP,0000,0000,0000,,but if there's ever a zero division
Dialogue: 0,0:25:55.97,0:25:56.77,*Default,NTP,0000,0000,0000,,error
Dialogue: 0,0:25:57.33,0:26:00.10,*Default,NTP,0000,0000,0000,,we'd like to instead return infinity
Dialogue: 0,0:26:00.67,0:26:03.07,*Default,NTP,0000,0000,0000,,that's how you get infinity in python
Dialogue: 0,0:26:04.17,0:26:07.10,*Default,NTP,0000,0000,0000,,so in our new implementation we get inf
Dialogue: 0,0:26:07.37,0:26:11.30,*Default,NTP,0000,0000,0000,,or infinity in that case but we still get 16 there
Dialogue: 0,0:26:11.87,0:26:14.77,*Default,NTP,0000,0000,0000,,the advantage of using error handling in this way
Dialogue: 0,0:26:14.87,0:26:16.80,*Default,NTP,0000,0000,0000,,is that our implementation of reduce
Dialogue: 0,0:26:16.93,0:26:18.30,*Default,NTP,0000,0000,0000,,doesn't need to know anything
Dialogue: 0,0:26:18.30,0:26:20.07,*Default,NTP,0000,0000,0000,,about zero division errors
Dialogue: 0,0:26:20.57,0:26:22.33,*Default,NTP,0000,0000,0000,,instead we write a function
Dialogue: 0,0:26:22.60,0:26:24.57,*Default,NTP,0000,0000,0000,,where we know we're calling reduce with
Dialogue: 0,0:26:24.77,0:26:25.93,*Default,NTP,0000,0000,0000,,another function
Dialogue: 0,0:26:26.17,0:26:29.17,*Default,NTP,0000,0000,0000,,that may raise a zero division error
Dialogue: 0,0:26:29.40,0:26:30.77,*Default,NTP,0000,0000,0000,,and so it's this function
Dialogue: 0,0:26:30.77,0:26:33.00,*Default,NTP,0000,0000,0000,,that knows what's getting passed into reduce
Dialogue: 0,0:26:33.17,0:26:34.60,*Default,NTP,0000,0000,0000,,that handles the error
Dialogue: 0,0:26:35.47,0:26:38.30,*Default,NTP,0000,0000,0000,,therefore we've created a separation of concerns
Dialogue: 0,0:26:38.30,0:26:40.50,*Default,NTP,0000,0000,0000,,divide all knows all about dividing
Dialogue: 0,0:26:40.50,0:26:42.33,*Default,NTP,0000,0000,0000,,reduce knows all about reducing
Dialogue: 0,0:26:42.33,0:26:45.20,*Default,NTP,0000,0000,0000,,but reduce has no out knowledge of what dividing does
Dialogue: 0,0:26:45.20,0:26:47.30,*Default,NTP,0000,0000,0000,,or what errors it causes
Dialogue: 0,0:26:47.33,0:26:47.57,*Default,NTP,0000,0000,0000,,and
Dialogue: 0,0:26:47.57,0:26:49.80,*Default,NTP,0000,0000,0000,,divide all doesn't really need to know how to combine
Dialogue: 0,0:26:49.80,0:26:52.33,*Default,NTP,0000,0000,0000,,elements it just knows it needs to call reduce