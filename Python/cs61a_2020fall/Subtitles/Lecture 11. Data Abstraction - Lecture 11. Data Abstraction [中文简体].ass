[Script Info]
; Script generated by Bilibili Evolved Danmaku Converter
; https://github.com/the1812/Bilibili-Evolved/
Title: Lecture 11. Data Abstraction - Lecture 11. Data Abstraction
ScriptType: v4.00+
PlayResX: 1280
PlayResY: 720
Timer: 10.0000
WrapStyle: 0
ScaledBorderAndShadow: no

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: TopLeft,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,7,32,32,32,0
Style: TopCenter,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,8,32,32,32,0
Style: TopRight,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,9,32,32,32,0
Style: BottomLeft,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,1,32,32,32,0
Style: BottomCenter,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,2,32,32,32,0
Style: BottomRight,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,3,32,32,32,0

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.47,0:00:02.47,BottomCenter,,0,0,0,,六十一八第11讲
Dialogue: 0,0:00:02.67,0:00:03.60,BottomCenter,,0,0,0,,公告
Dialogue: 0,0:00:04.13,0:00:06.60,BottomCenter,,0,0,0,,感谢您记录自己参加期中考试的情况
Dialogue: 0,0:00:06.73,0:00:08.93,BottomCenter,,0,0,0,,如果尚未联系您
Dialogue: 0,0:00:08.97,0:00:11.40,BottomCenter,,0,0,0,,关于保存你的期中录音
Dialogue: 0,0:00:11.50,0:00:12.97,BottomCenter,,0,0,0,,你可以删除它
Dialogue: 0,0:00:13.80,0:00:15.00,BottomCenter,,0,0,0,,如果你在制作时遇到困难
Dialogue: 0,0:00:15.00,0:00:16.87,BottomCenter,,0,0,0,,首先录音
Dialogue: 0,0:00:16.97,0:00:19.27,BottomCenter,,0,0,0,,我们有你的笔记
Dialogue: 0,0:00:19.33,0:00:20.47,BottomCenter,,0,0,0,,没关系
Dialogue: 0,0:00:20.47,0:00:21.90,BottomCenter,,0,0,0,,不会有任何处罚
Dialogue: 0,0:00:22.00,0:00:24.37,BottomCenter,,0,0,0,,我们将尽力改进流程
Dialogue: 0,0:00:24.37,0:00:25.73,BottomCenter,,0,0,0,,为了以后的考试
Dialogue: 0,0:00:26.73,0:00:29.20,BottomCenter,,0,0,0,,大多数人录音都没有问题
Dialogue: 0,0:00:29.57,0:00:32.10,BottomCenter,,0,0,0,,但那些这样做的人却觉得非常沮丧
Dialogue: 0,0:00:32.10,0:00:33.37,BottomCenter,,0,0,0,,我对此感到抱歉
Dialogue: 0,0:00:34.00,0:00:35.77,BottomCenter,,0,0,0,,我们会想办法让它变得更好
Dialogue: 0,0:00:36.50,0:00:38.60,BottomCenter,,0,0,0,,作业二周四交
Dialogue: 0,0:00:38.87,0:00:43.00,BottomCenter,,0,0,0,,下周的猫项目将于周五截止
Dialogue: 0,0:00:43.40,0:00:45.33,BottomCenter,,0,0,0,,您可以获得提前提交奖励积分
Dialogue: 0,0:00:45.33,0:00:47.47,BottomCenter,,0,0,0,,周四提交项目
Dialogue: 0,0:00:47.67,0:00:50.00,BottomCenter,,0,0,0,,如果你想要一个检查点
Dialogue: 0,0:00:50.00,0:00:51.57,BottomCenter,,0,0,0,,确保您正在追踪
Dialogue: 0,0:00:51.57,0:00:53.53,BottomCenter,,0,0,0,,高效的解决方案
Dialogue: 0,0:00:53.80,0:00:56.67,BottomCenter,,0,0,0,,您需要通过以下方式完成项目的第一部分
Dialogue: 0,0:00:56.67,0:00:59.87,BottomCenter,,0,0,0,,星期二该项目包括课程主题
Dialogue: 0,0:00:59.87,0:01:01.72,BottomCenter,,0,0,0,,包括今天的讲座
Dialogue: 0,0:01:02.27,0:01:04.67,BottomCenter,,0,0,0,,以及课程前面的所有内容
Dialogue: 0,0:01:05.59,0:01:07.17,BottomCenter,,0,0,0,,什么是猫项目
Dialogue: 0,0:01:07.50,0:01:11.87,BottomCenter,,0,0,0,,嗯，这是测试你打字速度的东西
Dialogue: 0,0:01:11.96,0:01:14.79,BottomCenter,,0,0,0,,有一个命令行界面和一个网络界面
Dialogue: 0,0:01:14.93,0:01:19.47,BottomCenter,,0,0,0,,你的代码必须计算准确性和速度
Dialogue: 0,0:01:20.33,0:01:21.67,BottomCenter,,0,0,0,,无论输入什么内容
Dialogue: 0,0:01:22.26,0:01:23.50,BottomCenter,,0,0,0,,所以让我们尝试一下
Dialogue: 0,0:01:28.76,0:01:30.06,BottomCenter,,0,0,0,,真是一团糟
Dialogue: 0,0:01:47.73,0:01:49.17,BottomCenter,,0,0,0,,看看我犯了错误
Dialogue: 0,0:01:49.30,0:01:52.26,BottomCenter,,0,0,0,,我的准确率只有 87.5%
Dialogue: 0,0:01:53.26,0:01:54.56,BottomCenter,,0,0,0,,这不是很好吗
Dialogue: 0,0:01:54.70,0:01:57.56,BottomCenter,,0,0,0,,如果它可以纠正我打字时的错误
Dialogue: 0,0:01:58.67,0:02:01.29,BottomCenter,,0,0,0,,嗯嗯将启用自动更正
Dialogue: 0,0:02:02.00,0:02:06.96,BottomCenter,,0,0,0,,现在当我打字时，如果我犯了一个错误，比如
Dialogue: 0,0:02:07.29,0:02:09.53,BottomCenter,,0,0,0,,然后它会尝试为我纠正它
Dialogue: 0,0:02:10.06,0:02:13.27,BottomCenter,,0,0,0,,它实际上并不会查看您要输入的内容
Dialogue: 0,0:02:13.33,0:02:14.19,BottomCenter,,0,0,0,,它只是看着
Dialogue: 0,0:02:14.19,0:02:16.87,BottomCenter,,0,0,0,,到目前为止您输入的内容以进行猜测
Dialogue: 0,0:02:16.87,0:02:19.53,BottomCenter,,0,0,0,,关于你应该输入的内容
Dialogue: 0,0:02:25.09,0:02:25.90,BottomCenter,,0,0,0,,取决于
Dialogue: 0,0:02:26.72,0:02:28.16,BottomCenter,,0,0,0,,你所看到的那一点
Dialogue: 0,0:02:28.16,0:02:29.06,BottomCenter,,0,0,0,,我的准确性
Dialogue: 0,0:02:29.06,0:02:32.00,BottomCenter,,0,0,0,,现在我已经打开了自动更正功能，好多了
Dialogue: 0,0:02:32.16,0:02:34.16,BottomCenter,,0,0,0,,如果我输入一个真实的单词，比如“wit”
Dialogue: 0,0:02:34.16,0:02:35.72,BottomCenter,,0,0,0,,那么它不会纠正这个问题
Dialogue: 0,0:02:35.80,0:02:37.12,BottomCenter,,0,0,0,,但如果我输入各种
Dialogue: 0,0:02:37.12,0:02:37.80,BottomCenter,,0,0,0,,非言语
Dialogue: 0,0:02:37.80,0:02:40.40,BottomCenter,,0,0,0,,然后它会尝试猜测我想取什么词
Dialogue: 0,0:02:42.19,0:02:43.87,BottomCenter,,0,0,0,,哦，甚至更正了那个
Dialogue: 0,0:02:45.69,0:02:47.30,BottomCenter,,0,0,0,,这就是猫项目
Dialogue: 0,0:02:47.30,0:02:48.53,BottomCenter,,0,0,0,,希望你喜欢它
Dialogue: 0,0:02:49.06,0:02:50.53,BottomCenter,,0,0,0,,你将使用一些递归
Dialogue: 0,0:02:50.66,0:02:51.72,BottomCenter,,0,0,0,,一些容器
Dialogue: 0,0:02:51.80,0:02:55.53,BottomCenter,,0,0,0,,以及一些数据抽象来实现该程序
Dialogue: 0,0:02:57.27,0:02:58.87,BottomCenter,,0,0,0,,数据抽象
Dialogue: 0,0:02:59.59,0:03:01.37,BottomCenter,,0,0,0,,一种新的抽象方法
Dialogue: 0,0:03:02.56,0:03:03.37,BottomCenter,,0,0,0,,开始了
Dialogue: 0,0:03:04.06,0:03:07.77,BottomCenter,,0,0,0,,所以大多数值都是复合值
Dialogue: 0,0:03:07.87,0:03:09.30,BottomCenter,,0,0,0,,从它们结合的意义上来说
Dialogue: 0,0:03:09.30,0:03:11.16,BottomCenter,,0,0,0,,不同的物体放在一起
Dialogue: 0,0:03:11.46,0:03:14.96,BottomCenter,,0,0,0,,为了创建具有多个部分的对象
Dialogue: 0,0:03:15.30,0:03:17.12,BottomCenter,,0,0,0,,例如有一年的日期
Dialogue: 0,0:03:17.12,0:03:20.59,BottomCenter,,0,0,0,,一个月和一天合并成一件事
Dialogue: 0,0:03:21.19,0:03:22.90,BottomCenter,,0,0,0,,或地理位置
Dialogue: 0,0:03:22.97,0:03:25.47,BottomCenter,,0,0,0,,有纬度和经度
Dialogue: 0,0:03:27.06,0:03:29.06,BottomCenter,,0,0,0,,抽象的日期类型
Dialogue: 0,0:03:29.53,0:03:33.40,BottomCenter,,0,0,0,,让我们将复合对象作为单元进行操作
Dialogue: 0,0:03:33.69,0:03:35.47,BottomCenter,,0,0,0,,这是一种抽象形式
Dialogue: 0,0:03:37.47,0:03:38.37,BottomCenter,,0,0,0,,它能做什么
Dialogue: 0,0:03:38.87,0:03:42.09,BottomCenter,,0,0,0,,它允许我们隔离任何程序的两个部分吗
Dialogue: 0,0:03:42.12,0:03:43.37,BottomCenter,,0,0,0,,使用数据的
Dialogue: 0,0:03:44.53,0:03:47.47,BottomCenter,,0,0,0,,我们想要分离数据的表示方式
Dialogue: 0,0:03:49.12,0:03:51.40,BottomCenter,,0,0,0,,以及数据如何被操纵
Dialogue: 0,0:03:52.69,0:03:53.90,BottomCenter,,0,0,0,,通过做这个
Dialogue: 0,0:03:54.37,0:03:56.80,BottomCenter,,0,0,0,,我们在计划中将好的关注点分开
Dialogue: 0,0:03:57.69,0:03:59.47,BottomCenter,,0,0,0,,两个不同区域之间
Dialogue: 0,0:03:59.47,0:04:01.90,BottomCenter,,0,0,0,,我们可以改变一个而不影响另一个
Dialogue: 0,0:04:02.77,0:04:05.19,BottomCenter,,0,0,0,,所以数据抽象是一种方法论
Dialogue: 0,0:04:05.37,0:04:09.16,BottomCenter,,0,0,0,,通过哪些功能强制执行抽象湾区
Dialogue: 0,0:04:09.80,0:04:14.00,BottomCenter,,0,0,0,,数据的表示和数据的使用之间
Dialogue: 0,0:04:15.72,0:04:16.39,BottomCenter,,0,0,0,,现在
Dialogue: 0,0:04:16.39,0:04:19.60,BottomCenter,,0,0,0,,所有程序员都会在某个时刻使用复合数据
Dialogue: 0,0:04:20.00,0:04:25.06,BottomCenter,,0,0,0,,但只有伟大的程序员才会接受数据抽象
Dialogue: 0,0:04:25.67,0:04:28.30,BottomCenter,,0,0,0,,为了使他们的程序更加模块化
Dialogue: 0,0:04:28.80,0:04:32.12,BottomCenter,,0,0,0,,你很快也会成为一名出色的程序员
Dialogue: 0,0:04:34.10,0:04:35.89,BottomCenter,,0,0,0,,让我们看一个例子
Dialogue: 0,0:04:36.19,0:04:37.30,BottomCenter,,0,0,0,,有理数
Dialogue: 0,0:04:37.30,0:04:39.50,BottomCenter,,0,0,0,,我们会明白数据抽象的含义
Dialogue: 0,0:04:40.50,0:04:42.47,BottomCenter,,0,0,0,,所以可以表示有理数
Dialogue: 0,0:04:42.52,0:04:45.30,BottomCenter,,0,0,0,,作为分子除以分母
Dialogue: 0,0:04:45.50,0:04:48.60,BottomCenter,,0,0,0,,其中分子和分母都是整数
Dialogue: 0,0:04:48.73,0:04:51.06,BottomCenter,,0,0,0,,因为我们可以精确地表示整数
Dialogue: 0,0:04:51.06,0:04:54.50,BottomCenter,,0,0,0,,这给了我们分数的精确表示
Dialogue: 0,0:04:55.12,0:04:58.26,BottomCenter,,0,0,0,,所以一对整数可以让我们准确地告诉你
Dialogue: 0,0:04:58.37,0:04:59.52,BottomCenter,,0,0,0,,我们有分数
Dialogue: 0,0:04:59.67,0:05:01.52,BottomCenter,,0,0,0,,例如一除以三
Dialogue: 0,0:05:01.80,0:05:04.50,BottomCenter,,0,0,0,,但一旦我们真正除以一
Dialogue: 0,0:05:04.69,0:05:06.32,BottomCenter,,0,0,0,,然后我们会得到一个浮动
Dialogue: 0,0:05:06.93,0:05:09.39,BottomCenter,,0,0,0,,这不是准确的表示
Dialogue: 0,0:05:09.39,0:05:11.73,BottomCenter,,0,0,0,,但它的有限近似
Dialogue: 0,0:05:12.37,0:05:14.10,BottomCenter,,0,0,0,,通过二进制展开
Dialogue: 0,0:05:14.76,0:05:15.17,BottomCenter,,0,0,0,,所以
Dialogue: 0,0:05:15.17,0:05:17.52,BottomCenter,,0,0,0,,我们想要分离分子和分母
Dialogue: 0,0:05:17.60,0:05:19.00,BottomCenter,,0,0,0,,不将一个除以另一个
Dialogue: 0,0:05:19.00,0:05:21.12,BottomCenter,,0,0,0,,而是有一个复合数据类型
Dialogue: 0,0:05:22.80,0:05:24.56,BottomCenter,,0,0,0,,所以我们假设我们可以编写
Dialogue: 0,0:05:24.56,0:05:26.97,BottomCenter,,0,0,0,,有理数分解如下
Dialogue: 0,0:05:26.97,0:05:29.32,BottomCenter,,0,0,0,,我们有一个有理函数，它需要
Dialogue: 0,0:05:29.39,0:05:31.80,BottomCenter,,0,0,0,,n 和 d 枚举数和分母
Dialogue: 0,0:05:31.87,0:05:33.00,BottomCenter,,0,0,0,,这是整数
Dialogue: 0,0:05:33.19,0:05:37.10,BottomCenter,,0,0,0,,并返回复合数据类型有理数 x
Dialogue: 0,0:05:38.76,0:05:39.97,BottomCenter,,0,0,0,,我们还有另一个函数
Dialogue: 0,0:05:40.00,0:05:40.69,BottomCenter,,0,0,0,,数字x
Dialogue: 0,0:05:40.69,0:05:43.97,BottomCenter,,0,0,0,,返回有理数 x 的分子
Dialogue: 0,0:05:44.47,0:05:46.32,BottomCenter,,0,0,0,,同样，我们有广告名
Dialogue: 0,0:05:46.32,0:05:49.12,BottomCenter,,0,0,0,,返回分母的 x 函数
Dialogue: 0,0:05:49.37,0:05:51.10,BottomCenter,,0,0,0,,所以我们有办法结合在一起
Dialogue: 0,0:05:51.10,0:05:52.73,BottomCenter,,0,0,0,,分子和分母
Dialogue: 0,0:05:52.87,0:05:56.52,BottomCenter,,0,0,0,,然后我们就有办法选择这两个部分
Dialogue: 0,0:05:57.10,0:05:58.69,BottomCenter,,0,0,0,,这称为构造函数
Dialogue: 0,0:05:58.69,0:05:59.76,BottomCenter,,0,0,0,,它建立了一个新的
Dialogue: 0,0:06:00.30,0:06:03.69,BottomCenter,,0,0,0,,值是抽象数据类型的实例
Dialogue: 0,0:06:04.32,0:06:05.80,BottomCenter,,0,0,0,,然后这些是选择器
Dialogue: 0,0:06:05.80,0:06:07.73,BottomCenter,,0,0,0,,哪些是返回的函数
Dialogue: 0,0:06:08.00,0:06:11.30,BottomCenter,,0,0,0,,整个有理数的那些部分
Dialogue: 0,0:06:14.26,0:06:15.32,BottomCenter,,0,0,0,,那么我们能做什么
Dialogue: 0,0:06:15.32,0:06:15.50,BottomCenter,,0,0,0,,是
Dialogue: 0,0:06:15.50,0:06:17.97,BottomCenter,,0,0,0,,我们可以开始编写其他操作函数
Dialogue: 0,0:06:17.97,0:06:19.12,BottomCenter,,0,0,0,,有理数
Dialogue: 0,0:06:20.26,0:06:22.97,BottomCenter,,0,0,0,,例如将它们相加或相乘
Dialogue: 0,0:06:22.97,0:06:23.97,BottomCenter,,0,0,0,,让我们来看看
Dialogue: 0,0:06:24.80,0:06:26.80,BottomCenter,,0,0,0,,所以只是为了刷新你的记忆
Dialogue: 0,0:06:26.80,0:06:30.12,BottomCenter,,0,0,0,,如果我们想乘以三个半和三个拳头
Dialogue: 0,0:06:30.17,0:06:31.89,BottomCenter,,0,0,0,,我们得到十分之九
Dialogue: 0,0:06:31.89,0:06:33.06,BottomCenter,,0,0,0,,为什么是这样
Dialogue: 0,0:06:33.12,0:06:35.89,BottomCenter,,0,0,0,,以及相乘的一般公式
Dialogue: 0,0:06:35.93,0:06:37.30,BottomCenter,,0,0,0,,两个有理数
Dialogue: 0,0:06:38.12,0:06:39.73,BottomCenter,,0,0,0,,是分子
Dialogue: 0,0:06:40.73,0:06:41.87,BottomCenter,,0,0,0,,结果的
Dialogue: 0,0:06:41.89,0:06:43.87,BottomCenter,,0,0,0,,是第一个分子的乘积
Dialogue: 0,0:06:43.87,0:06:44.67,BottomCenter,,0,0,0,,在第二
Dialogue: 0,0:06:45.32,0:06:48.17,BottomCenter,,0,0,0,,分母是分母的乘积
Dialogue: 0,0:06:49.56,0:06:50.26,BottomCenter,,0,0,0,,加在一起
Dialogue: 0,0:06:50.26,0:06:52.60,BottomCenter,,0,0,0,,两个有理数稍微复杂一些
Dialogue: 0,0:06:52.73,0:06:56.19,BottomCenter,,0,0,0,,三个半加三个拳头等于 21 十分之几
Dialogue: 0,0:06:56.19,0:06:57.39,BottomCenter,,0,0,0,,我们如何得到它
Dialogue: 0,0:06:57.69,0:07:00.39,BottomCenter,,0,0,0,,而一般来说，如果我们有两个有理数
Dialogue: 0,0:07:00.56,0:07:02.56,BottomCenter,,0,0,0,,然后我们乘以第一个的分子
Dialogue: 0,0:07:02.56,0:07:04.39,BottomCenter,,0,0,0,,由第二个的分母
Dialogue: 0,0:07:04.67,0:07:06.87,BottomCenter,,0,0,0,,通过第二个的分子相加
Dialogue: 0,0:07:06.89,0:07:08.87,BottomCenter,,0,0,0,,时间是第一个的分母
Dialogue: 0,0:07:09.19,0:07:10.50,BottomCenter,,0,0,0,,这就是我们的新分子
Dialogue: 0,0:07:10.50,0:07:12.30,BottomCenter,,0,0,0,,我们的新分母是产品
Dialogue: 0,0:07:12.30,0:07:13.47,BottomCenter,,0,0,0,,分母的
Dialogue: 0,0:07:13.47,0:07:15.76,BottomCenter,,0,0,0,,第一个和第二个有理数
Dialogue: 0,0:07:15.76,0:07:16.97,BottomCenter,,0,0,0,,我们正在加在一起
Dialogue: 0,0:07:17.87,0:07:20.10,BottomCenter,,0,0,0,,现在我们有了乘法公式
Dialogue: 0,0:07:20.19,0:07:21.89,BottomCenter,,0,0,0,,并添加有理数
Dialogue: 0,0:07:22.39,0:07:24.12,BottomCenter,,0,0,0,,我们如何编写代码来做到这一点
Dialogue: 0,0:07:24.30,0:07:25.39,BottomCenter,,0,0,0,,我们会写它
Dialogue: 0,0:07:25.52,0:07:29.06,BottomCenter,,0,0,0,,就我们的构造函数和选择器而言
Dialogue: 0,0:07:29.80,0:07:32.39,BottomCenter,,0,0,0,,所以这是一个相乘的函数
Dialogue: 0,0:07:32.52,0:07:34.60,BottomCenter,,0,0,0,,两个有理数 x 和 y
Dialogue: 0,0:07:34.97,0:07:36.76,BottomCenter,,0,0,0,,它返回一个新的有理数
Dialogue: 0,0:07:37.50,0:07:38.19,BottomCenter,,0,0,0,,分子
Dialogue: 0,0:07:38.19,0:07:39.37,BottomCenter,,0,0,0,,其中的产物是
Dialogue: 0,0:07:39.37,0:07:41.00,BottomCenter,,0,0,0,,输入的分子
Dialogue: 0,0:07:41.00,0:07:44.17,BottomCenter,,0,0,0,,分母是分母的乘积
Dialogue: 0,0:07:44.17,0:07:45.32,BottomCenter,,0,0,0,,输入的
Dialogue: 0,0:07:45.37,0:07:47.10,BottomCenter,,0,0,0,,就像我们的公式所说
Dialogue: 0,0:07:48.76,0:07:50.19,BottomCenter,,0,0,0,,我们看到我们已经使用了构造函数
Dialogue: 0,0:07:50.19,0:07:51.76,BottomCenter,,0,0,0,,创建一个新的有理数
Dialogue: 0,0:07:51.76,0:07:55.32,BottomCenter,,0,0,0,,我们使用选择器来选择零件
Dialogue: 0,0:07:55.32,0:07:59.10,BottomCenter,,0,0,0,,完成此公式所需的 xmy
Dialogue: 0,0:08:00.56,0:08:03.00,BottomCenter,,0,0,0,,同样我们可以写一个函数来相加
Dialogue: 0,0:08:03.97,0:08:05.30,BottomCenter,,0,0,0,,两个有理数
Dialogue: 0,0:08:06.76,0:08:09.32,BottomCenter,,0,0,0,,我们给它们的分子和分母命名
Dialogue: 0,0:08:09.39,0:08:11.56,BottomCenter,,0,0,0,,因为我们多次使用它们
Dialogue: 0,0:08:12.26,0:08:13.37,BottomCenter,,0,0,0,,在我们的表达中
Dialogue: 0,0:08:13.37,0:08:14.97,BottomCenter,,0,0,0,,然后我们返回一个有理数
Dialogue: 0,0:08:15.26,0:08:17.32,BottomCenter,,0,0,0,,遵循右边的公式
Dialogue: 0,0:08:18.30,0:08:19.76,BottomCenter,,0,0,0,,多一项功能让我们
Dialogue: 0,0:08:19.89,0:08:22.30,BottomCenter,,0,0,0,,真正处理有理数
Dialogue: 0,0:08:22.37,0:08:25.26,BottomCenter,,0,0,0,,这就是返回 true 的等理性
Dialogue: 0,0:08:25.39,0:08:27.69,BottomCenter,,0,0,0,,如果 x 和 y 是相同的数字
Dialogue: 0,0:08:28.67,0:08:30.67,BottomCenter,,0,0,0,,现在我们不能只比较它们的各个部分
Dialogue: 0,0:08:30.67,0:08:33.20,BottomCenter,,0,0,0,,因为二分之一与有理数相同
Dialogue: 0,0:08:33.20,0:08:34.12,BottomCenter,,0,0,0,,四分之二
Dialogue: 0,0:08:34.39,0:08:37.87,BottomCenter,,0,0,0,,所以为了解决x和y是否相等
Dialogue: 0,0:08:37.87,0:08:39.89,BottomCenter,,0,0,0,,我们乘以第一个的分子
Dialogue: 0,0:08:39.89,0:08:41.79,BottomCenter,,0,0,0,,由第二个的分母
Dialogue: 0,0:08:42.33,0:08:44.12,BottomCenter,,0,0,0,,并检查是否等于
Dialogue: 0,0:08:44.33,0:08:45.89,BottomCenter,,0,0,0,,第二个的分子
Dialogue: 0,0:08:45.89,0:08:47.79,BottomCenter,,0,0,0,,乘以第三次的分母
Dialogue: 0,0:08:47.79,0:08:48.60,BottomCenter,,0,0,0,,第一的
Dialogue: 0,0:08:49.66,0:08:50.52,BottomCenter,,0,0,0,,悬挂式扭扭机
Dialogue: 0,0:08:51.29,0:08:53.89,BottomCenter,,0,0,0,,好的，那么你在这里看到的
Dialogue: 0,0:08:54.10,0:08:55.47,BottomCenter,,0,0,0,,是我们已经定义的
Dialogue: 0,0:08:55.47,0:08:57.52,BottomCenter,,0,0,0,,我们操纵的所有方式
Dialogue: 0,0:08:57.52,0:08:58.60,BottomCenter,,0,0,0,,有理数
Dialogue: 0,0:08:58.60,0:09:01.26,BottomCenter,,0,0,0,,从三个功能上来说
Dialogue: 0,0:09:01.26,0:09:04.97,BottomCenter,,0,0,0,,这些函数实现了抽象数据类型
Dialogue: 0,0:09:05.89,0:09:07.47,BottomCenter,,0,0,0,,对于有理数
Dialogue: 0,0:09:07.76,0:09:09.12,BottomCenter,,0,0,0,,这意味着什么
Dialogue: 0,0:09:09.26,0:09:12.60,BottomCenter,,0,0,0,,我们对数字的所有操作都写在
Dialogue: 0,0:09:12.60,0:09:14.29,BottomCenter,,0,0,0,,这些函数的术语
Dialogue: 0,0:09:14.60,0:09:16.79,BottomCenter,,0,0,0,,我们还没有定义这些函数
Dialogue: 0,0:09:17.37,0:09:20.66,BottomCenter,,0,0,0,,但既然我们知道这些是我们使用的工具
Dialogue: 0,0:09:20.70,0:09:23.07,BottomCenter,,0,0,0,,访问有理数部分
Dialogue: 0,0:09:23.07,0:09:24.79,BottomCenter,,0,0,0,,或创建新的有理数
Dialogue: 0,0:09:24.87,0:09:26.87,BottomCenter,,0,0,0,,我们可以根据这些来编写函数
Dialogue: 0,0:09:26.89,0:09:28.37,BottomCenter,,0,0,0,,然后稍后实施它们
Dialogue: 0,0:09:31.20,0:09:36.39,BottomCenter,,0,0,0,,一对由连接在一起的两个值组成
Dialogue: 0,0:09:36.47,0:09:40.92,BottomCenter,,0,0,0,,以方便您处理的方式捆绑在一起
Dialogue: 0,0:09:41.26,0:09:43.26,BottomCenter,,0,0,0,,作为一个整体
Dialogue: 0,0:09:43.39,0:09:45.29,BottomCenter,,0,0,0,,即使有两个部分
Dialogue: 0,0:09:47.70,0:09:49.89,BottomCenter,,0,0,0,,现在有很多不同的方式来表示
Dialogue: 0,0:09:49.89,0:09:51.00,BottomCenter,,0,0,0,,一对事物
Dialogue: 0,0:09:51.12,0:09:53.10,BottomCenter,,0,0,0,,但我们将使用内置的
Dialogue: 0,0:09:53.50,0:09:56.26,BottomCenter,,0,0,0,,数据类型首先称为列表
Dialogue: 0,0:09:57.57,0:09:59.29,BottomCenter,,0,0,0,,所以我可以写这行代码
Dialogue: 0,0:09:59.29,0:10:04.66,BottomCenter,,0,0,0,,对等于开括号一个逗号两个闭括号
Dialogue: 0,0:10:05.60,0:10:09.20,BottomCenter,,0,0,0,,我们这里有所谓的列表文字
Dialogue: 0,0:10:09.60,0:10:13.89,BottomCenter,,0,0,0,,它创建一个包含 1 和 2 的新列表
Dialogue: 0,0:10:14.07,0:10:15.50,BottomCenter,,0,0,0,,作为两个值
Dialogue: 0,0:10:15.50,0:10:17.39,BottomCenter,,0,0,0,,因为列表中有两个值
Dialogue: 0,0:10:17.39,0:10:18.60,BottomCenter,,0,0,0,,我们将为这对颜色上色
Dialogue: 0,0:10:19.33,0:10:21.29,BottomCenter,,0,0,0,,当我展示这对时
Dialogue: 0,0:10:21.33,0:10:24.57,BottomCenter,,0,0,0,,我看到它的内容写得和字面一样
Dialogue: 0,0:10:25.66,0:10:27.12,BottomCenter,,0,0,0,,所以列表文字有一个逗号
Dialogue: 0,0:10:27.12,0:10:29.37,BottomCenter,,0,0,0,,括号内的分隔表达式
Dialogue: 0,0:10:29.92,0:10:31.60,BottomCenter,,0,0,0,,一旦我有了一个清单
Dialogue: 0,0:10:31.76,0:10:34.10,BottomCenter,,0,0,0,,这是列表文字的值
Dialogue: 0,0:10:34.79,0:10:38.12,BottomCenter,,0,0,0,,我可以访问列表中的元素
Dialogue: 0,0:10:38.52,0:10:42.66,BottomCenter,,0,0,0,,通过所谓的取消列表
Dialogue: 0,0:10:42.92,0:10:44.50,BottomCenter,,0,0,0,,转化为不同的值
Dialogue: 0,0:10:44.52,0:10:47.60,BottomCenter,,0,0,0,,所以说 x 逗号 y 等于对
Dialogue: 0,0:10:48.52,0:10:52.37,BottomCenter,,0,0,0,,我将 x 绑定到零元素，y 绑定到
Dialogue: 0,0:10:52.70,0:10:54.07,BottomCenter,,0,0,0,,到第一个元素
Dialogue: 0,0:10:54.79,0:10:55.66,BottomCenter,,0,0,0,,之后
Dialogue: 0,0:10:55.66,0:10:59.16,BottomCenter,,0,0,0,,如果我看看 x 与 lc 1 的绑定以及什么
Dialogue: 0,0:10:59.16,0:11:01.76,BottomCenter,,0,0,0,,y 绑定到 lc 2
Dialogue: 0,0:11:02.20,0:11:04.07,BottomCenter,,0,0,0,,因为这就是内容
Dialogue: 0,0:11:04.07,0:11:05.66,BottomCenter,,0,0,0,,我创建的列表中
Dialogue: 0,0:11:06.70,0:11:08.92,BottomCenter,,0,0,0,,所以我们现在有办法捆绑在一起
Dialogue: 0,0:11:09.20,0:11:11.76,BottomCenter,,0,0,0,,值并再次将它们分开
Dialogue: 0,0:11:13.10,0:11:15.26,BottomCenter,,0,0,0,,这称为解包列表
Dialogue: 0,0:11:16.37,0:11:18.97,BottomCenter,,0,0,0,,另一种访问列表元素的方法
Dialogue: 0,0:11:19.20,0:11:22.16,BottomCenter,,0,0,0,,是元素选择运算符
Dialogue: 0,0:11:22.39,0:11:24.92,BottomCenter,,0,0,0,,再次使用方括号
Dialogue: 0,0:11:25.20,0:11:27.97,BottomCenter,,0,0,0,,所以这些方括号与这个不同
Dialogue: 0,0:11:27.97,0:11:29.87,BottomCenter,,0,0,0,,尽管它们肯定是相关的
Dialogue: 0,0:11:30.79,0:11:33.52,BottomCenter,,0,0,0,,但这只是方括号，没有任何内容
Dialogue: 0,0:11:33.52,0:11:37.89,BottomCenter,,0,0,0,,在它之前，而 this 在它之前有一些表达
Dialogue: 0,0:11:38.52,0:11:41.76,BottomCenter,,0,0,0,,所以当表达式后面有方括号时
Dialogue: 0,0:11:42.16,0:11:45.16,BottomCenter,,0,0,0,,这涉及到从中选择一个元素
Dialogue: 0,0:11:45.39,0:11:48.70,BottomCenter,,0,0,0,,括号左边的值
Dialogue: 0,0:11:49.47,0:11:54.07,BottomCenter,,0,0,0,,所以pair是一个列表值，它的第0个元素是1
Dialogue: 0,0:11:54.16,0:11:56.60,BottomCenter,,0,0,0,,它的第一个元素是二
Dialogue: 0,0:11:57.79,0:12:00.70,BottomCenter,,0,0,0,,所以使用选择运算符的元素选择是
Dialogue: 0,0:12:00.70,0:12:04.16,BottomCenter,,0,0,0,,另一种访问列表中元素的方法
Dialogue: 0,0:12:05.26,0:12:07.50,BottomCenter,,0,0,0,,还有一个函数可以做同样的事情
Dialogue: 0,0:12:07.60,0:12:10.73,BottomCenter,,0,0,0,,正如我们在 python 中多次看到的那样
Dialogue: 0,0:12:10.89,0:12:13.12,BottomCenter,,0,0,0,,每个运算符都有一些功能
Dialogue: 0,0:12:13.60,0:12:16.89,BottomCenter,,0,0,0,,其中大部分都在名为operator的模块内
Dialogue: 0,0:12:17.33,0:12:20.97,BottomCenter,,0,0,0,,所以元素选择运算符称为 get item
Dialogue: 0,0:12:21.26,0:12:22.29,BottomCenter,,0,0,0,,都是一个词
Dialogue: 0,0:12:22.66,0:12:25.29,BottomCenter,,0,0,0,,说得快一点没关系，因为都是一个词
Dialogue: 0,0:12:25.70,0:12:27.79,BottomCenter,,0,0,0,,获取项目对零
Dialogue: 0,0:12:28.16,0:12:29.10,BottomCenter,,0,0,0,,给我
Dialogue: 0,0:12:29.50,0:12:33.87,BottomCenter,,0,0,0,,对列表的零元素，这就是
Dialogue: 0,0:12:34.66,0:12:37.33,BottomCenter,,0,0,0,,获取项目对一会给我值二
Dialogue: 0,0:12:38.12,0:12:40.16,BottomCenter,,0,0,0,,这是一个元素选择函数
Dialogue: 0,0:12:40.37,0:12:41.79,BottomCenter,,0,0,0,,或获取项目功能
Dialogue: 0,0:12:42.97,0:12:46.20,BottomCenter,,0,0,0,,好的，我们现在基本介绍了什么是列表
Dialogue: 0,0:12:46.47,0:12:48.20,BottomCenter,,0,0,0,,到目前为止我们已经使用过它们
Dialogue: 0,0:12:48.73,0:12:51.16,BottomCenter,,0,0,0,,创建对
Dialogue: 0,0:12:51.76,0:12:53.20,BottomCenter,,0,0,0,,为什么这很有用
Dialogue: 0,0:12:53.20,0:12:57.20,BottomCenter,,0,0,0,,有理数是一对整数
Dialogue: 0,0:12:57.29,0:12:59.39,BottomCenter,,0,0,0,,分子和分母
Dialogue: 0,0:13:00.29,0:13:03.00,BottomCenter,,0,0,0,,所以这是构造函数的定义
Dialogue: 0,0:13:03.60,0:13:07.50,BottomCenter,,0,0,0,,有理数的抽象数据类型
Dialogue: 0,0:13:07.70,0:13:08.73,BottomCenter,,0,0,0,,这是一个函数
Dialogue: 0,0:13:08.73,0:13:11.50,BottomCenter,,0,0,0,,包含分子和分母
Dialogue: 0,0:13:12.33,0:13:12.89,BottomCenter,,0,0,0,,我们需要
Dialogue: 0,0:13:12.89,0:13:15.60,BottomCenter,,0,0,0,,表示这对事物的某种方式
Dialogue: 0,0:13:15.60,0:13:16.79,BottomCenter,,0,0,0,,我们将使用一个列表
Dialogue: 0,0:13:17.16,0:13:17.33,BottomCenter,,0,0,0,,所以
Dialogue: 0,0:13:17.33,0:13:20.16,BottomCenter,,0,0,0,,我们构造一个代表 n 除以 d 的有理数
Dialogue: 0,0:13:20.70,0:13:22.92,BottomCenter,,0,0,0,,只需返回 n 来广告的列表
Dialogue: 0,0:13:24.20,0:13:26.73,BottomCenter,,0,0,0,,所以这构造了一个列表和列表
Dialogue: 0,0:13:27.29,0:13:30.16,BottomCenter,,0,0,0,,我们使用有理数
Dialogue: 0,0:13:30.39,0:13:32.33,BottomCenter,,0,0,0,,现在它可以包含任何东西
Dialogue: 0,0:13:32.52,0:13:35.52,BottomCenter,,0,0,0,,它们不一定只包含整数
Dialogue: 0,0:13:35.89,0:13:38.66,BottomCenter,,0,0,0,,但我们用它来表示有理数
Dialogue: 0,0:13:38.79,0:13:41.87,BottomCenter,,0,0,0,,其中 n 和 d 都应该是整数
Dialogue: 0,0:13:44.00,0:13:46.12,BottomCenter,,0,0,0,,现在我们如何取出分子
Dialogue: 0,0:13:46.12,0:13:48.50,BottomCenter,,0,0,0,,假设 x 是被创建的
Dialogue: 0,0:13:48.52,0:13:50.20,BottomCenter,,0,0,0,,由理性构造函数
Dialogue: 0,0:13:50.57,0:13:53.87,BottomCenter,,0,0,0,,而我们只是访问元素的零
Dialogue: 0,0:13:54.79,0:13:58.10,BottomCenter,,0,0,0,,并且提名者是索引为一的元素
Dialogue: 0,0:14:00.16,0:14:02.26,BottomCenter,,0,0,0,,所以我们要从这里的列表中选择一个项目
Dialogue: 0,0:14:02.26,0:14:03.57,BottomCenter,,0,0,0,,为了实施
Dialogue: 0,0:14:03.89,0:14:05.26,BottomCenter,,0,0,0,,我们想要的是选择
Dialogue: 0,0:14:05.26,0:14:07.26,BottomCenter,,0,0,0,,有理数的分母
Dialogue: 0,0:14:09.00,0:14:11.70,BottomCenter,,0,0,0,,让我向您展示第一个例子来说明原因
Dialogue: 0,0:14:11.70,0:14:13.89,BottomCenter,,0,0,0,,数据抽象很有用
Dialogue: 0,0:14:15.70,0:14:18.76,BottomCenter,,0,0,0,,回想一下我们实现了乘法
Dialogue: 0,0:14:18.89,0:14:20.92,BottomCenter,,0,0,0,,有理数之间
Dialogue: 0,0:14:21.10,0:14:25.20,BottomCenter,,0,0,0,,这是一个三分之二乘以三分之五的例子
Dialogue: 0,0:14:26.29,0:14:27.10,BottomCenter,,0,0,0,,你得到了什么
Dialogue: 0,0:14:27.29,0:14:30.33,BottomCenter,,0,0,0,,那么你将分子相乘得到 15
Dialogue: 0,0:14:30.50,0:14:33.33,BottomCenter,,0,0,0,,将分母相乘得到六
Dialogue: 0,0:14:34.47,0:14:38.76,BottomCenter,,0,0,0,,答案不是21号而是5号
Dialogue: 0,0:14:39.12,0:14:40.29,BottomCenter,,0,0,0,,为什么是这样
Dialogue: 0,0:14:40.57,0:14:42.66,BottomCenter,,0,0,0,,当我们有 15 6 但是
Dialogue: 0,0:14:42.87,0:14:45.60,BottomCenter,,0,0,0,,这些不是相对质数
Dialogue: 0,0:14:46.26,0:14:48.89,BottomCenter,,0,0,0,,我们可以减少分数
Dialogue: 0,0:14:49.00,0:14:50.57,BottomCenter,,0,0,0,,以最低条件
Dialogue: 0,0:14:50.57,0:14:53.66,BottomCenter,,0,0,0,,分子和分母相乘
Dialogue: 0,0:14:53.66,0:14:54.89,BottomCenter,,0,0,0,,三分之一
Dialogue: 0,0:14:55.29,0:14:58.97,BottomCenter,,0,0,0,,这给了我们一个等价的分数五分之一
Dialogue: 0,0:14:59.00,0:15:00.07,BottomCenter,,0,0,0,,那更简单
Dialogue: 0,0:15:01.33,0:15:02.50,BottomCenter,,0,0,0,,现在原因
Dialogue: 0,0:15:02.50,0:15:05.47,BottomCenter,,0,0,0,,我们这样做是为了保持整数较小
Dialogue: 0,0:15:05.92,0:15:08.60,BottomCenter,,0,0,0,,以便更容易查看和理解
Dialogue: 0,0:15:10.89,0:15:13.73,BottomCenter,,0,0,0,,两个拳头加11怎么样？
Dialogue: 0,0:15:14.37,0:15:17.00,BottomCenter,,0,0,0,,好吧，我们可以应用之前的相同程序
Dialogue: 0,0:15:17.00,0:15:18.29,BottomCenter,,0,0,0,,用于相加
Dialogue: 0,0:15:18.73,0:15:19.97,BottomCenter,,0,0,0,,有理数
Dialogue: 0,0:15:21.73,0:15:23.60,BottomCenter,,0,0,0,,我们会得到一半
Dialogue: 0,0:15:24.20,0:15:25.79,BottomCenter,,0,0,0,,现在为什么是一半
Dialogue: 0,0:15:26.10,0:15:29.73,BottomCenter,,0,0,0,,这是因为通过交叉相乘加法
Dialogue: 0,0:15:29.73,0:15:32.26,BottomCenter,,0,0,0,,我们有五十比二十五
Dialogue: 0,0:15:33.39,0:15:35.97,BottomCenter,,0,0,0,,所以有 20 个 还有 5 个
Dialogue: 0,0:15:36.10,0:15:38.16,BottomCenter,,0,0,0,,我们把它们加在一起得到二十五个
Dialogue: 0,0:15:38.26,0:15:40.00,BottomCenter,,0,0,0,,五十是五乘以十
Dialogue: 0,0:15:40.50,0:15:42.26,BottomCenter,,0,0,0,,但我们可以减少
Dialogue: 0,0:15:42.66,0:15:43.79,BottomCenter,,0,0,0,,以最低条件
Dialogue: 0,0:15:43.79,0:15:46.39,BottomCenter,,0,0,0,,通过分子和分母相乘
Dialogue: 0,0:15:46.39,0:15:48.50,BottomCenter,,0,0,0,,二十五分之一
Dialogue: 0,0:15:49.33,0:15:51.33,BottomCenter,,0,0,0,,留给我们一半
Dialogue: 0,0:15:53.60,0:15:56.16,BottomCenter,,0,0,0,,那么我们如何改变我们的实现来做到这一点
Dialogue: 0,0:15:56.92,0:15:58.26,BottomCenter,,0,0,0,,这就是想法
Dialogue: 0,0:15:59.12,0:16:01.29,BottomCenter,,0,0,0,,加法和乘法
Dialogue: 0,0:16:01.52,0:16:04.07,BottomCenter,,0,0,0,,实际上一开始就是正确的
Dialogue: 0,0:16:04.60,0:16:05.79,BottomCenter,,0,0,0,,什么问题
Dialogue: 0,0:16:06.16,0:16:08.92,BottomCenter,,0,0,0,,是我们对理性的定义
Dialogue: 0,0:16:10.07,0:16:12.07,BottomCenter,,0,0,0,,有理数应该是
Dialogue: 0,0:16:12.07,0:16:13.66,BottomCenter,,0,0,0,,总是代表在
Dialogue: 0,0:16:13.76,0:16:18.87,BottomCenter,,0,0,0,,最低项或具有两个互质整数
Dialogue: 0,0:16:20.10,0:16:22.60,BottomCenter,,0,0,0,,所以我能做的一件事就是导入一个函数
Dialogue: 0,0:16:22.60,0:16:23.92,BottomCenter,,0,0,0,,计算出最大的
Dialogue: 0,0:16:23.92,0:16:25.12,BottomCenter,,0,0,0,,公因数
Dialogue: 0,0:16:25.39,0:16:26.52,BottomCenter,,0,0,0,,在之前的讲座中
Dialogue: 0,0:16:26.52,0:16:28.87,BottomCenter,,0,0,0,,我向您展示了如何编写一个函数来执行此操作
Dialogue: 0,0:16:29.00,0:16:31.50,BottomCenter,,0,0,0,,但它也恰好内置于 python 中
Dialogue: 0,0:16:32.89,0:16:35.00,BottomCenter,,0,0,0,,然后我要做的就是重新定义
Dialogue: 0,0:16:35.00,0:16:36.57,BottomCenter,,0,0,0,,理性构造者
Dialogue: 0,0:16:36.73,0:16:39.60,BottomCenter,,0,0,0,,取任何分母中的任何分子
Dialogue: 0,0:16:41.16,0:16:43.66,BottomCenter,,0,0,0,,然后构造一个有理数来表示
Dialogue: 0,0:16:43.66,0:16:46.50,BottomCenter,,0,0,0,,n 超过 d 但以某种方式做到了
Dialogue: 0,0:16:46.76,0:16:47.57,BottomCenter,,0,0,0,,这样
Dialogue: 0,0:16:47.57,0:16:50.50,BottomCenter,,0,0,0,,稍后访问的分子和分母
Dialogue: 0,0:16:50.57,0:16:52.87,BottomCenter,,0,0,0,,总是相对素数
Dialogue: 0,0:16:53.73,0:16:55.39,BottomCenter,,0,0,0,,你可以实现的
Dialogue: 0,0:16:55.39,0:16:58.00,BottomCenter,,0,0,0,,通过计算最大公约数
Dialogue: 0,0:16:58.00,0:17:00.26,BottomCenter,,0,0,0,,分子和分母
Dialogue: 0,0:17:00.66,0:17:04.26,BottomCenter,,0,0,0,,在本例中为 3 个，在本例中为 25 个
Dialogue: 0,0:17:05.09,0:17:07.52,BottomCenter,,0,0,0,,然后返回一对
Dialogue: 0,0:17:07.93,0:17:09.29,BottomCenter,,0,0,0,,其中包含
Dialogue: 0,0:17:09.56,0:17:11.40,BottomCenter,,0,0,0,,分子和分母
Dialogue: 0,0:17:11.56,0:17:15.09,BottomCenter,,0,0,0,,每个除以最大的评论因子
Dialogue: 0,0:17:15.17,0:17:17.86,BottomCenter,,0,0,0,,这样就保证它们是相对素数
Dialogue: 0,0:17:18.47,0:17:21.17,BottomCenter,,0,0,0,,我们在这里使用整数除法，因为我们知道
Dialogue: 0,0:17:21.52,0:17:24.29,BottomCenter,,0,0,0,,g 能整除 n 和 d
Dialogue: 0,0:17:24.29,0:17:26.47,BottomCenter,,0,0,0,,这是最大公约数的性质
Dialogue: 0,0:17:26.47,0:17:27.32,BottomCenter,,0,0,0,,这是devizer吗
Dialogue: 0,0:17:27.32,0:17:30.26,BottomCenter,,0,0,0,,它均匀地划分这些数字
Dialogue: 0,0:17:31.13,0:17:33.79,BottomCenter,,0,0,0,,好的，我们计算了最大公约数
Dialogue: 0,0:17:34.00,0:17:36.97,BottomCenter,,0,0,0,,我们改变了构造函数
Dialogue: 0,0:17:37.70,0:17:41.59,BottomCenter,,0,0,0,,我们不必做任何改变来添加有理数或莫
Dialogue: 0,0:17:41.59,0:17:44.17,BottomCenter,,0,0,0,,理性的或印刷品或类似的东西
Dialogue: 0,0:17:44.29,0:17:47.90,BottomCenter,,0,0,0,,因为我们一直在使用数据抽象
Dialogue: 0,0:17:48.56,0:17:50.20,BottomCenter,,0,0,0,,这意味着一切
Dialogue: 0,0:17:50.20,0:17:52.93,BottomCenter,,0,0,0,,是根据此构造函数定义的
Dialogue: 0,0:17:53.17,0:17:54.93,BottomCenter,,0,0,0,,所以改变这个构造函数
Dialogue: 0,0:17:55.29,0:17:58.73,BottomCenter,,0,0,0,,也改变了所有其他函数的行为
Dialogue: 0,0:17:58.90,0:18:00.13,BottomCenter,,0,0,0,,这是一件好事
Dialogue: 0,0:18:03.17,0:18:05.20,BottomCenter,,0,0,0,,抽象障碍
Dialogue: 0,0:18:05.56,0:18:08.40,BottomCenter,,0,0,0,,将程序的不同部分分开
Dialogue: 0,0:18:08.97,0:18:12.09,BottomCenter,,0,0,0,,这样每个部分只需要知道这么多
Dialogue: 0,0:18:12.40,0:18:13.97,BottomCenter,,0,0,0,,关于该计划的其余部分
Dialogue: 0,0:18:15.29,0:18:16.93,BottomCenter,,0,0,0,,现在这些分离是
Dialogue: 0,0:18:16.93,0:18:17.79,BottomCenter,,0,0,0,,重要的是因为
Dialogue: 0,0:18:17.79,0:18:19.56,BottomCenter,,0,0,0,,他们允许你做出改变
Dialogue: 0,0:18:19.56,0:18:21.17,BottomCenter,,0,0,0,,到你的程序的一部分
Dialogue: 0,0:18:21.59,0:18:25.13,BottomCenter,,0,0,0,,并让其他部分利用这些变化
Dialogue: 0,0:18:25.26,0:18:27.52,BottomCenter,,0,0,0,,不以任何方式破坏
Dialogue: 0,0:18:27.52,0:18:29.70,BottomCenter,,0,0,0,,或创造一致性
Dialogue: 0,0:18:31.36,0:18:33.97,BottomCenter,,0,0,0,,那么让我们来谈谈抽象障碍
Dialogue: 0,0:18:34.29,0:18:37.52,BottomCenter,,0,0,0,,理性算术系统的发展
Dialogue: 0,0:18:37.52,0:18:40.59,BottomCenter,,0,0,0,,我们为本次讲座所做的努力
Dialogue: 0,0:18:42.17,0:18:44.06,BottomCenter,,0,0,0,,所以程序中有一部分
Dialogue: 0,0:18:44.17,0:18:47.79,BottomCenter,,0,0,0,,使用有理数进行计算
Dialogue: 0,0:18:48.29,0:18:49.50,BottomCenter,,0,0,0,,所以我其实想知道
Dialogue: 0,0:18:49.50,0:18:51.76,BottomCenter,,0,0,0,,二分之一乘以三分之一等于多少
Dialogue: 0,0:18:52.56,0:18:53.70,BottomCenter,,0,0,0,,在那些情况下
Dialogue: 0,0:18:53.70,0:18:57.13,BottomCenter,,0,0,0,,我们实际上将有理数视为整个数据值
Dialogue: 0,0:18:57.26,0:18:59.17,BottomCenter,,0,0,0,,他们只是代表一些数字
Dialogue: 0,0:18:59.47,0:19:00.93,BottomCenter,,0,0,0,,我们不在乎如何
Dialogue: 0,0:19:01.50,0:19:02.70,BottomCenter,,0,0,0,,我们只是想知道
Dialogue: 0,0:19:02.70,0:19:04.36,BottomCenter,,0,0,0,,当你相乘时会发生什么
Dialogue: 0,0:19:04.36,0:19:05.47,BottomCenter,,0,0,0,,这些东西在一起
Dialogue: 0,0:19:06.67,0:19:08.09,BottomCenter,,0,0,0,,为了做到这一点
Dialogue: 0,0:19:08.26,0:19:10.93,BottomCenter,,0,0,0,,我们使用某些函数，它们是
Dialogue: 0,0:19:10.93,0:19:12.52,BottomCenter,,0,0,0,,数据抽象
Dialogue: 0,0:19:13.06,0:19:14.86,BottomCenter,,0,0,0,,对于有理数
Dialogue: 0,0:19:14.93,0:19:18.56,BottomCenter,,0,0,0,,添加有理摩尔 有理有理相等 等等
Dialogue: 0,0:19:18.93,0:19:20.32,BottomCenter,,0,0,0,,都是吸收的东西
Dialogue: 0,0:19:20.32,0:19:22.09,BottomCenter,,0,0,0,,有理数并用它们做事
Dialogue: 0,0:19:22.09,0:19:23.67,BottomCenter,,0,0,0,,也许会退回新的
Dialogue: 0,0:19:24.32,0:19:25.97,BottomCenter,,0,0,0,,但使用这些
Dialogue: 0,0:19:25.97,0:19:28.29,BottomCenter,,0,0,0,,函数并不意味着你需要了解很多
Dialogue: 0,0:19:28.67,0:19:31.40,BottomCenter,,0,0,0,,关于有理数如何表示
Dialogue: 0,0:19:33.36,0:19:35.26,BottomCenter,,0,0,0,,在下一层
Dialogue: 0,0:19:35.73,0:19:38.26,BottomCenter,,0,0,0,,我们在哪里查看实施情况
Dialogue: 0,0:19:38.47,0:19:40.29,BottomCenter,,0,0,0,,而不仅仅是使用
Dialogue: 0,0:19:40.97,0:19:43.40,BottomCenter,,0,0,0,,这些算术运算符
Dialogue: 0,0:19:44.06,0:19:47.13,BottomCenter,,0,0,0,,我们发现程序中创造理性的部分
Dialogue: 0,0:19:47.29,0:19:49.73,BottomCenter,,0,0,0,,或实行理性操作
Dialogue: 0,0:19:50.50,0:19:51.20,BottomCenter,,0,0,0,,他们对待
Dialogue: 0,0:19:51.20,0:19:54.06,BottomCenter,,0,0,0,,有理数作为分子和分母
Dialogue: 0,0:19:54.29,0:19:55.32,BottomCenter,,0,0,0,,配对在一起
Dialogue: 0,0:19:56.36,0:19:57.00,BottomCenter,,0,0,0,,现在他们可能
Dialogue: 0,0:19:57.00,0:20:00.52,BottomCenter,,0,0,0,,不需要确切地知道配对是如何发生的
Dialogue: 0,0:20:00.86,0:20:03.56,BottomCenter,,0,0,0,,但他们确实需要知道有理数
Dialogue: 0,0:20:03.56,0:20:05.59,BottomCenter,,0,0,0,,有一个分子和一个分母
Dialogue: 0,0:20:05.76,0:20:07.59,BottomCenter,,0,0,0,,这两个东西可以选择
Dialogue: 0,0:20:08.09,0:20:08.97,BottomCenter,,0,0,0,,他们需要知道
Dialogue: 0,0:20:08.97,0:20:10.76,BottomCenter,,0,0,0,,你创建了一个新的有理数
Dialogue: 0,0:20:10.93,0:20:14.00,BottomCenter,,0,0,0,,将分子和分母组合在一起
Dialogue: 0,0:20:16.79,0:20:17.79,BottomCenter,,0,0,0,,而这些都发生了
Dialogue: 0,0:20:17.79,0:20:19.79,BottomCenter,,0,0,0,,使用称为有理数的函数
Dialogue: 0,0:20:20.06,0:20:21.52,BottomCenter,,0,0,0,,数量和日期
Dialogue: 0,0:20:23.36,0:20:26.20,BottomCenter,,0,0,0,,所以我在那里画了一条很粗的线
Dialogue: 0,0:20:26.36,0:20:29.09,BottomCenter,,0,0,0,,代表抽象障碍
Dialogue: 0,0:20:30.13,0:20:32.67,BottomCenter,,0,0,0,,那个障碍说明了一切
Dialogue: 0,0:20:32.67,0:20:35.70,BottomCenter,,0,0,0,,这是使用有理数来执行计算
Dialogue: 0,0:20:36.06,0:20:39.59,BottomCenter,,0,0,0,,应该只在这些功能方面做到这一点
Dialogue: 0,0:20:39.76,0:20:43.86,BottomCenter,,0,0,0,,并且不应该使用不同层的功能
Dialogue: 0,0:20:45.93,0:20:48.29,BottomCenter,,0,0,0,,这样我们编写的程序
Dialogue: 0,0:20:48.52,0:20:50.93,BottomCenter,,0,0,0,,尽可能少地做出假设
Dialogue: 0,0:20:50.93,0:20:53.86,BottomCenter,,0,0,0,,关于到底使用了什么表示
Dialogue: 0,0:20:54.06,0:20:58.20,BottomCenter,,0,0,0,,而是遵循已经提出的抽象
Dialogue: 0,0:20:58.50,0:20:59.86,BottomCenter,,0,0,0,,由程序员
Dialogue: 0,0:21:01.59,0:21:04.06,BottomCenter,,0,0,0,,那么如果我们再往下一层又怎样呢
Dialogue: 0,0:21:04.70,0:21:06.40,BottomCenter,,0,0,0,,嗯，程序的一部分
Dialogue: 0,0:21:06.47,0:21:09.90,BottomCenter,,0,0,0,,实现有理数的选择器和构造函数
Dialogue: 0,0:21:10.52,0:21:14.20,BottomCenter,,0,0,0,,以及有理数和 dinam 的实现
Dialogue: 0,0:21:15.26,0:21:18.79,BottomCenter,,0,0,0,,将有理数视为两个元素列表
Dialogue: 0,0:21:19.70,0:21:20.97,BottomCenter,,0,0,0,,所以他们这样做
Dialogue: 0,0:21:21.06,0:21:22.50,BottomCenter,,0,0,0,,了解他们的整体数据价值
Dialogue: 0,0:21:22.50,0:21:25.32,BottomCenter,,0,0,0,,它们由分子和分母组成
Dialogue: 0,0:21:25.32,0:21:27.36,BottomCenter,,0,0,0,,然后我们有进一步的细节
Dialogue: 0,0:21:27.86,0:21:29.70,BottomCenter,,0,0,0,,分子和分母
Dialogue: 0,0:21:29.73,0:21:32.13,BottomCenter,,0,0,0,,使用列表粘合在一起
Dialogue: 0,0:21:34.20,0:21:37.09,BottomCenter,,0,0,0,,所以为此我们使用列表文字和元素选择
Dialogue: 0,0:21:37.97,0:21:40.67,BottomCenter,,0,0,0,,再次存在抽象障碍
Dialogue: 0,0:21:41.56,0:21:42.59,BottomCenter,,0,0,0,,如果我们从事的是
Dialogue: 0,0:21:42.59,0:21:45.76,BottomCenter,,0,0,0,,创造理性或实施理性运作
Dialogue: 0,0:21:45.79,0:21:47.32,BottomCenter,,0,0,0,,我们不需要知道
Dialogue: 0,0:21:47.56,0:21:49.70,BottomCenter,,0,0,0,,我们在幕后使用列表
Dialogue: 0,0:21:49.93,0:21:53.20,BottomCenter,,0,0,0,,我们不应该跨越这个抽象障碍
Dialogue: 0,0:21:53.26,0:21:56.70,BottomCenter,,0,0,0,,并直接使用列表文字或元素选择
Dialogue: 0,0:21:57.13,0:21:57.97,BottomCenter,,0,0,0,,反而
Dialogue: 0,0:21:58.13,0:22:00.76,BottomCenter,,0,0,0,,如果我们以理性的方式编写程序
Dialogue: 0,0:22:00.76,0:22:01.97,BottomCenter,,0,0,0,,数字和数字
Dialogue: 0,0:22:02.26,0:22:04.40,BottomCenter,,0,0,0,,然后稍后更改这些功能
Dialogue: 0,0:22:04.50,0:22:07.00,BottomCenter,,0,0,0,,我们将在整个计划中进行传播
Dialogue: 0,0:22:07.20,0:22:08.59,BottomCenter,,0,0,0,,例如我们可以
Dialogue: 0,0:22:08.73,0:22:12.09,BottomCenter,,0,0,0,,开始用最简单的术语表达每个分数
Dialogue: 0,0:22:13.36,0:22:14.36,BottomCenter,,0,0,0,,现在就是这样
Dialogue: 0,0:22:14.56,0:22:15.20,BottomCenter,,0,0,0,,实际上
Dialogue: 0,0:22:15.20,0:22:17.93,BottomCenter,,0,0,0,,程序中有很多抽象层
Dialogue: 0,0:22:18.36,0:22:20.06,BottomCenter,,0,0,0,,还有一些东西是均匀的
Dialogue: 0,0:22:20.06,0:22:22.47,BottomCenter,,0,0,0,,细节比我们目前看到的要少
Dialogue: 0,0:22:23.32,0:22:26.90,BottomCenter,,0,0,0,,所以这是用Python语言以某种方式实现的
Dialogue: 0,0:22:27.70,0:22:29.47,BottomCenter,,0,0,0,,我们真的不需要确切地知道
Dialogue: 0,0:22:29.47,0:22:31.50,BottomCenter,,0,0,0,,该实施如何运作
Dialogue: 0,0:22:31.50,0:22:33.76,BottomCenter,,0,0,0,,我们需要知道的是它可以被创建
Dialogue: 0,0:22:33.76,0:22:35.00,BottomCenter,,0,0,0,,与列表文字
Dialogue: 0,0:22:35.13,0:22:37.70,BottomCenter,,0,0,0,,并使用元素选择进行拆解
Dialogue: 0,0:22:38.67,0:22:39.90,BottomCenter,,0,0,0,,所以任何地方
Dialogue: 0,0:22:39.90,0:22:42.29,BottomCenter,,0,0,0,,我们在哪里实现选择器和构造函数
Dialogue: 0,0:22:42.29,0:22:43.40,BottomCenter,,0,0,0,,对于有理数
Dialogue: 0,0:22:43.50,0:22:46.17,BottomCenter,,0,0,0,,不应该担心列表的实现
Dialogue: 0,0:22:46.17,0:22:48.73,BottomCenter,,0,0,0,,它应该只知道可以创建列表
Dialogue: 0,0:22:49.09,0:22:50.52,BottomCenter,,0,0,0,,并选自
Dialogue: 0,0:22:51.59,0:22:54.13,BottomCenter,,0,0,0,,所以每条大线都是一个抽象障碍
Dialogue: 0,0:22:54.29,0:22:55.86,BottomCenter,,0,0,0,,你应该知道当你写作时
Dialogue: 0,0:22:55.86,0:22:57.50,BottomCenter,,0,0,0,,大型程序的一部分
Dialogue: 0,0:22:57.90,0:23:00.70,BottomCenter,,0,0,0,,它应该使用级别抽象
Dialogue: 0,0:23:00.86,0:23:03.17,BottomCenter,,0,0,0,,适合你想做的事情
Dialogue: 0,0:23:03.59,0:23:05.00,BottomCenter,,0,0,0,,你睡得越高
Dialogue: 0,0:23:05.32,0:23:07.56,BottomCenter,,0,0,0,,不跨越这些界限
Dialogue: 0,0:23:07.79,0:23:10.26,BottomCenter,,0,0,0,,改变你的程序就越容易
Dialogue: 0,0:23:10.26,0:23:11.32,BottomCenter,,0,0,0,,将来
Dialogue: 0,0:23:13.17,0:23:14.93,BottomCenter,,0,0,0,,让我们看一个例子
Dialogue: 0,0:23:15.17,0:23:17.73,BottomCenter,,0,0,0,,违反抽象障碍
Dialogue: 0,0:23:18.26,0:23:22.06,BottomCenter,,0,0,0,,所以我说过加有理数一二加一四
Dialogue: 0,0:23:22.17,0:23:24.79,BottomCenter,,0,0,0,,所以半加四应该给我三力
Dialogue: 0,0:23:24.90,0:23:26.29,BottomCenter,,0,0,0,,在我们编写的代码下
Dialogue: 0,0:23:26.29,0:23:27.67,BottomCenter,,0,0,0,,这会很好用
Dialogue: 0,0:23:28.40,0:23:30.93,BottomCenter,,0,0,0,,我有一个有理数除法的定义
Dialogue: 0,0:23:31.29,0:23:33.32,BottomCenter,,0,0,0,,返回一个列表
Dialogue: 0,0:23:33.52,0:23:34.76,BottomCenter,,0,0,0,,无论是零
Dialogue: 0,0:23:34.76,0:23:37.29,BottomCenter,,0,0,0,,x 的元素乘以 y 的第一个元素
Dialogue: 0,0:23:37.79,0:23:40.06,BottomCenter,,0,0,0,,然后我们得到 x 的第一个元素
Dialogue: 0,0:23:40.06,0:23:41.40,BottomCenter,,0,0,0,,和 y 的零元素
Dialogue: 0,0:23:42.06,0:23:45.56,BottomCenter,,0,0,0,,在我们当前的实施中这将再次起作用
Dialogue: 0,0:23:45.56,0:23:47.76,BottomCenter,,0,0,0,,不会出现任何错误
Dialogue: 0,0:23:48.47,0:23:51.93,BottomCenter,,0,0,0,,然而我们却做了一件非常错误的事
Dialogue: 0,0:23:52.56,0:23:55.00,BottomCenter,,0,0,0,,我们违反了抽象障碍
Dialogue: 0,0:23:55.97,0:23:57.36,BottomCenter,,0,0,0,,例如这里
Dialogue: 0,0:23:58.13,0:24:02.20,BottomCenter,,0,0,0,,我们在使用广告理性时假设
Dialogue: 0,0:24:02.56,0:24:05.56,BottomCenter,,0,0,0,,有理数被表示为一个列表
Dialogue: 0,0:24:05.56,0:24:06.67,BottomCenter,,0,0,0,,两个整数
Dialogue: 0,0:24:07.93,0:24:09.70,BottomCenter,,0,0,0,,这意味着如果我们去改变
Dialogue: 0,0:24:09.70,0:24:10.97,BottomCenter,,0,0,0,,理性构造者
Dialogue: 0,0:24:10.97,0:24:13.20,BottomCenter,,0,0,0,,它不会用在这件外套上
Dialogue: 0,0:24:13.26,0:24:15.47,BottomCenter,,0,0,0,,因为我实际上并没有在这里称之为理性
Dialogue: 0,0:24:15.47,0:24:17.29,BottomCenter,,0,0,0,,所以我没有使用构造函数
Dialogue: 0,0:24:18.32,0:24:19.56,BottomCenter,,0,0,0,,那有那么糟糕吗
Dialogue: 0,0:24:19.73,0:24:22.00,BottomCenter,,0,0,0,,嗯，这很糟糕
Dialogue: 0,0:24:22.26,0:24:24.86,BottomCenter,,0,0,0,,但当你看到它发生时，事情就变得非常糟糕
Dialogue: 0,0:24:24.86,0:24:26.13,BottomCenter,,0,0,0,,连续两次
Dialogue: 0,0:24:26.47,0:24:28.73,BottomCenter,,0,0,0,,好吧，我现在生气了
Dialogue: 0,0:24:28.86,0:24:30.56,BottomCenter,,0,0,0,,这是不可接受的
Dialogue: 0,0:24:30.56,0:24:32.26,BottomCenter,,0,0,0,,只是违反了抽象
Dialogue: 0,0:24:32.26,0:24:33.52,BottomCenter,,0,0,0,,像这样的障碍
Dialogue: 0,0:24:34.52,0:24:35.73,BottomCenter,,0,0,0,,我希望我们已经完成了
Dialogue: 0,0:24:36.32,0:24:40.59,BottomCenter,,0,0,0,,哦哦，下面我们正在除有理数
Dialogue: 0,0:24:40.73,0:24:41.26,BottomCenter,,0,0,0,,哪个应该
Dialogue: 0,0:24:41.26,0:24:44.26,BottomCenter,,0,0,0,,将有理数视为分子和分母
Dialogue: 0,0:24:44.26,0:24:47.36,BottomCenter,,0,0,0,,但不一定假设他们的清单
Dialogue: 0,0:24:47.73,0:24:49.29,BottomCenter,,0,0,0,,所以不要使用
Dialogue: 0,0:24:49.73,0:24:51.73,BottomCenter,,0,0,0,,数字选择器功能
Dialogue: 0,0:24:52.13,0:24:53.47,BottomCenter,,0,0,0,,相反我用过
Dialogue: 0,0:24:53.70,0:24:56.50,BottomCenter,,0,0,0,,适用于列表的元素选择
Dialogue: 0,0:24:57.00,0:24:59.86,BottomCenter,,0,0,0,,从而假设 x 是一个列表
Dialogue: 0,0:25:00.06,0:25:01.06,BottomCenter,,0,0,0,,而不是说哦
Dialogue: 0,0:25:01.06,0:25:03.67,BottomCenter,,0,0,0,,它是分子在分母中的东西
Dialogue: 0,0:25:03.73,0:25:06.09,BottomCenter,,0,0,0,,但我不知道它到底是什么
Dialogue: 0,0:25:07.06,0:25:07.86,BottomCenter,,0,0,0,,所以
Dialogue: 0,0:25:07.86,0:25:10.79,BottomCenter,,0,0,0,,我已经落到了太低的水平
Dialogue: 0,0:25:12.29,0:25:13.26,BottomCenter,,0,0,0,,哦，看
Dialogue: 0,0:25:13.76,0:25:15.29,BottomCenter,,0,0,0,,我这样做了四次
Dialogue: 0,0:25:15.29,0:25:18.36,BottomCenter,,0,0,0,,然后我返回一个有理数
Dialogue: 0,0:25:18.67,0:25:19.59,BottomCenter,,0,0,0,,但再一次
Dialogue: 0,0:25:19.76,0:25:23.32,BottomCenter,,0,0,0,,我没有使用名为rational的构造函数来做到这一点
Dialogue: 0,0:25:24.09,0:25:25.50,BottomCenter,,0,0,0,,这不行
Dialogue: 0,0:25:26.17,0:25:27.26,BottomCenter,,0,0,0,,这你知道
Dialogue: 0,0:25:27.26,0:25:31.26,BottomCenter,,0,0,0,,如果我看到某人的计算机上有此代码
Dialogue: 0,0:25:31.47,0:25:34.32,BottomCenter,,0,0,0,,我想我会诚实地把它点燃
Dialogue: 0,0:25:34.97,0:25:36.93,BottomCenter,,0,0,0,,就看着它燃烧
Dialogue: 0,0:25:37.26,0:25:37.90,BottomCenter,,0,0,0,,因为
Dialogue: 0,0:25:37.90,0:25:41.70,BottomCenter,,0,0,0,,违反障碍的代码应该被烧毁
Dialogue: 0,0:25:45.29,0:25:48.90,BottomCenter,,0,0,0,,维持抽象障碍的目的
Dialogue: 0,0:25:49.17,0:25:52.67,BottomCenter,,0,0,0,,以便您可以更改数据表示
Dialogue: 0,0:25:52.70,0:25:55.90,BottomCenter,,0,0,0,,无需重写整个程序
Dialogue: 0,0:25:58.47,0:26:00.47,BottomCenter,,0,0,0,,让我们再深入一点
Dialogue: 0,0:26:00.47,0:26:03.32,BottomCenter,,0,0,0,,融入这种数据表示的想法
Dialogue: 0,0:26:03.93,0:26:05.00,BottomCenter,,0,0,0,,数据有什么作用
Dialogue: 0,0:26:05.29,0:26:05.97,BottomCenter,,0,0,0,,这是什么意思
Dialogue: 0,0:26:05.97,0:26:08.40,BottomCenter,,0,0,0,,代表有理数的东西
Dialogue: 0,0:26:09.56,0:26:10.70,BottomCenter,,0,0,0,,好吧，我们需要保证
Dialogue: 0,0:26:10.70,0:26:13.20,BottomCenter,,0,0,0,,构造函数和选择器函数
Dialogue: 0,0:26:13.20,0:26:14.29,BottomCenter,,0,0,0,,一起工作
Dialogue: 0,0:26:14.59,0:26:16.97,BottomCenter,,0,0,0,,指定正确的行为
Dialogue: 0,0:26:17.86,0:26:21.20,BottomCenter,,0,0,0,,你没有一个有理数的表示
Dialogue: 0,0:26:21.40,0:26:23.73,BottomCenter,,0,0,0,,除非它表现得像一个有理数
Dialogue: 0,0:26:25.50,0:26:28.40,BottomCenter,,0,0,0,,行为条件将类似于
Dialogue: 0,0:26:28.70,0:26:30.93,BottomCenter,,0,0,0,,如果我们构造有理数 x
Dialogue: 0,0:26:30.93,0:26:33.20,BottomCenter,,0,0,0,,由分子 n 和分母 d
Dialogue: 0,0:26:33.70,0:26:36.47,BottomCenter,,0,0,0,,那么应该是数字 x 除以
Dialogue: 0,0:26:36.97,0:26:40.36,BottomCenter,,0,0,0,,nom x 等于 n 除以 d
Dialogue: 0,0:26:42.36,0:26:45.50,BottomCenter,,0,0,0,,这里我们关联 nnnd 上调用的构造函数
Dialogue: 0,0:26:45.90,0:26:48.97,BottomCenter,,0,0,0,,到选择器以及它们之间的操作
Dialogue: 0,0:26:51.32,0:26:53.29,BottomCenter,,0,0,0,,数据抽象使用选择器和
Dialogue: 0,0:26:53.47,0:26:55.59,BottomCenter,,0,0,0,,定义行为的构造函数
Dialogue: 0,0:26:55.73,0:26:58.29,BottomCenter,,0,0,0,,这就是数据抽象的全部思想
Dialogue: 0,0:26:59.29,0:27:01.32,BottomCenter,,0,0,0,,如果满足行为条件
Dialogue: 0,0:27:01.47,0:27:03.90,BottomCenter,,0,0,0,,那么表示是有效的
Dialogue: 0,0:27:06.06,0:27:08.13,BottomCenter,,0,0,0,,所以关键的基本思想
Dialogue: 0,0:27:08.52,0:27:11.93,BottomCenter,,0,0,0,,与数据抽象相关的是你可以认识到
Dialogue: 0,0:27:11.97,0:27:13.86,BottomCenter,,0,0,0,,某物是什么类型的数据
Dialogue: 0,0:27:14.00,0:27:15.59,BottomCenter,,0,0,0,,通过它的行为
Dialogue: 0,0:27:15.90,0:27:17.36,BottomCenter,,0,0,0,,不必要
Dialogue: 0,0:27:17.36,0:27:20.40,BottomCenter,,0,0,0,,取决于你如何构建它或如何实施
Dialogue: 0,0:27:20.47,0:27:22.79,BottomCenter,,0,0,0,,构造函数和选择器
Dialogue: 0,0:27:24.90,0:27:26.73,BottomCenter,,0,0,0,,让我们回顾一下我们的例子
Dialogue: 0,0:27:27.52,0:27:29.13,BottomCenter,,0,0,0,,我们已经添加了考虑
Dialogue: 0,0:27:29.26,0:27:30.70,BottomCenter,,0,0,0,,平等衡量
Dialogue: 0,0:27:30.70,0:27:32.76,BottomCenter,,0,0,0,,以及打印有理数的方法
Dialogue: 0,0:27:32.90,0:27:35.36,BottomCenter,,0,0,0,,所有这一切都没有假设任何事情
Dialogue: 0,0:27:35.40,0:27:37.09,BottomCenter,,0,0,0,,关于表现本身
Dialogue: 0,0:27:37.29,0:27:40.59,BottomCenter,,0,0,0,,仅存在构造函数和选择器
Dialogue: 0,0:27:41.93,0:27:43.79,BottomCenter,,0,0,0,,构造函数和选择器
Dialogue: 0,0:27:43.86,0:27:46.00,BottomCenter,,0,0,0,,低于这个抽象障碍
Dialogue: 0,0:27:46.56,0:27:49.76,BottomCenter,,0,0,0,,正在用列表来实现有理数
Dialogue: 0,0:27:51.79,0:27:54.36,BottomCenter,,0,0,0,,所以我可以说 x 和 y
Dialogue: 0,0:27:55.00,0:27:57.90,BottomCenter,,0,0,0,,有理数一二是
Dialogue: 0,0:27:58.00,0:28:01.59,BottomCenter,,0,0,0,,和有理数 3 八分之一
Dialogue: 0,0:28:03.50,0:28:05.73,BottomCenter,,0,0,0,,我应该说二分之一和三个八
Dialogue: 0,0:28:06.32,0:28:08.20,BottomCenter,,0,0,0,,那么当我打印时会发生什么
Dialogue: 0,0:28:08.36,0:28:11.97,BottomCenter,,0,0,0,,x 和 y 相乘的结果
Dialogue: 0,0:28:12.52,0:28:14.40,BottomCenter,,0,0,0,,我十六分之三
Dialogue: 0,0:28:15.17,0:28:16.59,BottomCenter,,0,0,0,,应该是这样，我可以
Dialogue: 0,0:28:16.59,0:28:18.32,BottomCenter,,0,0,0,,改变我的代表
Dialogue: 0,0:28:18.59,0:28:20.67,BottomCenter,,0,0,0,,所有这一切仍然有效
Dialogue: 0,0:28:22.90,0:28:23.86,BottomCenter,,0,0,0,,所以我们开始吧
Dialogue: 0,0:28:24.47,0:28:27.97,BottomCenter,,0,0,0,,而不是使用列表将 n 和 d 耦合在一起
Dialogue: 0,0:28:28.32,0:28:29.36,BottomCenter,,0,0,0,,成一件事
Dialogue: 0,0:28:29.56,0:28:30.93,BottomCenter,,0,0,0,,我们将使用一个函数
Dialogue: 0,0:28:35.06,0:28:37.26,BottomCenter,,0,0,0,,我们将找到一个名为 select 的函数
Dialogue: 0,0:28:37.97,0:28:39.26,BottomCenter,,0,0,0,,它吸收
Dialogue: 0,0:28:40.56,0:28:41.52,BottomCenter,,0,0,0,,一些名字
Dialogue: 0,0:28:42.76,0:28:45.00,BottomCenter,,0,0,0,,如果这个名字是 n
Dialogue: 0,0:28:45.29,0:28:47.50,BottomCenter,,0,0,0,,然后它将返回分子
Dialogue: 0,0:28:47.90,0:28:49.93,BottomCenter,,0,0,0,,否则如果名字是 d
Dialogue: 0,0:28:50.67,0:28:51.70,BottomCenter,,0,0,0,,它会返回
Dialogue: 0,0:28:52.09,0:28:53.17,BottomCenter,,0,0,0,,分母
Dialogue: 0,0:28:54.13,0:28:55.13,BottomCenter,,0,0,0,,还有什么
Dialogue: 0,0:28:55.26,0:28:57.47,BottomCenter,,0,0,0,,好吧，我们不会担心其他情况
Dialogue: 0,0:28:57.47,0:28:59.32,BottomCenter,,0,0,0,,我们只返回 select 函数
Dialogue: 0,0:28:59.40,0:29:00.93,BottomCenter,,0,0,0,,从有理函数
Dialogue: 0,0:29:01.76,0:29:03.76,BottomCenter,,0,0,0,,现在构造函数一定是这样的
Dialogue: 0,0:29:03.76,0:29:05.17,BottomCenter,,0,0,0,,和选择器
Dialogue: 0,0:29:05.20,0:29:06.76,BottomCenter,,0,0,0,,是互补的
Dialogue: 0,0:29:07.17,0:29:08.67,BottomCenter,,0,0,0,,当你建造一些东西时
Dialogue: 0,0:29:08.67,0:29:10.13,BottomCenter,,0,0,0,,与理性构造函数
Dialogue: 0,0:29:10.13,0:29:12.17,BottomCenter,,0,0,0,,然后你可以选择它的分子
Dialogue: 0,0:29:12.50,0:29:14.59,BottomCenter,,0,0,0,,使用数字函数
Dialogue: 0,0:29:16.17,0:29:19.26,BottomCenter,,0,0,0,,所以如果 x 是调用有理数的结果
Dialogue: 0,0:29:19.29,0:29:20.86,BottomCenter,,0,0,0,,那么它是一个选择函数
Dialogue: 0,0:29:20.90,0:29:24.50,BottomCenter,,0,0,0,,我可以调用 n 来获取分子
Dialogue: 0,0:29:25.32,0:29:29.29,BottomCenter,,0,0,0,,同样，我会在 d 上调用 x 来获取分母
Dialogue: 0,0:29:31.32,0:29:33.00,BottomCenter,,0,0,0,,让我们再试一次我们的例子
Dialogue: 0,0:29:34.36,0:29:37.40,BottomCenter,,0,0,0,,我将 x 和 y 设置为二分之一又八分之三
Dialogue: 0,0:29:37.47,0:29:39.56,BottomCenter,,0,0,0,,然后我打印了乘法的结果
Dialogue: 0,0:29:39.56,0:29:40.70,BottomCenter,,0,0,0,,x 和 y 在一起
Dialogue: 0,0:29:40.70,0:29:42.52,BottomCenter,,0,0,0,,我得到了十六分之三
Dialogue: 0,0:29:43.00,0:29:44.50,BottomCenter,,0,0,0,,我们真的改变了什么吗
Dialogue: 0,0:29:44.79,0:29:48.06,BottomCenter,,0,0,0,,我们当然这么做了，因为 x 现在是一个函数
Dialogue: 0,0:29:49.29,0:29:51.52,BottomCenter,,0,0,0,,这就是代表性的变化
Dialogue: 0,0:29:51.52,0:29:53.40,BottomCenter,,0,0,0,,这导致了另一个
Dialogue: 0,0:29:53.50,0:29:56.29,BottomCenter,,0,0,0,,有理数的有效表示
Dialogue: 0,0:29:56.29,0:29:56.76,BottomCenter,,0,0,0,,这样可行
Dialogue: 0,0:29:56.76,0:29:59.47,BottomCenter,,0,0,0,,与我们之前的旧代码一样好
Dialogue: 0,0:30:00.67,0:30:03.29,BottomCenter,,0,0,0,,但使用了完全不同的机制
Dialogue: 0,0:30:03.32,0:30:06.00,BottomCenter,,0,0,0,,记录分子和分母
Dialogue: 0,0:30:06.50,0:30:09.06,BottomCenter,,0,0,0,,请注意，我们仅使用函数来完成此操作
Dialogue: 0,0:30:09.06,0:30:12.36,BottomCenter,,0,0,0,,我们实际上并不需要那个内置列表
Dialogue: 0,0:30:12.90,0:30:14.52,BottomCenter,,0,0,0,,数据类型
Dialogue: 0,0:30:17.26,0:30:20.09,BottomCenter,,0,0,0,,那么当我们实施时到底发生了什么
Dialogue: 0,0:30:20.47,0:30:22.47,BottomCenter,,0,0,0,,有理数作为函数
Dialogue: 0,0:30:22.67,0:30:25.76,BottomCenter,,0,0,0,,当我们定义构造函数和选择器时
Dialogue: 0,0:30:25.76,0:30:27.13,BottomCenter,,0,0,0,,就是这个函数
Dialogue: 0,0:30:27.17,0:30:28.26,BottomCenter,,0,0,0,,选择功能
Dialogue: 0,0:30:28.26,0:30:30.13,BottomCenter,,0,0,0,,代表有理数
Dialogue: 0,0:30:30.40,0:30:32.52,BottomCenter,,0,0,0,,它是由构造函数返回的
Dialogue: 0,0:30:32.52,0:30:34.26,BottomCenter,,0,0,0,,这是一个高阶函数
Dialogue: 0,0:30:34.86,0:30:35.90,BottomCenter,,0,0,0,,和选择器
Dialogue: 0,0:30:35.93,0:30:38.56,BottomCenter,,0,0,0,,刚刚调用了结果函数
Dialogue: 0,0:30:38.56,0:30:39.97,BottomCenter,,0,0,0,,从调用理性
Dialogue: 0,0:30:40.00,0:30:41.97,BottomCenter,,0,0,0,,为了让分子回来
Dialogue: 0,0:30:43.40,0:30:46.06,BottomCenter,,0,0,0,,通过在另一个函数中定义一个函数
Dialogue: 0,0:30:46.17,0:30:48.73,BottomCenter,,0,0,0,,我们能够参考 n 和 d
Dialogue: 0,0:30:48.90,0:30:50.36,BottomCenter,,0,0,0,,在封闭范围内
Dialogue: 0,0:30:50.47,0:30:52.67,BottomCenter,,0,0,0,,所以我们返回的这个选择函数
Dialogue: 0,0:30:52.73,0:30:54.73,BottomCenter,,0,0,0,,确实随身携带
Dialogue: 0,0:30:54.93,0:30:56.59,BottomCenter,,0,0,0,,分子和分母
Dialogue: 0,0:30:56.59,0:30:58.20,BottomCenter,,0,0,0,,我们想稍后访问
Dialogue: 0,0:30:58.40,0:31:00.13,BottomCenter,,0,0,0,,作为其父框架的一部分
Dialogue: 0,0:31:01.93,0:31:03.79,BottomCenter,,0,0,0,,让我们举一个更简单的例子
Dialogue: 0,0:31:03.79,0:31:06.36,BottomCenter,,0,0,0,,我们设置 x 等于有理数八分之三
Dialogue: 0,0:31:06.59,0:31:09.09,BottomCenter,,0,0,0,,然后我们求 x 的分子
Dialogue: 0,0:31:09.09,0:31:10.32,BottomCenter,,0,0,0,,应该是三个
Dialogue: 0,0:31:11.13,0:31:13.29,BottomCenter,,0,0,0,,环境图是这样的
Dialogue: 0,0:31:13.76,0:31:16.40,BottomCenter,,0,0,0,,有理数 d 名称被定义
Dialogue: 0,0:31:16.70,0:31:19.29,BottomCenter,,0,0,0,,然后我们在三和八上调用有理数
Dialogue: 0,0:31:19.40,0:31:22.13,BottomCenter,,0,0,0,,它创建一个选择函数，其父函数
Dialogue: 0,0:31:22.17,0:31:23.70,BottomCenter,,0,0,0,,是 f 一帧
Dialogue: 0,0:31:23.70,0:31:25.29,BottomCenter,,0,0,0,,其中 n 和 d 是绑定的
Dialogue: 0,0:31:26.00,0:31:27.79,BottomCenter,,0,0,0,,返回并绑定到 x
Dialogue: 0,0:31:27.93,0:31:29.90,BottomCenter,,0,0,0,,x 等于有理数三八
Dialogue: 0,0:31:30.32,0:31:33.17,BottomCenter,,0,0,0,,一旦我们有了 x，我们就可以询问它的分子
Dialogue: 0,0:31:33.50,0:31:35.17,BottomCenter,,0,0,0,,这会创建一个新框架，其中
Dialogue: 0,0:31:35.17,0:31:37.26,BottomCenter,,0,0,0,,x 绑定到 select 函数
Dialogue: 0,0:31:38.50,0:31:39.86,BottomCenter,,0,0,0,,数字主体
Dialogue: 0,0:31:39.90,0:31:42.26,BottomCenter,,0,0,0,,说我们应该在 n 上调用 x
Dialogue: 0,0:31:42.26,0:31:44.26,BottomCenter,,0,0,0,,这正是发生的事情
Dialogue: 0,0:31:44.36,0:31:46.20,BottomCenter,,0,0,0,,第三帧 f 三
Dialogue: 0,0:31:46.86,0:31:48.40,BottomCenter,,0,0,0,,其中 name 绑定到 n
Dialogue: 0,0:31:48.50,0:31:50.79,BottomCenter,,0,0,0,,select 的主体被执行
Dialogue: 0,0:31:50.93,0:31:53.09,BottomCenter,,0,0,0,,name 是 n，所以它返回它
Dialogue: 0,0:31:53.36,0:31:56.73,BottomCenter,,0,0,0,,在这里我们看到名称 n 没有定义
Dialogue: 0,0:31:56.79,0:31:58.90,BottomCenter,,0,0,0,,但如果我们查看父级 f
Dialogue: 0,0:31:58.97,0:32:01.67,BottomCenter,,0,0,0,,n 绑定为 3，这就是返回的内容
Dialogue: 0,0:32:05.47,0:32:08.90,BottomCenter,,0,0,0,,我已经赞扬了序列的优点
Dialogue: 0,0:32:09.59,0:32:11.20,BottomCenter,,0,0,0,,但还有其他
Dialogue: 0,0:32:11.20,0:32:13.73,BottomCenter,,0,0,0,,计算的基础知识
Dialogue: 0,0:32:14.50,0:32:16.76,BottomCenter,,0,0,0,,其中之一叫做字典
Dialogue: 0,0:32:17.67,0:32:21.32,BottomCenter,,0,0,0,,字典允许您将值与
Dialogue: 0,0:32:21.36,0:32:22.29,BottomCenter,,0,0,0,,键
Dialogue: 0,0:32:23.36,0:32:26.67,BottomCenter,,0,0,0,,所以要创建一个字典，您可以使用花括号
Dialogue: 0,0:32:27.76,0:32:31.59,BottomCenter,,0,0,0,,你所做的就是与一些关键相关联
Dialogue: 0,0:32:32.17,0:32:33.52,BottomCenter,,0,0,0,,在这种情况下我
Dialogue: 0,0:32:33.79,0:32:36.29,BottomCenter,,0,0,0,,本例中的值为一
Dialogue: 0,0:32:36.90,0:32:40.13,BottomCenter,,0,0,0,,通过用逗号分隔我可以关联
Dialogue: 0,0:32:40.40,0:32:41.73,BottomCenter,,0,0,0,,多个不同的
Dialogue: 0,0:32:42.59,0:32:44.50,BottomCenter,,0,0,0,,具有不同键的值
Dialogue: 0,0:32:46.73,0:32:47.36,BottomCenter,,0,0,0,,所以就在这里
Dialogue: 0,0:32:47.36,0:32:50.32,BottomCenter,,0,0,0,,我已经描述了罗马数字系统的一部分
Dialogue: 0,0:32:51.73,0:32:53.86,BottomCenter,,0,0,0,,这是之间的关联
Dialogue: 0,0:32:54.29,0:32:56.36,BottomCenter,,0,0,0,,大写字母和数字
Dialogue: 0,0:32:57.56,0:33:00.67,BottomCenter,,0,0,0,,现在我评估了这个表达式
Dialogue: 0,0:33:00.67,0:33:02.79,BottomCenter,,0,0,0,,它为我创建了一本字典
Dialogue: 0,0:33:03.47,0:33:05.20,BottomCenter,,0,0,0,,注意到发生了一些疯狂的事情
Dialogue: 0,0:33:05.26,0:33:07.90,BottomCenter,,0,0,0,,这个看起来和这个不一样
Dialogue: 0,0:33:08.47,0:33:09.86,BottomCenter,,0,0,0,,这是有原因的
Dialogue: 0,0:33:10.47,0:33:13.40,BottomCenter,,0,0,0,,字典本身没有顺序
Dialogue: 0,0:33:13.70,0:33:15.73,BottomCenter,,0,0,0,,他们在 x 和 x 之间建立了关系
Dialogue: 0,0:33:16.00,0:33:17.09,BottomCenter,,0,0,0,,和 v 和 5
Dialogue: 0,0:33:17.52,0:33:20.09,BottomCenter,,0,0,0,,但他们之间并没有建立任何固定的关系
Dialogue: 0,0:33:20.09,0:33:21.50,BottomCenter,,0,0,0,,v 和 x
Dialogue: 0,0:33:21.67,0:33:22.47,BottomCenter,,0,0,0,,所以
Dialogue: 0,0:33:22.56,0:33:25.67,BottomCenter,,0,0,0,,蟒蛇可以自由地随意调整它们的位置
Dialogue: 0,0:33:27.13,0:33:29.17,BottomCenter,,0,0,0,,好吧，我们称这个数字为
Dialogue: 0,0:33:30.47,0:33:32.86,BottomCenter,,0,0,0,,和数字是这个关联
Dialogue: 0,0:33:33.36,0:33:35.76,BottomCenter,,0,0,0,,如果我选择一个元素
Dialogue: 0,0:33:36.00,0:33:39.86,BottomCenter,,0,0,0,,我要传递的不是索引而是键
Dialogue: 0,0:33:40.76,0:33:41.40,BottomCenter,,0,0,0,,此时
Dialogue: 0,0:33:41.40,0:33:44.20,BottomCenter,,0,0,0,,我可以获得与该键关联的值
Dialogue: 0,0:33:44.93,0:33:46.90,BottomCenter,,0,0,0,,现在我不能反其道而行之
Dialogue: 0,0:33:47.79,0:33:49.67,BottomCenter,,0,0,0,,10 不是键而是值
Dialogue: 0,0:33:50.86,0:33:51.67,BottomCenter,,0,0,0,,好的
Dialogue: 0,0:33:51.93,0:33:54.90,BottomCenter,,0,0,0,,现在我们知道了字典的基本功能
Dialogue: 0,0:33:55.17,0:33:57.17,BottomCenter,,0,0,0,,你用字典文字创建它们
Dialogue: 0,0:33:57.17,0:33:58.86,BottomCenter,,0,0,0,,以逗号分隔
Dialogue: 0,0:33:58.86,0:34:02.13,BottomCenter,,0,0,0,,用冒号分隔的键值对
Dialogue: 0,0:34:03.06,0:34:07.36,BottomCenter,,0,0,0,,然后使用元素选择您可以选择一个键
Dialogue: 0,0:34:07.52,0:34:09.26,BottomCenter,,0,0,0,,它会让你恢复价值
Dialogue: 0,0:34:11.00,0:34:12.86,BottomCenter,,0,0,0,,还有一些事情你可以做
Dialogue: 0,0:34:13.40,0:34:15.30,BottomCenter,,0,0,0,,你可以查看所有的按键
Dialogue: 0,0:34:17.53,0:34:20.07,BottomCenter,,0,0,0,,这些是字典键 xv 和 I
Dialogue: 0,0:34:20.26,0:34:22.13,BottomCenter,,0,0,0,,你可以查看所有的值
Dialogue: 0,0:34:22.86,0:34:25.13,BottomCenter,,0,0,0,,您还可以查看所有项目
Dialogue: 0,0:34:25.53,0:34:27.73,BottomCenter,,0,0,0,,这些是键值对
Dialogue: 0,0:34:28.92,0:34:31.19,BottomCenter,,0,0,0,,现在如果你有这个清单
Dialogue: 0,0:34:32.59,0:34:33.69,BottomCenter,,0,0,0,,项目数
Dialogue: 0,0:34:35.17,0:34:37.46,BottomCenter,,0,0,0,,你实际上可以用它建立一本字典
Dialogue: 0,0:34:37.50,0:34:39.90,BottomCenter,,0,0,0,,只需调用 dict 构造函数
Dialogue: 0,0:34:40.46,0:34:42.13,BottomCenter,,0,0,0,,此时你可以抬头查看
Dialogue: 0,0:34:42.36,0:34:44.40,BottomCenter,,0,0,0,,x 在那里，它会给你 tit
Dialogue: 0,0:34:47.32,0:34:51.46,BottomCenter,,0,0,0,,现在你可以询问 python 某个特定的键是否在
Dialogue: 0,0:34:51.73,0:34:52.59,BottomCenter,,0,0,0,,字典
Dialogue: 0,0:34:53.96,0:34:55.32,BottomCenter,,0,0,0,,所以 x 在那里
Dialogue: 0,0:34:55.69,0:34:57.76,BottomCenter,,0,0,0,,X 射线不是
Dialogue: 0,0:34:58.80,0:35:01.09,BottomCenter,,0,0,0,,如果你想得到一个键的值
Dialogue: 0,0:35:01.09,0:35:02.40,BottomCenter,,0,0,0,,但你不确定它是否在那里
Dialogue: 0,0:35:02.40,0:35:05.00,BottomCenter,,0,0,0,,并且您想提供默认值
Dialogue: 0,0:35:05.26,0:35:06.92,BottomCenter,,0,0,0,,你可以使用 get 方法
Dialogue: 0,0:35:07.26,0:35:08.57,BottomCenter,,0,0,0,,所以如果我得到x
Dialogue: 0,0:35:09.13,0:35:10.59,BottomCenter,,0,0,0,,默认值为零
Dialogue: 0,0:35:10.59,0:35:13.19,BottomCenter,,0,0,0,,它会给我 10 因为 x 有一个值
Dialogue: 0,0:35:13.57,0:35:14.90,BottomCenter,,0,0,0,,但如果我拍X光片
Dialogue: 0,0:35:15.17,0:35:17.26,BottomCenter,,0,0,0,,它会给我默认值为零
Dialogue: 0,0:35:18.32,0:35:19.96,BottomCenter,,0,0,0,,我还要给你看两件事
Dialogue: 0,0:35:20.36,0:35:24.46,BottomCenter,,0,0,0,,有一种表达方式叫做字典理解
Dialogue: 0,0:35:25.17,0:35:27.46,BottomCenter,,0,0,0,,这就像列表理解
Dialogue: 0,0:35:27.69,0:35:30.00,BottomCenter,,0,0,0,,我不会详细介绍其执行细节
Dialogue: 0,0:35:30.00,0:35:30.80,BottomCenter,,0,0,0,,程序
Dialogue: 0,0:35:30.86,0:35:32.69,BottomCenter,,0,0,0,,但我会告诉你它是如何运作的
Dialogue: 0,0:35:33.67,0:35:36.92,BottomCenter,,0,0,0,,所以假设我想将 x 与
Dialogue: 0,0:35:38.07,0:35:41.53,BottomCenter,,0,0,0,,x 某个范围内 x 的平方
Dialogue: 0,0:35:41.86,0:35:43.57,BottomCenter,,0,0,0,,假设范围最大为 10
Dialogue: 0,0:35:45.07,0:35:46.86,BottomCenter,,0,0,0,,我刚刚创建了一本字典
Dialogue: 0,0:35:47.30,0:35:50.50,BottomCenter,,0,0,0,,其中键是范围 10 中的元素
Dialogue: 0,0:35:50.80,0:35:54.17,BottomCenter,,0,0,0,,这些值是那个数字的平方
Dialogue: 0,0:35:55.17,0:35:56.96,BottomCenter,,0,0,0,,所以如果我称这个方块为
Dialogue: 0,0:35:57.00,0:36:00.67,BottomCenter,,0,0,0,,我查了一下七的平方
Dialogue: 0,0:36:00.96,0:36:02.92,BottomCenter,,0,0,0,,我应该得到49
Dialogue: 0,0:36:04.96,0:36:07.40,BottomCenter,,0,0,0,,现在字典有一些限制
Dialogue: 0,0:36:08.26,0:36:10.50,BottomCenter,,0,0,0,,你不能两次拥有相同的钥匙
Dialogue: 0,0:36:13.26,0:36:14.00,BottomCenter,,0,0,0,,所以如果你这样做
Dialogue: 0,0:36:14.00,0:36:16.73,BottomCenter,,0,0,0,,它只会抛出你的元素之一
Dialogue: 0,0:36:17.09,0:36:19.40,BottomCenter,,0,0,0,,这就是字典设计的一部分
Dialogue: 0,0:36:19.40,0:36:21.19,BottomCenter,,0,0,0,,每个键都有一个值
Dialogue: 0,0:36:23.07,0:36:25.92,BottomCenter,,0,0,0,,现在而不是两次使用相同的密钥
Dialogue: 0,0:36:25.92,0:36:27.59,BottomCenter,,0,0,0,,如果我有就好了
Dialogue: 0,0:36:27.90,0:36:31.67,BottomCenter,,0,0,0,,给定键的多个值的序列
Dialogue: 0,0:36:31.92,0:36:34.00,BottomCenter,,0,0,0,,因为这实际上只是一个值
Dialogue: 0,0:36:34.09,0:36:35.13,BottomCenter,,0,0,0,,这是一个序列
Dialogue: 0,0:36:35.36,0:36:37.09,BottomCenter,,0,0,0,,它包含其他值
Dialogue: 0,0:36:39.90,0:36:40.73,BottomCenter,,0,0,0,,然而
Dialogue: 0,0:36:40.92,0:36:44.57,BottomCenter,,0,0,0,,我不允许使用列表或字典作为键
Dialogue: 0,0:36:45.09,0:36:48.07,BottomCenter,,0,0,0,,所以我无法写出包含一个的列表
Dialogue: 0,0:36:49.00,0:36:50.59,BottomCenter,,0,0,0,,与两个相关联
Dialogue: 0,0:36:51.09,0:36:53.96,BottomCenter,,0,0,0,,我会得到这个错误 unhashable type
Dialogue: 0,0:36:54.32,0:36:57.30,BottomCenter,,0,0,0,,我希望我能准确地告诉你这意味着什么
Dialogue: 0,0:36:57.30,0:36:58.17,BottomCenter,,0,0,0,,但我不被允许
Dialogue: 0,0:36:58.17,0:37:00.07,BottomCenter,,0,0,0,,因为我必须留下一些话题
Dialogue: 0,0:37:00.09,0:37:01.30,BottomCenter,,0,0,0,,为将来的课程
Dialogue: 0,0:37:01.30,0:37:02.46,BottomCenter,,0,0,0,,像 61 b
Dialogue: 0,0:37:03.57,0:37:06.76,BottomCenter,,0,0,0,,所以就接受你不能放置列表的键
Dialogue: 0,0:37:06.76,0:37:09.26,BottomCenter,,0,0,0,,你不能输入其他字典的键
Dialogue: 0,0:37:09.59,0:37:12.19,BottomCenter,,0,0,0,,这只是语言的限制
Dialogue: 0,0:37:14.96,0:37:17.90,BottomCenter,,0,0,0,,所以字典将值与键关联起来
Dialogue: 0,0:37:18.17,0:37:19.32,BottomCenter,,0,0,0,,它们是无序的
Dialogue: 0,0:37:19.32,0:37:21.76,BottomCenter,,0,0,0,,所以不要依赖你放置东西的顺序
Dialogue: 0,0:37:21.76,0:37:23.69,BottomCenter,,0,0,0,,因为它不会被维护
Dialogue: 0,0:37:24.76,0:37:27.67,BottomCenter,,0,0,0,,键不能是列表或字典
Dialogue: 0,0:37:27.67,0:37:29.90,BottomCenter,,0,0,0,,或语言中的任何可变类型
Dialogue: 0,0:37:29.90,0:37:31.57,BottomCenter,,0,0,0,,我们很快就会讨论这意味着什么
Dialogue: 0,0:37:32.90,0:37:34.26,BottomCenter,,0,0,0,,两个键不能相等
Dialogue: 0,0:37:34.26,0:37:36.09,BottomCenter,,0,0,0,,因为钥匙只能拥有一次
Dialogue: 0,0:37:37.40,0:37:38.92,BottomCenter,,0,0,0,,第一个限制是绑定的
Dialogue: 0,0:37:38.92,0:37:41.53,BottomCenter,,0,0,0,,字典是如何实现的
Dialogue: 0,0:37:42.17,0:37:43.59,BottomCenter,,0,0,0,,第二个是
Dialogue: 0,0:37:43.59,0:37:45.69,BottomCenter,,0,0,0,,设计字典的用途
Dialogue: 0,0:37:47.90,0:37:48.36,BottomCenter,,0,0,0,,就像我说的
Dialogue: 0,0:37:48.36,0:37:50.76,BottomCenter,,0,0,0,,如果您想将多个值与一个键关联
Dialogue: 0,0:37:51.17,0:37:52.40,BottomCenter,,0,0,0,,将它们全部按顺序排列
