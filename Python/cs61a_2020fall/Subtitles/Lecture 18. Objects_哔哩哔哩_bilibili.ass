[Script Info]
Title: Lecture 18. Objects_哔哩哔哩_bilibili
ScriptType: v4.00+
Collisions: Reverse
PlayResX: 1280
PlayResY: 720
WrapStyle: 3
ScaledBorderAndShadow: yes
; ----------------------
; 本字幕由CC字幕助手自动转换
; 字幕来源https://www.bilibili.com/video/BV1s3411G7yM?p=43&vd_source=6ffca0aa1006734a4fba52f389036611
; 脚本地址https://greasyfork.org/scripts/378513
; 设置了字幕过长自动换行，但若字幕中没有空格换行将无效
; 字体大小依据720p 48号字体等比缩放
; 如显示不正常请尝试使用SRT格式

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Segoe UI,48,&H00FFFFFF,&HF0000000,&H00000000,&HF0000000,1,0,0,0,100,100,0,0.00,1,1,3,2,30,30,20,1

[Events]
Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.47,0:00:02.50,*Default,NTP,0000,0000,0000,,61 election No.18
Dialogue: 0,0:00:02.73,0:00:03.77,*Default,NTP,0000,0000,0000,,announcements
Dialogue: 0,0:00:04.50,0:00:06.27,*Default,NTP,0000,0000,0000,,homework three is due today
Dialogue: 0,0:00:06.77,0:00:08.13,*Default,NTP,0000,0000,0000,,you can revise your hog
Dialogue: 0,0:00:08.13,0:00:10.60,*Default,NTP,0000,0000,0000,,project to earn back any lost composition points
Dialogue: 0,0:00:10.60,0:00:11.53,*Default,NTP,0000,0000,0000,,by tomorrow
Dialogue: 0,0:00:12.13,0:00:15.53,*Default,NTP,0000,0000,0000,,submit with python three ok desh desh revise
Dialogue: 0,0:00:16.07,0:00:17.70,*Default,NTP,0000,0000,0000,,click on here to get the whole
Dialogue: 0,0:00:17.70,0:00:20.20,*Default,NTP,0000,0000,0000,,piazza announcement that describes how to do this
Dialogue: 0,0:00:20.67,0:00:23.20,*Default,NTP,0000,0000,0000,,here's a study guide created by the core staff
Dialogue: 0,0:00:23.87,0:00:26.20,*Default,NTP,0000,0000,0000,,that gives you some indication of how to get ready
Dialogue: 0,0:00:26.27,0:00:27.50,*Default,NTP,0000,0000,0000,,for the next midterm
Dialogue: 0,0:00:27.60,0:00:29.77,*Default,NTP,0000,0000,0000,,which is three weeks from yesterday
Dialogue: 0,0:00:30.20,0:00:31.80,*Default,NTP,0000,0000,0000,,and we'll have some dropping advising
Dialogue: 0,0:00:31.80,0:00:35.67,*Default,NTP,0000,0000,0000,,office hours tomorrow from 1:00pm to two 30 pm
Dialogue: 0,0:00:35.73,0:00:36.93,*Default,NTP,0000,0000,0000,,so that's Friday
Dialogue: 0,0:00:37.17,0:00:38.77,*Default,NTP,0000,0000,0000,,just join the office hours q
Dialogue: 0,0:00:38.80,0:00:41.20,*Default,NTP,0000,0000,0000,,and you'll be able to ask questions about anything
Dialogue: 0,0:00:41.20,0:00:42.97,*Default,NTP,0000,0000,0000,,you want and get some advice
Dialogue: 0,0:00:43.60,0:00:45.90,*Default,NTP,0000,0000,0000,,today we'll start a new unit in the course
Dialogue: 0,0:00:46.20,0:00:48.80,*Default,NTP,0000,0000,0000,,about object oriented programming
Dialogue: 0,0:00:49.20,0:00:51.00,*Default,NTP,0000,0000,0000,,this approach to programming
Dialogue: 0,0:00:51.13,0:00:53.17,*Default,NTP,0000,0000,0000,,has a lot of new ideas in it
Dialogue: 0,0:00:53.40,0:00:56.33,*Default,NTP,0000,0000,0000,,but you've already been exposed to most of them
Dialogue: 0,0:00:57.27,0:00:59.30,*Default,NTP,0000,0000,0000,,there's a notion of data abstraction
Dialogue: 0,0:00:59.40,0:01:01.20,*Default,NTP,0000,0000,0000,,there's a notion of mutation
Dialogue: 0,0:01:01.37,0:01:03.67,*Default,NTP,0000,0000,0000,,you know about those things already
Dialogue: 0,0:01:04.40,0:01:05.77,*Default,NTP,0000,0000,0000,,there's some new stuff too
Dialogue: 0,0:01:05.87,0:01:07.50,*Default,NTP,0000,0000,0000,,including some new syntax
Dialogue: 0,0:01:07.60,0:01:10.10,*Default,NTP,0000,0000,0000,,and some new concepts like inheritance
Dialogue: 0,0:01:10.67,0:01:12.10,*Default,NTP,0000,0000,0000,,since there's a lot to learn
Dialogue: 0,0:01:12.20,0:01:13.17,*Default,NTP,0000,0000,0000,,students often
Dialogue: 0,0:01:13.17,0:01:15.30,*Default,NTP,0000,0000,0000,,struggle a bit with this part of the course
Dialogue: 0,0:01:15.50,0:01:17.73,*Default,NTP,0000,0000,0000,,so I recommend dedicating some time
Dialogue: 0,0:01:17.80,0:01:21.00,*Default,NTP,0000,0000,0000,,to practice all of the lab problems that you see
Dialogue: 0,0:01:21.17,0:01:22.97,*Default,NTP,0000,0000,0000,,work through the homework problems
Dialogue: 0,0:01:23.13,0:01:25.13,*Default,NTP,0000,0000,0000,,and allocate a fair amount of time
Dialogue: 0,0:01:25.13,0:01:27.50,*Default,NTP,0000,0000,0000,,for the project we will release next week
Dialogue: 0,0:01:27.67,0:01:30.00,*Default,NTP,0000,0000,0000,,which is about object oriented programming
Dialogue: 0,0:01:30.77,0:01:31.67,*Default,NTP,0000,0000,0000,,in lecture
Dialogue: 0,0:01:31.73,0:01:33.90,*Default,NTP,0000,0000,0000,,we're going to try something a little bit different
Dialogue: 0,0:01:34.37,0:01:37.53,*Default,NTP,0000,0000,0000,,I'll start you off with professor fried's introduction
Dialogue: 0,0:01:37.53,0:01:39.27,*Default,NTP,0000,0000,0000,,to object oriented programming
Dialogue: 0,0:01:39.33,0:01:41.53,*Default,NTP,0000,0000,0000,,because I think the way that he describes it is just
Dialogue: 0,0:01:41.53,0:01:45.37,*Default,NTP,0000,0000,0000,,great then you'll hear the standard 61 a
Dialogue: 0,0:01:45.37,0:01:47.77,*Default,NTP,0000,0000,0000,,introduction to objects from me
Dialogue: 0,0:01:48.27,0:01:50.27,*Default,NTP,0000,0000,0000,,but I'm also going to link to a bunch of other
Dialogue: 0,0:01:50.27,0:01:52.27,*Default,NTP,0000,0000,0000,,videos by professor fried
Dialogue: 0,0:01:52.47,0:01:54.50,*Default,NTP,0000,0000,0000,,that you're welcome to watch if you want
Dialogue: 0,0:01:54.70,0:01:56.20,*Default,NTP,0000,0000,0000,,to hear his description
Dialogue: 0,0:01:56.57,0:01:57.27,*Default,NTP,0000,0000,0000,,the rest of his
Dialogue: 0,0:01:57.27,0:01:59.50,*Default,NTP,0000,0000,0000,,lectures on object jointed programming are great
Dialogue: 0,0:01:59.67,0:02:01.67,*Default,NTP,0000,0000,0000,,they do involve a little bit of stuff
Dialogue: 0,0:02:01.67,0:02:03.50,*Default,NTP,0000,0000,0000,,that we haven't covered in this course
Dialogue: 0,0:02:03.87,0:02:05.90,*Default,NTP,0000,0000,0000,,so there might be a few things about
Dialogue: 0,0:02:06.13,0:02:07.70,*Default,NTP,0000,0000,0000,,drawing pictures on the screen
Dialogue: 0,0:02:07.93,0:02:09.70,*Default,NTP,0000,0000,0000,,that might look unfamiliar to you
Dialogue: 0,0:02:10.47,0:02:11.67,*Default,NTP,0000,0000,0000,,I'll make sure to give you a link
Dialogue: 0,0:02:11.67,0:02:12.80,*Default,NTP,0000,0000,0000,,to how to catch up on all that
Dialogue: 0,0:02:12.80,0:02:14.00,*Default,NTP,0000,0000,0000,,stuff if you're interested
Dialogue: 0,0:02:14.37,0:02:17.73,*Default,NTP,0000,0000,0000,,and so I hope that by having two descriptions
Dialogue: 0,0:02:18.13,0:02:20.07,*Default,NTP,0000,0000,0000,,the one that's usually in 61 a
Dialogue: 0,0:02:20.57,0:02:21.87,*Default,NTP,0000,0000,0000,,and the version
Dialogue: 0,0:02:21.87,0:02:24.50,*Default,NTP,0000,0000,0000,,that professor fried developed for his graduate course
Dialogue: 0,0:02:24.50,0:02:27.40,*Default,NTP,0000,0000,0000,,to a sixa helps all of you get a better
Dialogue: 0,0:02:27.50,0:02:28.27,*Default,NTP,0000,0000,0000,,understanding
Dialogue: 0,0:02:28.27,0:02:30.67,*Default,NTP,0000,0000,0000,,of what's going on in object oriented programming
Dialogue: 0,0:02:31.20,0:02:32.30,*Default,NTP,0000,0000,0000,,okay here we go
Dialogue: 0,0:02:34.30,0:02:36.67,*Default,NTP,0000,0000,0000,,welcome back we're now ready to
Dialogue: 0,0:02:36.67,0:02:39.17,*Default,NTP,0000,0000,0000,,start a bit of a new chapter in the course
Dialogue: 0,0:02:39.17,0:02:41.30,*Default,NTP,0000,0000,0000,,which is we're going to be talking
Dialogue: 0,0:02:41.70,0:02:43.40,*Default,NTP,0000,0000,0000,,about classes and objects
Dialogue: 0,0:02:43.40,0:02:45.93,*Default,NTP,0000,0000,0000,,and in particular object oriented programming
Dialogue: 0,0:02:45.93,0:02:47.40,*Default,NTP,0000,0000,0000,,which may be something you've heard about
Dialogue: 0,0:02:47.67,0:02:50.67,*Default,NTP,0000,0000,0000,,and we're going to spend the next full three lectures
Dialogue: 0,0:02:51.00,0:02:52.67,*Default,NTP,0000,0000,0000,,talking about exactly what that is
Dialogue: 0,0:02:52.67,0:02:55.47,*Default,NTP,0000,0000,0000,,so let's just go ahead and dive in
Dialogue: 0,0:02:56.07,0:02:58.57,*Default,NTP,0000,0000,0000,,all right let me just define a few simple terms
Dialogue: 0,0:02:58.60,0:03:04.60,*Default,NTP,0000,0000,0000,,a class is something that combines and abstracts out
Dialogue: 0,0:03:05.17,0:03:07.17,*Default,NTP,0000,0000,0000,,data and functionality
Dialogue: 0,0:03:07.17,0:03:10.00,*Default,NTP,0000,0000,0000,,and it's important to understand those two things
Dialogue: 0,0:03:10.20,0:03:12.70,*Default,NTP,0000,0000,0000,,data and functionality up until now
Dialogue: 0,0:03:13.13,0:03:16.53,*Default,NTP,0000,0000,0000,,we have been talking about really mostly functionality
Dialogue: 0,0:03:16.53,0:03:19.30,*Default,NTP,0000,0000,0000,,a little bit on data when we talked about lists
Dialogue: 0,0:03:19.30,0:03:20.13,*Default,NTP,0000,0000,0000,,a little bit of
Dialogue: 0,0:03:20.30,0:03:21.20,*Default,NTP,0000,0000,0000,,data when we talked
Dialogue: 0,0:03:21.20,0:03:22.57,*Default,NTP,0000,0000,0000,,about different types of variable ties
Dialogue: 0,0:03:22.57,0:03:23.67,*Default,NTP,0000,0000,0000,,but for the most part
Dialogue: 0,0:03:23.77,0:03:25.73,*Default,NTP,0000,0000,0000,,we've been focused on functionality
Dialogue: 0,0:03:25.77,0:03:28.33,*Default,NTP,0000,0000,0000,,iterative constructs conditional constructs
Dialogue: 0,0:03:28.47,0:03:32.13,*Default,NTP,0000,0000,0000,,function parameters in parameters out recursion
Dialogue: 0,0:03:32.50,0:03:33.97,*Default,NTP,0000,0000,0000,,and now we're going to talk about
Dialogue: 0,0:03:34.10,0:03:37.20,*Default,NTP,0000,0000,0000,,putting all these pieces together and how we combine
Dialogue: 0,0:03:37.20,0:03:38.40,*Default,NTP,0000,0000,0000,,of course data
Dialogue: 0,0:03:38.70,0:03:39.47,*Default,NTP,0000,0000,0000,,and functions
Dialogue: 0,0:03:39.47,0:03:41.60,*Default,NTP,0000,0000,0000,,and so what a class does
Dialogue: 0,0:03:41.70,0:03:44.73,*Default,NTP,0000,0000,0000,,is it combines the storing of information
Dialogue: 0,0:03:44.73,0:03:47.80,*Default,NTP,0000,0000,0000,,data and functionality on that data
Dialogue: 0,0:03:48.37,0:03:52.07,*Default,NTP,0000,0000,0000,,an object is just an instantiation of a class
Dialogue: 0,0:03:52.07,0:03:54.00,*Default,NTP,0000,0000,0000,,and I want to distinguish between these tubes
Dialogue: 0,0:03:54.00,0:03:55.13,*Default,NTP,0000,0000,0000,,that's a really important
Dialogue: 0,0:03:55.67,0:03:56.77,*Default,NTP,0000,0000,0000,,becoming be using the words
Dialogue: 0,0:03:56.77,0:04:00.00,*Default,NTP,0000,0000,0000,,but it's also an important conceptual distinction
Dialogue: 0,0:04:00.37,0:04:01.13,*Default,NTP,0000,0000,0000,,and so maybe
Dialogue: 0,0:04:01.13,0:04:03.27,*Default,NTP,0000,0000,0000,,the simplest way to think about this distinction
Dialogue: 0,0:04:03.27,0:04:04.20,*Default,NTP,0000,0000,0000,,is this way
Dialogue: 0,0:04:04.73,0:04:09.80,*Default,NTP,0000,0000,0000,,you can think about a class as a blueprint to a house
Dialogue: 0,0:04:10.07,0:04:11.13,*Default,NTP,0000,0000,0000,,can't live in it
Dialogue: 0,0:04:11.33,0:04:13.30,*Default,NTP,0000,0000,0000,,but it sort of tells you how to build it
Dialogue: 0,0:04:13.80,0:04:16.33,*Default,NTP,0000,0000,0000,,and the object is well the house itself
Dialogue: 0,0:04:16.33,0:04:18.07,*Default,NTP,0000,0000,0000,,so I can take this blueprint
Dialogue: 0,0:04:18.13,0:04:20.33,*Default,NTP,0000,0000,0000,,and cookie cutter that down the street
Dialogue: 0,0:04:20.33,0:04:24.07,*Default,NTP,0000,0000,0000,,and get multiple instantiations of this object
Dialogue: 0,0:04:24.07,0:04:27.87,*Default,NTP,0000,0000,0000,,so think about the class is a definition of something
Dialogue: 0,0:04:28.57,0:04:31.13,*Default,NTP,0000,0000,0000,,and an object as an instantiation of it
Dialogue: 0,0:04:31.13,0:04:34.60,*Default,NTP,0000,0000,0000,,it's an actual thing that we now get to manipulate
Dialogue: 0,0:04:34.60,0:04:36.17,*Default,NTP,0000,0000,0000,,and I'll be using these terms
Dialogue: 0,0:04:37.87,0:04:38.97,*Default,NTP,0000,0000,0000,,throughout the next few weeks
Dialogue: 0,0:04:38.97,0:04:40.53,*Default,NTP,0000,0000,0000,,I just want to make sure that we understand
Dialogue: 0,0:04:40.60,0:04:43.07,*Default,NTP,0000,0000,0000,,the distinction between a class which is a definition
Dialogue: 0,0:04:43.17,0:04:43.97,*Default,NTP,0000,0000,0000,,and an object
Dialogue: 0,0:04:43.97,0:04:45.90,*Default,NTP,0000,0000,0000,,which is a thing that we've actually created
Dialogue: 0,0:04:46.07,0:04:47.53,*Default,NTP,0000,0000,0000,,that we can now act on
Dialogue: 0,0:04:48.90,0:04:49.90,*Default,NTP,0000,0000,0000,,now as I said
Dialogue: 0,0:04:49.90,0:04:52.20,*Default,NTP,0000,0000,0000,,a class combines and abstract data and functions
Dialogue: 0,0:04:52.20,0:04:55.20,*Default,NTP,0000,0000,0000,,an object is an instantiation of that class
Dialogue: 0,0:04:55.53,0:04:56.10,*Default,NTP,0000,0000,0000,,and I've been
Dialogue: 0,0:04:56.10,0:04:58.30,*Default,NTP,0000,0000,0000,,hinting this throughout the whole semester
Dialogue: 0,0:04:58.30,0:05:02.07,*Default,NTP,0000,0000,0000,,is we've sort of seen objects and classes already
Dialogue: 0,0:05:02.07,0:05:04.40,*Default,NTP,0000,0000,0000,,there's that notation that's been lingering around
Dialogue: 0,0:05:04.87,0:05:06.20,*Default,NTP,0000,0000,0000,,I think I probably mentioned
Dialogue: 0,0:05:06.33,0:05:08.07,*Default,NTP,0000,0000,0000,,that a string at some point
Dialogue: 0,0:05:08.30,0:05:09.73,*Default,NTP,0000,0000,0000,,is sort of like a class
Dialogue: 0,0:05:09.73,0:05:11.20,*Default,NTP,0000,0000,0000,,a list is like a class
Dialogue: 0,0:05:11.20,0:05:13.67,*Default,NTP,0000,0000,0000,,so here's a really simple example of a class
Dialogue: 0,0:05:13.67,0:05:16.37,*Default,NTP,0000,0000,0000,,a string is a built in class
Dialogue: 0,0:05:16.53,0:05:19.53,*Default,NTP,0000,0000,0000,,that the data is the string itself
Dialogue: 0,0:05:19.70,0:05:21.20,*Default,NTP,0000,0000,0000,,quote unquote ardvark
Dialogue: 0,0:05:21.77,0:05:23.93,*Default,NTP,0000,0000,0000,,the functionality is append
Dialogue: 0,0:05:23.93,0:05:26.33,*Default,NTP,0000,0000,0000,,I can append something to the end of a string
Dialogue: 0,0:05:27.00,0:05:29.27,*Default,NTP,0000,0000,0000,,an integer is a built in class
Dialogue: 0,0:05:29.73,0:05:31.47,*Default,NTP,0000,0000,0000,,stores data the actual number
Dialogue: 0,0:05:31.60,0:05:35.30,*Default,NTP,0000,0000,0000,,and the addition operator is a function on that data
Dialogue: 0,0:05:35.30,0:05:36.97,*Default,NTP,0000,0000,0000,,so now you see what I mean
Dialogue: 0,0:05:37.10,0:05:39.20,*Default,NTP,0000,0000,0000,,when I say data and functionality
Dialogue: 0,0:05:39.33,0:05:42.57,*Default,NTP,0000,0000,0000,,we store information a string and integer a list
Dialogue: 0,0:05:42.60,0:05:44.13,*Default,NTP,0000,0000,0000,,and then we can operate on that
Dialogue: 0,0:05:44.13,0:05:46.87,*Default,NTP,0000,0000,0000,,we provide you the programmer
Dialogue: 0,0:05:47.07,0:05:50.13,*Default,NTP,0000,0000,0000,,functionality to operate on that data
Dialogue: 0,0:05:51.00,0:05:53.30,*Default,NTP,0000,0000,0000,,now I don't think it'll surprise you to learn that
Dialogue: 0,0:05:53.37,0:05:54.67,*Default,NTP,0000,0000,0000,,we can define our own classes
Dialogue: 0,0:05:54.67,0:05:55.77,*Default,NTP,0000,0000,0000,,it's not just
Dialogue: 0,0:05:55.93,0:05:58.50,*Default,NTP,0000,0000,0000,,whatever python gives us and that's all we can do
Dialogue: 0,0:05:58.73,0:06:00.27,*Default,NTP,0000,0000,0000,,we can define our own classes
Dialogue: 0,0:06:00.27,0:06:02.53,*Default,NTP,0000,0000,0000,,our own data our own functionality
Dialogue: 0,0:06:02.57,0:06:06.30,*Default,NTP,0000,0000,0000,,and then build up really nice functionality from that
Dialogue: 0,0:06:06.30,0:06:07.20,*Default,NTP,0000,0000,0000,,and that's what we're going to spend
Dialogue: 0,0:06:07.20,0:06:09.10,*Default,NTP,0000,0000,0000,,of course the majority of our time doing
Dialogue: 0,0:06:09.13,0:06:11.73,*Default,NTP,0000,0000,0000,,is talking about how we define our own classes
Dialogue: 0,0:06:11.97,0:06:13.00,*Default,NTP,0000,0000,0000,,all right so
Dialogue: 0,0:06:13.00,0:06:13.97,*Default,NTP,0000,0000,0000,,let me start off by saying
Dialogue: 0,0:06:13.97,0:06:15.37,*Default,NTP,0000,0000,0000,,I'm going to define a class for you
Dialogue: 0,0:06:15.37,0:06:18.70,*Default,NTP,0000,0000,0000,,and it's going to unfold over a series of lectures
Dialogue: 0,0:06:19.10,0:06:22.87,*Default,NTP,0000,0000,0000,,and the class is of type ball right there you see that
Dialogue: 0,0:06:23.10,0:06:24.13,*Default,NTP,0000,0000,0000,,so this
Dialogue: 0,0:06:24.30,0:06:26.67,*Default,NTP,0000,0000,0000,,and I'm going to sort of do a bit of a slight of hand
Dialogue: 0,0:06:26.67,0:06:28.57,*Default,NTP,0000,0000,0000,,here I'm not going to show you the details of the
Dialogue: 0,0:06:28.57,0:06:29.93,*Default,NTP,0000,0000,0000,,class or the object just yet
Dialogue: 0,0:06:29.93,0:06:31.07,*Default,NTP,0000,0000,0000,,I'm going to tell you
Dialogue: 0,0:06:31.57,0:06:35.33,*Default,NTP,0000,0000,0000,,that we have this object this class called a ball class
Dialogue: 0,0:06:35.77,0:06:37.20,*Default,NTP,0000,0000,0000,,and what it allows you to do
Dialogue: 0,0:06:37.37,0:06:40.40,*Default,NTP,0000,0000,0000,,is store some data which is the position
Dialogue: 0,0:06:40.57,0:06:42.73,*Default,NTP,0000,0000,0000,,and the speed of the ball
Dialogue: 0,0:06:42.97,0:06:45.57,*Default,NTP,0000,0000,0000,,and the functionality is you can move the ball
Dialogue: 0,0:06:45.57,0:06:47.67,*Default,NTP,0000,0000,0000,,you can render the ball etc etc
Dialogue: 0,0:06:48.20,0:06:48.70,*Default,NTP,0000,0000,0000,,and again
Dialogue: 0,0:06:48.70,0:06:50.17,*Default,NTP,0000,0000,0000,,I'm not going to show you the code for a little bit
Dialogue: 0,0:06:50.17,0:06:51.13,*Default,NTP,0000,0000,0000,,because I want to again
Dialogue: 0,0:06:51.13,0:06:52.13,*Default,NTP,0000,0000,0000,,start sort of conceptually
Dialogue: 0,0:06:52.13,0:06:52.93,*Default,NTP,0000,0000,0000,,and then we'll dive
Dialogue: 0,0:06:52.93,0:06:54.93,*Default,NTP,0000,0000,0000,,into the details of how all this works
Dialogue: 0,0:06:55.37,0:06:56.17,*Default,NTP,0000,0000,0000,,so
Dialogue: 0,0:06:56.27,0:06:59.80,*Default,NTP,0000,0000,0000,,the class that we define called bald has a constructor
Dialogue: 0,0:07:00.90,0:07:03.40,*Default,NTP,0000,0000,0000,,and this line of code is calling the constructor
Dialogue: 0,0:07:03.40,0:07:06.10,*Default,NTP,0000,0000,0000,,to do what to instantiate an object
Dialogue: 0,0:07:06.10,0:07:07.00,*Default,NTP,0000,0000,0000,,so there it is
Dialogue: 0,0:07:07.17,0:07:11.53,*Default,NTP,0000,0000,0000,,I have a ball class and I want to build a ball
Dialogue: 0,0:07:11.53,0:07:14.07,*Default,NTP,0000,0000,0000,,the way I do that is I call this constructor
Dialogue: 0,0:07:15.30,0:07:17.57,*Default,NTP,0000,0000,0000,,the constructor is just the name of the class
Dialogue: 0,0:07:17.57,0:07:19.17,*Default,NTP,0000,0000,0000,,and then some information
Dialogue: 0,0:07:19.17,0:07:21.40,*Default,NTP,0000,0000,0000,,about what I want my object to be
Dialogue: 0,0:07:21.40,0:07:23.87,*Default,NTP,0000,0000,0000,,in this case it's the xy position of the ball
Dialogue: 0,0:07:23.97,0:07:26.00,*Default,NTP,0000,0000,0000,,and the xy velocity of the ball
Dialogue: 0,0:07:26.00,0:07:27.77,*Default,NTP,0000,0000,0000,,and we'll talk some more about what we're going to do
Dialogue: 0,0:07:27.77,0:07:28.70,*Default,NTP,0000,0000,0000,,with all those things
Dialogue: 0,0:07:28.90,0:07:29.80,*Default,NTP,0000,0000,0000,,and then of course
Dialogue: 0,0:07:29.90,0:07:34.13,*Default,NTP,0000,0000,0000,,my ball is now an object of type class ball
Dialogue: 0,0:07:34.73,0:07:36.27,*Default,NTP,0000,0000,0000,,so this looks pretty similar to everything
Dialogue: 0,0:07:36.27,0:07:37.17,*Default,NTP,0000,0000,0000,,we've seen before
Dialogue: 0,0:07:37.33,0:07:38.40,*Default,NTP,0000,0000,0000,,it's a function call
Dialogue: 0,0:07:38.40,0:07:40.10,*Default,NTP,0000,0000,0000,,in this case it happens to be a constructor
Dialogue: 0,0:07:40.10,0:07:41.60,*Default,NTP,0000,0000,0000,,which I'm going to describe in more detail in the
Dialogue: 0,0:07:41.60,0:07:44.30,*Default,NTP,0000,0000,0000,,second to a class of type ball
Dialogue: 0,0:07:44.33,0:07:46.27,*Default,NTP,0000,0000,0000,,it's going to return something back
Dialogue: 0,0:07:46.27,0:07:48.47,*Default,NTP,0000,0000,0000,,and that now is going to be an object
Dialogue: 0,0:07:48.93,0:07:50.67,*Default,NTP,0000,0000,0000,,now this constructor is really
Dialogue: 0,0:07:50.67,0:07:52.53,*Default,NTP,0000,0000,0000,,really special and very important
Dialogue: 0,0:07:52.53,0:07:53.87,*Default,NTP,0000,0000,0000,,where I spent a little time talking about it
Dialogue: 0,0:07:53.87,0:07:55.60,*Default,NTP,0000,0000,0000,,before I actually show you the code
Dialogue: 0,0:07:55.73,0:07:57.80,*Default,NTP,0000,0000,0000,,for how to build this class
Dialogue: 0,0:07:58.90,0:08:01.27,*Default,NTP,0000,0000,0000,,so what the constructor does No.1 is that
Dialogue: 0,0:08:01.37,0:08:03.93,*Default,NTP,0000,0000,0000,,remember this class is just this concept
Dialogue: 0,0:08:03.93,0:08:04.90,*Default,NTP,0000,0000,0000,,it's just a blueprint
Dialogue: 0,0:08:04.90,0:08:06.47,*Default,NTP,0000,0000,0000,,I don't physically have anything yet
Dialogue: 0,0:08:06.47,0:08:08.50,*Default,NTP,0000,0000,0000,,I don't have an actual object
Dialogue: 0,0:08:08.50,0:08:09.97,*Default,NTP,0000,0000,0000,,so the first thing it's going to do
Dialogue: 0,0:08:10.00,0:08:13.20,*Default,NTP,0000,0000,0000,,is it's going to create in memory a ball object
Dialogue: 0,0:08:13.37,0:08:15.47,*Default,NTP,0000,0000,0000,,so it reaches into memory it allocates some memory
Dialogue: 0,0:08:15.47,0:08:16.47,*Default,NTP,0000,0000,0000,,that says okay
Dialogue: 0,0:08:16.67,0:08:18.70,*Default,NTP,0000,0000,0000,,we're going to store some information in here
Dialogue: 0,0:08:18.70,0:08:21.17,*Default,NTP,0000,0000,0000,,some data with along with some functionality
Dialogue: 0,0:08:21.17,0:08:22.93,*Default,NTP,0000,0000,0000,,and it does that for you
Dialogue: 0,0:08:23.17,0:08:25.50,*Default,NTP,0000,0000,0000,,good not No.1 so actually create the ball
Dialogue: 0,0:08:26.07,0:08:29.10,*Default,NTP,0000,0000,0000,,No.2 it's going to initialize the data
Dialogue: 0,0:08:29.33,0:08:31.27,*Default,NTP,0000,0000,0000,,based on what you passed it
Dialogue: 0,0:08:31.87,0:08:33.53,*Default,NTP,0000,0000,0000,,so now what it says is okay
Dialogue: 0,0:08:33.53,0:08:34.93,*Default,NTP,0000,0000,0000,,I can have multiple balls
Dialogue: 0,0:08:34.93,0:08:37.07,*Default,NTP,0000,0000,0000,,the same way I can have multiple houses
Dialogue: 0,0:08:37.07,0:08:39.13,*Default,NTP,0000,0000,0000,,I'm going to build an object
Dialogue: 0,0:08:39.27,0:08:40.60,*Default,NTP,0000,0000,0000,,I'm going to allocate memory for it
Dialogue: 0,0:08:40.60,0:08:43.70,*Default,NTP,0000,0000,0000,,and I'm going to store the data that the user wants
Dialogue: 0,0:08:43.70,0:08:45.27,*Default,NTP,0000,0000,0000,,x y position
Dialogue: 0,0:08:45.40,0:08:48.97,*Default,NTP,0000,0000,0000,,vx vy velocity in the x and the y direction
Dialogue: 0,0:08:49.00,0:08:50.30,*Default,NTP,0000,0000,0000,,good initialization
Dialogue: 0,0:08:51.77,0:08:53.87,*Default,NTP,0000,0000,0000,,and it returns to you
Dialogue: 0,0:08:53.93,0:08:55.20,*Default,NTP,0000,0000,0000,,this is really important
Dialogue: 0,0:08:55.20,0:08:58.70,*Default,NTP,0000,0000,0000,,the address of the ball object that was
Dialogue: 0,0:08:59.37,0:09:02.33,*Default,NTP,0000,0000,0000,,allocated in memory and initialized for you
Dialogue: 0,0:09:03.13,0:09:05.07,*Default,NTP,0000,0000,0000,,now this sounds should sound pretty
Dialogue: 0,0:09:05.20,0:09:08.33,*Default,NTP,0000,0000,0000,,familiar to you because this sounds a lot like a list
Dialogue: 0,0:09:09.17,0:09:10.53,*Default,NTP,0000,0000,0000,,with a list what do we do
Dialogue: 0,0:09:10.70,0:09:12.87,*Default,NTP,0000,0000,0000,,we say score bracket score bracket
Dialogue: 0,0:09:12.87,0:09:15.40,*Default,NTP,0000,0000,0000,,slightly different syntax for calling its constructor
Dialogue: 0,0:09:15.50,0:09:18.80,*Default,NTP,0000,0000,0000,,a bunch of data in the list common delimited elements
Dialogue: 0,0:09:18.80,0:09:20.07,*Default,NTP,0000,0000,0000,,what does python do
Dialogue: 0,0:09:20.27,0:09:22.47,*Default,NTP,0000,0000,0000,,it reaches into memory allocate some space
Dialogue: 0,0:09:22.53,0:09:24.20,*Default,NTP,0000,0000,0000,,sticks the data in there
Dialogue: 0,0:09:24.20,0:09:26.67,*Default,NTP,0000,0000,0000,,allocation and initialization
Dialogue: 0,0:09:26.67,0:09:27.90,*Default,NTP,0000,0000,0000,,and what does it hand you back
Dialogue: 0,0:09:27.97,0:09:30.20,*Default,NTP,0000,0000,0000,,the address of a list
Dialogue: 0,0:09:30.60,0:09:33.10,*Default,NTP,0000,0000,0000,,not the actual list but the address to the list
Dialogue: 0,0:09:33.10,0:09:34.10,*Default,NTP,0000,0000,0000,,which you can of course
Dialogue: 0,0:09:34.10,0:09:36.60,*Default,NTP,0000,0000,0000,,then reference the contents of the list
Dialogue: 0,0:09:36.87,0:09:39.47,*Default,NTP,0000,0000,0000,,so in fact and I think I even hinted at this list
Dialogue: 0,0:09:39.47,0:09:40.80,*Default,NTP,0000,0000,0000,,are a built in object
Dialogue: 0,0:09:40.80,0:09:42.97,*Default,NTP,0000,0000,0000,,and they do all three of these things
Dialogue: 0,0:09:43.70,0:09:44.37,*Default,NTP,0000,0000,0000,,good
Dialogue: 0,0:09:44.37,0:09:46.80,*Default,NTP,0000,0000,0000,,so this is sort of the picture you can have in your
Dialogue: 0,0:09:46.80,0:09:47.07,*Default,NTP,0000,0000,0000,,head
Dialogue: 0,0:09:47.07,0:09:49.67,*Default,NTP,0000,0000,0000,,and we've seen a picture like this when we did lists
Dialogue: 0,0:09:49.73,0:09:51.77,*Default,NTP,0000,0000,0000,,so I have a class called ball again
Dialogue: 0,0:09:51.77,0:09:53.30,*Default,NTP,0000,0000,0000,,you have no idea how I've done this
Dialogue: 0,0:09:53.30,0:09:54.57,*Default,NTP,0000,0000,0000,,and we're going to get there
Dialogue: 0,0:09:54.57,0:09:57.53,*Default,NTP,0000,0000,0000,,so just abstract out the details of this for a minute
Dialogue: 0,0:09:58.07,0:10:00.73,*Default,NTP,0000,0000,0000,,and you know because I tell you that you can generate
Dialogue: 0,0:10:00.73,0:10:01.57,*Default,NTP,0000,0000,0000,,you can build a ball
Dialogue: 0,0:10:01.57,0:10:04.97,*Default,NTP,0000,0000,0000,,it has four pieces of information you need to specify
Dialogue: 0,0:10:05.07,0:10:06.67,*Default,NTP,0000,0000,0000,,where is it on a drawing
Dialogue: 0,0:10:07.50,0:10:08.30,*Default,NTP,0000,0000,0000,,canvas
Dialogue: 0,0:10:09.30,0:10:11.80,*Default,NTP,0000,0000,0000,,how fast is it moving in the horizontal and vertical
Dialogue: 0,0:10:11.80,0:10:12.60,*Default,NTP,0000,0000,0000,,direction
Dialogue: 0,0:10:13.20,0:10:16.13,*Default,NTP,0000,0000,0000,,and so when you call this constructor
Dialogue: 0,0:10:16.60,0:10:19.60,*Default,NTP,0000,0000,0000,,it does what it allocates some memory that's this box
Dialogue: 0,0:10:19.73,0:10:22.37,*Default,NTP,0000,0000,0000,,it initializes the variables which are
Dialogue: 0,0:10:22.37,0:10:24.57,*Default,NTP,0000,0000,0000,,I'm going to tell you are called xy vxby
Dialogue: 0,0:10:24.57,0:10:25.90,*Default,NTP,0000,0000,0000,,which we'll see in a few minutes
Dialogue: 0,0:10:25.97,0:10:28.27,*Default,NTP,0000,0000,0000,,to the values you passed in 10
Dialogue: 0,0:10:29.07,0:10:30.53,*Default,NTP,0000,0000,0000,,15 0 -5
Dialogue: 0,0:10:30.57,0:10:32.20,*Default,NTP,0000,0000,0000,,and it hands you back
Dialogue: 0,0:10:32.70,0:10:34.67,*Default,NTP,0000,0000,0000,,address to the object
Dialogue: 0,0:10:34.67,0:10:36.40,*Default,NTP,0000,0000,0000,,so this again is just some random number
Dialogue: 0,0:10:36.40,0:10:39.00,*Default,NTP,0000,0000,0000,,it's just a pointer to where it is
Dialogue: 0,0:10:40.40,0:10:44.13,*Default,NTP,0000,0000,0000,,so I have an object in memory I have instantiated an
Dialogue: 0,0:10:44.77,0:10:48.07,*Default,NTP,0000,0000,0000,,something of type ball a class of type and now
Dialogue: 0,0:10:48.47,0:10:50.67,*Default,NTP,0000,0000,0000,,I have two things at my disposal
Dialogue: 0,0:10:51.10,0:10:52.50,*Default,NTP,0000,0000,0000,,I have the data
Dialogue: 0,0:10:52.60,0:10:53.80,*Default,NTP,0000,0000,0000,,which I've just initialized
Dialogue: 0,0:10:53.80,0:10:54.60,*Default,NTP,0000,0000,0000,,and I have all the
Dialogue: 0,0:10:54.60,0:10:56.20,*Default,NTP,0000,0000,0000,,functionality that comes with this class
Dialogue: 0,0:10:56.20,0:10:57.80,*Default,NTP,0000,0000,0000,,which I haven't shown you yet but I will
Dialogue: 0,0:10:57.97,0:10:58.80,*Default,NTP,0000,0000,0000,,in a minute
Dialogue: 0,0:10:59.47,0:11:01.60,*Default,NTP,0000,0000,0000,,now if I define another ball
Dialogue: 0,0:11:01.60,0:11:05.13,*Default,NTP,0000,0000,0000,,here's ball two with a different xy position 12 and 23
Dialogue: 0,0:11:05.37,0:11:07.47,*Default,NTP,0000,0000,0000,,and a different velocity two and three
Dialogue: 0,0:11:08.30,0:11:09.40,*Default,NTP,0000,0000,0000,,then what happens is
Dialogue: 0,0:11:09.40,0:11:11.10,*Default,NTP,0000,0000,0000,,well that's a call to the constructor
Dialogue: 0,0:11:11.10,0:11:13.17,*Default,NTP,0000,0000,0000,,the constructor allocates memory
Dialogue: 0,0:11:13.17,0:11:15.27,*Default,NTP,0000,0000,0000,,it initializes four variables
Dialogue: 0,0:11:15.27,0:11:17.37,*Default,NTP,0000,0000,0000,,and it hands you back an address
Dialogue: 0,0:11:17.37,0:11:19.87,*Default,NTP,0000,0000,0000,,and now I have two objects
Dialogue: 0,0:11:20.37,0:11:21.80,*Default,NTP,0000,0000,0000,,completely separate from each other
Dialogue: 0,0:11:22.00,0:11:22.60,*Default,NTP,0000,0000,0000,,right
Dialogue: 0,0:11:22.60,0:11:25.80,*Default,NTP,0000,0000,0000,,this is a call to instructor please build a ball object
Dialogue: 0,0:11:25.80,0:11:27.10,*Default,NTP,0000,0000,0000,,this is a call to instructor
Dialogue: 0,0:11:27.17,0:11:29.30,*Default,NTP,0000,0000,0000,,create another one and I can do this all day long
Dialogue: 0,0:11:29.67,0:11:32.50,*Default,NTP,0000,0000,0000,,and each one of these stores its own data
Dialogue: 0,0:11:32.67,0:11:36.30,*Default,NTP,0000,0000,0000,,each one has access to functionality to do what we want
Dialogue: 0,0:11:36.30,0:11:38.53,*Default,NTP,0000,0000,0000,,to this ball object
Dialogue: 0,0:11:39.20,0:11:40.00,*Default,NTP,0000,0000,0000,,good
Dialogue: 0,0:11:40.40,0:11:41.20,*Default,NTP,0000,0000,0000,,so
Dialogue: 0,0:11:41.97,0:11:42.53,*Default,NTP,0000,0000,0000,,and again
Dialogue: 0,0:11:42.53,0:11:44.00,*Default,NTP,0000,0000,0000,,I haven't shown you how to construct a workout
Dialogue: 0,0:11:44.00,0:11:45.13,*Default,NTP,0000,0000,0000,,I haven't shown you how to define a class
Dialogue: 0,0:11:45.13,0:11:46.47,*Default,NTP,0000,0000,0000,,I haven't shown you anything yet
Dialogue: 0,0:11:46.47,0:11:47.50,*Default,NTP,0000,0000,0000,,but I want to sort of
Dialogue: 0,0:11:47.50,0:11:49.20,*Default,NTP,0000,0000,0000,,track that out for a minute and get through these
Dialogue: 0,0:11:49.20,0:11:51.10,*Default,NTP,0000,0000,0000,,concept and then we're going to dive
Dialogue: 0,0:11:51.10,0:11:53.13,*Default,NTP,0000,0000,0000,,into the details of that in the next segment
Dialogue: 0,0:11:54.07,0:11:54.47,*Default,NTP,0000,0000,0000,,okay
Dialogue: 0,0:11:54.47,0:11:57.50,*Default,NTP,0000,0000,0000,,just let me make a few points before we finish up here
Dialogue: 0,0:11:57.50,0:12:00.50,*Default,NTP,0000,0000,0000,,so when I define an object ball one
Dialogue: 0,0:12:00.90,0:12:02.77,*Default,NTP,0000,0000,0000,,I can access the various
Dialogue: 0,0:12:02.77,0:12:05.10,*Default,NTP,0000,0000,0000,,elements of the data that I initialize
Dialogue: 0,0:12:05.10,0:12:07.57,*Default,NTP,0000,0000,0000,,and remember it's xy vxvy
Dialogue: 0,0:12:07.73,0:12:10.80,*Default,NTP,0000,0000,0000,,using that little dot notation right there
Dialogue: 0,0:12:11.07,0:12:14.57,*Default,NTP,0000,0000,0000,,so ball one of course is the name of the object
Dialogue: 0,0:12:14.77,0:12:18.00,*Default,NTP,0000,0000,0000,,and I can reach in to that object
Dialogue: 0,0:12:18.07,0:12:21.07,*Default,NTP,0000,0000,0000,,and I can access the data and the functionality
Dialogue: 0,0:12:21.07,0:12:23.30,*Default,NTP,0000,0000,0000,,of course using that dot notation
Dialogue: 0,0:12:23.30,0:12:24.47,*Default,NTP,0000,0000,0000,,so you remember a while back
Dialogue: 0,0:12:24.47,0:12:25.87,*Default,NTP,0000,0000,0000,,we introduced that dot notation
Dialogue: 0,0:12:25.87,0:12:27.93,*Default,NTP,0000,0000,0000,,and I sort of wave my hands vigorously
Dialogue: 0,0:12:27.93,0:12:29.70,*Default,NTP,0000,0000,0000,,to tell you this is some syntactic thing
Dialogue: 0,0:12:29.70,0:12:31.07,*Default,NTP,0000,0000,0000,,having to do with object orienter program
Dialogue: 0,0:12:31.07,0:12:32.47,*Default,NTP,0000,0000,0000,,don't worry about it we'll get to it
Dialogue: 0,0:12:32.93,0:12:33.87,*Default,NTP,0000,0000,0000,,we're getting to it
Dialogue: 0,0:12:34.13,0:12:38.87,*Default,NTP,0000,0000,0000,,this dot notation is part of accessing either data
Dialogue: 0,0:12:39.10,0:12:43.20,*Default,NTP,0000,0000,0000,,or functionality associated with an object
Dialogue: 0,0:12:43.33,0:12:44.80,*Default,NTP,0000,0000,0000,,so you give the object name
Dialogue: 0,0:12:45.27,0:12:47.57,*Default,NTP,0000,0000,0000,,dot and then the data type
Dialogue: 0,0:12:47.57,0:12:48.33,*Default,NTP,0000,0000,0000,,and of course
Dialogue: 0,0:12:48.33,0:12:49.57,*Default,NTP,0000,0000,0000,,you can see why this is
Dialogue: 0,0:12:49.57,0:12:51.80,*Default,NTP,0000,0000,0000,,if I can create multiple objects
Dialogue: 0,0:12:51.87,0:12:53.67,*Default,NTP,0000,0000,0000,,it's not x per se
Dialogue: 0,0:12:53.93,0:12:59.10,*Default,NTP,0000,0000,0000,,it's this balls x or this balls y or vx or vy
Dialogue: 0,0:12:59.30,0:13:01.20,*Default,NTP,0000,0000,0000,,so I have to say which object do you want
Dialogue: 0,0:13:01.27,0:13:04.00,*Default,NTP,0000,0000,0000,,and then which data element of that
Dialogue: 0,0:13:04.00,0:13:05.13,*Default,NTP,0000,0000,0000,,same thing with a house
Dialogue: 0,0:13:05.47,0:13:07.53,*Default,NTP,0000,0000,0000,,if I have five houses that are the same
Dialogue: 0,0:13:07.60,0:13:12.50,*Default,NTP,0000,0000,0000,,I can't say go deliver this package to ball or house
Dialogue: 0,0:13:12.50,0:13:14.80,*Default,NTP,0000,0000,0000,,I have to say this house this address
Dialogue: 0,0:13:14.80,0:13:17.37,*Default,NTP,0000,0000,0000,,and then you go into that particular house
Dialogue: 0,0:13:17.47,0:13:19.13,*Default,NTP,0000,0000,0000,,and get what you want out of it
Dialogue: 0,0:13:19.97,0:13:21.67,*Default,NTP,0000,0000,0000,,good and
Dialogue: 0,0:13:23.20,0:13:28.80,*Default,NTP,0000,0000,0000,,I can also access functions associated with objects
Dialogue: 0,0:13:28.80,0:13:29.77,*Default,NTP,0000,0000,0000,,and again I haven't
Dialogue: 0,0:13:29.87,0:13:30.97,*Default,NTP,0000,0000,0000,,shown you how to do this yet
Dialogue: 0,0:13:30.97,0:13:32.80,*Default,NTP,0000,0000,0000,,but I just want to introduce the notation
Dialogue: 0,0:13:33.17,0:13:35.73,*Default,NTP,0000,0000,0000,,so here what I'm doing is I'm initializing a ball
Dialogue: 0,0:13:35.97,0:13:39.20,*Default,NTP,0000,0000,0000,,at position five four with velocity three and six
Dialogue: 0,0:13:39.50,0:13:40.10,*Default,NTP,0000,0000,0000,,and I can
Dialogue: 0,0:13:40.10,0:13:42.50,*Default,NTP,0000,0000,0000,,print the x coordinate by just saying ball one
Dialogue: 0,0:13:42.50,0:13:44.90,*Default,NTP,0000,0000,0000,,that's of course the name of the variable x
Dialogue: 0,0:13:44.97,0:13:47.77,*Default,NTP,0000,0000,0000,,and when I print this out it will print for me five
Dialogue: 0,0:13:47.80,0:13:50.13,*Default,NTP,0000,0000,0000,,because that is the x position here
Dialogue: 0,0:13:50.73,0:13:54.07,*Default,NTP,0000,0000,0000,,now remember that classes bundle up
Dialogue: 0,0:13:54.47,0:13:58.90,*Default,NTP,0000,0000,0000,,data and functionality things that you can actually do
Dialogue: 0,0:13:59.20,0:14:01.33,*Default,NTP,0000,0000,0000,,what functionality well whatever I want
Dialogue: 0,0:14:01.33,0:14:02.53,*Default,NTP,0000,0000,0000,,so for a list
Dialogue: 0,0:14:02.60,0:14:04.77,*Default,NTP,0000,0000,0000,,I can add things remove things append things
Dialogue: 0,0:14:04.77,0:14:05.30,*Default,NTP,0000,0000,0000,,sort things
Dialogue: 0,0:14:05.30,0:14:07.53,*Default,NTP,0000,0000,0000,,that's the functionality that's been given to me
Dialogue: 0,0:14:07.73,0:14:08.93,*Default,NTP,0000,0000,0000,,for this ball class
Dialogue: 0,0:14:08.93,0:14:10.07,*Default,NTP,0000,0000,0000,,well we're gonna see it a little bit
Dialogue: 0,0:14:10.07,0:14:11.87,*Default,NTP,0000,0000,0000,,but it's whatever I want to do for the ball class
Dialogue: 0,0:14:11.87,0:14:14.90,*Default,NTP,0000,0000,0000,,that's my job as the constructor of this class
Dialogue: 0,0:14:14.90,0:14:17.30,*Default,NTP,0000,0000,0000,,that give you certain amounts of functionality
Dialogue: 0,0:14:17.57,0:14:20.20,*Default,NTP,0000,0000,0000,,I will tell you that one of the functionality
Dialogue: 0,0:14:20.27,0:14:22.47,*Default,NTP,0000,0000,0000,,is a function called update position
Dialogue: 0,0:14:22.47,0:14:24.47,*Default,NTP,0000,0000,0000,,it takes as input a time step
Dialogue: 0,0:14:24.57,0:14:28.60,*Default,NTP,0000,0000,0000,,and it moves the balls position according to the
Dialogue: 0,0:14:28.87,0:14:29.87,*Default,NTP,0000,0000,0000,,velocity
Dialogue: 0,0:14:30.10,0:14:32.30,*Default,NTP,0000,0000,0000,,okay so let's just think about this for a second
Dialogue: 0,0:14:32.30,0:14:35.73,*Default,NTP,0000,0000,0000,,this is in some pixel coordinates and velocity is what
Dialogue: 0,0:14:35.90,0:14:40.50,*Default,NTP,0000,0000,0000,,how many pixels are you moving per 2nd or per frame
Dialogue: 0,0:14:41.00,0:14:43.87,*Default,NTP,0000,0000,0000,,so with a time step of 0.1
Dialogue: 0,0:14:44.47,0:14:47.13,*Default,NTP,0000,0000,0000,,when I update the position of this ball
Dialogue: 0,0:14:47.30,0:14:50.33,*Default,NTP,0000,0000,0000,,its x coordinate moves from position five
Dialogue: 0,0:14:50.73,0:14:54.10,*Default,NTP,0000,0000,0000,,to position five plus one tenth of three
Dialogue: 0,0:14:54.27,0:14:56.77,*Default,NTP,0000,0000,0000,,because this is three pixels per 2nd
Dialogue: 0,0:14:56.90,0:14:59.40,*Default,NTP,0000,0000,0000,,I've moved for half a one tenth of a second
Dialogue: 0,0:14:59.47,0:15:01.30,*Default,NTP,0000,0000,0000,,and so I've moved 0.3 pixels
Dialogue: 0,0:15:01.33,0:15:03.13,*Default,NTP,0000,0000,0000,,and now it has a new position
Dialogue: 0,0:15:03.37,0:15:06.13,*Default,NTP,0000,0000,0000,,okay so notice here that the function
Dialogue: 0,0:15:06.53,0:15:09.13,*Default,NTP,0000,0000,0000,,associated with the object ball
Dialogue: 0,0:15:09.20,0:15:14.53,*Default,NTP,0000,0000,0000,,is operating on the data associated with the object
Dialogue: 0,0:15:15.10,0:15:16.27,*Default,NTP,0000,0000,0000,,ball okay
Dialogue: 0,0:15:16.30,0:15:19.77,*Default,NTP,0000,0000,0000,,so again this class bundles up data
Dialogue: 0,0:15:19.77,0:15:22.13,*Default,NTP,0000,0000,0000,,information about what you are storing
Dialogue: 0,0:15:22.20,0:15:24.57,*Default,NTP,0000,0000,0000,,and then gives you the ability to manipulate that
Dialogue: 0,0:15:24.80,0:15:26.17,*Default,NTP,0000,0000,0000,,data through functions
Dialogue: 0,0:15:26.53,0:15:28.70,*Default,NTP,0000,0000,0000,,and there again is that not notation
Dialogue: 0,0:15:28.70,0:15:31.87,*Default,NTP,0000,0000,0000,,I'm not calling the function update position
Dialogue: 0,0:15:32.37,0:15:33.53,*Default,NTP,0000,0000,0000,,that's not a function
Dialogue: 0,0:15:33.70,0:15:36.87,*Default,NTP,0000,0000,0000,,that's a function associated with a class of tight ball
Dialogue: 0,0:15:36.97,0:15:40.40,*Default,NTP,0000,0000,0000,,I'm calling this ball's update position
Dialogue: 0,0:15:40.40,0:15:41.53,*Default,NTP,0000,0000,0000,,and another ball
Dialogue: 0,0:15:41.77,0:15:43.00,*Default,NTP,0000,0000,0000,,it has a different update position
Dialogue: 0,0:15:43.00,0:15:45.50,*Default,NTP,0000,0000,0000,,why because it has to operate on its own data
Dialogue: 0,0:15:45.80,0:15:48.07,*Default,NTP,0000,0000,0000,,so every time you instantiate an object
Dialogue: 0,0:15:48.07,0:15:51.17,*Default,NTP,0000,0000,0000,,you get the data and the functionality associated with
Dialogue: 0,0:15:51.17,0:15:52.27,*Default,NTP,0000,0000,0000,,that object
Dialogue: 0,0:15:53.70,0:15:54.97,*Default,NTP,0000,0000,0000,,okay I know that was a lot
Dialogue: 0,0:15:54.97,0:15:56.07,*Default,NTP,0000,0000,0000,,there's a lot of
Dialogue: 0,0:15:56.27,0:15:57.70,*Default,NTP,0000,0000,0000,,conceptual things going on here
Dialogue: 0,0:15:57.70,0:15:59.30,*Default,NTP,0000,0000,0000,,a lot of syntactical thing
Dialogue: 0,0:15:59.53,0:16:00.00,*Default,NTP,0000,0000,0000,,hold on
Dialogue: 0,0:16:00.00,0:16:02.53,*Default,NTP,0000,0000,0000,,we're gonna do a couple more segments of this lecture
Dialogue: 0,0:16:02.53,0:16:03.87,*Default,NTP,0000,0000,0000,,and I'm gonna start now
Dialogue: 0,0:16:03.97,0:16:05.93,*Default,NTP,0000,0000,0000,,to reveal
Dialogue: 0,0:16:06.00,0:16:09.70,*Default,NTP,0000,0000,0000,,how you build these classes and objects and show you
Dialogue: 0,0:16:09.87,0:16:12.13,*Default,NTP,0000,0000,0000,,where the data is where the functionality is
Dialogue: 0,0:16:12.57,0:16:14.57,*Default,NTP,0000,0000,0000,,and hopefully this will become more clear
Dialogue: 0,0:16:14.57,0:16:16.33,*Default,NTP,0000,0000,0000,,all right let's pick it up in a few minutes
Dialogue: 0,0:16:18.50,0:16:19.20,*Default,NTP,0000,0000,0000,,the rest of this
Dialogue: 0,0:16:19.20,0:16:21.87,*Default,NTP,0000,0000,0000,,playlist is the standard lecture that I give
Dialogue: 0,0:16:22.13,0:16:24.20,*Default,NTP,0000,0000,0000,,about object oriented programming
Dialogue: 0,0:16:24.30,0:16:26.00,*Default,NTP,0000,0000,0000,,starting from the very beginning
Dialogue: 0,0:16:26.10,0:16:28.27,*Default,NTP,0000,0000,0000,,so it will be just a little bit redundant
Dialogue: 0,0:16:28.27,0:16:30.30,*Default,NTP,0000,0000,0000,,with what professor frie just said
Dialogue: 0,0:16:30.50,0:16:32.50,*Default,NTP,0000,0000,0000,,however I think there are enough
Dialogue: 0,0:16:32.50,0:16:34.50,*Default,NTP,0000,0000,0000,,differences in how we tend to describe
Dialogue: 0,0:16:34.50,0:16:35.97,*Default,NTP,0000,0000,0000,,these things and motivate them
Dialogue: 0,0:16:36.00,0:16:37.70,*Default,NTP,0000,0000,0000,,that is worth watching them both
Dialogue: 0,0:16:38.17,0:16:40.30,*Default,NTP,0000,0000,0000,,and the rest of this lecture will also cover
Dialogue: 0,0:16:40.30,0:16:41.50,*Default,NTP,0000,0000,0000,,all of the mechanics
Dialogue: 0,0:16:41.50,0:16:42.53,*Default,NTP,0000,0000,0000,,of how you build
Dialogue: 0,0:16:42.53,0:16:45.60,*Default,NTP,0000,0000,0000,,your own classes and methods and all of that
Dialogue: 0,0:16:46.37,0:16:48.97,*Default,NTP,0000,0000,0000,,but perhaps you haven't gotten enough
Dialogue: 0,0:16:48.97,0:16:51.07,*Default,NTP,0000,0000,0000,,of professor fried's description yet
Dialogue: 0,0:16:51.30,0:16:52.60,*Default,NTP,0000,0000,0000,,I totally understand
Dialogue: 0,0:16:52.60,0:16:53.47,*Default,NTP,0000,0000,0000,,it's great
Dialogue: 0,0:16:53.80,0:16:56.20,*Default,NTP,0000,0000,0000,,so if you look in the description of this video
Dialogue: 0,0:16:56.27,0:16:57.87,*Default,NTP,0000,0000,0000,,you'll find links to the rest
Dialogue: 0,0:16:57.87,0:16:59.93,*Default,NTP,0000,0000,0000,,of his object oriented programming lecture
Dialogue: 0,0:17:00.33,0:17:01.40,*Default,NTP,0000,0000,0000,,it does rely
Dialogue: 0,0:17:01.40,0:17:03.57,*Default,NTP,0000,0000,0000,,on a few things that we haven't covered yet
Dialogue: 0,0:17:03.57,0:17:05.33,*Default,NTP,0000,0000,0000,,like how to draw on a screen
Dialogue: 0,0:17:05.40,0:17:07.93,*Default,NTP,0000,0000,0000,,and how to use a notebook to write python
Dialogue: 0,0:17:08.30,0:17:09.87,*Default,NTP,0000,0000,0000,,you can learn about that stuff
Dialogue: 0,0:17:09.97,0:17:10.80,*Default,NTP,0000,0000,0000,,just by following
Dialogue: 0,0:17:10.80,0:17:12.73,*Default,NTP,0000,0000,0000,,the rest of the links in the description
Dialogue: 0,0:17:12.77,0:17:13.87,*Default,NTP,0000,0000,0000,,which walk you through
Dialogue: 0,0:17:14.00,0:17:15.33,*Default,NTP,0000,0000,0000,,the very first week
Dialogue: 0,0:17:15.33,0:17:18.47,*Default,NTP,0000,0000,0000,,of professor for reed's graduate course 206a
Dialogue: 0,0:17:18.87,0:17:21.27,*Default,NTP,0000,0000,0000,,I've also added a link to that course website
Dialogue: 0,0:17:21.50,0:17:22.73,*Default,NTP,0000,0000,0000,,in case you want to find
Dialogue: 0,0:17:22.73,0:17:24.53,*Default,NTP,0000,0000,0000,,more videos that he's made there
Dialogue: 0,0:17:25.13,0:17:27.27,*Default,NTP,0000,0000,0000,,so you're welcome to go explore that stuff now
Dialogue: 0,0:17:27.57,0:17:29.60,*Default,NTP,0000,0000,0000,,or you can keep watching this playlist
Dialogue: 0,0:17:29.67,0:17:31.50,*Default,NTP,0000,0000,0000,,and hear the standard 61 a
Dialogue: 0,0:17:31.50,0:17:33.17,*Default,NTP,0000,0000,0000,,introduction to objects
Dialogue: 0,0:17:35.20,0:17:36.27,*Default,NTP,0000,0000,0000,,today we begin
Dialogue: 0,0:17:36.37,0:17:39.93,*Default,NTP,0000,0000,0000,,learning about object oriented programming
Dialogue: 0,0:17:40.57,0:17:42.13,*Default,NTP,0000,0000,0000,,so we already know that all
Dialogue: 0,0:17:42.33,0:17:44.60,*Default,NTP,0000,0000,0000,,values are objects in python
Dialogue: 0,0:17:45.17,0:17:46.20,*Default,NTP,0000,0000,0000,,but we're going to start to
Dialogue: 0,0:17:46.20,0:17:47.70,*Default,NTP,0000,0000,0000,,understand what that really means
Dialogue: 0,0:17:50.20,0:17:53.60,*Default,NTP,0000,0000,0000,,object oriented programming is a method for organizing
Dialogue: 0,0:17:53.70,0:17:55.37,*Default,NTP,0000,0000,0000,,modular programs
Dialogue: 0,0:17:55.77,0:17:57.87,*Default,NTP,0000,0000,0000,,meaning that you define each piece
Dialogue: 0,0:17:58.20,0:18:00.37,*Default,NTP,0000,0000,0000,,without worrying about the other pieces
Dialogue: 0,0:18:00.60,0:18:02.00,*Default,NTP,0000,0000,0000,,and then they all work together
Dialogue: 0,0:18:02.97,0:18:05.13,*Default,NTP,0000,0000,0000,,so that means we're going to worry about abstraction
Dialogue: 0,0:18:05.13,0:18:08.57,*Default,NTP,0000,0000,0000,,barriers and bundling together information
Dialogue: 0,0:18:08.80,0:18:10.67,*Default,NTP,0000,0000,0000,,and its related behavior
Dialogue: 0,0:18:12.50,0:18:14.90,*Default,NTP,0000,0000,0000,,object oriented programming is also a metaphor
Dialogue: 0,0:18:15.47,0:18:18.70,*Default,NTP,0000,0000,0000,,for computation using distributed state
Dialogue: 0,0:18:19.07,0:18:21.17,*Default,NTP,0000,0000,0000,,what do I mean by distributed state
Dialogue: 0,0:18:21.50,0:18:23.77,*Default,NTP,0000,0000,0000,,well we'll have a bunch of different objects
Dialogue: 0,0:18:23.77,0:18:26.47,*Default,NTP,0000,0000,0000,,and each of those will have its own local state
Dialogue: 0,0:18:27.20,0:18:28.67,*Default,NTP,0000,0000,0000,,so when we want to know
Dialogue: 0,0:18:28.77,0:18:30.17,*Default,NTP,0000,0000,0000,,what's going on in the program
Dialogue: 0,0:18:30.17,0:18:31.40,*Default,NTP,0000,0000,0000,,we have to inspect each
Dialogue: 0,0:18:31.40,0:18:33.20,*Default,NTP,0000,0000,0000,,object in order to figure that out
Dialogue: 0,0:18:34.17,0:18:35.77,*Default,NTP,0000,0000,0000,,each object will also know
Dialogue: 0,0:18:35.80,0:18:38.17,*Default,NTP,0000,0000,0000,,how to manage its own local state
Dialogue: 0,0:18:38.77,0:18:40.70,*Default,NTP,0000,0000,0000,,based on method calls
Dialogue: 0,0:18:41.10,0:18:43.07,*Default,NTP,0000,0000,0000,,so you call a method on an object
Dialogue: 0,0:18:43.17,0:18:44.93,*Default,NTP,0000,0000,0000,,and that might change its state
Dialogue: 0,0:18:45.13,0:18:47.93,*Default,NTP,0000,0000,0000,,the object knows how to update its state correctly
Dialogue: 0,0:18:48.87,0:18:51.20,*Default,NTP,0000,0000,0000,,and those method calls are best thought of
Dialogue: 0,0:18:51.33,0:18:54.60,*Default,NTP,0000,0000,0000,,as messages being passed between objects
Dialogue: 0,0:18:55.07,0:18:56.27,*Default,NTP,0000,0000,0000,,so that's the metaphor
Dialogue: 0,0:18:56.27,0:18:57.93,*Default,NTP,0000,0000,0000,,we have a bunch of different things
Dialogue: 0,0:18:58.73,0:19:01.67,*Default,NTP,0000,0000,0000,,objects pass messages amongst each other
Dialogue: 0,0:19:01.97,0:19:04.87,*Default,NTP,0000,0000,0000,,and each one is responsible for taking care of its own
Dialogue: 0,0:19:05.00,0:19:06.27,*Default,NTP,0000,0000,0000,,internal state
Dialogue: 0,0:19:06.37,0:19:08.13,*Default,NTP,0000,0000,0000,,so what's going on with itself
Dialogue: 0,0:19:09.47,0:19:12.77,*Default,NTP,0000,0000,0000,,several objects may be instances of a common type
Dialogue: 0,0:19:13.37,0:19:15.77,*Default,NTP,0000,0000,0000,,and different types may relate to each other
Dialogue: 0,0:19:16.20,0:19:18.30,*Default,NTP,0000,0000,0000,,so we're going to see examples of all this stuff
Dialogue: 0,0:19:18.60,0:19:21.50,*Default,NTP,0000,0000,0000,,but that's the basic idea that you want to understand
Dialogue: 0,0:19:21.50,0:19:23.57,*Default,NTP,0000,0000,0000,,when you think about object oriented programming
Dialogue: 0,0:19:24.87,0:19:26.60,*Default,NTP,0000,0000,0000,,and to support this metaphor
Dialogue: 0,0:19:26.60,0:19:29.33,*Default,NTP,0000,0000,0000,,we're gonna have specialized syntax and vocabulary
Dialogue: 0,0:19:29.60,0:19:30.97,*Default,NTP,0000,0000,0000,,in order to make this all
Dialogue: 0,0:19:31.40,0:19:33.10,*Default,NTP,0000,0000,0000,,make sense so
Dialogue: 0,0:19:33.77,0:19:35.50,*Default,NTP,0000,0000,0000,,we saw in last lecture
Dialogue: 0,0:19:35.50,0:19:37.30,*Default,NTP,0000,0000,0000,,that we might have different objects
Dialogue: 0,0:19:37.30,0:19:39.97,*Default,NTP,0000,0000,0000,,back then they were functions now they'll be objects
Dialogue: 0,0:19:40.10,0:19:42.60,*Default,NTP,0000,0000,0000,,that are john's account and stevens account
Dialogue: 0,0:19:43.13,0:19:46.13,*Default,NTP,0000,0000,0000,,and let's say we have another object john
Dialogue: 0,0:19:46.97,0:19:48.60,*Default,NTP,0000,0000,0000,,I made it tall because you know
Dialogue: 0,0:19:48.90,0:19:52.17,*Default,NTP,0000,0000,0000,,and so what happens in this metaphor
Dialogue: 0,0:19:52.17,0:19:52.33,*Default,NTP,0000,0000,0000,,is
Dialogue: 0,0:19:52.33,0:19:54.93,*Default,NTP,0000,0000,0000,,that if john wants to withdraw money from his account
Dialogue: 0,0:19:54.93,0:19:56.17,*Default,NTP,0000,0000,0000,,to give it to steven
Dialogue: 0,0:19:56.87,0:19:58.07,*Default,NTP,0000,0000,0000,,then there will be a message
Dialogue: 0,0:19:58.07,0:20:00.07,*Default,NTP,0000,0000,0000,,passed from john to the account
Dialogue: 0,0:20:00.20,0:20:02.10,*Default,NTP,0000,0000,0000,,the accounts business is to
Dialogue: 0,0:20:02.10,0:20:04.47,*Default,NTP,0000,0000,0000,,make sure that it knows how to withdraw money
Dialogue: 0,0:20:04.57,0:20:07.13,*Default,NTP,0000,0000,0000,,and update its balance correctly
Dialogue: 0,0:20:07.70,0:20:08.80,*Default,NTP,0000,0000,0000,,as one as john's done that
Dialogue: 0,0:20:08.80,0:20:11.27,*Default,NTP,0000,0000,0000,,then I might send another message to stephen's account
Dialogue: 0,0:20:11.33,0:20:13.50,*Default,NTP,0000,0000,0000,,saying a deposit $10
Dialogue: 0,0:20:13.50,0:20:15.97,*Default,NTP,0000,0000,0000,,and then stephen's accounts balance will be updated
Dialogue: 0,0:20:16.40,0:20:18.40,*Default,NTP,0000,0000,0000,,now the balance for each account is stored
Dialogue: 0,0:20:18.40,0:20:19.70,*Default,NTP,0000,0000,0000,,within the object
Dialogue: 0,0:20:20.17,0:20:23.30,*Default,NTP,0000,0000,0000,,and john can ask for it using a message as necessary
Dialogue: 0,0:20:23.93,0:20:24.80,*Default,NTP,0000,0000,0000,,and the idea is
Dialogue: 0,0:20:24.80,0:20:26.57,*Default,NTP,0000,0000,0000,,that all these different objects might have other
Dialogue: 0,0:20:26.57,0:20:27.73,*Default,NTP,0000,0000,0000,,messages coming in
Dialogue: 0,0:20:28.17,0:20:30.67,*Default,NTP,0000,0000,0000,,and they might send messages to other objects as well
Dialogue: 0,0:20:30.67,0:20:32.77,*Default,NTP,0000,0000,0000,,so john's account might occasionally say
Dialogue: 0,0:20:32.93,0:20:34.50,*Default,NTP,0000,0000,0000,,after many withdrawals
Dialogue: 0,0:20:34.73,0:20:37.73,*Default,NTP,0000,0000,0000,,john is probably time to apply for a loan
Dialogue: 0,0:20:38.93,0:20:40.90,*Default,NTP,0000,0000,0000,,so that's the idea that we want to create
Dialogue: 0,0:20:41.00,0:20:42.00,*Default,NTP,0000,0000,0000,,when we write code
Dialogue: 0,0:20:42.00,0:20:45.87,*Default,NTP,0000,0000,0000,,in an object oriented programming language like python
Dialogue: 0,0:20:48.30,0:20:49.27,*Default,NTP,0000,0000,0000,,fundamentally
Dialogue: 0,0:20:49.70,0:20:52.80,*Default,NTP,0000,0000,0000,,objects are organized according to classes
Dialogue: 0,0:20:53.10,0:20:56.77,*Default,NTP,0000,0000,0000,,a class serves as a template for all of its instances
Dialogue: 0,0:20:56.90,0:21:00.17,*Default,NTP,0000,0000,0000,,and each object is an instance of some class
Dialogue: 0,0:21:00.77,0:21:01.77,*Default,NTP,0000,0000,0000,,so we have built in
Dialogue: 0,0:21:01.77,0:21:03.60,*Default,NTP,0000,0000,0000,,classes that we've seen along the way
Dialogue: 0,0:21:03.80,0:21:06.57,*Default,NTP,0000,0000,0000,,but now we're going to start defining our own classes
Dialogue: 0,0:21:07.53,0:21:08.80,*Default,NTP,0000,0000,0000,,so the idea is
Dialogue: 0,0:21:08.97,0:21:11.73,*Default,NTP,0000,0000,0000,,that all bank accounts will have a balance
Dialogue: 0,0:21:11.90,0:21:13.27,*Default,NTP,0000,0000,0000,,and an account holder
Dialogue: 0,0:21:13.67,0:21:15.80,*Default,NTP,0000,0000,0000,,that's what makes a bank account a bank account
Dialogue: 0,0:21:16.27,0:21:17.67,*Default,NTP,0000,0000,0000,,so the account class
Dialogue: 0,0:21:17.70,0:21:20.17,*Default,NTP,0000,0000,0000,,should make sure that everyone of its instances
Dialogue: 0,0:21:20.17,0:21:21.53,*Default,NTP,0000,0000,0000,,has those attributes
Dialogue: 0,0:21:21.53,0:21:22.93,*Default,NTP,0000,0000,0000,,what's this current balance
Dialogue: 0,0:21:23.00,0:21:24.77,*Default,NTP,0000,0000,0000,,and what's who's the account holder
Dialogue: 0,0:21:25.47,0:21:28.20,*Default,NTP,0000,0000,0000,,that'll happen when we create a new instance
Dialogue: 0,0:21:28.57,0:21:30.50,*Default,NTP,0000,0000,0000,,and here's what the code is going to look like
Dialogue: 0,0:21:30.70,0:21:32.80,*Default,NTP,0000,0000,0000,,we'll say I'm creating an account
Dialogue: 0,0:21:33.13,0:21:35.50,*Default,NTP,0000,0000,0000,,I'll pass in the account holder jim
Dialogue: 0,0:21:35.87,0:21:37.87,*Default,NTP,0000,0000,0000,,and I'll bind the resulting object
Dialogue: 0,0:21:37.87,0:21:40.30,*Default,NTP,0000,0000,0000,,which is an instance of the account class
Dialogue: 0,0:21:41.07,0:21:42.30,*Default,NTP,0000,0000,0000,,to the name a
Dialogue: 0,0:21:44.40,0:21:45.50,*Default,NTP,0000,0000,0000,,then if I ask
Dialogue: 0,0:21:45.70,0:21:47.80,*Default,NTP,0000,0000,0000,,well who is the holder of a
Dialogue: 0,0:21:48.10,0:21:49.70,*Default,NTP,0000,0000,0000,,the account holder is gym
Dialogue: 0,0:21:49.87,0:21:50.90,*Default,NTP,0000,0000,0000,,I set that
Dialogue: 0,0:21:51.17,0:21:53.97,*Default,NTP,0000,0000,0000,,when I call the account class to create the object
Dialogue: 0,0:21:54.20,0:21:55.97,*Default,NTP,0000,0000,0000,,and now I can access it later
Dialogue: 0,0:21:55.97,0:21:58.17,*Default,NTP,0000,0000,0000,,as an attribute of that account
Dialogue: 0,0:21:59.20,0:22:00.67,*Default,NTP,0000,0000,0000,,and what's the balance ball of jim
Dialogue: 0,0:22:00.67,0:22:02.00,*Default,NTP,0000,0000,0000,,so far doesn't have anything
Dialogue: 0,0:22:03.20,0:22:05.80,*Default,NTP,0000,0000,0000,,so how's it jim gonna have some money in his account
Dialogue: 0,0:22:05.87,0:22:08.07,*Default,NTP,0000,0000,0000,,what we want all bank accounts to have
Dialogue: 0,0:22:08.07,0:22:10.57,*Default,NTP,0000,0000,0000,,withdraw and deposit behaviors
Dialogue: 0,0:22:10.77,0:22:13.07,*Default,NTP,0000,0000,0000,,and all bank accounts should work the same way
Dialogue: 0,0:22:13.10,0:22:15.77,*Default,NTP,0000,0000,0000,,which is why they're all instances of the same class
Dialogue: 0,0:22:16.37,0:22:19.37,*Default,NTP,0000,0000,0000,,so if I deposit $15
Dialogue: 0,0:22:19.77,0:22:22.00,*Default,NTP,0000,0000,0000,,into this bank account which we've named a
Dialogue: 0,0:22:22.20,0:22:23.50,*Default,NTP,0000,0000,0000,,as a gym's account
Dialogue: 0,0:22:23.77,0:22:26.37,*Default,NTP,0000,0000,0000,,now we'll get the balance back of 15
Dialogue: 0,0:22:27.00,0:22:28.50,*Default,NTP,0000,0000,0000,,and if we would draw $10
Dialogue: 0,0:22:28.50,0:22:30.30,*Default,NTP,0000,0000,0000,,then the balance goes down to five
Dialogue: 0,0:22:30.67,0:22:32.73,*Default,NTP,0000,0000,0000,,what's the balance now it's five
Dialogue: 0,0:22:33.53,0:22:35.87,*Default,NTP,0000,0000,0000,,so notice that some of these look like call expressions
Dialogue: 0,0:22:35.87,0:22:37.93,*Default,NTP,0000,0000,0000,,and some just access a value
Dialogue: 0,0:22:37.93,0:22:39.60,*Default,NTP,0000,0000,0000,,that's part of the object
Dialogue: 0,0:22:40.80,0:22:44.30,*Default,NTP,0000,0000,0000,,if I always draw $10 again I will have insuvision funds
Dialogue: 0,0:22:45.40,0:22:47.97,*Default,NTP,0000,0000,0000,,so there's two different ways we could realize this
Dialogue: 0,0:22:47.97,0:22:51.37,*Default,NTP,0000,0000,0000,,we could put deposit in withdraw methods as
Dialogue: 0,0:22:51.37,0:22:53.37,*Default,NTP,0000,0000,0000,,part of every single account
Dialogue: 0,0:22:53.37,0:22:54.93,*Default,NTP,0000,0000,0000,,but that's not what we're gonna do
Dialogue: 0,0:22:55.33,0:22:58.37,*Default,NTP,0000,0000,0000,,instead we'll make sure that all accounts share
Dialogue: 0,0:22:58.70,0:23:01.47,*Default,NTP,0000,0000,0000,,the same withdraw and deposit methods
Dialogue: 0,0:23:01.47,0:23:03.87,*Default,NTP,0000,0000,0000,,at our way we can guarantee that they all behave
Dialogue: 0,0:23:03.93,0:23:04.87,*Default,NTP,0000,0000,0000,,in the same way
Dialogue: 0,0:23:04.87,0:23:06.00,*Default,NTP,0000,0000,0000,,which is what we want
Dialogue: 0,0:23:07.93,0:23:09.37,*Default,NTP,0000,0000,0000,,class statements
Dialogue: 0,0:23:09.53,0:23:12.47,*Default,NTP,0000,0000,0000,,let you create any type of data you want
Dialogue: 0,0:23:13.70,0:23:15.77,*Default,NTP,0000,0000,0000,,the class statement looks like this
Dialogue: 0,0:23:16.17,0:23:18.57,*Default,NTP,0000,0000,0000,,you say class give the class a name
Dialogue: 0,0:23:18.97,0:23:21.20,*Default,NTP,0000,0000,0000,,and then write a suite of other statements
Dialogue: 0,0:23:22.30,0:23:25.07,*Default,NTP,0000,0000,0000,,a class statement creates a new class
Dialogue: 0,0:23:25.10,0:23:27.50,*Default,NTP,0000,0000,0000,,which can be the type of some new object
Dialogue: 0,0:23:28.17,0:23:30.13,*Default,NTP,0000,0000,0000,,and it binds that class to name
Dialogue: 0,0:23:30.27,0:23:32.57,*Default,NTP,0000,0000,0000,,in the first frame of the current environment
Dialogue: 0,0:23:33.70,0:23:34.77,*Default,NTP,0000,0000,0000,,within the suite
Dialogue: 0,0:23:34.90,0:23:36.90,*Default,NTP,0000,0000,0000,,assignment and deaf statements
Dialogue: 0,0:23:36.90,0:23:39.50,*Default,NTP,0000,0000,0000,,create attributes of the class
Dialogue: 0,0:23:40.20,0:23:42.93,*Default,NTP,0000,0000,0000,,normally they would create names and frames
Dialogue: 0,0:23:43.13,0:23:45.00,*Default,NTP,0000,0000,0000,,but class statements are special
Dialogue: 0,0:23:47.17,0:23:48.70,*Default,NTP,0000,0000,0000,,so the suite is executed
Dialogue: 0,0:23:48.70,0:23:51.37,*Default,NTP,0000,0000,0000,,immediately when the class statement is executed
Dialogue: 0,0:23:52.40,0:23:54.87,*Default,NTP,0000,0000,0000,,so if I define a class called clown
Dialogue: 0,0:23:55.20,0:23:58.27,*Default,NTP,0000,0000,0000,,and have an assignment and a def statement within there
Dialogue: 0,0:23:59.77,0:24:00.57,*Default,NTP,0000,0000,0000,,then
Dialogue: 0,0:24:00.97,0:24:04.80,*Default,NTP,0000,0000,0000,,nose and dance become attributes of the class
Dialogue: 0,0:24:04.80,0:24:06.73,*Default,NTP,0000,0000,0000,,with their attribute values
Dialogue: 0,0:24:06.87,0:24:09.53,*Default,NTP,0000,0000,0000,,being whatever was assigned or defined
Dialogue: 0,0:24:10.67,0:24:14.33,*Default,NTP,0000,0000,0000,,so clown dot nose is big and red and clown dot dance
Dialogue: 0,0:24:14.67,0:24:17.10,*Default,NTP,0000,0000,0000,,called returns no thanks
Dialogue: 0,0:24:18.97,0:24:21.87,*Default,NTP,0000,0000,0000,,now these are not typical ways in which you use
Dialogue: 0,0:24:21.87,0:24:22.93,*Default,NTP,0000,0000,0000,,class statements
Dialogue: 0,0:24:23.07,0:24:24.67,*Default,NTP,0000,0000,0000,,but I just wanted to tell you what it
Dialogue: 0,0:24:24.67,0:24:26.40,*Default,NTP,0000,0000,0000,,means to write a class statement
Dialogue: 0,0:24:26.70,0:24:28.33,*Default,NTP,0000,0000,0000,,and the rest of this lecture
Dialogue: 0,0:24:28.40,0:24:31.27,*Default,NTP,0000,0000,0000,,will go through the details of how to build a class
Dialogue: 0,0:24:31.27,0:24:32.97,*Default,NTP,0000,0000,0000,,so that it works effectively
Dialogue: 0,0:24:33.97,0:24:35.47,*Default,NTP,0000,0000,0000,,when you create a class
Dialogue: 0,0:24:35.80,0:24:37.17,*Default,NTP,0000,0000,0000,,it is bound to a name
Dialogue: 0,0:24:37.47,0:24:39.57,*Default,NTP,0000,0000,0000,,and those names are usually an upper case
Dialogue: 0,0:24:39.70,0:24:42.40,*Default,NTP,0000,0000,0000,,and you'll see the class value printed out in this way
Dialogue: 0,0:24:44.67,0:24:48.00,*Default,NTP,0000,0000,0000,,now the whole point of classes is in order to let you
Dialogue: 0,0:24:48.00,0:24:50.87,*Default,NTP,0000,0000,0000,,construct objects of that class
Dialogue: 0,0:24:52.20,0:24:55.10,*Default,NTP,0000,0000,0000,,so what we want to do is define an account class
Dialogue: 0,0:24:55.60,0:24:57.90,*Default,NTP,0000,0000,0000,,that allows us to create bank accounts
Dialogue: 0,0:24:58.47,0:24:59.50,*Default,NTP,0000,0000,0000,,and here's an idea
Dialogue: 0,0:24:59.50,0:25:02.73,*Default,NTP,0000,0000,0000,,all bank accounts have a balance and an account holder
Dialogue: 0,0:25:03.47,0:25:05.57,*Default,NTP,0000,0000,0000,,so the account class should do something to make sure
Dialogue: 0,0:25:05.57,0:25:06.77,*Default,NTP,0000,0000,0000,,that these attributes
Dialogue: 0,0:25:06.77,0:25:09.87,*Default,NTP,0000,0000,0000,,appear on each one of its instances
Dialogue: 0,0:25:10.70,0:25:14.30,*Default,NTP,0000,0000,0000,,so we'd like it to be that if I have an account for jim
Dialogue: 0,0:25:14.33,0:25:16.10,*Default,NTP,0000,0000,0000,,and I bind that to the name a
Dialogue: 0,0:25:17.07,0:25:18.70,*Default,NTP,0000,0000,0000,,it creates an object
Dialogue: 0,0:25:18.70,0:25:21.17,*Default,NTP,0000,0000,0000,,that has both a balance and an account holder
Dialogue: 0,0:25:22.57,0:25:25.37,*Default,NTP,0000,0000,0000,,so here we're calling our class as you can see
Dialogue: 0,0:25:25.53,0:25:28.37,*Default,NTP,0000,0000,0000,,and that's how we create instances of the class
Dialogue: 0,0:25:29.07,0:25:30.17,*Default,NTP,0000,0000,0000,,when a class is called
Dialogue: 0,0:25:30.17,0:25:32.33,*Default,NTP,0000,0000,0000,,a new instance of the class is created
Dialogue: 0,0:25:32.77,0:25:34.87,*Default,NTP,0000,0000,0000,,it starts out as a blank slate
Dialogue: 0,0:25:35.33,0:25:37.57,*Default,NTP,0000,0000,0000,,and it's up to the class to fill it it
Dialogue: 0,0:25:38.93,0:25:42.70,*Default,NTP,0000,0000,0000,,the specially named in a two method of the class
Dialogue: 0,0:25:42.77,0:25:46.67,*Default,NTP,0000,0000,0000,,is called with the new object as its first argument
Dialogue: 0,0:25:47.20,0:25:48.73,*Default,NTP,0000,0000,0000,,bound to the name self
Dialogue: 0,0:25:49.67,0:25:52.13,*Default,NTP,0000,0000,0000,,along with any additional arguments provided
Dialogue: 0,0:25:52.13,0:25:53.47,*Default,NTP,0000,0000,0000,,in the call expression
Dialogue: 0,0:25:53.90,0:25:56.53,*Default,NTP,0000,0000,0000,,here we have jim provided in the call expression
Dialogue: 0,0:25:58.13,0:26:01.67,*Default,NTP,0000,0000,0000,,so if we look at the definition of an account class
Dialogue: 0,0:26:01.67,0:26:02.93,*Default,NTP,0000,0000,0000,,what we're going to see
Dialogue: 0,0:26:03.53,0:26:05.77,*Default,NTP,0000,0000,0000,,is a def statement within it
Dialogue: 0,0:26:05.77,0:26:07.90,*Default,NTP,0000,0000,0000,,for this special name called in it
Dialogue: 0,0:26:08.40,0:26:10.70,*Default,NTP,0000,0000,0000,,which takes his arguments self
Dialogue: 0,0:26:11.37,0:26:12.53,*Default,NTP,0000,0000,0000,,that's going to be balanced
Dialogue: 0,0:26:12.53,0:26:14.30,*Default,NTP,0000,0000,0000,,to the account object itself
Dialogue: 0,0:26:14.97,0:26:16.70,*Default,NTP,0000,0000,0000,,and anything else we need to know
Dialogue: 0,0:26:16.70,0:26:18.40,*Default,NTP,0000,0000,0000,,in order to create this account
Dialogue: 0,0:26:20.77,0:26:23.60,*Default,NTP,0000,0000,0000,,now the object which starts out as a blank slate
Dialogue: 0,0:26:23.70,0:26:27.50,*Default,NTP,0000,0000,0000,,is passed in and bound to the self name
Dialogue: 0,0:26:28.40,0:26:30.93,*Default,NTP,0000,0000,0000,,the other names are bound to whatever else is passed in
Dialogue: 0,0:26:30.93,0:26:32.90,*Default,NTP,0000,0000,0000,,in this case we passed in jim
Dialogue: 0,0:26:33.10,0:26:34.80,*Default,NTP,0000,0000,0000,,and that's our account holder
Dialogue: 0,0:26:36.57,0:26:39.60,*Default,NTP,0000,0000,0000,,then what happens is that the body of this function is
Dialogue: 0,0:26:39.60,0:26:40.53,*Default,NTP,0000,0000,0000,,executed
Dialogue: 0,0:26:41.30,0:26:44.50,*Default,NTP,0000,0000,0000,,and that allows us to assign
Dialogue: 0,0:26:44.70,0:26:48.87,*Default,NTP,0000,0000,0000,,attribute values to the new object that was created
Dialogue: 0,0:26:48.87,0:26:50.00,*Default,NTP,0000,0000,0000,,the new instance
Dialogue: 0,0:26:50.60,0:26:52.50,*Default,NTP,0000,0000,0000,,so self dot balance equal zero
Dialogue: 0,0:26:52.50,0:26:53.30,*Default,NTP,0000,0000,0000,,means that
Dialogue: 0,0:26:53.30,0:26:56.67,*Default,NTP,0000,0000,0000,,as part of this account now there's a zero balance
Dialogue: 0,0:26:57.10,0:27:00.13,*Default,NTP,0000,0000,0000,,and self dot holder being the account holder
Dialogue: 0,0:27:00.87,0:27:05.27,*Default,NTP,0000,0000,0000,,binds holder as an attribute with attribute value gym
Dialogue: 0,0:27:05.77,0:27:07.80,*Default,NTP,0000,0000,0000,,and now we have something useful
Dialogue: 0,0:27:08.27,0:27:09.57,*Default,NTP,0000,0000,0000,,it's not just a blank slate
Dialogue: 0,0:27:09.57,0:27:10.07,*Default,NTP,0000,0000,0000,,it's something
Dialogue: 0,0:27:10.07,0:27:11.57,*Default,NTP,0000,0000,0000,,that has a balance and an account holder
Dialogue: 0,0:27:11.57,0:27:13.90,*Default,NTP,0000,0000,0000,,which is the idea that we wanted to implement
Dialogue: 0,0:27:14.10,0:27:15.80,*Default,NTP,0000,0000,0000,,and this is how we implement it
Dialogue: 0,0:27:16.70,0:27:18.57,*Default,NTP,0000,0000,0000,,in it is a special name
Dialogue: 0,0:27:18.57,0:27:20.47,*Default,NTP,0000,0000,0000,,and we always use that same special name
Dialogue: 0,0:27:20.60,0:27:22.37,*Default,NTP,0000,0000,0000,,it's called a constructor
Dialogue: 0,0:27:22.53,0:27:24.07,*Default,NTP,0000,0000,0000,,so you can see the relationship
Dialogue: 0,0:27:24.07,0:27:25.60,*Default,NTP,0000,0000,0000,,between data abstraction
Dialogue: 0,0:27:25.93,0:27:28.93,*Default,NTP,0000,0000,0000,,and the object oriented programming system in python
Dialogue: 0,0:27:30.47,0:27:35.33,*Default,NTP,0000,0000,0000,,and it's special because whenever the class is called
Dialogue: 0,0:27:35.53,0:27:37.33,*Default,NTP,0000,0000,0000,,this gets called automatically
Dialogue: 0,0:27:37.53,0:27:40.10,*Default,NTP,0000,0000,0000,,with these arguments as described here
Dialogue: 0,0:27:42.57,0:27:44.93,*Default,NTP,0000,0000,0000,,so now once I do all that work
Dialogue: 0,0:27:45.07,0:27:47.73,*Default,NTP,0000,0000,0000,,if I look up the holder for a I'll get jim
Dialogue: 0,0:27:47.73,0:27:49.90,*Default,NTP,0000,0000,0000,,and if I look up the balance I'll get zero
Dialogue: 0,0:27:51.00,0:27:54.53,*Default,NTP,0000,0000,0000,,now let's say a word about the identity of objects
Dialogue: 0,0:27:54.90,0:27:57.57,*Default,NTP,0000,0000,0000,,every object that is an instance of a user defined
Dialogue: 0,0:27:57.57,0:28:00.33,*Default,NTP,0000,0000,0000,,class has a unique identity
Dialogue: 0,0:28:00.33,0:28:01.70,*Default,NTP,0000,0000,0000,,it's its own thing
Dialogue: 0,0:28:02.70,0:28:03.80,*Default,NTP,0000,0000,0000,,so a fi akite
Dialogue: 0,0:28:03.80,0:28:05.17,*Default,NTP,0000,0000,0000,,create an account for jim
Dialogue: 0,0:28:05.17,0:28:06.80,*Default,NTP,0000,0000,0000,,and a separate account for jack
Dialogue: 0,0:28:07.30,0:28:10.00,*Default,NTP,0000,0000,0000,,then a and b are bound to different accounts
Dialogue: 0,0:28:10.37,0:28:13.07,*Default,NTP,0000,0000,0000,,every call to account creates a new account instance
Dialogue: 0,0:28:13.07,0:28:16.17,*Default,NTP,0000,0000,0000,,and there is only one account class but many instances
Dialogue: 0,0:28:17.33,0:28:19.90,*Default,NTP,0000,0000,0000,,so if I look up the balance of a I'll get zero
Dialogue: 0,0:28:19.90,0:28:22.47,*Default,NTP,0000,0000,0000,,if I look up the holder of b I'll get jack
Dialogue: 0,0:28:22.73,0:28:25.73,*Default,NTP,0000,0000,0000,,they both have their own balance and their own holder
Dialogue: 0,0:28:27.27,0:28:29.37,*Default,NTP,0000,0000,0000,,identity operators is and is not
Dialogue: 0,0:28:29.50,0:28:32.40,*Default,NTP,0000,0000,0000,,test if two expressions evaluate to the same object
Dialogue: 0,0:28:33.27,0:28:35.73,*Default,NTP,0000,0000,0000,,so a is a is true a is not b
Dialogue: 0,0:28:36.40,0:28:37.53,*Default,NTP,0000,0000,0000,,is also true
Dialogue: 0,0:28:38.50,0:28:40.40,*Default,NTP,0000,0000,0000,,and binding an object to a new name
Dialogue: 0,0:28:40.47,0:28:42.97,*Default,NTP,0000,0000,0000,,using assignment does not create a new object
Dialogue: 0,0:28:42.97,0:28:45.57,*Default,NTP,0000,0000,0000,,but instead just gives another name to the same object
Dialogue: 0,0:28:45.90,0:28:47.20,*Default,NTP,0000,0000,0000,,this has been true for every
Dialogue: 0,0:28:47.20,0:28:48.90,*Default,NTP,0000,0000,0000,,example we've looked at in the course
Dialogue: 0,0:28:49.53,0:28:52.87,*Default,NTP,0000,0000,0000,,and it's true for user to find instances as well
Dialogue: 0,0:28:53.13,0:28:54.60,*Default,NTP,0000,0000,0000,,if I say c equals a
Dialogue: 0,0:28:54.80,0:28:56.93,*Default,NTP,0000,0000,0000,,c and a refer to the same thing
Dialogue: 0,0:28:57.07,0:29:00.00,*Default,NTP,0000,0000,0000,,so they always have the same balance of the same holder
Dialogue: 0,0:29:00.10,0:29:01.93,*Default,NTP,0000,0000,0000,,because they're the same account
Dialogue: 0,0:29:04.27,0:29:05.70,*Default,NTP,0000,0000,0000,,the last piece we need
Dialogue: 0,0:29:05.70,0:29:08.80,*Default,NTP,0000,0000,0000,,in order to finish implementing a class is to add
Dialogue: 0,0:29:08.80,0:29:10.50,*Default,NTP,0000,0000,0000,,additional methods
Dialogue: 0,0:29:11.50,0:29:14.00,*Default,NTP,0000,0000,0000,,methods are what represent the messages
Dialogue: 0,0:29:14.30,0:29:16.10,*Default,NTP,0000,0000,0000,,that an object will accept
Dialogue: 0,0:29:16.90,0:29:18.70,*Default,NTP,0000,0000,0000,,and they're just functions
Dialogue: 0,0:29:18.70,0:29:20.80,*Default,NTP,0000,0000,0000,,they're defined within the class statement
Dialogue: 0,0:29:21.17,0:29:22.27,*Default,NTP,0000,0000,0000,,so let's take a look
Dialogue: 0,0:29:23.07,0:29:25.57,*Default,NTP,0000,0000,0000,,methods are defined in the suite of the class statement
Dialogue: 0,0:29:25.67,0:29:27.10,*Default,NTP,0000,0000,0000,,so we write class account
Dialogue: 0,0:29:27.10,0:29:28.93,*Default,NTP,0000,0000,0000,,and then we define the in it method
Dialogue: 0,0:29:29.00,0:29:31.00,*Default,NTP,0000,0000,0000,,and then we can define other methods
Dialogue: 0,0:29:31.13,0:29:33.07,*Default,NTP,0000,0000,0000,,so here's a deposit method
Dialogue: 0,0:29:33.37,0:29:35.50,*Default,NTP,0000,0000,0000,,it takes in an object
Dialogue: 0,0:29:35.57,0:29:38.13,*Default,NTP,0000,0000,0000,,of the instance of the class account
Dialogue: 0,0:29:38.33,0:29:40.30,*Default,NTP,0000,0000,0000,,and it takes some amount to deposit
Dialogue: 0,0:29:40.73,0:29:43.20,*Default,NTP,0000,0000,0000,,and what it does is it changes the balance
Dialogue: 0,0:29:43.70,0:29:45.47,*Default,NTP,0000,0000,0000,,to be whatever the balance was
Dialogue: 0,0:29:45.73,0:29:47.70,*Default,NTP,0000,0000,0000,,plus the amount that was passed it
Dialogue: 0,0:29:48.40,0:29:50.27,*Default,NTP,0000,0000,0000,,now it's important to pay
Dialogue: 0,0:29:50.37,0:29:52.70,*Default,NTP,0000,0000,0000,,careful attention to what's going on here
Dialogue: 0,0:29:53.67,0:29:57.53,*Default,NTP,0000,0000,0000,,self is a name that's going to refer to an instance
Dialogue: 0,0:29:57.80,0:29:59.57,*Default,NTP,0000,0000,0000,,of the account class
Dialogue: 0,0:29:59.90,0:30:02.20,*Default,NTP,0000,0000,0000,,that's being deposited into
Dialogue: 0,0:30:03.33,0:30:03.80,*Default,NTP,0000,0000,0000,,when we
Dialogue: 0,0:30:03.80,0:30:06.73,*Default,NTP,0000,0000,0000,,change an attribute using this assignment statement
Dialogue: 0,0:30:07.17,0:30:09.73,*Default,NTP,0000,0000,0000,,what we're doing is we're changing the balance of that
Dialogue: 0,0:30:09.73,0:30:13.33,*Default,NTP,0000,0000,0000,,particular account at particular instance
Dialogue: 0,0:30:14.37,0:30:15.97,*Default,NTP,0000,0000,0000,,to whatever its balance was
Dialogue: 0,0:30:15.97,0:30:18.13,*Default,NTP,0000,0000,0000,,plus the amount as being deposit
Dialogue: 0,0:30:18.47,0:30:20.67,*Default,NTP,0000,0000,0000,,so a mount doesn't need it in itself in front of it
Dialogue: 0,0:30:20.67,0:30:22.10,*Default,NTP,0000,0000,0000,,because it's passed in
Dialogue: 0,0:30:22.70,0:30:25.40,*Default,NTP,0000,0000,0000,,as an argument to this deposit method
Dialogue: 0,0:30:26.90,0:30:29.17,*Default,NTP,0000,0000,0000,,then we're going to return the balance
Dialogue: 0,0:30:29.50,0:30:32.17,*Default,NTP,0000,0000,0000,,of the account that was passed in which we call itself
Dialogue: 0,0:30:32.80,0:30:34.50,*Default,NTP,0000,0000,0000,,and that's what depositing is
Dialogue: 0,0:30:34.80,0:30:35.97,*Default,NTP,0000,0000,0000,,what about withdrawing
Dialogue: 0,0:30:35.97,0:30:36.10,*Default,NTP,0000,0000,0000,,well
Dialogue: 0,0:30:36.10,0:30:38.67,*Default,NTP,0000,0000,0000,,that's slightly more complicated but the same idea
Dialogue: 0,0:30:39.30,0:30:40.33,*Default,NTP,0000,0000,0000,,we'll pass him
Dialogue: 0,0:30:40.77,0:30:43.30,*Default,NTP,0000,0000,0000,,an instance of the account class called self
Dialogue: 0,0:30:44.07,0:30:46.10,*Default,NTP,0000,0000,0000,,and then the amount that we want to withdraw
Dialogue: 0,0:30:46.47,0:30:48.57,*Default,NTP,0000,0000,0000,,we'll check and see if that amount is too large
Dialogue: 0,0:30:48.57,0:30:51.30,*Default,NTP,0000,0000,0000,,if so the more we turn insufficient funds
Dialogue: 0,0:30:51.50,0:30:52.30,*Default,NTP,0000,0000,0000,,otherwise
Dialogue: 0,0:30:53.07,0:30:55.60,*Default,NTP,0000,0000,0000,,we'll set the balance to be whatever the balance was
Dialogue: 0,0:30:55.77,0:30:56.97,*Default,NTP,0000,0000,0000,,minus the amount
Dialogue: 0,0:30:57.53,0:30:59.07,*Default,NTP,0000,0000,0000,,and then we'll return the balance
Dialogue: 0,0:31:00.17,0:31:01.07,*Default,NTP,0000,0000,0000,,and then we're done
Dialogue: 0,0:31:01.73,0:31:04.07,*Default,NTP,0000,0000,0000,,so now we've implemented the account class
Dialogue: 0,0:31:04.07,0:31:05.07,*Default,NTP,0000,0000,0000,,in such a way
Dialogue: 0,0:31:05.20,0:31:07.90,*Default,NTP,0000,0000,0000,,that it starts out with a balance and an account holder
Dialogue: 0,0:31:07.90,0:31:09.93,*Default,NTP,0000,0000,0000,,all that's set up with the constructor
Dialogue: 0,0:31:10.53,0:31:12.90,*Default,NTP,0000,0000,0000,,and then we can deposit amounts into it
Dialogue: 0,0:31:12.90,0:31:14.53,*Default,NTP,0000,0000,0000,,and we can withdraw amounts
Dialogue: 0,0:31:16.10,0:31:18.87,*Default,NTP,0000,0000,0000,,so these deaf statements create function objects
Dialogue: 0,0:31:18.87,0:31:19.73,*Default,NTP,0000,0000,0000,,as always
Dialogue: 0,0:31:20.20,0:31:23.70,*Default,NTP,0000,0000,0000,,there's no new rule for executing a deaf statement
Dialogue: 0,0:31:24.47,0:31:27.70,*Default,NTP,0000,0000,0000,,but their names aren't bound in a particular frame
Dialogue: 0,0:31:28.00,0:31:32.33,*Default,NTP,0000,0000,0000,,instead they're bound as attributes of the class
Dialogue: 0,0:31:32.57,0:31:37.07,*Default,NTP,0000,0000,0000,,so the account class now has three attributes in it
Dialogue: 0,0:31:37.10,0:31:39.60,*Default,NTP,0000,0000,0000,,deposit and withdraw
Dialogue: 0,0:31:41.40,0:31:44.40,*Default,NTP,0000,0000,0000,,okay so now that we've defined our methods
Dialogue: 0,0:31:44.67,0:31:47.40,*Default,NTP,0000,0000,0000,,what can we do with them well we can invoke them
Dialogue: 0,0:31:48.13,0:31:51.00,*Default,NTP,0000,0000,0000,,so all invoked methods have access to the object
Dialogue: 0,0:31:51.97,0:31:53.77,*Default,NTP,0000,0000,0000,,the methods being invoked on
Dialogue: 0,0:31:53.97,0:31:55.97,*Default,NTP,0000,0000,0000,,via this self parameter
Dialogue: 0,0:31:55.97,0:31:56.97,*Default,NTP,0000,0000,0000,,so self
Dialogue: 0,0:31:57.20,0:32:00.00,*Default,NTP,0000,0000,0000,,is a name we give to the object that we can manipulate
Dialogue: 0,0:32:00.00,0:32:01.77,*Default,NTP,0000,0000,0000,,look up its balance whatever
Dialogue: 0,0:32:02.60,0:32:05.80,*Default,NTP,0000,0000,0000,,and so all these different methods have access
Dialogue: 0,0:32:05.93,0:32:08.20,*Default,NTP,0000,0000,0000,,and can manipulate the object state
Dialogue: 0,0:32:08.47,0:32:10.97,*Default,NTP,0000,0000,0000,,so there's only one balance for every account
Dialogue: 0,0:32:11.13,0:32:13.47,*Default,NTP,0000,0000,0000,,but we can deposit and withdraw from it with
Dialogue: 0,0:32:13.47,0:32:14.70,*Default,NTP,0000,0000,0000,,two different methods
Dialogue: 0,0:32:15.33,0:32:17.87,*Default,NTP,0000,0000,0000,,okay so here's our count class
Dialogue: 0,0:32:17.87,0:32:19.57,*Default,NTP,0000,0000,0000,,I've abbreviated some of it
Dialogue: 0,0:32:19.57,0:32:21.70,*Default,NTP,0000,0000,0000,,because it's not important for this example
Dialogue: 0,0:32:22.27,0:32:23.50,*Default,NTP,0000,0000,0000,,what is important
Dialogue: 0,0:32:23.70,0:32:27.10,*Default,NTP,0000,0000,0000,,is that we define deposit with two arguments self
Dialogue: 0,0:32:27.13,0:32:29.13,*Default,NTP,0000,0000,0000,,and then the amount that we want to pass it
Dialogue: 0,0:32:29.77,0:32:31.87,*Default,NTP,0000,0000,0000,,and then we use dot notation
Dialogue: 0,0:32:32.33,0:32:34.50,*Default,NTP,0000,0000,0000,,in order to invoke this method
Dialogue: 0,0:32:34.67,0:32:35.60,*Default,NTP,0000,0000,0000,,and dot notation
Dialogue: 0,0:32:35.60,0:32:38.07,*Default,NTP,0000,0000,0000,,is special because it automatically supplies
Dialogue: 0,0:32:38.27,0:32:40.27,*Default,NTP,0000,0000,0000,,the first argument to the method
Dialogue: 0,0:32:41.13,0:32:42.17,*Default,NTP,0000,0000,0000,,what's it supplying
Dialogue: 0,0:32:42.17,0:32:43.73,*Default,NTP,0000,0000,0000,,what's supplying the
Dialogue: 0,0:32:43.87,0:32:47.07,*Default,NTP,0000,0000,0000,,object instance that we're invoking the method on
Dialogue: 0,0:32:48.00,0:32:49.77,*Default,NTP,0000,0000,0000,,okay so let's look at this
Dialogue: 0,0:32:50.07,0:32:51.77,*Default,NTP,0000,0000,0000,,after we have to find the account
Dialogue: 0,0:32:51.77,0:32:54.80,*Default,NTP,0000,0000,0000,,we can create an account by calling account
Dialogue: 0,0:32:55.40,0:32:56.87,*Default,NTP,0000,0000,0000,,passing in the holder
Dialogue: 0,0:32:57.10,0:33:00.20,*Default,NTP,0000,0000,0000,,now tom account has that balance of zero
Dialogue: 0,0:33:00.53,0:33:02.90,*Default,NTP,0000,0000,0000,,and the holder is named tom
Dialogue: 0,0:33:03.40,0:33:06.50,*Default,NTP,0000,0000,0000,,and I may deposit $100 into tom account
Dialogue: 0,0:33:07.20,0:33:09.90,*Default,NTP,0000,0000,0000,,notice that I define deposit with
Dialogue: 0,0:33:10.07,0:33:11.57,*Default,NTP,0000,0000,0000,,two formal parameters
Dialogue: 0,0:33:11.57,0:33:14.30,*Default,NTP,0000,0000,0000,,but I call it with only one argument
Dialogue: 0,0:33:14.97,0:33:16.80,*Default,NTP,0000,0000,0000,,so where's the second argument
Dialogue: 0,0:33:16.90,0:33:17.60,*Default,NTP,0000,0000,0000,,well
Dialogue: 0,0:33:17.60,0:33:21.33,*Default,NTP,0000,0000,0000,,it's actually that the first argument is tom's account
Dialogue: 0,0:33:21.90,0:33:24.27,*Default,NTP,0000,0000,0000,,and the second argument is 100
Dialogue: 0,0:33:24.70,0:33:26.53,*Default,NTP,0000,0000,0000,,so when we call this function
Dialogue: 0,0:33:26.53,0:33:29.73,*Default,NTP,0000,0000,0000,,we're calling it on tom account which we call self
Dialogue: 0,0:33:29.90,0:33:31.93,*Default,NTP,0000,0000,0000,,and 100 which we call them out
Dialogue: 0,0:33:32.10,0:33:34.17,*Default,NTP,0000,0000,0000,,and then we just execute the body of the function
Dialogue: 0,0:33:34.17,0:33:35.77,*Default,NTP,0000,0000,0000,,as if it were any other function
Dialogue: 0,0:33:37.77,0:33:40.37,*Default,NTP,0000,0000,0000,,okay so let's look a little bit deeper into these
Dialogue: 0,0:33:40.37,0:33:41.67,*Default,NTP,0000,0000,0000,,dot expressions
Dialogue: 0,0:33:42.47,0:33:45.13,*Default,NTP,0000,0000,0000,,objects receive their messages in this metaphor
Dialogue: 0,0:33:45.13,0:33:46.93,*Default,NTP,0000,0000,0000,,of object oriented programming
Dialogue: 0,0:33:47.37,0:33:48.97,*Default,NTP,0000,0000,0000,,using not notation
Dialogue: 0,0:33:49.70,0:33:52.57,*Default,NTP,0000,0000,0000,,so don notation accesses attributes
Dialogue: 0,0:33:53.00,0:33:57.00,*Default,NTP,0000,0000,0000,,of the instance or attributes of its class
Dialogue: 0,0:33:57.80,0:34:00.20,*Default,NTP,0000,0000,0000,,so balance is an instance attribute
Dialogue: 0,0:34:00.57,0:34:02.77,*Default,NTP,0000,0000,0000,,every instance has a different balance
Dialogue: 0,0:34:03.53,0:34:05.93,*Default,NTP,0000,0000,0000,,withdraw the method
Dialogue: 0,0:34:06.57,0:34:08.00,*Default,NTP,0000,0000,0000,,is a class attribute
Dialogue: 0,0:34:08.20,0:34:11.73,*Default,NTP,0000,0000,0000,,all instances share the same withdraw method
Dialogue: 0,0:34:12.53,0:34:15.13,*Default,NTP,0000,0000,0000,,okay dot notation looks like this
Dialogue: 0,0:34:15.13,0:34:17.47,*Default,NTP,0000,0000,0000,,you give it any expression you want on the left
Dialogue: 0,0:34:17.53,0:34:19.10,*Default,NTP,0000,0000,0000,,but you just have to give it a simple name
Dialogue: 0,0:34:19.10,0:34:21.00,*Default,NTP,0000,0000,0000,,on the right separated with a dot
Dialogue: 0,0:34:21.70,0:34:24.00,*Default,NTP,0000,0000,0000,,the expression can be any valid python expression
Dialogue: 0,0:34:24.10,0:34:27.47,*Default,NTP,0000,0000,0000,,it evaluates to some object and then we look up
Dialogue: 0,0:34:28.10,0:34:30.53,*Default,NTP,0000,0000,0000,,the named attributes so it has to be a simple name
Dialogue: 0,0:34:30.97,0:34:32.80,*Default,NTP,0000,0000,0000,,so what happens with this dot expression
Dialogue: 0,0:34:32.80,0:34:35.30,*Default,NTP,0000,0000,0000,,well it evaluates to the value of the attribute
Dialogue: 0,0:34:35.60,0:34:38.00,*Default,NTP,0000,0000,0000,,looked up by name in the object
Dialogue: 0,0:34:38.00,0:34:40.07,*Default,NTP,0000,0000,0000,,that's the value of the expression
Dialogue: 0,0:34:40.93,0:34:43.07,*Default,NTP,0000,0000,0000,,what's looked up by name me what
Dialogue: 0,0:34:43.07,0:34:44.73,*Default,NTP,0000,0000,0000,,we're gonna have to go through all the details
Dialogue: 0,0:34:44.73,0:34:46.50,*Default,NTP,0000,0000,0000,,and we'll do most of them next lecture
Dialogue: 0,0:34:46.80,0:34:50.10,*Default,NTP,0000,0000,0000,,but the basic story is you look in the instance and see
Dialogue: 0,0:34:50.33,0:34:51.77,*Default,NTP,0000,0000,0000,,is this name bound there
Dialogue: 0,0:34:51.93,0:34:53.93,*Default,NTP,0000,0000,0000,,if not then you look in the class
Dialogue: 0,0:34:55.20,0:34:59.07,*Default,NTP,0000,0000,0000,,okay so let's think about tom account that deposit tent
Dialogue: 0,0:34:59.27,0:35:01.10,*Default,NTP,0000,0000,0000,,here's an expression we've seen before
Dialogue: 0,0:35:01.53,0:35:02.93,*Default,NTP,0000,0000,0000,,what's really going on
Dialogue: 0,0:35:02.93,0:35:04.90,*Default,NTP,0000,0000,0000,,is that this is a call expression
Dialogue: 0,0:35:05.13,0:35:07.40,*Default,NTP,0000,0000,0000,,with a compound operator
Dialogue: 0,0:35:07.60,0:35:10.27,*Default,NTP,0000,0000,0000,,the compound operator is a thought expression
Dialogue: 0,0:35:10.57,0:35:13.10,*Default,NTP,0000,0000,0000,,and what it does is it goes and finds
Dialogue: 0,0:35:13.20,0:35:15.07,*Default,NTP,0000,0000,0000,,the deposit method
Dialogue: 0,0:35:15.37,0:35:16.77,*Default,NTP,0000,0000,0000,,of tom account
Dialogue: 0,0:35:16.97,0:35:19.40,*Default,NTP,0000,0000,0000,,which is actually part of the account class
Dialogue: 0,0:35:19.87,0:35:21.40,*Default,NTP,0000,0000,0000,,that tom account is an instance of
Dialogue: 0,0:35:23.30,0:35:26.70,*Default,NTP,0000,0000,0000,,okay so this dot expression evaluates to a function
Dialogue: 0,0:35:27.00,0:35:29.00,*Default,NTP,0000,0000,0000,,and then we call that function on 10
Dialogue: 0,0:35:29.13,0:35:32.40,*Default,NTP,0000,0000,0000,,and that's how we deposit $10 in the time account
Dialogue: 0,0:35:33.73,0:35:35.37,*Default,NTP,0000,0000,0000,,so let's look at the demo real quick
Dialogue: 0,0:35:38.10,0:35:40.10,*Default,NTP,0000,0000,0000,,so over here on the right we'll see
Dialogue: 0,0:35:40.33,0:35:42.50,*Default,NTP,0000,0000,0000,,the account class that we've been talking about
Dialogue: 0,0:35:42.87,0:35:44.73,*Default,NTP,0000,0000,0000,,it's exactly the same as the examples
Dialogue: 0,0:35:44.73,0:35:46.97,*Default,NTP,0000,0000,0000,,but I've added a little bit of documentation
Dialogue: 0,0:35:47.70,0:35:49.20,*Default,NTP,0000,0000,0000,,so when you define a class
Dialogue: 0,0:35:49.20,0:35:50.93,*Default,NTP,0000,0000,0000,,you usually give it a dock string
Dialogue: 0,0:35:51.13,0:35:53.57,*Default,NTP,0000,0000,0000,,and account as a bounds and a holder
Dialogue: 0,0:35:53.97,0:35:55.40,*Default,NTP,0000,0000,0000,,and then you can give it some dock
Dialogue: 0,0:35:55.40,0:35:57.53,*Default,NTP,0000,0000,0000,,test to show you how to use this account
Dialogue: 0,0:35:57.93,0:35:59.27,*Default,NTP,0000,0000,0000,,so we created an account
Dialogue: 0,0:35:59.37,0:36:00.30,*Default,NTP,0000,0000,0000,,my account
Dialogue: 0,0:36:00.77,0:36:03.90,*Default,NTP,0000,0000,0000,,we deposit 100 we withdraw 90 we have 10 left
Dialogue: 0,0:36:04.20,0:36:06.77,*Default,NTP,0000,0000,0000,,withdrawing 90 again gives us insufficient funds
Dialogue: 0,0:36:06.77,0:36:08.57,*Default,NTP,0000,0000,0000,,because we have a balance of only 10
Dialogue: 0,0:36:09.47,0:36:12.00,*Default,NTP,0000,0000,0000,,and we create all this behavior by having an instructor
Dialogue: 0,0:36:12.00,0:36:14.20,*Default,NTP,0000,0000,0000,,that's a posit method
Dialogue: 0,0:36:14.33,0:36:15.70,*Default,NTP,0000,0000,0000,,and a withdrawal method
Dialogue: 0,0:36:18.87,0:36:20.27,*Default,NTP,0000,0000,0000,,and this really does work
Dialogue: 0,0:36:20.33,0:36:21.80,*Default,NTP,0000,0000,0000,,if I load this file
Dialogue: 0,0:36:22.27,0:36:24.07,*Default,NTP,0000,0000,0000,,then account is a class
Dialogue: 0,0:36:24.80,0:36:25.67,*Default,NTP,0000,0000,0000,,and
Dialogue: 0,0:36:26.80,0:36:27.60,*Default,NTP,0000,0000,0000,,john
Dialogue: 0,0:36:28.27,0:36:32.30,*Default,NTP,0000,0000,0000,,will make will bind to an account for me
Dialogue: 0,0:36:33.80,0:36:34.90,*Default,NTP,0000,0000,0000,,so what is john
Dialogue: 0,0:36:35.13,0:36:36.90,*Default,NTP,0000,0000,0000,,john's an account object
Dialogue: 0,0:36:37.30,0:36:38.67,*Default,NTP,0000,0000,0000,,so here's the class
Dialogue: 0,0:36:39.00,0:36:41.70,*Default,NTP,0000,0000,0000,,if I ask for the type of john it will tell me
Dialogue: 0,0:36:41.93,0:36:44.87,*Default,NTP,0000,0000,0000,,the class account which I'm defined here
Dialogue: 0,0:36:46.50,0:36:48.60,*Default,NTP,0000,0000,0000,,and john has a balance
Dialogue: 0,0:36:48.90,0:36:50.20,*Default,NTP,0000,0000,0000,,not very much there
Dialogue: 0,0:36:50.27,0:36:52.77,*Default,NTP,0000,0000,0000,,and john has a holder which is me
Dialogue: 0,0:36:53.30,0:36:54.53,*Default,NTP,0000,0000,0000,,and when I deposit
Dialogue: 0,0:36:55.10,0:36:58.17,*Default,NTP,0000,0000,0000,,10 into john and I do it again and again and again
Dialogue: 0,0:36:58.27,0:37:00.10,*Default,NTP,0000,0000,0000,,then john's back this goes up
Dialogue: 0,0:37:05.33,0:37:06.70,*Default,NTP,0000,0000,0000,,and then I can withdraw
Dialogue: 0,0:37:07.27,0:37:08.90,*Default,NTP,0000,0000,0000,,all of that out again
Dialogue: 0,0:37:10.70,0:37:14.70,*Default,NTP,0000,0000,0000,,okay so it behaves like an account should
Dialogue: 0,0:37:14.73,0:37:16.90,*Default,NTP,0000,0000,0000,,you can deposit it withdraw from it
Dialogue: 0,0:37:17.10,0:37:19.70,*Default,NTP,0000,0000,0000,,it knows what to do when you overdraw
Dialogue: 0,0:37:20.07,0:37:22.10,*Default,NTP,0000,0000,0000,,so we can think of it as an abstraction
Dialogue: 0,0:37:22.10,0:37:23.27,*Default,NTP,0000,0000,0000,,for a bank account
Dialogue: 0,0:37:23.87,0:37:25.77,*Default,NTP,0000,0000,0000,,and we define this behavior
Dialogue: 0,0:37:26.27,0:37:28.57,*Default,NTP,0000,0000,0000,,with the following class statement
Dialogue: 0,0:37:33.93,0:37:35.80,*Default,NTP,0000,0000,0000,,so what are attributes anyway
Dialogue: 0,0:37:36.27,0:37:39.17,*Default,NTP,0000,0000,0000,,well they're just data that's stored within
Dialogue: 0,0:37:39.47,0:37:42.27,*Default,NTP,0000,0000,0000,,either an instance or the class itself
Dialogue: 0,0:37:43.13,0:37:44.73,*Default,NTP,0000,0000,0000,,and how do we access them
Dialogue: 0,0:37:45.00,0:37:46.77,*Default,NTP,0000,0000,0000,,we can use dot expressions
Dialogue: 0,0:37:47.30,0:37:50.87,*Default,NTP,0000,0000,0000,,or there's a built in function that does the same thing
Dialogue: 0,0:37:51.77,0:37:54.30,*Default,NTP,0000,0000,0000,,so going back to our account example
Dialogue: 0,0:37:55.53,0:37:57.10,*Default,NTP,0000,0000,0000,,I could create an account
Dialogue: 0,0:37:57.97,0:38:00.00,*Default,NTP,0000,0000,0000,,by calling the account class
Dialogue: 0,0:38:00.40,0:38:03.70,*Default,NTP,0000,0000,0000,,and I can access the balance on that account
Dialogue: 0,0:38:04.07,0:38:05.60,*Default,NTP,0000,0000,0000,,with john dot balance
Dialogue: 0,0:38:06.10,0:38:08.27,*Default,NTP,0000,0000,0000,,there's also a built in function
Dialogue: 0,0:38:08.97,0:38:11.77,*Default,NTP,0000,0000,0000,,called get atter that's get attribute
Dialogue: 0,0:38:12.47,0:38:14.13,*Default,NTP,0000,0000,0000,,where you pass in an object
Dialogue: 0,0:38:14.30,0:38:16.87,*Default,NTP,0000,0000,0000,,in the name of the attribute that you want to get
Dialogue: 0,0:38:17.10,0:38:18.90,*Default,NTP,0000,0000,0000,,and you'll get that balance back
Dialogue: 0,0:38:19.70,0:38:20.80,*Default,NTP,0000,0000,0000,,and this works
Dialogue: 0,0:38:22.00,0:38:24.33,*Default,NTP,0000,0000,0000,,even if we've deposited
Dialogue: 0,0:38:25.57,0:38:26.53,*Default,NTP,0000,0000,0000,,some money
Dialogue: 0,0:38:31.67,0:38:33.30,*Default,NTP,0000,0000,0000,,we can also check and see
Dialogue: 0,0:38:33.73,0:38:36.93,*Default,NTP,0000,0000,0000,,if an object has a particular attribute
Dialogue: 0,0:38:37.67,0:38:39.30,*Default,NTP,0000,0000,0000,,so we have a balance
Dialogue: 0,0:38:39.57,0:38:43.57,*Default,NTP,0000,0000,0000,,but we don't have a lengths for instance
Dialogue: 0,0:38:46.50,0:38:48.27,*Default,NTP,0000,0000,0000,,so if accessing an attribute
Dialogue: 0,0:38:48.27,0:38:49.97,*Default,NTP,0000,0000,0000,,we can use a dot expression
Dialogue: 0,0:38:50.10,0:38:51.90,*Default,NTP,0000,0000,0000,,or we can use get adder
Dialogue: 0,0:38:52.53,0:38:53.53,*Default,NTP,0000,0000,0000,,and that allows us
Dialogue: 0,0:38:53.53,0:38:55.57,*Default,NTP,0000,0000,0000,,to look up an attribute using a streak
Dialogue: 0,0:38:56.20,0:38:57.77,*Default,NTP,0000,0000,0000,,so we looked at that example
Dialogue: 0,0:38:57.90,0:38:59.10,*Default,NTP,0000,0000,0000,,and we can also check
Dialogue: 0,0:38:59.27,0:39:01.67,*Default,NTP,0000,0000,0000,,whether an object has an attribute
Dialogue: 0,0:39:02.67,0:39:02.93,*Default,NTP,0000,0000,0000,,get
Dialogue: 0,0:39:02.93,0:39:05.47,*Default,NTP,0000,0000,0000,,adder and dot expressions are exactly the same thing
Dialogue: 0,0:39:05.73,0:39:08.87,*Default,NTP,0000,0000,0000,,it's just a functional form of a specialized syntax
Dialogue: 0,0:39:09.53,0:39:11.93,*Default,NTP,0000,0000,0000,,they look up the name in exactly the same way
Dialogue: 0,0:39:12.37,0:39:14.00,*Default,NTP,0000,0000,0000,,and looking up an attribute
Dialogue: 0,0:39:14.40,0:39:16.30,*Default,NTP,0000,0000,0000,,may return either
Dialogue: 0,0:39:16.47,0:39:20.30,*Default,NTP,0000,0000,0000,,an instance attribute or an attribute of the class
Dialogue: 0,0:39:20.80,0:39:23.77,*Default,NTP,0000,0000,0000,,but basically you look on the instance first
Dialogue: 0,0:39:23.77,0:39:26.50,*Default,NTP,0000,0000,0000,,if it's there then that's the attribute that you get
Dialogue: 0,0:39:26.77,0:39:28.60,*Default,NTP,0000,0000,0000,,otherwise you look in the class
Dialogue: 0,0:39:30.30,0:39:33.47,*Default,NTP,0000,0000,0000,,okay so let's talk about methods and functions
Dialogue: 0,0:39:33.73,0:39:35.70,*Default,NTP,0000,0000,0000,,well a method is an attribute
Dialogue: 0,0:39:35.77,0:39:36.77,*Default,NTP,0000,0000,0000,,that's a function
Dialogue: 0,0:39:37.57,0:39:40.53,*Default,NTP,0000,0000,0000,,so python distinguishes between two things
Dialogue: 0,0:39:41.00,0:39:43.07,*Default,NTP,0000,0000,0000,,functions which have been
Dialogue: 0,0:39:43.17,0:39:45.10,*Default,NTP,0000,0000,0000,,around since the beginning of this course
Dialogue: 0,0:39:45.10,0:39:46.30,*Default,NTP,0000,0000,0000,,we know all about those
Dialogue: 0,0:39:46.77,0:39:48.87,*Default,NTP,0000,0000,0000,,and bound methods
Dialogue: 0,0:39:49.50,0:39:51.30,*Default,NTP,0000,0000,0000,,which coupled together a function
Dialogue: 0,0:39:51.70,0:39:56.37,*Default,NTP,0000,0000,0000,,and the object on which the method will be invoked
Dialogue: 0,0:39:57.60,0:39:58.60,*Default,NTP,0000,0000,0000,,so what does that mean
Dialogue: 0,0:39:58.97,0:40:02.17,*Default,NTP,0000,0000,0000,,well when I have an object and a function
Dialogue: 0,0:40:02.60,0:40:04.80,*Default,NTP,0000,0000,0000,,and that object is going to be passed
Dialogue: 0,0:40:05.37,0:40:08.10,*Default,NTP,0000,0000,0000,,in as the first argument of that function
Dialogue: 0,0:40:08.10,0:40:09.40,*Default,NTP,0000,0000,0000,,a function is a method
Dialogue: 0,0:40:09.93,0:40:11.60,*Default,NTP,0000,0000,0000,,then that's called a bound method
Dialogue: 0,0:40:12.53,0:40:13.70,*Default,NTP,0000,0000,0000,,so let's take a look
Dialogue: 0,0:40:14.33,0:40:18.10,*Default,NTP,0000,0000,0000,,if I look up the attribute deposit on the account class
Dialogue: 0,0:40:18.47,0:40:20.10,*Default,NTP,0000,0000,0000,,all it is is a function
Dialogue: 0,0:40:20.33,0:40:22.60,*Default,NTP,0000,0000,0000,,and it's something that takes two arguments
Dialogue: 0,0:40:22.97,0:40:26.33,*Default,NTP,0000,0000,0000,,it takes the object that I'm depositing into
Dialogue: 0,0:40:26.33,0:40:28.47,*Default,NTP,0000,0000,0000,,and then the amount that I want to deposit
Dialogue: 0,0:40:30.33,0:40:33.90,*Default,NTP,0000,0000,0000,,if instead I look up deposit on an
Dialogue: 0,0:40:33.93,0:40:35.93,*Default,NTP,0000,0000,0000,,instance of the account class
Dialogue: 0,0:40:35.93,0:40:37.87,*Default,NTP,0000,0000,0000,,where tom account is an account
Dialogue: 0,0:40:39.47,0:40:41.97,*Default,NTP,0000,0000,0000,,then what I see is that this is a method
Dialogue: 0,0:40:42.47,0:40:45.53,*Default,NTP,0000,0000,0000,,which means it's taken the deposit function
Dialogue: 0,0:40:45.67,0:40:48.33,*Default,NTP,0000,0000,0000,,and bounded together with the time account
Dialogue: 0,0:40:48.33,0:40:51.33,*Default,NTP,0000,0000,0000,,which will be passed yet as the first argument
Dialogue: 0,0:40:51.47,0:40:54.20,*Default,NTP,0000,0000,0000,,when we actually call the function
Dialogue: 0,0:40:55.37,0:40:56.17,*Default,NTP,0000,0000,0000,,okay
Dialogue: 0,0:40:56.77,0:40:58.17,*Default,NTP,0000,0000,0000,,so what happens well
Dialogue: 0,0:40:58.77,0:41:01.80,*Default,NTP,0000,0000,0000,,if we access the function directly from the class
Dialogue: 0,0:41:02.13,0:41:04.27,*Default,NTP,0000,0000,0000,,then we need to pass in two arguments
Dialogue: 0,0:41:04.27,0:41:06.10,*Default,NTP,0000,0000,0000,,because remember how it was defined
Dialogue: 0,0:41:06.20,0:41:07.67,*Default,NTP,0000,0000,0000,,it took two arguments
Dialogue: 0,0:41:07.97,0:41:10.90,*Default,NTP,0000,0000,0000,,one was called self and the other was called amount
Dialogue: 0,0:41:11.73,0:41:15.10,*Default,NTP,0000,0000,0000,,so if I take in time account that I pass in 1001
Dialogue: 0,0:41:16.17,0:41:16.47,*Default,NTP,0000,0000,0000,,now
Dialogue: 0,0:41:16.47,0:41:18.97,*Default,NTP,0000,0000,0000,,there's one thousand and eleven dollars in the account
Dialogue: 0,0:41:21.73,0:41:22.80,*Default,NTP,0000,0000,0000,,on the other hand
Dialogue: 0,0:41:23.13,0:41:24.97,*Default,NTP,0000,0000,0000,,if I start out with time account
Dialogue: 0,0:41:25.30,0:41:27.97,*Default,NTP,0000,0000,0000,,and I look up the attribute deposit
Dialogue: 0,0:41:28.00,0:41:30.27,*Default,NTP,0000,0000,0000,,what I get back is a method
Dialogue: 0,0:41:30.90,0:41:32.73,*Default,NTP,0000,0000,0000,,a method is different than a function
Dialogue: 0,0:41:33.10,0:41:35.93,*Default,NTP,0000,0000,0000,,in the sense that the first arguments already filled it
Dialogue: 0,0:41:36.27,0:41:37.47,*Default,NTP,0000,0000,0000,,with tom account
Dialogue: 0,0:41:37.73,0:41:39.90,*Default,NTP,0000,0000,0000,,so tom accounts are already the first argument
Dialogue: 0,0:41:39.90,0:41:42.00,*Default,NTP,0000,0000,0000,,and all we need to do is supply the second argument
Dialogue: 0,0:41:42.00,0:41:42.90,*Default,NTP,0000,0000,0000,,1000
Dialogue: 0,0:41:45.47,0:41:47.97,*Default,NTP,0000,0000,0000,,so let's talk about looking up attributes by name
Dialogue: 0,0:41:48.37,0:41:49.77,*Default,NTP,0000,0000,0000,,we see a dot expression
Dialogue: 0,0:41:50.07,0:41:52.20,*Default,NTP,0000,0000,0000,,in order to evaluate a dot expression
Dialogue: 0,0:41:52.33,0:41:54.87,*Default,NTP,0000,0000,0000,,we evaluate the expression to the left of the dot
Dialogue: 0,0:41:55.27,0:41:58.00,*Default,NTP,0000,0000,0000,,which yields the object of the dot expression
Dialogue: 0,0:41:58.40,0:42:00.27,*Default,NTP,0000,0000,0000,,that's where we're going to look up the name
Dialogue: 0,0:42:01.27,0:42:03.57,*Default,NTP,0000,0000,0000,,then name is matched against the instance
Dialogue: 0,0:42:03.57,0:42:05.00,*Default,NTP,0000,0000,0000,,attributes of that object
Dialogue: 0,0:42:05.37,0:42:07.60,*Default,NTP,0000,0000,0000,,if an attribute with that name exists
Dialogue: 0,0:42:07.70,0:42:09.60,*Default,NTP,0000,0000,0000,,its value is returned
Dialogue: 0,0:42:10.47,0:42:14.13,*Default,NTP,0000,0000,0000,,if not then name is looked up in the class
Dialogue: 0,0:42:14.47,0:42:17.00,*Default,NTP,0000,0000,0000,,which yields a class attribute value
Dialogue: 0,0:42:19.20,0:42:22.73,*Default,NTP,0000,0000,0000,,that value is returned unless it's a function
Dialogue: 0,0:42:23.10,0:42:24.93,*Default,NTP,0000,0000,0000,,like withdraw or deposit
Dialogue: 0,0:42:25.13,0:42:27.53,*Default,NTP,0000,0000,0000,,in which case a bound method is returned
Dialogue: 0,0:42:27.53,0:42:30.20,*Default,NTP,0000,0000,0000,,in stiff where what's bound together
Dialogue: 0,0:42:30.53,0:42:32.93,*Default,NTP,0000,0000,0000,,well the object of the thought expression
Dialogue: 0,0:42:32.93,0:42:34.87,*Default,NTP,0000,0000,0000,,is bound together with that function
Dialogue: 0,0:42:35.07,0:42:36.50,*Default,NTP,0000,0000,0000,,to create a bound method
Dialogue: 0,0:42:39.17,0:42:41.57,*Default,NTP,0000,0000,0000,,so there are attributes of an instance
Dialogue: 0,0:42:41.57,0:42:43.53,*Default,NTP,0000,0000,0000,,and there are attributes of a class
Dialogue: 0,0:42:44.27,0:42:46.67,*Default,NTP,0000,0000,0000,,so far all the attributes of the class we've seen
Dialogue: 0,0:42:46.67,0:42:47.70,*Default,NTP,0000,0000,0000,,have been methods
Dialogue: 0,0:42:47.90,0:42:49.87,*Default,NTP,0000,0000,0000,,but that's not the only option we have
Dialogue: 0,0:42:50.77,0:42:52.30,*Default,NTP,0000,0000,0000,,class attributes are anything that
Dialogue: 0,0:42:52.30,0:42:54.77,*Default,NTP,0000,0000,0000,,shared across all instances of a class
Dialogue: 0,0:42:55.07,0:42:56.40,*Default,NTP,0000,0000,0000,,because they're part of the class
Dialogue: 0,0:42:56.40,0:42:57.67,*Default,NTP,0000,0000,0000,,not part of the instance
Dialogue: 0,0:42:58.10,0:42:59.97,*Default,NTP,0000,0000,0000,,now what happens to be that when you look up
Dialogue: 0,0:43:00.30,0:43:02.90,*Default,NTP,0000,0000,0000,,that attribute by name on an instance
Dialogue: 0,0:43:02.90,0:43:04.50,*Default,NTP,0000,0000,0000,,and it's not on the instance
Dialogue: 0,0:43:04.53,0:43:06.00,*Default,NTP,0000,0000,0000,,you'll find it in the class
Dialogue: 0,0:43:06.77,0:43:09.57,*Default,NTP,0000,0000,0000,,okay so let's extend our example a little bit
Dialogue: 0,0:43:09.90,0:43:11.37,*Default,NTP,0000,0000,0000,,here's our account class
Dialogue: 0,0:43:11.67,0:43:12.73,*Default,NTP,0000,0000,0000,,in addition
Dialogue: 0,0:43:13.70,0:43:15.80,*Default,NTP,0000,0000,0000,,to defining the constructor
Dialogue: 0,0:43:16.20,0:43:18.80,*Default,NTP,0000,0000,0000,,we're also going to add a class attribute called
Dialogue: 0,0:43:19.20,0:43:20.30,*Default,NTP,0000,0000,0000,,the instructory
Dialogue: 0,0:43:20.77,0:43:22.87,*Default,NTP,0000,0000,0000,,now this is something that will be shared among
Dialogue: 0,0:43:22.87,0:43:24.20,*Default,NTP,0000,0000,0000,,all accounts
Dialogue: 0,0:43:25.13,0:43:27.30,*Default,NTP,0000,0000,0000,,so all accounts have the same interest trait
Dialogue: 0,0:43:27.53,0:43:29.33,*Default,NTP,0000,0000,0000,,if I look up interest on an account
Dialogue: 0,0:43:29.33,0:43:31.93,*Default,NTP,0000,0000,0000,,I'll find 0.02 as the value
Dialogue: 0,0:43:33.27,0:43:35.17,*Default,NTP,0000,0000,0000,,so here I create a new account
Dialogue: 0,0:43:35.33,0:43:36.73,*Default,NTP,0000,0000,0000,,tom is the holder
Dialogue: 0,0:43:37.47,0:43:40.00,*Default,NTP,0000,0000,0000,,jim is the holder of a second account
Dialogue: 0,0:43:40.60,0:43:44.27,*Default,NTP,0000,0000,0000,,and what's the interest rate for tom account in 0.02
Dialogue: 0,0:43:44.67,0:43:47.17,*Default,NTP,0000,0000,0000,,and what about for jim same thick
Dialogue: 0,0:43:47.47,0:43:50.27,*Default,NTP,0000,0000,0000,,because they both are instances of this class
Dialogue: 0,0:43:50.73,0:43:52.97,*Default,NTP,0000,0000,0000,,neither of them has its own interests
Dialogue: 0,0:43:53.57,0:43:56.00,*Default,NTP,0000,0000,0000,,but the class has an interest rate
Dialogue: 0,0:43:56.27,0:43:58.67,*Default,NTP,0000,0000,0000,,and that's what we're looking up in these two cases
Dialogue: 0,0:44:00.50,0:44:01.90,*Default,NTP,0000,0000,0000,,so it's important to note
Dialogue: 0,0:44:02.10,0:44:05.30,*Default,NTP,0000,0000,0000,,that interest is not copied in to each instance
Dialogue: 0,0:44:06.17,0:44:09.33,*Default,NTP,0000,0000,0000,,instead it's always kept in the class
Dialogue: 0,0:44:09.90,0:44:11.00,*Default,NTP,0000,0000,0000,,and that's important
Dialogue: 0,0:44:11.47,0:44:13.13,*Default,NTP,0000,0000,0000,,because if it changes in the class
Dialogue: 0,0:44:13.13,0:44:14.90,*Default,NTP,0000,0000,0000,,well that change will be reflected
Dialogue: 0,0:44:14.97,0:44:16.57,*Default,NTP,0000,0000,0000,,in all of the instances