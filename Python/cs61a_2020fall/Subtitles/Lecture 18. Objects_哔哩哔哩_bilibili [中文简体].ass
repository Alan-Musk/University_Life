[Script Info]
Title: Lecture 18. Objects_哔哩哔哩_bilibili
ScriptType: v4.00+
Collisions: Reverse
PlayResX: 1280
PlayResY: 720
WrapStyle: 3
ScaledBorderAndShadow: yes
; ----------------------
; 本字幕由CC字幕助手自动转换
; 字幕来源https://www.bilibili.com/video/BV1s3411G7yM?p=43&vd_source=6ffca0aa1006734a4fba52f389036611
; 脚本地址https://greasyfork.org/scripts/378513
; 设置了字幕过长自动换行，但若字幕中没有空格换行将无效
; 字体大小依据720p 48号字体等比缩放
; 如显示不正常请尝试使用SRT格式

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Segoe UI,48,&H00FFFFFF,&HF0000000,&H00000000,&HF0000000,1,0,0,0,100,100,0,0.00,1,1,3,2,30,30,20,1

[Events]
Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.47,0:00:02.50,*Default,NTP,0000,0000,0000,,61选18号
Dialogue: 0,0:00:02.73,0:00:03.77,*Default,NTP,0000,0000,0000,,公告
Dialogue: 0,0:00:04.50,0:00:06.27,*Default,NTP,0000,0000,0000,,作业三今天到期
Dialogue: 0,0:00:06.77,0:00:08.13,*Default,NTP,0000,0000,0000,,你可以修改你的猪
Dialogue: 0,0:00:08.13,0:00:10.60,*Default,NTP,0000,0000,0000,,旨在赢回失去的作文分数的项目
Dialogue: 0,0:00:10.60,0:00:11.53,*Default,NTP,0000,0000,0000,,明天前
Dialogue: 0,0:00:12.13,0:00:15.53,*Default,NTP,0000,0000,0000,,用 python 提交 3 ok desh desh revise
Dialogue: 0,0:00:16.07,0:00:17.70,*Default,NTP,0000,0000,0000,,点击此处获取完整内容
Dialogue: 0,0:00:17.70,0:00:20.20,*Default,NTP,0000,0000,0000,,描述如何执行此操作的广场公告
Dialogue: 0,0:00:20.67,0:00:23.20,*Default,NTP,0000,0000,0000,,这是核心人员创建的学习指南
Dialogue: 0,0:00:23.87,0:00:26.20,*Default,NTP,0000,0000,0000,,这为您提供了一些如何做好准备的指示
Dialogue: 0,0:00:26.27,0:00:27.50,*Default,NTP,0000,0000,0000,,为了下一个期中考试
Dialogue: 0,0:00:27.60,0:00:29.77,*Default,NTP,0000,0000,0000,,距离昨天已经三周了
Dialogue: 0,0:00:30.20,0:00:31.80,*Default,NTP,0000,0000,0000,,我们会提供一些建议
Dialogue: 0,0:00:31.80,0:00:35.67,*Default,NTP,0000,0000,0000,,办公时间明天下午 1:00 至下午两点 30
Dialogue: 0,0:00:35.73,0:00:36.93,*Default,NTP,0000,0000,0000,,所以今天是星期五
Dialogue: 0,0:00:37.17,0:00:38.77,*Default,NTP,0000,0000,0000,,只需参加办公时间 q
Dialogue: 0,0:00:38.80,0:00:41.20,*Default,NTP,0000,0000,0000,,你可以提出任何问题
Dialogue: 0,0:00:41.20,0:00:42.97,*Default,NTP,0000,0000,0000,,你想要并得到一些建议
Dialogue: 0,0:00:43.60,0:00:45.90,*Default,NTP,0000,0000,0000,,今天我们将在课程中开始一个新单元
Dialogue: 0,0:00:46.20,0:00:48.80,*Default,NTP,0000,0000,0000,,关于面向对象编程
Dialogue: 0,0:00:49.20,0:00:51.00,*Default,NTP,0000,0000,0000,,这种编程方法
Dialogue: 0,0:00:51.13,0:00:53.17,*Default,NTP,0000,0000,0000,,有很多新的想法在里面
Dialogue: 0,0:00:53.40,0:00:56.33,*Default,NTP,0000,0000,0000,,但你已经接触过其中的大部分
Dialogue: 0,0:00:57.27,0:00:59.30,*Default,NTP,0000,0000,0000,,有一个数据抽象的概念
Dialogue: 0,0:00:59.40,0:01:01.20,*Default,NTP,0000,0000,0000,,有一个突变的概念
Dialogue: 0,0:01:01.37,0:01:03.67,*Default,NTP,0000,0000,0000,,你已经知道这些事情了
Dialogue: 0,0:01:04.40,0:01:05.77,*Default,NTP,0000,0000,0000,,还有一些新东西
Dialogue: 0,0:01:05.87,0:01:07.50,*Default,NTP,0000,0000,0000,,包括一些新语法
Dialogue: 0,0:01:07.60,0:01:10.10,*Default,NTP,0000,0000,0000,,以及一些新概念，例如继承
Dialogue: 0,0:01:10.67,0:01:12.10,*Default,NTP,0000,0000,0000,,因为有很多东西要学
Dialogue: 0,0:01:12.20,0:01:13.17,*Default,NTP,0000,0000,0000,,学生经常
Dialogue: 0,0:01:13.17,0:01:15.30,*Default,NTP,0000,0000,0000,,这部分课程有点困难
Dialogue: 0,0:01:15.50,0:01:17.73,*Default,NTP,0000,0000,0000,,所以我建议花一些时间
Dialogue: 0,0:01:17.80,0:01:21.00,*Default,NTP,0000,0000,0000,,练习你看到的所有实验室问题
Dialogue: 0,0:01:21.17,0:01:22.97,*Default,NTP,0000,0000,0000,,解决家庭作业问题
Dialogue: 0,0:01:23.13,0:01:25.13,*Default,NTP,0000,0000,0000,,并分配相当多的时间
Dialogue: 0,0:01:25.13,0:01:27.50,*Default,NTP,0000,0000,0000,,对于我们将在下周发布的项目
Dialogue: 0,0:01:27.67,0:01:30.00,*Default,NTP,0000,0000,0000,,这是关于面向对象编程的
Dialogue: 0,0:01:30.77,0:01:31.67,*Default,NTP,0000,0000,0000,,讲座中
Dialogue: 0,0:01:31.73,0:01:33.90,*Default,NTP,0000,0000,0000,,我们要尝试一些不同的东西
Dialogue: 0,0:01:34.37,0:01:37.53,*Default,NTP,0000,0000,0000,,我将从弗里德教授的介绍开始
Dialogue: 0,0:01:37.53,0:01:39.27,*Default,NTP,0000,0000,0000,,面向对象编程
Dialogue: 0,0:01:39.33,0:01:41.53,*Default,NTP,0000,0000,0000,,因为我认为他描述的方式就是
Dialogue: 0,0:01:41.53,0:01:45.37,*Default,NTP,0000,0000,0000,,太好了，然后您就会听到标准 61 a
Dialogue: 0,0:01:45.37,0:01:47.77,*Default,NTP,0000,0000,0000,,我对物品的介绍
Dialogue: 0,0:01:48.27,0:01:50.27,*Default,NTP,0000,0000,0000,,但我也会链接到其他一些
Dialogue: 0,0:01:50.27,0:01:52.27,*Default,NTP,0000,0000,0000,,弗里德教授的视频
Dialogue: 0,0:01:52.47,0:01:54.50,*Default,NTP,0000,0000,0000,,如果您愿意，欢迎观看
Dialogue: 0,0:01:54.70,0:01:56.20,*Default,NTP,0000,0000,0000,,听听他的描述
Dialogue: 0,0:01:56.57,0:01:57.27,*Default,NTP,0000,0000,0000,,他的其余部分
Dialogue: 0,0:01:57.27,0:01:59.50,*Default,NTP,0000,0000,0000,,关于对象联合编程的讲座很棒
Dialogue: 0,0:01:59.67,0:02:01.67,*Default,NTP,0000,0000,0000,,他们确实涉及一些东西
Dialogue: 0,0:02:01.67,0:02:03.50,*Default,NTP,0000,0000,0000,,我们在本课程中尚未介绍的内容
Dialogue: 0,0:02:03.87,0:02:05.90,*Default,NTP,0000,0000,0000,,所以可能有一些关于
Dialogue: 0,0:02:06.13,0:02:07.70,*Default,NTP,0000,0000,0000,,在屏幕上绘制图片
Dialogue: 0,0:02:07.93,0:02:09.70,*Default,NTP,0000,0000,0000,,你可能觉得陌生
Dialogue: 0,0:02:10.47,0:02:11.67,*Default,NTP,0000,0000,0000,,我一定会给你一个链接
Dialogue: 0,0:02:11.67,0:02:12.80,*Default,NTP,0000,0000,0000,,如何赶上这一切
Dialogue: 0,0:02:12.80,0:02:14.00,*Default,NTP,0000,0000,0000,,如果你有兴趣的话
Dialogue: 0,0:02:14.37,0:02:17.73,*Default,NTP,0000,0000,0000,,所以我希望通过两个描述
Dialogue: 0,0:02:18.13,0:02:20.07,*Default,NTP,0000,0000,0000,,通常在 61 a 中的那个
Dialogue: 0,0:02:20.57,0:02:21.87,*Default,NTP,0000,0000,0000,,和版本
Dialogue: 0,0:02:21.87,0:02:24.50,*Default,NTP,0000,0000,0000,,弗里德教授为他的研究生课程开发的
Dialogue: 0,0:02:24.50,0:02:27.40,*Default,NTP,0000,0000,0000,,参加 Sixa 可以帮助你们所有人获得更好的成绩
Dialogue: 0,0:02:27.50,0:02:28.27,*Default,NTP,0000,0000,0000,,理解
Dialogue: 0,0:02:28.27,0:02:30.67,*Default,NTP,0000,0000,0000,,面向对象编程中发生的事情
Dialogue: 0,0:02:31.20,0:02:32.30,*Default,NTP,0000,0000,0000,,好的，我们开始吧
Dialogue: 0,0:02:34.30,0:02:36.67,*Default,NTP,0000,0000,0000,,欢迎回来，我们现在准备好了
Dialogue: 0,0:02:36.67,0:02:39.17,*Default,NTP,0000,0000,0000,,开启课程的新篇章
Dialogue: 0,0:02:39.17,0:02:41.30,*Default,NTP,0000,0000,0000,,这就是我们要讨论的
Dialogue: 0,0:02:41.70,0:02:43.40,*Default,NTP,0000,0000,0000,,关于类和对象
Dialogue: 0,0:02:43.40,0:02:45.93,*Default,NTP,0000,0000,0000,,特别是面向对象编程
Dialogue: 0,0:02:45.93,0:02:47.40,*Default,NTP,0000,0000,0000,,这可能是你听说过的事情
Dialogue: 0,0:02:47.67,0:02:50.67,*Default,NTP,0000,0000,0000,,我们将用接下来的整整三堂课
Dialogue: 0,0:02:51.00,0:02:52.67,*Default,NTP,0000,0000,0000,,谈论到底是什么
Dialogue: 0,0:02:52.67,0:02:55.47,*Default,NTP,0000,0000,0000,,所以让我们继续深入研究
Dialogue: 0,0:02:56.07,0:02:58.57,*Default,NTP,0000,0000,0000,,好吧，让我定义几个简单的术语
Dialogue: 0,0:02:58.60,0:03:04.60,*Default,NTP,0000,0000,0000,,类是组合和抽象出来的东西
Dialogue: 0,0:03:05.17,0:03:07.17,*Default,NTP,0000,0000,0000,,数据和功能
Dialogue: 0,0:03:07.17,0:03:10.00,*Default,NTP,0000,0000,0000,,理解这两件事很重要
Dialogue: 0,0:03:10.20,0:03:12.70,*Default,NTP,0000,0000,0000,,到目前为止的数据和功能
Dialogue: 0,0:03:13.13,0:03:16.53,*Default,NTP,0000,0000,0000,,我们一直在讨论的主要是功能
Dialogue: 0,0:03:16.53,0:03:19.30,*Default,NTP,0000,0000,0000,,当我们谈论列表时，稍微谈一下数据
Dialogue: 0,0:03:19.30,0:03:20.13,*Default,NTP,0000,0000,0000,,一点儿
Dialogue: 0,0:03:20.30,0:03:21.20,*Default,NTP,0000,0000,0000,,我们谈话时的数据
Dialogue: 0,0:03:21.20,0:03:22.57,*Default,NTP,0000,0000,0000,,关于不同类型的变量关系
Dialogue: 0,0:03:22.57,0:03:23.67,*Default,NTP,0000,0000,0000,,但在大多数情况下
Dialogue: 0,0:03:23.77,0:03:25.73,*Default,NTP,0000,0000,0000,,我们一直专注于功能
Dialogue: 0,0:03:25.77,0:03:28.33,*Default,NTP,0000,0000,0000,,迭代构造 条件构造
Dialogue: 0,0:03:28.47,0:03:32.13,*Default,NTP,0000,0000,0000,,函数参数 in 参数 out 递归
Dialogue: 0,0:03:32.50,0:03:33.97,*Default,NTP,0000,0000,0000,,现在我们要讨论的是
Dialogue: 0,0:03:34.10,0:03:37.20,*Default,NTP,0000,0000,0000,,将所有这些部分放在一起以及我们如何结合
Dialogue: 0,0:03:37.20,0:03:38.40,*Default,NTP,0000,0000,0000,,当然数据
Dialogue: 0,0:03:38.70,0:03:39.47,*Default,NTP,0000,0000,0000,,和功能
Dialogue: 0,0:03:39.47,0:03:41.60,*Default,NTP,0000,0000,0000,,那么一个类是做什么的
Dialogue: 0,0:03:41.70,0:03:44.73,*Default,NTP,0000,0000,0000,,它结合了信息的存储
Dialogue: 0,0:03:44.73,0:03:47.80,*Default,NTP,0000,0000,0000,,数据和该数据的功能
Dialogue: 0,0:03:48.37,0:03:52.07,*Default,NTP,0000,0000,0000,,对象只是类的实例化
Dialogue: 0,0:03:52.07,0:03:54.00,*Default,NTP,0000,0000,0000,,我想区分这些管子
Dialogue: 0,0:03:54.00,0:03:55.13,*Default,NTP,0000,0000,0000,,这非常重要
Dialogue: 0,0:03:55.67,0:03:56.77,*Default,NTP,0000,0000,0000,,成为使用这些词
Dialogue: 0,0:03:56.77,0:04:00.00,*Default,NTP,0000,0000,0000,,但这也是一个重要的概念区别
Dialogue: 0,0:04:00.37,0:04:01.13,*Default,NTP,0000,0000,0000,,所以也许
Dialogue: 0,0:04:01.13,0:04:03.27,*Default,NTP,0000,0000,0000,,思考这种区别的最简单方法
Dialogue: 0,0:04:03.27,0:04:04.20,*Default,NTP,0000,0000,0000,,是这样吗
Dialogue: 0,0:04:04.73,0:04:09.80,*Default,NTP,0000,0000,0000,,你可以将类视为房子的蓝图
Dialogue: 0,0:04:10.07,0:04:11.13,*Default,NTP,0000,0000,0000,,不能住在里面
Dialogue: 0,0:04:11.33,0:04:13.30,*Default,NTP,0000,0000,0000,,但它告诉你如何构建它
Dialogue: 0,0:04:13.80,0:04:16.33,*Default,NTP,0000,0000,0000,,对象就是房子本身
Dialogue: 0,0:04:16.33,0:04:18.07,*Default,NTP,0000,0000,0000,,这样我就可以拿到这个蓝图
Dialogue: 0,0:04:18.13,0:04:20.33,*Default,NTP,0000,0000,0000,,和街上的饼干切刀
Dialogue: 0,0:04:20.33,0:04:24.07,*Default,NTP,0000,0000,0000,,并获取该对象的多个实例
Dialogue: 0,0:04:24.07,0:04:27.87,*Default,NTP,0000,0000,0000,,所以想想类是某种东西的定义
Dialogue: 0,0:04:28.57,0:04:31.13,*Default,NTP,0000,0000,0000,,和一个对象作为它的实例
Dialogue: 0,0:04:31.13,0:04:34.60,*Default,NTP,0000,0000,0000,,这是我们现在可以操纵的真实事物
Dialogue: 0,0:04:34.60,0:04:36.17,*Default,NTP,0000,0000,0000,,我将使用这些术语
Dialogue: 0,0:04:37.87,0:04:38.97,*Default,NTP,0000,0000,0000,,在接下来的几周里
Dialogue: 0,0:04:38.97,0:04:40.53,*Default,NTP,0000,0000,0000,,我只是想确保我们理解
Dialogue: 0,0:04:40.60,0:04:43.07,*Default,NTP,0000,0000,0000,,类与定义的区别
Dialogue: 0,0:04:43.17,0:04:43.97,*Default,NTP,0000,0000,0000,,和一个物体
Dialogue: 0,0:04:43.97,0:04:45.90,*Default,NTP,0000,0000,0000,,这是我们实际创造的东西
Dialogue: 0,0:04:46.07,0:04:47.53,*Default,NTP,0000,0000,0000,,我们现在可以采取行动
Dialogue: 0,0:04:48.90,0:04:49.90,*Default,NTP,0000,0000,0000,,现在正如我所说
Dialogue: 0,0:04:49.90,0:04:52.20,*Default,NTP,0000,0000,0000,,类组合并抽象数据和函数
Dialogue: 0,0:04:52.20,0:04:55.20,*Default,NTP,0000,0000,0000,,对象是该类的实例化
Dialogue: 0,0:04:55.53,0:04:56.10,*Default,NTP,0000,0000,0000,,我已经
Dialogue: 0,0:04:56.10,0:04:58.30,*Default,NTP,0000,0000,0000,,整个学期都在暗示这一点
Dialogue: 0,0:04:58.30,0:05:02.07,*Default,NTP,0000,0000,0000,,我们已经看到了对象和类
Dialogue: 0,0:05:02.07,0:05:04.40,*Default,NTP,0000,0000,0000,,那个符号一直挥之不去
Dialogue: 0,0:05:04.87,0:05:06.20,*Default,NTP,0000,0000,0000,,我想我可能提到过
Dialogue: 0,0:05:06.33,0:05:08.07,*Default,NTP,0000,0000,0000,,某个时刻的一个字符串
Dialogue: 0,0:05:08.30,0:05:09.73,*Default,NTP,0000,0000,0000,,有点像一个类
Dialogue: 0,0:05:09.73,0:05:11.20,*Default,NTP,0000,0000,0000,,列表就像一个类
Dialogue: 0,0:05:11.20,0:05:13.67,*Default,NTP,0000,0000,0000,,这是一个非常简单的类示例
Dialogue: 0,0:05:13.67,0:05:16.37,*Default,NTP,0000,0000,0000,,字符串是内置类
Dialogue: 0,0:05:16.53,0:05:19.53,*Default,NTP,0000,0000,0000,,数据是字符串本身
Dialogue: 0,0:05:19.70,0:05:21.20,*Default,NTP,0000,0000,0000,,引用 取消引用 ardvark
Dialogue: 0,0:05:21.77,0:05:23.93,*Default,NTP,0000,0000,0000,,功能是追加
Dialogue: 0,0:05:23.93,0:05:26.33,*Default,NTP,0000,0000,0000,,我可以在字符串末尾附加一些内容
Dialogue: 0,0:05:27.00,0:05:29.27,*Default,NTP,0000,0000,0000,,整数是内置类
Dialogue: 0,0:05:29.73,0:05:31.47,*Default,NTP,0000,0000,0000,,存储数据的实际数量
Dialogue: 0,0:05:31.60,0:05:35.30,*Default,NTP,0000,0000,0000,,加法运算符是该数据的函数
Dialogue: 0,0:05:35.30,0:05:36.97,*Default,NTP,0000,0000,0000,,所以现在你明白我的意思了
Dialogue: 0,0:05:37.10,0:05:39.20,*Default,NTP,0000,0000,0000,,当我说数据和功能时
Dialogue: 0,0:05:39.33,0:05:42.57,*Default,NTP,0000,0000,0000,,我们将信息存储在字符串中，将整数存储在列表中
Dialogue: 0,0:05:42.60,0:05:44.13,*Default,NTP,0000,0000,0000,,然后我们就可以对其进行操作
Dialogue: 0,0:05:44.13,0:05:46.87,*Default,NTP,0000,0000,0000,,我们为您提供程序员
Dialogue: 0,0:05:47.07,0:05:50.13,*Default,NTP,0000,0000,0000,,对该数据进行操作的功能
Dialogue: 0,0:05:51.00,0:05:53.30,*Default,NTP,0000,0000,0000,,现在我认为你知道这一点不会感到惊讶
Dialogue: 0,0:05:53.37,0:05:54.67,*Default,NTP,0000,0000,0000,,我们可以定义自己的类
Dialogue: 0,0:05:54.67,0:05:55.77,*Default,NTP,0000,0000,0000,,这不仅仅是
Dialogue: 0,0:05:55.93,0:05:58.50,*Default,NTP,0000,0000,0000,,无论 python 给我们什么，这就是我们所能做的
Dialogue: 0,0:05:58.73,0:06:00.27,*Default,NTP,0000,0000,0000,,我们可以定义自己的类
Dialogue: 0,0:06:00.27,0:06:02.53,*Default,NTP,0000,0000,0000,,我们自己的数据 我们自己的功能
Dialogue: 0,0:06:02.57,0:06:06.30,*Default,NTP,0000,0000,0000,,然后从中构建非常好的功能
Dialogue: 0,0:06:06.30,0:06:07.20,*Default,NTP,0000,0000,0000,,这就是我们要花的钱
Dialogue: 0,0:06:07.20,0:06:09.10,*Default,NTP,0000,0000,0000,,当然我们大部分时间都在做
Dialogue: 0,0:06:09.13,0:06:11.73,*Default,NTP,0000,0000,0000,,正在谈论我们如何定义我们自己的类
Dialogue: 0,0:06:11.97,0:06:13.00,*Default,NTP,0000,0000,0000,,好吧所以
Dialogue: 0,0:06:13.00,0:06:13.97,*Default,NTP,0000,0000,0000,,让我首先说
Dialogue: 0,0:06:13.97,0:06:15.37,*Default,NTP,0000,0000,0000,,我将为你定义一个类
Dialogue: 0,0:06:15.37,0:06:18.70,*Default,NTP,0000,0000,0000,,它将通过一系列讲座展开
Dialogue: 0,0:06:19.10,0:06:22.87,*Default,NTP,0000,0000,0000,,类的类型是球，就在那里你看到的
Dialogue: 0,0:06:23.10,0:06:24.13,*Default,NTP,0000,0000,0000,,所以这
Dialogue: 0,0:06:24.30,0:06:26.67,*Default,NTP,0000,0000,0000,,我会稍微帮忙一下
Dialogue: 0,0:06:26.67,0:06:28.57,*Default,NTP,0000,0000,0000,,在这里我不会向您展示详细信息
Dialogue: 0,0:06:28.57,0:06:29.93,*Default,NTP,0000,0000,0000,,类或对象
Dialogue: 0,0:06:29.93,0:06:31.07,*Default,NTP,0000,0000,0000,,我要告诉你
Dialogue: 0,0:06:31.57,0:06:35.33,*Default,NTP,0000,0000,0000,,我们有这个对象，这个类称为球类
Dialogue: 0,0:06:35.77,0:06:37.20,*Default,NTP,0000,0000,0000,,以及它可以让你做什么
Dialogue: 0,0:06:37.37,0:06:40.40,*Default,NTP,0000,0000,0000,,是存储一些数据，即位置
Dialogue: 0,0:06:40.57,0:06:42.73,*Default,NTP,0000,0000,0000,,和球的速度
Dialogue: 0,0:06:42.97,0:06:45.57,*Default,NTP,0000,0000,0000,,功能是你可以移动球
Dialogue: 0,0:06:45.57,0:06:47.67,*Default,NTP,0000,0000,0000,,你可以渲染球等
Dialogue: 0,0:06:48.20,0:06:48.70,*Default,NTP,0000,0000,0000,,然后再次
Dialogue: 0,0:06:48.70,0:06:50.17,*Default,NTP,0000,0000,0000,,我不会向您展示代码
Dialogue: 0,0:06:50.17,0:06:51.13,*Default,NTP,0000,0000,0000,,因为我想再次
Dialogue: 0,0:06:51.13,0:06:52.13,*Default,NTP,0000,0000,0000,,从概念上开始
Dialogue: 0,0:06:52.13,0:06:52.93,*Default,NTP,0000,0000,0000,,然后我们会潜水
Dialogue: 0,0:06:52.93,0:06:54.93,*Default,NTP,0000,0000,0000,,详细了解这一切是如何运作的
Dialogue: 0,0:06:55.37,0:06:56.17,*Default,NTP,0000,0000,0000,,所以
Dialogue: 0,0:06:56.27,0:06:59.80,*Default,NTP,0000,0000,0000,,我们定义的名为秃头的类有一个构造函数
Dialogue: 0,0:07:00.90,0:07:03.40,*Default,NTP,0000,0000,0000,,这行代码正在调用构造函数
Dialogue: 0,0:07:03.40,0:07:06.10,*Default,NTP,0000,0000,0000,,执行什么操作来实例化一个对象
Dialogue: 0,0:07:06.10,0:07:07.00,*Default,NTP,0000,0000,0000,,所以就是这样
Dialogue: 0,0:07:07.17,0:07:11.53,*Default,NTP,0000,0000,0000,,我有一个球类课程，我想制作一个球
Dialogue: 0,0:07:11.53,0:07:14.07,*Default,NTP,0000,0000,0000,,我这样做的方法是调用这个构造函数
Dialogue: 0,0:07:15.30,0:07:17.57,*Default,NTP,0000,0000,0000,,构造函数只是类的名称
Dialogue: 0,0:07:17.57,0:07:19.17,*Default,NTP,0000,0000,0000,,然后一些信息
Dialogue: 0,0:07:19.17,0:07:21.40,*Default,NTP,0000,0000,0000,,关于我想要我的对象是什么
Dialogue: 0,0:07:21.40,0:07:23.87,*Default,NTP,0000,0000,0000,,在这种情况下，它是球的 xy 位置
Dialogue: 0,0:07:23.97,0:07:26.00,*Default,NTP,0000,0000,0000,,和球的 xy 速度
Dialogue: 0,0:07:26.00,0:07:27.77,*Default,NTP,0000,0000,0000,,我们会更多地讨论我们要做的事情
Dialogue: 0,0:07:27.77,0:07:28.70,*Default,NTP,0000,0000,0000,,与所有这些事情
Dialogue: 0,0:07:28.90,0:07:29.80,*Default,NTP,0000,0000,0000,,然后当然
Dialogue: 0,0:07:29.90,0:07:34.13,*Default,NTP,0000,0000,0000,,我的球现在是球类类型的对象
Dialogue: 0,0:07:34.73,0:07:36.27,*Default,NTP,0000,0000,0000,,所以这看起来和一切都很相似
Dialogue: 0,0:07:36.27,0:07:37.17,*Default,NTP,0000,0000,0000,,我们以前见过
Dialogue: 0,0:07:37.33,0:07:38.40,*Default,NTP,0000,0000,0000,,这是一个函数调用
Dialogue: 0,0:07:38.40,0:07:40.10,*Default,NTP,0000,0000,0000,,在这种情况下它恰好是一个构造函数
Dialogue: 0,0:07:40.10,0:07:41.60,*Default,NTP,0000,0000,0000,,我将在中更详细地描述
Dialogue: 0,0:07:41.60,0:07:44.30,*Default,NTP,0000,0000,0000,,次等类型球
Dialogue: 0,0:07:44.33,0:07:46.27,*Default,NTP,0000,0000,0000,,它会返回一些东西
Dialogue: 0,0:07:46.27,0:07:48.47,*Default,NTP,0000,0000,0000,,现在将成为一个对象
Dialogue: 0,0:07:48.93,0:07:50.67,*Default,NTP,0000,0000,0000,,现在这个构造函数真的是
Dialogue: 0,0:07:50.67,0:07:52.53,*Default,NTP,0000,0000,0000,,非常特别而且非常重要
Dialogue: 0,0:07:52.53,0:07:53.87,*Default,NTP,0000,0000,0000,,我花了一点时间谈论它
Dialogue: 0,0:07:53.87,0:07:55.60,*Default,NTP,0000,0000,0000,,在我实际向您展示代码之前
Dialogue: 0,0:07:55.73,0:07:57.80,*Default,NTP,0000,0000,0000,,如何构建这个类
Dialogue: 0,0:07:58.90,0:08:01.27,*Default,NTP,0000,0000,0000,,所以构造函数的第一件事就是
Dialogue: 0,0:08:01.37,0:08:03.93,*Default,NTP,0000,0000,0000,,记住这个类只是这个概念
Dialogue: 0,0:08:03.93,0:08:04.90,*Default,NTP,0000,0000,0000,,这只是一个蓝图
Dialogue: 0,0:08:04.90,0:08:06.47,*Default,NTP,0000,0000,0000,,我身体上还什么都没有
Dialogue: 0,0:08:06.47,0:08:08.50,*Default,NTP,0000,0000,0000,,我没有实际的物体
Dialogue: 0,0:08:08.50,0:08:09.97,*Default,NTP,0000,0000,0000,,所以它要做的第一件事
Dialogue: 0,0:08:10.00,0:08:13.20,*Default,NTP,0000,0000,0000,,它会在内存中创建一个球对象吗
Dialogue: 0,0:08:13.37,0:08:15.47,*Default,NTP,0000,0000,0000,,所以它进入内存并分配一些内存
Dialogue: 0,0:08:15.47,0:08:16.47,*Default,NTP,0000,0000,0000,,那说好的
Dialogue: 0,0:08:16.67,0:08:18.70,*Default,NTP,0000,0000,0000,,我们将在这里存储一些信息
Dialogue: 0,0:08:18.70,0:08:21.17,*Default,NTP,0000,0000,0000,,一些数据以及一些功能
Dialogue: 0,0:08:21.17,0:08:22.93,*Default,NTP,0000,0000,0000,,它会为你做到这一点
Dialogue: 0,0:08:23.17,0:08:25.50,*Default,NTP,0000,0000,0000,,好不是第一，所以实际上创造了球
Dialogue: 0,0:08:26.07,0:08:29.10,*Default,NTP,0000,0000,0000,,No.2 初始化数据
Dialogue: 0,0:08:29.33,0:08:31.27,*Default,NTP,0000,0000,0000,,根据你通过的内容
Dialogue: 0,0:08:31.87,0:08:33.53,*Default,NTP,0000,0000,0000,,所以现在它说的是好的
Dialogue: 0,0:08:33.53,0:08:34.93,*Default,NTP,0000,0000,0000,,我可以有多个球
Dialogue: 0,0:08:34.93,0:08:37.07,*Default,NTP,0000,0000,0000,,就像我可以拥有多栋房子一样
Dialogue: 0,0:08:37.07,0:08:39.13,*Default,NTP,0000,0000,0000,,我要构建一个对象
Dialogue: 0,0:08:39.27,0:08:40.60,*Default,NTP,0000,0000,0000,,我要为其分配内存
Dialogue: 0,0:08:40.60,0:08:43.70,*Default,NTP,0000,0000,0000,,我将存储用户想要的数据
Dialogue: 0,0:08:43.70,0:08:45.27,*Default,NTP,0000,0000,0000,,XY 位置
Dialogue: 0,0:08:45.40,0:08:48.97,*Default,NTP,0000,0000,0000,,vx vy x 和 y 方向的速度
Dialogue: 0,0:08:49.00,0:08:50.30,*Default,NTP,0000,0000,0000,,良好的初始化
Dialogue: 0,0:08:51.77,0:08:53.87,*Default,NTP,0000,0000,0000,,它会返回给你
Dialogue: 0,0:08:53.93,0:08:55.20,*Default,NTP,0000,0000,0000,,这真的很重要
Dialogue: 0,0:08:55.20,0:08:58.70,*Default,NTP,0000,0000,0000,,球对象的地址
Dialogue: 0,0:08:59.37,0:09:02.33,*Default,NTP,0000,0000,0000,,在内存中分配并为您初始化
Dialogue: 0,0:09:03.13,0:09:05.07,*Default,NTP,0000,0000,0000,,现在这听起来应该很不错
Dialogue: 0,0:09:05.20,0:09:08.33,*Default,NTP,0000,0000,0000,,你很熟悉，因为这听起来很像一个列表
Dialogue: 0,0:09:09.17,0:09:10.53,*Default,NTP,0000,0000,0000,,有了清单我们该怎么做
Dialogue: 0,0:09:10.70,0:09:12.87,*Default,NTP,0000,0000,0000,,我们说分数括号 分数括号
Dialogue: 0,0:09:12.87,0:09:15.40,*Default,NTP,0000,0000,0000,,调用其构造函数的语法略有不同
Dialogue: 0,0:09:15.50,0:09:18.80,*Default,NTP,0000,0000,0000,,列表中的一堆数据公共分隔元素
Dialogue: 0,0:09:18.80,0:09:20.07,*Default,NTP,0000,0000,0000,,python 是做什么的
Dialogue: 0,0:09:20.27,0:09:22.47,*Default,NTP,0000,0000,0000,,它进入内存并分配一些空间
Dialogue: 0,0:09:22.53,0:09:24.20,*Default,NTP,0000,0000,0000,,将数据粘贴在那里
Dialogue: 0,0:09:24.20,0:09:26.67,*Default,NTP,0000,0000,0000,,分配和初始化
Dialogue: 0,0:09:26.67,0:09:27.90,*Default,NTP,0000,0000,0000,,它会给你带来什么
Dialogue: 0,0:09:27.97,0:09:30.20,*Default,NTP,0000,0000,0000,,列表的地址
Dialogue: 0,0:09:30.60,0:09:33.10,*Default,NTP,0000,0000,0000,,不是实际的列表，而是列表的地址
Dialogue: 0,0:09:33.10,0:09:34.10,*Default,NTP,0000,0000,0000,,你当然可以
Dialogue: 0,0:09:34.10,0:09:36.60,*Default,NTP,0000,0000,0000,,然后引用列表的内容
Dialogue: 0,0:09:36.87,0:09:39.47,*Default,NTP,0000,0000,0000,,所以事实上我想我什至暗示过这个清单
Dialogue: 0,0:09:39.47,0:09:40.80,*Default,NTP,0000,0000,0000,,是一个内置对象
Dialogue: 0,0:09:40.80,0:09:42.97,*Default,NTP,0000,0000,0000,,他们做了所有这三件事
Dialogue: 0,0:09:43.70,0:09:44.37,*Default,NTP,0000,0000,0000,,好的
Dialogue: 0,0:09:44.37,0:09:46.80,*Default,NTP,0000,0000,0000,,所以这就是你可以在你的照片中看到的图片
Dialogue: 0,0:09:46.80,0:09:47.07,*Default,NTP,0000,0000,0000,,头
Dialogue: 0,0:09:47.07,0:09:49.67,*Default,NTP,0000,0000,0000,,我们在做列表时看到过这样的图片
Dialogue: 0,0:09:49.73,0:09:51.77,*Default,NTP,0000,0000,0000,,所以我又有一门叫做球的课
Dialogue: 0,0:09:51.77,0:09:53.30,*Default,NTP,0000,0000,0000,,你不知道我是怎么做到的
Dialogue: 0,0:09:53.30,0:09:54.57,*Default,NTP,0000,0000,0000,,我们会到达那里
Dialogue: 0,0:09:54.57,0:09:57.53,*Default,NTP,0000,0000,0000,,所以只需花一分钟抽象出这个细节
Dialogue: 0,0:09:58.07,0:10:00.73,*Default,NTP,0000,0000,0000,,你知道，因为我告诉你，你可以生成
Dialogue: 0,0:10:00.73,0:10:01.57,*Default,NTP,0000,0000,0000,,你可以建一个球
Dialogue: 0,0:10:01.57,0:10:04.97,*Default,NTP,0000,0000,0000,,它有四项您需要指定的信息
Dialogue: 0,0:10:05.07,0:10:06.67,*Default,NTP,0000,0000,0000,,它在图上的什么位置
Dialogue: 0,0:10:07.50,0:10:08.30,*Default,NTP,0000,0000,0000,,帆布
Dialogue: 0,0:10:09.30,0:10:11.80,*Default,NTP,0000,0000,0000,,它在水平和垂直方向上移动的速度有多快
Dialogue: 0,0:10:11.80,0:10:12.60,*Default,NTP,0000,0000,0000,,方向
Dialogue: 0,0:10:13.20,0:10:16.13,*Default,NTP,0000,0000,0000,,所以当你调用这个构造函数时
Dialogue: 0,0:10:16.60,0:10:19.60,*Default,NTP,0000,0000,0000,,它执行的操作是分配一些内存，就是这个盒子
Dialogue: 0,0:10:19.73,0:10:22.37,*Default,NTP,0000,0000,0000,,它初始化变量
Dialogue: 0,0:10:22.37,0:10:24.57,*Default,NTP,0000,0000,0000,,我要告诉你的是 xy vxby
Dialogue: 0,0:10:24.57,0:10:25.90,*Default,NTP,0000,0000,0000,,几分钟后我们就会看到
Dialogue: 0,0:10:25.97,0:10:28.27,*Default,NTP,0000,0000,0000,,为您在 10 中传递的值
Dialogue: 0,0:10:29.07,0:10:30.53,*Default,NTP,0000,0000,0000,,15 0 -5
Dialogue: 0,0:10:30.57,0:10:32.20,*Default,NTP,0000,0000,0000,,它把你交还给你
Dialogue: 0,0:10:32.70,0:10:34.67,*Default,NTP,0000,0000,0000,,对象的地址
Dialogue: 0,0:10:34.67,0:10:36.40,*Default,NTP,0000,0000,0000,,所以这又只是一些随机数
Dialogue: 0,0:10:36.40,0:10:39.00,*Default,NTP,0000,0000,0000,,它只是一个指向它所在位置的指针
Dialogue: 0,0:10:40.40,0:10:44.13,*Default,NTP,0000,0000,0000,,所以我在内存中有一个对象我已经实例化了一个
Dialogue: 0,0:10:44.77,0:10:48.07,*Default,NTP,0000,0000,0000,,某种类型的球，一类类型，现在
Dialogue: 0,0:10:48.47,0:10:50.67,*Default,NTP,0000,0000,0000,,我有两件事可以使用
Dialogue: 0,0:10:51.10,0:10:52.50,*Default,NTP,0000,0000,0000,,我有数据
Dialogue: 0,0:10:52.60,0:10:53.80,*Default,NTP,0000,0000,0000,,我刚刚初始化过
Dialogue: 0,0:10:53.80,0:10:54.60,*Default,NTP,0000,0000,0000,,我拥有所有
Dialogue: 0,0:10:54.60,0:10:56.20,*Default,NTP,0000,0000,0000,,该类附带的功能
Dialogue: 0,0:10:56.20,0:10:57.80,*Default,NTP,0000,0000,0000,,我还没有给你看，但我会的
Dialogue: 0,0:10:57.97,0:10:58.80,*Default,NTP,0000,0000,0000,,在一分钟内
Dialogue: 0,0:10:59.47,0:11:01.60,*Default,NTP,0000,0000,0000,,现在如果我定义另一个球
Dialogue: 0,0:11:01.60,0:11:05.13,*Default,NTP,0000,0000,0000,,这是第二个球，具有不同的 xy 位置 12 和 23
Dialogue: 0,0:11:05.37,0:11:07.47,*Default,NTP,0000,0000,0000,,以及不同的速度二和三
Dialogue: 0,0:11:08.30,0:11:09.40,*Default,NTP,0000,0000,0000,,那么会发生什么
Dialogue: 0,0:11:09.40,0:11:11.10,*Default,NTP,0000,0000,0000,,好吧，这是对构造函数的调用
Dialogue: 0,0:11:11.10,0:11:13.17,*Default,NTP,0000,0000,0000,,构造函数分配内存
Dialogue: 0,0:11:13.17,0:11:15.27,*Default,NTP,0000,0000,0000,,它初始化四个变量
Dialogue: 0,0:11:15.27,0:11:17.37,*Default,NTP,0000,0000,0000,,它会返回给你一个地址
Dialogue: 0,0:11:17.37,0:11:19.87,*Default,NTP,0000,0000,0000,,现在我有两个对象
Dialogue: 0,0:11:20.37,0:11:21.80,*Default,NTP,0000,0000,0000,,彼此完全分开
Dialogue: 0,0:11:22.00,0:11:22.60,*Default,NTP,0000,0000,0000,,正确的
Dialogue: 0,0:11:22.60,0:11:25.80,*Default,NTP,0000,0000,0000,,这是对教练的电话，请构建一个球对象
Dialogue: 0,0:11:25.80,0:11:27.10,*Default,NTP,0000,0000,0000,,这是给教练的电话
Dialogue: 0,0:11:27.17,0:11:29.30,*Default,NTP,0000,0000,0000,,再创建一个，我可以一整天都这样做
Dialogue: 0,0:11:29.67,0:11:32.50,*Default,NTP,0000,0000,0000,,其中每一个都存储自己的数据
Dialogue: 0,0:11:32.67,0:11:36.30,*Default,NTP,0000,0000,0000,,每个人都可以使用功能来做我们想做的事
Dialogue: 0,0:11:36.30,0:11:38.53,*Default,NTP,0000,0000,0000,,到这个球对象
Dialogue: 0,0:11:39.20,0:11:40.00,*Default,NTP,0000,0000,0000,,好的
Dialogue: 0,0:11:40.40,0:11:41.20,*Default,NTP,0000,0000,0000,,所以
Dialogue: 0,0:11:41.97,0:11:42.53,*Default,NTP,0000,0000,0000,,然后再次
Dialogue: 0,0:11:42.53,0:11:44.00,*Default,NTP,0000,0000,0000,,我还没有向你展示如何构建锻炼
Dialogue: 0,0:11:44.00,0:11:45.13,*Default,NTP,0000,0000,0000,,我还没有向您展示如何定义类
Dialogue: 0,0:11:45.13,0:11:46.47,*Default,NTP,0000,0000,0000,,我还没有向你展示任何东西
Dialogue: 0,0:11:46.47,0:11:47.50,*Default,NTP,0000,0000,0000,,但我想
Dialogue: 0,0:11:47.50,0:11:49.20,*Default,NTP,0000,0000,0000,,花一分钟时间追踪并完成这些
Dialogue: 0,0:11:49.20,0:11:51.10,*Default,NTP,0000,0000,0000,,概念然后我们要深入
Dialogue: 0,0:11:51.10,0:11:53.13,*Default,NTP,0000,0000,0000,,下一部分详细介绍
Dialogue: 0,0:11:54.07,0:11:54.47,*Default,NTP,0000,0000,0000,,好的
Dialogue: 0,0:11:54.47,0:11:57.50,*Default,NTP,0000,0000,0000,,在我们结束之前让我先说几点
Dialogue: 0,0:11:57.50,0:12:00.50,*Default,NTP,0000,0000,0000,,所以当我定义一个目标球时
Dialogue: 0,0:12:00.90,0:12:02.77,*Default,NTP,0000,0000,0000,,我可以访问各种
Dialogue: 0,0:12:02.77,0:12:05.10,*Default,NTP,0000,0000,0000,,我初始化的数据元素
Dialogue: 0,0:12:05.10,0:12:07.57,*Default,NTP,0000,0000,0000,,并记住它是 xy vxvy
Dialogue: 0,0:12:07.73,0:12:10.80,*Default,NTP,0000,0000,0000,,就在那里使用那个小点符号
Dialogue: 0,0:12:11.07,0:12:14.57,*Default,NTP,0000,0000,0000,,所以球一当然是对象的名称
Dialogue: 0,0:12:14.77,0:12:18.00,*Default,NTP,0000,0000,0000,,我可以触及那个物体
Dialogue: 0,0:12:18.07,0:12:21.07,*Default,NTP,0000,0000,0000,,我可以访问数据和功能
Dialogue: 0,0:12:21.07,0:12:23.30,*Default,NTP,0000,0000,0000,,当然使用点符号
Dialogue: 0,0:12:23.30,0:12:24.47,*Default,NTP,0000,0000,0000,,所以你记得不久前
Dialogue: 0,0:12:24.47,0:12:25.87,*Default,NTP,0000,0000,0000,,我们引入了点符号
Dialogue: 0,0:12:25.87,0:12:27.93,*Default,NTP,0000,0000,0000,,我用力挥动双手
Dialogue: 0,0:12:27.93,0:12:29.70,*Default,NTP,0000,0000,0000,,告诉你这是一些语法问题
Dialogue: 0,0:12:29.70,0:12:31.07,*Default,NTP,0000,0000,0000,,与面向对象程序有关
Dialogue: 0,0:12:31.07,0:12:32.47,*Default,NTP,0000,0000,0000,,别担心，我们会解决的
Dialogue: 0,0:12:32.93,0:12:33.87,*Default,NTP,0000,0000,0000,,我们正在努力做到这一点
Dialogue: 0,0:12:34.13,0:12:38.87,*Default,NTP,0000,0000,0000,,这个点符号是访问任一数据的一部分
Dialogue: 0,0:12:39.10,0:12:43.20,*Default,NTP,0000,0000,0000,,或与对象相关的功能
Dialogue: 0,0:12:43.33,0:12:44.80,*Default,NTP,0000,0000,0000,,所以你给出对象名称
Dialogue: 0,0:12:45.27,0:12:47.57,*Default,NTP,0000,0000,0000,,点，然后是数据类型
Dialogue: 0,0:12:47.57,0:12:48.33,*Default,NTP,0000,0000,0000,,而且当然
Dialogue: 0,0:12:48.33,0:12:49.57,*Default,NTP,0000,0000,0000,,你可以明白这是为什么
Dialogue: 0,0:12:49.57,0:12:51.80,*Default,NTP,0000,0000,0000,,如果我可以创建多个对象
Dialogue: 0,0:12:51.87,0:12:53.67,*Default,NTP,0000,0000,0000,,它本身不是 x
Dialogue: 0,0:12:53.93,0:12:59.10,*Default,NTP,0000,0000,0000,,是这个球 x 或这个球 y 或 vx 或 vy
Dialogue: 0,0:12:59.30,0:13:01.20,*Default,NTP,0000,0000,0000,,所以我必须说你想要哪个对象
Dialogue: 0,0:13:01.27,0:13:04.00,*Default,NTP,0000,0000,0000,,然后是哪个数据元素
Dialogue: 0,0:13:04.00,0:13:05.13,*Default,NTP,0000,0000,0000,,房子也一样
Dialogue: 0,0:13:05.47,0:13:07.53,*Default,NTP,0000,0000,0000,,如果我有五栋相同的房子
Dialogue: 0,0:13:07.60,0:13:12.50,*Default,NTP,0000,0000,0000,,我不能说把这个包裹送到舞会或房子
Dialogue: 0,0:13:12.50,0:13:14.80,*Default,NTP,0000,0000,0000,,我不得不说这个房子这个地址
Dialogue: 0,0:13:14.80,0:13:17.37,*Default,NTP,0000,0000,0000,,然后你走进那个特定的房子
Dialogue: 0,0:13:17.47,0:13:19.13,*Default,NTP,0000,0000,0000,,并从中得到你想要的
Dialogue: 0,0:13:19.97,0:13:21.67,*Default,NTP,0000,0000,0000,,好并且
Dialogue: 0,0:13:23.20,0:13:28.80,*Default,NTP,0000,0000,0000,,我还可以访问与对象关联的函数
Dialogue: 0,0:13:28.80,0:13:29.77,*Default,NTP,0000,0000,0000,,我又没有
Dialogue: 0,0:13:29.87,0:13:30.97,*Default,NTP,0000,0000,0000,,已经向您展示了如何做到这一点
Dialogue: 0,0:13:30.97,0:13:32.80,*Default,NTP,0000,0000,0000,,但我只想介绍一下符号
Dialogue: 0,0:13:33.17,0:13:35.73,*Default,NTP,0000,0000,0000,,所以我正在做的是初始化一个球
Dialogue: 0,0:13:35.97,0:13:39.20,*Default,NTP,0000,0000,0000,,在位置五四，速度三和六
Dialogue: 0,0:13:39.50,0:13:40.10,*Default,NTP,0000,0000,0000,,我可以
Dialogue: 0,0:13:40.10,0:13:42.50,*Default,NTP,0000,0000,0000,,只需说出 ball one 即可打印 x 坐标
Dialogue: 0,0:13:42.50,0:13:44.90,*Default,NTP,0000,0000,0000,,这当然是变量 x 的名称
Dialogue: 0,0:13:44.97,0:13:47.77,*Default,NTP,0000,0000,0000,,当我打印出来时，它会为我打印五个
Dialogue: 0,0:13:47.80,0:13:50.13,*Default,NTP,0000,0000,0000,,因为那是这里的x位置
Dialogue: 0,0:13:50.73,0:13:54.07,*Default,NTP,0000,0000,0000,,现在请记住，课程是捆绑在一起的
Dialogue: 0,0:13:54.47,0:13:58.90,*Default,NTP,0000,0000,0000,,数据和功能是你实际可以做的事情
Dialogue: 0,0:13:59.20,0:14:01.33,*Default,NTP,0000,0000,0000,,什么功能都可以，无论我想要什么
Dialogue: 0,0:14:01.33,0:14:02.53,*Default,NTP,0000,0000,0000,,所以对于一个列表
Dialogue: 0,0:14:02.60,0:14:04.77,*Default,NTP,0000,0000,0000,,我可以添加东西删除东西附加东西
Dialogue: 0,0:14:04.77,0:14:05.30,*Default,NTP,0000,0000,0000,,整理东西
Dialogue: 0,0:14:05.30,0:14:07.53,*Default,NTP,0000,0000,0000,,这就是赋予我的功能
Dialogue: 0,0:14:07.73,0:14:08.93,*Default,NTP,0000,0000,0000,,对于这个球类
Dialogue: 0,0:14:08.93,0:14:10.07,*Default,NTP,0000,0000,0000,,好吧，我们会看到一点
Dialogue: 0,0:14:10.07,0:14:11.87,*Default,NTP,0000,0000,0000,,但这就是我想为球类课程做的任何事情
Dialogue: 0,0:14:11.87,0:14:14.90,*Default,NTP,0000,0000,0000,,这是我作为这个类的构造函数的工作
Dialogue: 0,0:14:14.90,0:14:17.30,*Default,NTP,0000,0000,0000,,为您提供一定数量的功能
Dialogue: 0,0:14:17.57,0:14:20.20,*Default,NTP,0000,0000,0000,,我会告诉你其中一个功能
Dialogue: 0,0:14:20.27,0:14:22.47,*Default,NTP,0000,0000,0000,,是一个称为更新位置的函数
Dialogue: 0,0:14:22.47,0:14:24.47,*Default,NTP,0000,0000,0000,,它需要一个时间步长作为输入
Dialogue: 0,0:14:24.57,0:14:28.60,*Default,NTP,0000,0000,0000,,它根据
Dialogue: 0,0:14:28.87,0:14:29.87,*Default,NTP,0000,0000,0000,,速度
Dialogue: 0,0:14:30.10,0:14:32.30,*Default,NTP,0000,0000,0000,,好的，让我们考虑一下
Dialogue: 0,0:14:32.30,0:14:35.73,*Default,NTP,0000,0000,0000,,这是在某些像素坐标中，速度是
Dialogue: 0,0:14:35.90,0:14:40.50,*Default,NTP,0000,0000,0000,,每第二或每帧移动多少像素
Dialogue: 0,0:14:41.00,0:14:43.87,*Default,NTP,0000,0000,0000,,所以时间步长为0.1
Dialogue: 0,0:14:44.47,0:14:47.13,*Default,NTP,0000,0000,0000,,当我更新这个球的位置时
Dialogue: 0,0:14:47.30,0:14:50.33,*Default,NTP,0000,0000,0000,,它的 x 坐标从位置 5 移动
Dialogue: 0,0:14:50.73,0:14:54.10,*Default,NTP,0000,0000,0000,,位置五加上三的十分之一
Dialogue: 0,0:14:54.27,0:14:56.77,*Default,NTP,0000,0000,0000,,因为这是每 2 个 3 个像素
Dialogue: 0,0:14:56.90,0:14:59.40,*Default,NTP,0000,0000,0000,,我移动了十分之一秒
Dialogue: 0,0:14:59.47,0:15:01.30,*Default,NTP,0000,0000,0000,,所以我移动了 0.3 像素
Dialogue: 0,0:15:01.33,0:15:03.13,*Default,NTP,0000,0000,0000,,现在它有了一个新的位置
Dialogue: 0,0:15:03.37,0:15:06.13,*Default,NTP,0000,0000,0000,,好的，请注意这里的函数
Dialogue: 0,0:15:06.53,0:15:09.13,*Default,NTP,0000,0000,0000,,与目标球相关联
Dialogue: 0,0:15:09.20,0:15:14.53,*Default,NTP,0000,0000,0000,,正在对与对象关联的数据进行操作
Dialogue: 0,0:15:15.10,0:15:16.27,*Default,NTP,0000,0000,0000,,球还好
Dialogue: 0,0:15:16.30,0:15:19.77,*Default,NTP,0000,0000,0000,,所以这个类再次捆绑数据
Dialogue: 0,0:15:19.77,0:15:22.13,*Default,NTP,0000,0000,0000,,有关您所存储内容的信息
Dialogue: 0,0:15:22.20,0:15:24.57,*Default,NTP,0000,0000,0000,,然后让你有能力操纵它
Dialogue: 0,0:15:24.80,0:15:26.17,*Default,NTP,0000,0000,0000,,通过函数获取数据
Dialogue: 0,0:15:26.53,0:15:28.70,*Default,NTP,0000,0000,0000,,再说一遍，这不是符号
Dialogue: 0,0:15:28.70,0:15:31.87,*Default,NTP,0000,0000,0000,,我没有调用函数更新位置
Dialogue: 0,0:15:32.37,0:15:33.53,*Default,NTP,0000,0000,0000,,这不是一个函数
Dialogue: 0,0:15:33.70,0:15:36.87,*Default,NTP,0000,0000,0000,,这是与一类紧球相关的函数
Dialogue: 0,0:15:36.97,0:15:40.40,*Default,NTP,0000,0000,0000,,我正在调用这个球的更新位置
Dialogue: 0,0:15:40.40,0:15:41.53,*Default,NTP,0000,0000,0000,,和另一个球
Dialogue: 0,0:15:41.77,0:15:43.00,*Default,NTP,0000,0000,0000,,它有不同的更新位置
Dialogue: 0,0:15:43.00,0:15:45.50,*Default,NTP,0000,0000,0000,,为什么因为它必须对自己的数据进行操作
Dialogue: 0,0:15:45.80,0:15:48.07,*Default,NTP,0000,0000,0000,,所以每次实例化一个对象时
Dialogue: 0,0:15:48.07,0:15:51.17,*Default,NTP,0000,0000,0000,,您获得与相关的数据和功能
Dialogue: 0,0:15:51.17,0:15:52.27,*Default,NTP,0000,0000,0000,,那个物体
Dialogue: 0,0:15:53.70,0:15:54.97,*Default,NTP,0000,0000,0000,,好吧，我知道很多了
Dialogue: 0,0:15:54.97,0:15:56.07,*Default,NTP,0000,0000,0000,,有很多
Dialogue: 0,0:15:56.27,0:15:57.70,*Default,NTP,0000,0000,0000,,这里发生的概念性的事情
Dialogue: 0,0:15:57.70,0:15:59.30,*Default,NTP,0000,0000,0000,,很多语法上的东西
Dialogue: 0,0:15:59.53,0:16:00.00,*Default,NTP,0000,0000,0000,,坚持，稍等
Dialogue: 0,0:16:00.00,0:16:02.53,*Default,NTP,0000,0000,0000,,我们将在本次讲座中再讲几个部分
Dialogue: 0,0:16:02.53,0:16:03.87,*Default,NTP,0000,0000,0000,,我现在就开始
Dialogue: 0,0:16:03.97,0:16:05.93,*Default,NTP,0000,0000,0000,,揭示
Dialogue: 0,0:16:06.00,0:16:09.70,*Default,NTP,0000,0000,0000,,如何构建这些类和对象并向您展示
Dialogue: 0,0:16:09.87,0:16:12.13,*Default,NTP,0000,0000,0000,,数据在哪里，功能就在哪里
Dialogue: 0,0:16:12.57,0:16:14.57,*Default,NTP,0000,0000,0000,,希望这会变得更加清晰
Dialogue: 0,0:16:14.57,0:16:16.33,*Default,NTP,0000,0000,0000,,好的，几分钟后我们来取
Dialogue: 0,0:16:18.50,0:16:19.20,*Default,NTP,0000,0000,0000,,剩下的这个
Dialogue: 0,0:16:19.20,0:16:21.87,*Default,NTP,0000,0000,0000,,播放列表是我给出的标准讲座
Dialogue: 0,0:16:22.13,0:16:24.20,*Default,NTP,0000,0000,0000,,关于面向对象编程
Dialogue: 0,0:16:24.30,0:16:26.00,*Default,NTP,0000,0000,0000,,从头开始
Dialogue: 0,0:16:26.10,0:16:28.27,*Default,NTP,0000,0000,0000,,所以它会有点多余
Dialogue: 0,0:16:28.27,0:16:30.30,*Default,NTP,0000,0000,0000,,弗里教授刚才说的
Dialogue: 0,0:16:30.50,0:16:32.50,*Default,NTP,0000,0000,0000,,但我认为已经足够了
Dialogue: 0,0:16:32.50,0:16:34.50,*Default,NTP,0000,0000,0000,,我们描述方式的差异
Dialogue: 0,0:16:34.50,0:16:35.97,*Default,NTP,0000,0000,0000,,这些事情并激励他们
Dialogue: 0,0:16:36.00,0:16:37.70,*Default,NTP,0000,0000,0000,,他们俩都值得一看
Dialogue: 0,0:16:38.17,0:16:40.30,*Default,NTP,0000,0000,0000,,本讲座的其余部分还将涵盖
Dialogue: 0,0:16:40.30,0:16:41.50,*Default,NTP,0000,0000,0000,,所有的机械师
Dialogue: 0,0:16:41.50,0:16:42.53,*Default,NTP,0000,0000,0000,,你如何构建
Dialogue: 0,0:16:42.53,0:16:45.60,*Default,NTP,0000,0000,0000,,你自己的类和方法以及所有这些
Dialogue: 0,0:16:46.37,0:16:48.97,*Default,NTP,0000,0000,0000,,但也许你还没有得到足够的
Dialogue: 0,0:16:48.97,0:16:51.07,*Default,NTP,0000,0000,0000,,弗里德教授的描述还没有
Dialogue: 0,0:16:51.30,0:16:52.60,*Default,NTP,0000,0000,0000,,我完全明白
Dialogue: 0,0:16:52.60,0:16:53.47,*Default,NTP,0000,0000,0000,,这很棒
Dialogue: 0,0:16:53.80,0:16:56.20,*Default,NTP,0000,0000,0000,,所以如果你看一下这个视频的描述
Dialogue: 0,0:16:56.27,0:16:57.87,*Default,NTP,0000,0000,0000,,你会找到其余部分的链接
Dialogue: 0,0:16:57.87,0:16:59.93,*Default,NTP,0000,0000,0000,,他的面向对象编程讲座
Dialogue: 0,0:17:00.33,0:17:01.40,*Default,NTP,0000,0000,0000,,它确实依赖
Dialogue: 0,0:17:01.40,0:17:03.57,*Default,NTP,0000,0000,0000,,关于我们尚未涉及的一些事情
Dialogue: 0,0:17:03.57,0:17:05.33,*Default,NTP,0000,0000,0000,,就像如何在屏幕上绘图一样
Dialogue: 0,0:17:05.40,0:17:07.93,*Default,NTP,0000,0000,0000,,以及如何使用笔记本编写Python
Dialogue: 0,0:17:08.30,0:17:09.87,*Default,NTP,0000,0000,0000,,你可以了解那些东西
Dialogue: 0,0:17:09.97,0:17:10.80,*Default,NTP,0000,0000,0000,,只需遵循
Dialogue: 0,0:17:10.80,0:17:12.73,*Default,NTP,0000,0000,0000,,说明中的其余链接
Dialogue: 0,0:17:12.77,0:17:13.87,*Default,NTP,0000,0000,0000,,引导你完成
Dialogue: 0,0:17:14.00,0:17:15.33,*Default,NTP,0000,0000,0000,,第一周
Dialogue: 0,0:17:15.33,0:17:18.47,*Default,NTP,0000,0000,0000,,里德研究生课程 206a 教授
Dialogue: 0,0:17:18.87,0:17:21.27,*Default,NTP,0000,0000,0000,,我还添加了该课程网站的链接
Dialogue: 0,0:17:21.50,0:17:22.73,*Default,NTP,0000,0000,0000,,如果你想找到
Dialogue: 0,0:17:22.73,0:17:24.53,*Default,NTP,0000,0000,0000,,他在那里制作的更多视频
Dialogue: 0,0:17:25.13,0:17:27.27,*Default,NTP,0000,0000,0000,,所以欢迎你现在就去探索这些东西
Dialogue: 0,0:17:27.57,0:17:29.60,*Default,NTP,0000,0000,0000,,或者您可以继续观看此播放列表
Dialogue: 0,0:17:29.67,0:17:31.50,*Default,NTP,0000,0000,0000,,并听听标准 61 a
Dialogue: 0,0:17:31.50,0:17:33.17,*Default,NTP,0000,0000,0000,,对象介绍
Dialogue: 0,0:17:35.20,0:17:36.27,*Default,NTP,0000,0000,0000,,今天我们开始
Dialogue: 0,0:17:36.37,0:17:39.93,*Default,NTP,0000,0000,0000,,学习面向对象编程
Dialogue: 0,0:17:40.57,0:17:42.13,*Default,NTP,0000,0000,0000,,所以我们已经知道所有
Dialogue: 0,0:17:42.33,0:17:44.60,*Default,NTP,0000,0000,0000,,值是Python中的对象
Dialogue: 0,0:17:45.17,0:17:46.20,*Default,NTP,0000,0000,0000,,但我们要开始
Dialogue: 0,0:17:46.20,0:17:47.70,*Default,NTP,0000,0000,0000,,明白这真正意味着什么
Dialogue: 0,0:17:50.20,0:17:53.60,*Default,NTP,0000,0000,0000,,面向对象编程是一种组织方法
Dialogue: 0,0:17:53.70,0:17:55.37,*Default,NTP,0000,0000,0000,,模块化程序
Dialogue: 0,0:17:55.77,0:17:57.87,*Default,NTP,0000,0000,0000,,这意味着你定义了每一个部分
Dialogue: 0,0:17:58.20,0:18:00.37,*Default,NTP,0000,0000,0000,,不用担心其他部分
Dialogue: 0,0:18:00.60,0:18:02.00,*Default,NTP,0000,0000,0000,,然后他们一起工作
Dialogue: 0,0:18:02.97,0:18:05.13,*Default,NTP,0000,0000,0000,,所以这意味着我们要担心抽象
Dialogue: 0,0:18:05.13,0:18:08.57,*Default,NTP,0000,0000,0000,,障碍和信息捆绑在一起
Dialogue: 0,0:18:08.80,0:18:10.67,*Default,NTP,0000,0000,0000,,及其相关行为
Dialogue: 0,0:18:12.50,0:18:14.90,*Default,NTP,0000,0000,0000,,面向对象编程也是一个比喻
Dialogue: 0,0:18:15.47,0:18:18.70,*Default,NTP,0000,0000,0000,,使用分布式状态进行计算
Dialogue: 0,0:18:19.07,0:18:21.17,*Default,NTP,0000,0000,0000,,分布式状态是什么意思
Dialogue: 0,0:18:21.50,0:18:23.77,*Default,NTP,0000,0000,0000,,好吧，我们会有一堆不同的对象
Dialogue: 0,0:18:23.77,0:18:26.47,*Default,NTP,0000,0000,0000,,每个都有自己的本地状态
Dialogue: 0,0:18:27.20,0:18:28.67,*Default,NTP,0000,0000,0000,,所以当我们想知道
Dialogue: 0,0:18:28.77,0:18:30.17,*Default,NTP,0000,0000,0000,,程序中发生了什么
Dialogue: 0,0:18:30.17,0:18:31.40,*Default,NTP,0000,0000,0000,,我们必须检查每一个
Dialogue: 0,0:18:31.40,0:18:33.20,*Default,NTP,0000,0000,0000,,为了弄清楚这一点
Dialogue: 0,0:18:34.17,0:18:35.77,*Default,NTP,0000,0000,0000,,每个对象也会知道
Dialogue: 0,0:18:35.80,0:18:38.17,*Default,NTP,0000,0000,0000,,如何管理自己的本地状态
Dialogue: 0,0:18:38.77,0:18:40.70,*Default,NTP,0000,0000,0000,,基于方法调用
Dialogue: 0,0:18:41.10,0:18:43.07,*Default,NTP,0000,0000,0000,,所以你调用一个对象的方法
Dialogue: 0,0:18:43.17,0:18:44.93,*Default,NTP,0000,0000,0000,,这可能会改变它的状态
Dialogue: 0,0:18:45.13,0:18:47.93,*Default,NTP,0000,0000,0000,,对象知道如何正确更新其状态
Dialogue: 0,0:18:48.87,0:18:51.20,*Default,NTP,0000,0000,0000,,最好考虑这些方法调用
Dialogue: 0,0:18:51.33,0:18:54.60,*Default,NTP,0000,0000,0000,,作为在对象之间传递的消息
Dialogue: 0,0:18:55.07,0:18:56.27,*Default,NTP,0000,0000,0000,,这就是比喻
Dialogue: 0,0:18:56.27,0:18:57.93,*Default,NTP,0000,0000,0000,,我们有很多不同的东西
Dialogue: 0,0:18:58.73,0:19:01.67,*Default,NTP,0000,0000,0000,,对象之间传递消息
Dialogue: 0,0:19:01.97,0:19:04.87,*Default,NTP,0000,0000,0000,,每个人都有责任照顾自己的
Dialogue: 0,0:19:05.00,0:19:06.27,*Default,NTP,0000,0000,0000,,内部状态
Dialogue: 0,0:19:06.37,0:19:08.13,*Default,NTP,0000,0000,0000,,那么它自己到底怎么了
Dialogue: 0,0:19:09.47,0:19:12.77,*Default,NTP,0000,0000,0000,,多个对象可能是同一类型的实例
Dialogue: 0,0:19:13.37,0:19:15.77,*Default,NTP,0000,0000,0000,,并且不同类型可能相互关联
Dialogue: 0,0:19:16.20,0:19:18.30,*Default,NTP,0000,0000,0000,,所以我们将看到所有这些东西的例子
Dialogue: 0,0:19:18.60,0:19:21.50,*Default,NTP,0000,0000,0000,,但这是你想要理解的基本想法
Dialogue: 0,0:19:21.50,0:19:23.57,*Default,NTP,0000,0000,0000,,当你考虑面向对象编程时
Dialogue: 0,0:19:24.87,0:19:26.60,*Default,NTP,0000,0000,0000,,并支持这个比喻
Dialogue: 0,0:19:26.60,0:19:29.33,*Default,NTP,0000,0000,0000,,我们会有专门的语法和词汇
Dialogue: 0,0:19:29.60,0:19:30.97,*Default,NTP,0000,0000,0000,,为了让这一切
Dialogue: 0,0:19:31.40,0:19:33.10,*Default,NTP,0000,0000,0000,,有道理所以
Dialogue: 0,0:19:33.77,0:19:35.50,*Default,NTP,0000,0000,0000,,我们在上一讲中看到
Dialogue: 0,0:19:35.50,0:19:37.30,*Default,NTP,0000,0000,0000,,我们可能有不同的对象
Dialogue: 0,0:19:37.30,0:19:39.97,*Default,NTP,0000,0000,0000,,那时它们是函数，现在它们将是对象
Dialogue: 0,0:19:40.10,0:19:42.60,*Default,NTP,0000,0000,0000,,那是约翰的帐户和史蒂文斯的帐户
Dialogue: 0,0:19:43.13,0:19:46.13,*Default,NTP,0000,0000,0000,,假设我们有另一个对象 john
Dialogue: 0,0:19:46.97,0:19:48.60,*Default,NTP,0000,0000,0000,,我把它做得很高，因为你知道
Dialogue: 0,0:19:48.90,0:19:52.17,*Default,NTP,0000,0000,0000,,那么这个比喻中发生了什么
Dialogue: 0,0:19:52.17,0:19:52.33,*Default,NTP,0000,0000,0000,,是
Dialogue: 0,0:19:52.33,0:19:54.93,*Default,NTP,0000,0000,0000,,如果约翰想从他的账户提款
Dialogue: 0,0:19:54.93,0:19:56.17,*Default,NTP,0000,0000,0000,,把它给史蒂文
Dialogue: 0,0:19:56.87,0:19:58.07,*Default,NTP,0000,0000,0000,,然后就会有一条消息
Dialogue: 0,0:19:58.07,0:20:00.07,*Default,NTP,0000,0000,0000,,从 john 传递到该帐户
Dialogue: 0,0:20:00.20,0:20:02.10,*Default,NTP,0000,0000,0000,,账户业务是
Dialogue: 0,0:20:02.10,0:20:04.47,*Default,NTP,0000,0000,0000,,确保它知道如何取款
Dialogue: 0,0:20:04.57,0:20:07.13,*Default,NTP,0000,0000,0000,,并正确更新其余额
Dialogue: 0,0:20:07.70,0:20:08.80,*Default,NTP,0000,0000,0000,,就像约翰所做的那样
Dialogue: 0,0:20:08.80,0:20:11.27,*Default,NTP,0000,0000,0000,,那么我可能会向斯蒂芬的帐户发送另一条消息
Dialogue: 0,0:20:11.33,0:20:13.50,*Default,NTP,0000,0000,0000,,说押金10美元
Dialogue: 0,0:20:13.50,0:20:15.97,*Default,NTP,0000,0000,0000,,然后斯蒂芬的账户余额将被更新
Dialogue: 0,0:20:16.40,0:20:18.40,*Default,NTP,0000,0000,0000,,现在每个帐户的余额已存储
Dialogue: 0,0:20:18.40,0:20:19.70,*Default,NTP,0000,0000,0000,,在对象内
Dialogue: 0,0:20:20.17,0:20:23.30,*Default,NTP,0000,0000,0000,,约翰可以根据需要使用消息来请求
Dialogue: 0,0:20:23.93,0:20:24.80,*Default,NTP,0000,0000,0000,,这个想法是
Dialogue: 0,0:20:24.80,0:20:26.57,*Default,NTP,0000,0000,0000,,所有这些不同的物体可能有其他的
Dialogue: 0,0:20:26.57,0:20:27.73,*Default,NTP,0000,0000,0000,,消息传入
Dialogue: 0,0:20:28.17,0:20:30.67,*Default,NTP,0000,0000,0000,,他们也可能向其他对象发送消息
Dialogue: 0,0:20:30.67,0:20:32.77,*Default,NTP,0000,0000,0000,,所以约翰的帐户有时可能会说
Dialogue: 0,0:20:32.93,0:20:34.50,*Default,NTP,0000,0000,0000,,多次提款后
Dialogue: 0,0:20:34.73,0:20:37.73,*Default,NTP,0000,0000,0000,,约翰可能是时候申请贷款了
Dialogue: 0,0:20:38.93,0:20:40.90,*Default,NTP,0000,0000,0000,,这就是我们想要创造的想法
Dialogue: 0,0:20:41.00,0:20:42.00,*Default,NTP,0000,0000,0000,,当我们写代码时
Dialogue: 0,0:20:42.00,0:20:45.87,*Default,NTP,0000,0000,0000,,使用像 python 这样的面向对象编程语言
Dialogue: 0,0:20:48.30,0:20:49.27,*Default,NTP,0000,0000,0000,,从根本上
Dialogue: 0,0:20:49.70,0:20:52.80,*Default,NTP,0000,0000,0000,,对象根据类进行组织
Dialogue: 0,0:20:53.10,0:20:56.77,*Default,NTP,0000,0000,0000,,类充当其所有实例的模板
Dialogue: 0,0:20:56.90,0:21:00.17,*Default,NTP,0000,0000,0000,,每个对象都是某个类的实例
Dialogue: 0,0:21:00.77,0:21:01.77,*Default,NTP,0000,0000,0000,,所以我们内置了
Dialogue: 0,0:21:01.77,0:21:03.60,*Default,NTP,0000,0000,0000,,我们一路上看到的课程
Dialogue: 0,0:21:03.80,0:21:06.57,*Default,NTP,0000,0000,0000,,但现在我们要开始定义我们自己的类
Dialogue: 0,0:21:07.53,0:21:08.80,*Default,NTP,0000,0000,0000,,所以想法是
Dialogue: 0,0:21:08.97,0:21:11.73,*Default,NTP,0000,0000,0000,,所有银行账户都会有余额
Dialogue: 0,0:21:11.90,0:21:13.27,*Default,NTP,0000,0000,0000,,和账户持有人
Dialogue: 0,0:21:13.67,0:21:15.80,*Default,NTP,0000,0000,0000,,这就是银行账户之所以成为银行账户的原因
Dialogue: 0,0:21:16.27,0:21:17.67,*Default,NTP,0000,0000,0000,,所以帐户类别
Dialogue: 0,0:21:17.70,0:21:20.17,*Default,NTP,0000,0000,0000,,应该确保它的每个实例
Dialogue: 0,0:21:20.17,0:21:21.53,*Default,NTP,0000,0000,0000,,具有那些属性
Dialogue: 0,0:21:21.53,0:21:22.93,*Default,NTP,0000,0000,0000,,目前余额是多少
Dialogue: 0,0:21:23.00,0:21:24.77,*Default,NTP,0000,0000,0000,,账户持有人是谁
Dialogue: 0,0:21:25.47,0:21:28.20,*Default,NTP,0000,0000,0000,,当我们创建一个新实例时就会发生这种情况
Dialogue: 0,0:21:28.57,0:21:30.50,*Default,NTP,0000,0000,0000,,代码如下所示
Dialogue: 0,0:21:30.70,0:21:32.80,*Default,NTP,0000,0000,0000,,我们会说我正在创建一个帐户
Dialogue: 0,0:21:33.13,0:21:35.50,*Default,NTP,0000,0000,0000,,我将传递帐户持有人吉姆
Dialogue: 0,0:21:35.87,0:21:37.87,*Default,NTP,0000,0000,0000,,我将绑定生成的对象
Dialogue: 0,0:21:37.87,0:21:40.30,*Default,NTP,0000,0000,0000,,这是帐户类的实例
Dialogue: 0,0:21:41.07,0:21:42.30,*Default,NTP,0000,0000,0000,,以a的名义
Dialogue: 0,0:21:44.40,0:21:45.50,*Default,NTP,0000,0000,0000,,那么如果我问
Dialogue: 0,0:21:45.70,0:21:47.80,*Default,NTP,0000,0000,0000,,那么谁是a的持有者
Dialogue: 0,0:21:48.10,0:21:49.70,*Default,NTP,0000,0000,0000,,账户持有人是健身房
Dialogue: 0,0:21:49.87,0:21:50.90,*Default,NTP,0000,0000,0000,,我设定了
Dialogue: 0,0:21:51.17,0:21:53.97,*Default,NTP,0000,0000,0000,,当我调用帐户类来创建对象时
Dialogue: 0,0:21:54.20,0:21:55.97,*Default,NTP,0000,0000,0000,,现在我可以稍后访问它
Dialogue: 0,0:21:55.97,0:21:58.17,*Default,NTP,0000,0000,0000,,作为该帐户的属性
Dialogue: 0,0:21:59.20,0:22:00.67,*Default,NTP,0000,0000,0000,,吉姆的平衡球是什么
Dialogue: 0,0:22:00.67,0:22:02.00,*Default,NTP,0000,0000,0000,,到目前为止还没有任何东西
Dialogue: 0,0:22:03.20,0:22:05.80,*Default,NTP,0000,0000,0000,,那么吉姆的账户里会有一些钱吗？
Dialogue: 0,0:22:05.87,0:22:08.07,*Default,NTP,0000,0000,0000,,我们希望所有银行账户都具备什么
Dialogue: 0,0:22:08.07,0:22:10.57,*Default,NTP,0000,0000,0000,,取款和存款行为
Dialogue: 0,0:22:10.77,0:22:13.07,*Default,NTP,0000,0000,0000,,所有银行账户都应该以同样的方式运作
Dialogue: 0,0:22:13.10,0:22:15.77,*Default,NTP,0000,0000,0000,,这就是为什么它们都是同一类的实例
Dialogue: 0,0:22:16.37,0:22:19.37,*Default,NTP,0000,0000,0000,,所以如果我存入 15 美元
Dialogue: 0,0:22:19.77,0:22:22.00,*Default,NTP,0000,0000,0000,,存入我们命名为的银行帐户
Dialogue: 0,0:22:22.20,0:22:23.50,*Default,NTP,0000,0000,0000,,作为健身房的帐户
Dialogue: 0,0:22:23.77,0:22:26.37,*Default,NTP,0000,0000,0000,,现在我们将恢复 15 的余额
Dialogue: 0,0:22:27.00,0:22:28.50,*Default,NTP,0000,0000,0000,,如果我们抽 10 美元
Dialogue: 0,0:22:28.50,0:22:30.30,*Default,NTP,0000,0000,0000,,然后余额减少到五
Dialogue: 0,0:22:30.67,0:22:32.73,*Default,NTP,0000,0000,0000,,现在余额是多少，是五
Dialogue: 0,0:22:33.53,0:22:35.87,*Default,NTP,0000,0000,0000,,所以请注意其中一些看起来像调用表达式
Dialogue: 0,0:22:35.87,0:22:37.93,*Default,NTP,0000,0000,0000,,有些只是访问一个值
Dialogue: 0,0:22:37.93,0:22:39.60,*Default,NTP,0000,0000,0000,,这是物体的一部分
Dialogue: 0,0:22:40.80,0:22:44.30,*Default,NTP,0000,0000,0000,,如果我总是再次提取 10 美元，我将拥有保险基金
Dialogue: 0,0:22:45.40,0:22:47.97,*Default,NTP,0000,0000,0000,,所以我们可以通过两种不同的方式来实现这一点
Dialogue: 0,0:22:47.97,0:22:51.37,*Default,NTP,0000,0000,0000,,我们可以将存款放入提款方法中，如下所示
Dialogue: 0,0:22:51.37,0:22:53.37,*Default,NTP,0000,0000,0000,,每个账户的一部分
Dialogue: 0,0:22:53.37,0:22:54.93,*Default,NTP,0000,0000,0000,,但这不是我们要做的
Dialogue: 0,0:22:55.33,0:22:58.37,*Default,NTP,0000,0000,0000,,相反，我们将确保所有帐户共享
Dialogue: 0,0:22:58.70,0:23:01.47,*Default,NTP,0000,0000,0000,,相同的提款和存款方式
Dialogue: 0,0:23:01.47,0:23:03.87,*Default,NTP,0000,0000,0000,,以我们的方式，我们可以保证他们都表现良好
Dialogue: 0,0:23:03.93,0:23:04.87,*Default,NTP,0000,0000,0000,,以同样的方式
Dialogue: 0,0:23:04.87,0:23:06.00,*Default,NTP,0000,0000,0000,,这就是我们想要的
Dialogue: 0,0:23:07.93,0:23:09.37,*Default,NTP,0000,0000,0000,,类语句
Dialogue: 0,0:23:09.53,0:23:12.47,*Default,NTP,0000,0000,0000,,让您创建任何您想要的数据类型
Dialogue: 0,0:23:13.70,0:23:15.77,*Default,NTP,0000,0000,0000,,类声明看起来像这样
Dialogue: 0,0:23:16.17,0:23:18.57,*Default,NTP,0000,0000,0000,,你说班级给班级起个名字
Dialogue: 0,0:23:18.97,0:23:21.20,*Default,NTP,0000,0000,0000,,然后写一套其他语句
Dialogue: 0,0:23:22.30,0:23:25.07,*Default,NTP,0000,0000,0000,,class 语句创建一个新类
Dialogue: 0,0:23:25.10,0:23:27.50,*Default,NTP,0000,0000,0000,,它可以是某个新对象的类型
Dialogue: 0,0:23:28.17,0:23:30.13,*Default,NTP,0000,0000,0000,,并将该类绑定到名称
Dialogue: 0,0:23:30.27,0:23:32.57,*Default,NTP,0000,0000,0000,,在当前环境的第一帧中
Dialogue: 0,0:23:33.70,0:23:34.77,*Default,NTP,0000,0000,0000,,套房内
Dialogue: 0,0:23:34.90,0:23:36.90,*Default,NTP,0000,0000,0000,,赋值和聋哑陈述
Dialogue: 0,0:23:36.90,0:23:39.50,*Default,NTP,0000,0000,0000,,创建类的属性
Dialogue: 0,0:23:40.20,0:23:42.93,*Default,NTP,0000,0000,0000,,通常他们会创建名称和框架
Dialogue: 0,0:23:43.13,0:23:45.00,*Default,NTP,0000,0000,0000,,但类语句很特殊
Dialogue: 0,0:23:47.17,0:23:48.70,*Default,NTP,0000,0000,0000,,所以套件被执行
Dialogue: 0,0:23:48.70,0:23:51.37,*Default,NTP,0000,0000,0000,,执行类语句时立即
Dialogue: 0,0:23:52.40,0:23:54.87,*Default,NTP,0000,0000,0000,,所以如果我定义一个名为 clown 的类
Dialogue: 0,0:23:55.20,0:23:58.27,*Default,NTP,0000,0000,0000,,并有一个赋值和一个 def 语句
Dialogue: 0,0:23:59.77,0:24:00.57,*Default,NTP,0000,0000,0000,,然后
Dialogue: 0,0:24:00.97,0:24:04.80,*Default,NTP,0000,0000,0000,,鼻子和舞蹈成为班级的属性
Dialogue: 0,0:24:04.80,0:24:06.73,*Default,NTP,0000,0000,0000,,及其属性值
Dialogue: 0,0:24:06.87,0:24:09.53,*Default,NTP,0000,0000,0000,,被分配或定义的任何内容
Dialogue: 0,0:24:10.67,0:24:14.33,*Default,NTP,0000,0000,0000,,所以小丑点鼻子又大又红，小丑点跳舞
Dialogue: 0,0:24:14.67,0:24:17.10,*Default,NTP,0000,0000,0000,,已致电退货，不，谢谢
Dialogue: 0,0:24:18.97,0:24:21.87,*Default,NTP,0000,0000,0000,,现在这些不是您使用的典型方式
Dialogue: 0,0:24:21.87,0:24:22.93,*Default,NTP,0000,0000,0000,,类语句
Dialogue: 0,0:24:23.07,0:24:24.67,*Default,NTP,0000,0000,0000,,但我只是想告诉你这是什么
Dialogue: 0,0:24:24.67,0:24:26.40,*Default,NTP,0000,0000,0000,,意思是写一个类声明
Dialogue: 0,0:24:26.70,0:24:28.33,*Default,NTP,0000,0000,0000,,以及本次讲座的其余部分
Dialogue: 0,0:24:28.40,0:24:31.27,*Default,NTP,0000,0000,0000,,将详细介绍如何构建类
Dialogue: 0,0:24:31.27,0:24:32.97,*Default,NTP,0000,0000,0000,,以便其有效地发挥作用
Dialogue: 0,0:24:33.97,0:24:35.47,*Default,NTP,0000,0000,0000,,当你创建一个类时
Dialogue: 0,0:24:35.80,0:24:37.17,*Default,NTP,0000,0000,0000,,它与一个名字绑定
Dialogue: 0,0:24:37.47,0:24:39.57,*Default,NTP,0000,0000,0000,,这些名字通常是大写的
Dialogue: 0,0:24:39.70,0:24:42.40,*Default,NTP,0000,0000,0000,,你会看到类值以这种方式打印出来
Dialogue: 0,0:24:44.67,0:24:48.00,*Default,NTP,0000,0000,0000,,现在课程的重点是让你
Dialogue: 0,0:24:48.00,0:24:50.87,*Default,NTP,0000,0000,0000,,构造该类的对象
Dialogue: 0,0:24:52.20,0:24:55.10,*Default,NTP,0000,0000,0000,,所以我们要做的是定义一个帐户类
Dialogue: 0,0:24:55.60,0:24:57.90,*Default,NTP,0000,0000,0000,,这使我们能够创建银行账户
Dialogue: 0,0:24:58.47,0:24:59.50,*Default,NTP,0000,0000,0000,,这是一个想法
Dialogue: 0,0:24:59.50,0:25:02.73,*Default,NTP,0000,0000,0000,,所有银行账户都有余额和账户持有人
Dialogue: 0,0:25:03.47,0:25:05.57,*Default,NTP,0000,0000,0000,,所以帐户类应该做一些事情来确保
Dialogue: 0,0:25:05.57,0:25:06.77,*Default,NTP,0000,0000,0000,,这些属性
Dialogue: 0,0:25:06.77,0:25:09.87,*Default,NTP,0000,0000,0000,,出现在其每个实例上
Dialogue: 0,0:25:10.70,0:25:14.30,*Default,NTP,0000,0000,0000,,所以我们希望如果我有吉姆的帐户
Dialogue: 0,0:25:14.33,0:25:16.10,*Default,NTP,0000,0000,0000,,我将其绑定到名称 a
Dialogue: 0,0:25:17.07,0:25:18.70,*Default,NTP,0000,0000,0000,,它创建一个对象
Dialogue: 0,0:25:18.70,0:25:21.17,*Default,NTP,0000,0000,0000,,既有余额又有帐户持有人
Dialogue: 0,0:25:22.57,0:25:25.37,*Default,NTP,0000,0000,0000,,所以在这里我们调用我们的类，如你所见
Dialogue: 0,0:25:25.53,0:25:28.37,*Default,NTP,0000,0000,0000,,这就是我们创建类实例的方式
Dialogue: 0,0:25:29.07,0:25:30.17,*Default,NTP,0000,0000,0000,,当一个类被调用时
Dialogue: 0,0:25:30.17,0:25:32.33,*Default,NTP,0000,0000,0000,,创建该类的一个新实例
Dialogue: 0,0:25:32.77,0:25:34.87,*Default,NTP,0000,0000,0000,,它从一张白纸开始
Dialogue: 0,0:25:35.33,0:25:37.57,*Default,NTP,0000,0000,0000,,由全班来填补它
Dialogue: 0,0:25:38.93,0:25:42.70,*Default,NTP,0000,0000,0000,,类的两个方法中专门命名的
Dialogue: 0,0:25:42.77,0:25:46.67,*Default,NTP,0000,0000,0000,,以新对象作为其第一个参数进行调用
Dialogue: 0,0:25:47.20,0:25:48.73,*Default,NTP,0000,0000,0000,,绑定到名称 self
Dialogue: 0,0:25:49.67,0:25:52.13,*Default,NTP,0000,0000,0000,,以及提供的任何其他参数
Dialogue: 0,0:25:52.13,0:25:53.47,*Default,NTP,0000,0000,0000,,在调用表达式中
Dialogue: 0,0:25:53.90,0:25:56.53,*Default,NTP,0000,0000,0000,,这里我们在调用表达式中提供了 jim
Dialogue: 0,0:25:58.13,0:26:01.67,*Default,NTP,0000,0000,0000,,所以如果我们看一下账户类别的定义
Dialogue: 0,0:26:01.67,0:26:02.93,*Default,NTP,0000,0000,0000,,我们将会看到什么
Dialogue: 0,0:26:03.53,0:26:05.77,*Default,NTP,0000,0000,0000,,其中有一个 def 语句
Dialogue: 0,0:26:05.77,0:26:07.90,*Default,NTP,0000,0000,0000,,对于里面这个特殊的名字
Dialogue: 0,0:26:08.40,0:26:10.70,*Default,NTP,0000,0000,0000,,他的论点是自我的
Dialogue: 0,0:26:11.37,0:26:12.53,*Default,NTP,0000,0000,0000,,这将会达到平衡
Dialogue: 0,0:26:12.53,0:26:14.30,*Default,NTP,0000,0000,0000,,到帐户对象本身
Dialogue: 0,0:26:14.97,0:26:16.70,*Default,NTP,0000,0000,0000,,以及我们需要知道的任何其他信息
Dialogue: 0,0:26:16.70,0:26:18.40,*Default,NTP,0000,0000,0000,,为了创建这个帐户
Dialogue: 0,0:26:20.77,0:26:23.60,*Default,NTP,0000,0000,0000,,现在对象从一张白纸开始
Dialogue: 0,0:26:23.70,0:26:27.50,*Default,NTP,0000,0000,0000,,传入并绑定到自身名称
Dialogue: 0,0:26:28.40,0:26:30.93,*Default,NTP,0000,0000,0000,,其他名称与传入的其他名称绑定
Dialogue: 0,0:26:30.93,0:26:32.90,*Default,NTP,0000,0000,0000,,在这种情况下，我们传递了吉姆
Dialogue: 0,0:26:33.10,0:26:34.80,*Default,NTP,0000,0000,0000,,那是我们的账户持有人
Dialogue: 0,0:26:36.57,0:26:39.60,*Default,NTP,0000,0000,0000,,然后发生的事情是这个函数的主体是
Dialogue: 0,0:26:39.60,0:26:40.53,*Default,NTP,0000,0000,0000,,被处决
Dialogue: 0,0:26:41.30,0:26:44.50,*Default,NTP,0000,0000,0000,,这让我们可以分配
Dialogue: 0,0:26:44.70,0:26:48.87,*Default,NTP,0000,0000,0000,,创建的新对象的属性值
Dialogue: 0,0:26:48.87,0:26:50.00,*Default,NTP,0000,0000,0000,,新实例
Dialogue: 0,0:26:50.60,0:26:52.50,*Default,NTP,0000,0000,0000,,所以自点平衡为零
Dialogue: 0,0:26:52.50,0:26:53.30,*Default,NTP,0000,0000,0000,,意思是
Dialogue: 0,0:26:53.30,0:26:56.67,*Default,NTP,0000,0000,0000,,作为该帐户的一部分，现在余额为零
Dialogue: 0,0:26:57.10,0:27:00.13,*Default,NTP,0000,0000,0000,,并且自己的点持有人是帐户持有人
Dialogue: 0,0:27:00.87,0:27:05.27,*Default,NTP,0000,0000,0000,,将holder绑定为具有属性值gym的属性
Dialogue: 0,0:27:05.77,0:27:07.80,*Default,NTP,0000,0000,0000,,现在我们有一些有用的东西
Dialogue: 0,0:27:08.27,0:27:09.57,*Default,NTP,0000,0000,0000,,这不只是一张白纸
Dialogue: 0,0:27:09.57,0:27:10.07,*Default,NTP,0000,0000,0000,,这是某事
Dialogue: 0,0:27:10.07,0:27:11.57,*Default,NTP,0000,0000,0000,,有余额和账户持有人
Dialogue: 0,0:27:11.57,0:27:13.90,*Default,NTP,0000,0000,0000,,这就是我们想要实现的想法
Dialogue: 0,0:27:14.10,0:27:15.80,*Default,NTP,0000,0000,0000,,这就是我们实现它的方式
Dialogue: 0,0:27:16.70,0:27:18.57,*Default,NTP,0000,0000,0000,,其中有一个特殊的名字
Dialogue: 0,0:27:18.57,0:27:20.47,*Default,NTP,0000,0000,0000,,我们总是使用同一个特殊名称
Dialogue: 0,0:27:20.60,0:27:22.37,*Default,NTP,0000,0000,0000,,它被称为构造函数
Dialogue: 0,0:27:22.53,0:27:24.07,*Default,NTP,0000,0000,0000,,这样你就可以看到关系
Dialogue: 0,0:27:24.07,0:27:25.60,*Default,NTP,0000,0000,0000,,数据抽象之间
Dialogue: 0,0:27:25.93,0:27:28.93,*Default,NTP,0000,0000,0000,,以及Python中的面向对象编程系统
Dialogue: 0,0:27:30.47,0:27:35.33,*Default,NTP,0000,0000,0000,,这很特别，因为每当班级被调用时
Dialogue: 0,0:27:35.53,0:27:37.33,*Default,NTP,0000,0000,0000,,这会被自动调用
Dialogue: 0,0:27:37.53,0:27:40.10,*Default,NTP,0000,0000,0000,,使用此处描述的这些参数
Dialogue: 0,0:27:42.57,0:27:44.93,*Default,NTP,0000,0000,0000,,所以现在一旦我完成了所有这些工作
Dialogue: 0,0:27:45.07,0:27:47.73,*Default,NTP,0000,0000,0000,,如果我查找持有者，我会找到吉姆
Dialogue: 0,0:27:47.73,0:27:49.90,*Default,NTP,0000,0000,0000,,如果我查一下余额，我会得到零
Dialogue: 0,0:27:51.00,0:27:54.53,*Default,NTP,0000,0000,0000,,现在我们来谈谈对象的身份
Dialogue: 0,0:27:54.90,0:27:57.57,*Default,NTP,0000,0000,0000,,每个对象都是用户定义的实例
Dialogue: 0,0:27:57.57,0:28:00.33,*Default,NTP,0000,0000,0000,,类具有独特的身份
Dialogue: 0,0:28:00.33,0:28:01.70,*Default,NTP,0000,0000,0000,,这是它自己的事
Dialogue: 0,0:28:02.70,0:28:03.80,*Default,NTP,0000,0000,0000,,所以被无罪释放
Dialogue: 0,0:28:03.80,0:28:05.17,*Default,NTP,0000,0000,0000,,为吉姆创建一个帐户
Dialogue: 0,0:28:05.17,0:28:06.80,*Default,NTP,0000,0000,0000,,以及杰克的单独帐户
Dialogue: 0,0:28:07.30,0:28:10.00,*Default,NTP,0000,0000,0000,,那么a和b绑定的是不同的账户
Dialogue: 0,0:28:10.37,0:28:13.07,*Default,NTP,0000,0000,0000,,每次调用帐户都会创建一个新的帐户实例
Dialogue: 0,0:28:13.07,0:28:16.17,*Default,NTP,0000,0000,0000,,并且只有一个帐户类别但有很多实例
Dialogue: 0,0:28:17.33,0:28:19.90,*Default,NTP,0000,0000,0000,,所以如果我查一下a的余额我会得到零
Dialogue: 0,0:28:19.90,0:28:22.47,*Default,NTP,0000,0000,0000,,如果我查找 b 的持有者，我会找到 jack
Dialogue: 0,0:28:22.73,0:28:25.73,*Default,NTP,0000,0000,0000,,他们都有自己的天平和自己的支架
Dialogue: 0,0:28:27.27,0:28:29.37,*Default,NTP,0000,0000,0000,,身份运算符是和不是
Dialogue: 0,0:28:29.50,0:28:32.40,*Default,NTP,0000,0000,0000,,测试两个表达式的计算结果是否为同一个对象
Dialogue: 0,0:28:33.27,0:28:35.73,*Default,NTP,0000,0000,0000,,所以 a 是 a 是真的 a 不是 b
Dialogue: 0,0:28:36.40,0:28:37.53,*Default,NTP,0000,0000,0000,,也是如此
Dialogue: 0,0:28:38.50,0:28:40.40,*Default,NTP,0000,0000,0000,,并将对象绑定到新名称
Dialogue: 0,0:28:40.47,0:28:42.97,*Default,NTP,0000,0000,0000,,使用赋值不会创建新对象
Dialogue: 0,0:28:42.97,0:28:45.57,*Default,NTP,0000,0000,0000,,但只是给同一个对象赋予另一个名称
Dialogue: 0,0:28:45.90,0:28:47.20,*Default,NTP,0000,0000,0000,,这对每个人来说都是如此
Dialogue: 0,0:28:47.20,0:28:48.90,*Default,NTP,0000,0000,0000,,我们在课程中看过的例子
Dialogue: 0,0:28:49.53,0:28:52.87,*Default,NTP,0000,0000,0000,,用户查找实例也是如此
Dialogue: 0,0:28:53.13,0:28:54.60,*Default,NTP,0000,0000,0000,,如果我说 c 等于 a
Dialogue: 0,0:28:54.80,0:28:56.93,*Default,NTP,0000,0000,0000,,c 和 a 指的是同一事物
Dialogue: 0,0:28:57.07,0:29:00.00,*Default,NTP,0000,0000,0000,,所以他们总是有相同持有人的相同余额
Dialogue: 0,0:29:00.10,0:29:01.93,*Default,NTP,0000,0000,0000,,因为他们是同一个帐户
Dialogue: 0,0:29:04.27,0:29:05.70,*Default,NTP,0000,0000,0000,,我们需要的最后一块
Dialogue: 0,0:29:05.70,0:29:08.80,*Default,NTP,0000,0000,0000,,为了完成一个类的实现，需要添加
Dialogue: 0,0:29:08.80,0:29:10.50,*Default,NTP,0000,0000,0000,,附加方法
Dialogue: 0,0:29:11.50,0:29:14.00,*Default,NTP,0000,0000,0000,,方法代表消息
Dialogue: 0,0:29:14.30,0:29:16.10,*Default,NTP,0000,0000,0000,,一个对象会接受
Dialogue: 0,0:29:16.90,0:29:18.70,*Default,NTP,0000,0000,0000,,它们只是函数
Dialogue: 0,0:29:18.70,0:29:20.80,*Default,NTP,0000,0000,0000,,它们在类声明中定义
Dialogue: 0,0:29:21.17,0:29:22.27,*Default,NTP,0000,0000,0000,,让我们看一下
Dialogue: 0,0:29:23.07,0:29:25.57,*Default,NTP,0000,0000,0000,,方法在类语句的套件中定义
Dialogue: 0,0:29:25.67,0:29:27.10,*Default,NTP,0000,0000,0000,,所以我们写班级账户
Dialogue: 0,0:29:27.10,0:29:28.93,*Default,NTP,0000,0000,0000,,然后我们定义 in it 方法
Dialogue: 0,0:29:29.00,0:29:31.00,*Default,NTP,0000,0000,0000,,然后我们可以定义其他方法
Dialogue: 0,0:29:31.13,0:29:33.07,*Default,NTP,0000,0000,0000,,所以这是一种存款方式
Dialogue: 0,0:29:33.37,0:29:35.50,*Default,NTP,0000,0000,0000,,它接受一个对象
Dialogue: 0,0:29:35.57,0:29:38.13,*Default,NTP,0000,0000,0000,,类帐户实例的
Dialogue: 0,0:29:38.33,0:29:40.30,*Default,NTP,0000,0000,0000,,并且需要存入一些金额
Dialogue: 0,0:29:40.73,0:29:43.20,*Default,NTP,0000,0000,0000,,它的作用是改变平衡
Dialogue: 0,0:29:43.70,0:29:45.47,*Default,NTP,0000,0000,0000,,无论平衡是什么
Dialogue: 0,0:29:45.73,0:29:47.70,*Default,NTP,0000,0000,0000,,加上通过的金额
Dialogue: 0,0:29:48.40,0:29:50.27,*Default,NTP,0000,0000,0000,,现在重要的是付款
Dialogue: 0,0:29:50.37,0:29:52.70,*Default,NTP,0000,0000,0000,,仔细注意这里发生的事情
Dialogue: 0,0:29:53.67,0:29:57.53,*Default,NTP,0000,0000,0000,,self 是一个引用实例的名称
Dialogue: 0,0:29:57.80,0:29:59.57,*Default,NTP,0000,0000,0000,,账户类别的
Dialogue: 0,0:29:59.90,0:30:02.20,*Default,NTP,0000,0000,0000,,正在存入
Dialogue: 0,0:30:03.33,0:30:03.80,*Default,NTP,0000,0000,0000,,什么时候我们
Dialogue: 0,0:30:03.80,0:30:06.73,*Default,NTP,0000,0000,0000,,使用此赋值语句更改属性
Dialogue: 0,0:30:07.17,0:30:09.73,*Default,NTP,0000,0000,0000,,我们正在做的是改变这种平衡
Dialogue: 0,0:30:09.73,0:30:13.33,*Default,NTP,0000,0000,0000,,特定情况下的特定帐户
Dialogue: 0,0:30:14.37,0:30:15.97,*Default,NTP,0000,0000,0000,,无论其余额是多少
Dialogue: 0,0:30:15.97,0:30:18.13,*Default,NTP,0000,0000,0000,,加上存款金额
Dialogue: 0,0:30:18.47,0:30:20.67,*Default,NTP,0000,0000,0000,,所以安装座前面不需要它本身
Dialogue: 0,0:30:20.67,0:30:22.10,*Default,NTP,0000,0000,0000,,因为它已经传入了
Dialogue: 0,0:30:22.70,0:30:25.40,*Default,NTP,0000,0000,0000,,作为此存款方式的一个参数
Dialogue: 0,0:30:26.90,0:30:29.17,*Default,NTP,0000,0000,0000,,然后我们将退还余额
Dialogue: 0,0:30:29.50,0:30:32.17,*Default,NTP,0000,0000,0000,,我们称之为自己的帐户的传递
Dialogue: 0,0:30:32.80,0:30:34.50,*Default,NTP,0000,0000,0000,,这就是存款
Dialogue: 0,0:30:34.80,0:30:35.97,*Default,NTP,0000,0000,0000,,撤回怎么样
Dialogue: 0,0:30:35.97,0:30:36.10,*Default,NTP,0000,0000,0000,,出色地
Dialogue: 0,0:30:36.10,0:30:38.67,*Default,NTP,0000,0000,0000,,这稍微复杂一些，但想法是一样的
Dialogue: 0,0:30:39.30,0:30:40.33,*Default,NTP,0000,0000,0000,,我们会超越他
Dialogue: 0,0:30:40.77,0:30:43.30,*Default,NTP,0000,0000,0000,,名为 self 的帐户类的实例
Dialogue: 0,0:30:44.07,0:30:46.10,*Default,NTP,0000,0000,0000,,然后是我们想要提取的金额
Dialogue: 0,0:30:46.47,0:30:48.57,*Default,NTP,0000,0000,0000,,我们会检查一下金额是否太大
Dialogue: 0,0:30:48.57,0:30:51.30,*Default,NTP,0000,0000,0000,,如果是的话我们越转资金不足
Dialogue: 0,0:30:51.50,0:30:52.30,*Default,NTP,0000,0000,0000,,否则
Dialogue: 0,0:30:53.07,0:30:55.60,*Default,NTP,0000,0000,0000,,我们将把余额设置为任何余额
Dialogue: 0,0:30:55.77,0:30:56.97,*Default,NTP,0000,0000,0000,,减去金额
Dialogue: 0,0:30:57.53,0:30:59.07,*Default,NTP,0000,0000,0000,,然后我们会退还余额
Dialogue: 0,0:31:00.17,0:31:01.07,*Default,NTP,0000,0000,0000,,然后我们就完成了
Dialogue: 0,0:31:01.73,0:31:04.07,*Default,NTP,0000,0000,0000,,现在我们已经实现了帐户类
Dialogue: 0,0:31:04.07,0:31:05.07,*Default,NTP,0000,0000,0000,,以这样的方式
Dialogue: 0,0:31:05.20,0:31:07.90,*Default,NTP,0000,0000,0000,,它从余额和账户持有人开始
Dialogue: 0,0:31:07.90,0:31:09.93,*Default,NTP,0000,0000,0000,,所有这些都是用构造函数设置的
Dialogue: 0,0:31:10.53,0:31:12.90,*Default,NTP,0000,0000,0000,,然后我们可以存入金额
Dialogue: 0,0:31:12.90,0:31:14.53,*Default,NTP,0000,0000,0000,,我们可以提取金额
Dialogue: 0,0:31:16.10,0:31:18.87,*Default,NTP,0000,0000,0000,,所以这些聋子语句创建了函数对象
Dialogue: 0,0:31:18.87,0:31:19.73,*Default,NTP,0000,0000,0000,,一如既往
Dialogue: 0,0:31:20.20,0:31:23.70,*Default,NTP,0000,0000,0000,,没有执行聋人声明的新规则
Dialogue: 0,0:31:24.47,0:31:27.70,*Default,NTP,0000,0000,0000,,但他们的名字并没有被束缚在一个特定的框架里
Dialogue: 0,0:31:28.00,0:31:32.33,*Default,NTP,0000,0000,0000,,相反，它们被绑定为类的属性
Dialogue: 0,0:31:32.57,0:31:37.07,*Default,NTP,0000,0000,0000,,所以帐户类现在具有三个属性
Dialogue: 0,0:31:37.10,0:31:39.60,*Default,NTP,0000,0000,0000,,存款和取款
Dialogue: 0,0:31:41.40,0:31:44.40,*Default,NTP,0000,0000,0000,,好的，现在我们已经定义了我们的方法
Dialogue: 0,0:31:44.67,0:31:47.40,*Default,NTP,0000,0000,0000,,我们能用它们做什么 我们可以调用它们
Dialogue: 0,0:31:48.13,0:31:51.00,*Default,NTP,0000,0000,0000,,所以所有调用的方法都可以访问该对象
Dialogue: 0,0:31:51.97,0:31:53.77,*Default,NTP,0000,0000,0000,,被调用的方法
Dialogue: 0,0:31:53.97,0:31:55.97,*Default,NTP,0000,0000,0000,,通过这个 self 参数
Dialogue: 0,0:31:55.97,0:31:56.97,*Default,NTP,0000,0000,0000,,所以自我
Dialogue: 0,0:31:57.20,0:32:00.00,*Default,NTP,0000,0000,0000,,是我们赋予可以操作的对象的名称
Dialogue: 0,0:32:00.00,0:32:01.77,*Default,NTP,0000,0000,0000,,无论如何查看其余额
Dialogue: 0,0:32:02.60,0:32:05.80,*Default,NTP,0000,0000,0000,,所以所有这些不同的方法都可以访问
Dialogue: 0,0:32:05.93,0:32:08.20,*Default,NTP,0000,0000,0000,,并且可以操纵对象状态
Dialogue: 0,0:32:08.47,0:32:10.97,*Default,NTP,0000,0000,0000,,所以每个账户只有一笔余额
Dialogue: 0,0:32:11.13,0:32:13.47,*Default,NTP,0000,0000,0000,,但我们可以通过以下方式存款和取款
Dialogue: 0,0:32:13.47,0:32:14.70,*Default,NTP,0000,0000,0000,,两种不同的方法
Dialogue: 0,0:32:15.33,0:32:17.87,*Default,NTP,0000,0000,0000,,好的，这是我们的计数类
Dialogue: 0,0:32:17.87,0:32:19.57,*Default,NTP,0000,0000,0000,,我缩写了其中一些
Dialogue: 0,0:32:19.57,0:32:21.70,*Default,NTP,0000,0000,0000,,因为这对于这个例子来说并不重要
Dialogue: 0,0:32:22.27,0:32:23.50,*Default,NTP,0000,0000,0000,,什么是重要的
Dialogue: 0,0:32:23.70,0:32:27.10,*Default,NTP,0000,0000,0000,,是我们用两个参数 self 来定义 Deposit
Dialogue: 0,0:32:27.13,0:32:29.13,*Default,NTP,0000,0000,0000,,然后是我们想要传递的金额
Dialogue: 0,0:32:29.77,0:32:31.87,*Default,NTP,0000,0000,0000,,然后我们使用点表示法
Dialogue: 0,0:32:32.33,0:32:34.50,*Default,NTP,0000,0000,0000,,为了调用这个方法
Dialogue: 0,0:32:34.67,0:32:35.60,*Default,NTP,0000,0000,0000,,和点符号
Dialogue: 0,0:32:35.60,0:32:38.07,*Default,NTP,0000,0000,0000,,很特别，因为它自动提供
Dialogue: 0,0:32:38.27,0:32:40.27,*Default,NTP,0000,0000,0000,,该方法的第一个参数
Dialogue: 0,0:32:41.13,0:32:42.17,*Default,NTP,0000,0000,0000,,它提供什么
Dialogue: 0,0:32:42.17,0:32:43.73,*Default,NTP,0000,0000,0000,,供应什么
Dialogue: 0,0:32:43.87,0:32:47.07,*Default,NTP,0000,0000,0000,,我们正在调用该方法的对象实例
Dialogue: 0,0:32:48.00,0:32:49.77,*Default,NTP,0000,0000,0000,,好的，让我们看看这个
Dialogue: 0,0:32:50.07,0:32:51.77,*Default,NTP,0000,0000,0000,,当我们找到账户后
Dialogue: 0,0:32:51.77,0:32:54.80,*Default,NTP,0000,0000,0000,,我们可以通过调用 account 来创建一个帐户
Dialogue: 0,0:32:55.40,0:32:56.87,*Default,NTP,0000,0000,0000,,通过持有人
Dialogue: 0,0:32:57.10,0:33:00.20,*Default,NTP,0000,0000,0000,,现在汤姆账户的余额为零
Dialogue: 0,0:33:00.53,0:33:02.90,*Default,NTP,0000,0000,0000,,持有者名叫汤姆
Dialogue: 0,0:33:03.40,0:33:06.50,*Default,NTP,0000,0000,0000,,我可以将 100 美元存入汤姆账户
Dialogue: 0,0:33:07.20,0:33:09.90,*Default,NTP,0000,0000,0000,,请注意，我将存款定义为
Dialogue: 0,0:33:10.07,0:33:11.57,*Default,NTP,0000,0000,0000,,两个形式参数
Dialogue: 0,0:33:11.57,0:33:14.30,*Default,NTP,0000,0000,0000,,但我只用一个参数来称呼它
Dialogue: 0,0:33:14.97,0:33:16.80,*Default,NTP,0000,0000,0000,,那么第二个参数在哪里
Dialogue: 0,0:33:16.90,0:33:17.60,*Default,NTP,0000,0000,0000,,出色地
Dialogue: 0,0:33:17.60,0:33:21.33,*Default,NTP,0000,0000,0000,,实际上第一个参数是 Tom 的帐户
Dialogue: 0,0:33:21.90,0:33:24.27,*Default,NTP,0000,0000,0000,,第二个参数是 100
Dialogue: 0,0:33:24.70,0:33:26.53,*Default,NTP,0000,0000,0000,,所以当我们调用这个函数时
Dialogue: 0,0:33:26.53,0:33:29.73,*Default,NTP,0000,0000,0000,,我们在 Tom 帐户上调用它，我们称之为 self
Dialogue: 0,0:33:29.90,0:33:31.93,*Default,NTP,0000,0000,0000,,和 100 个，我们称之为
Dialogue: 0,0:33:32.10,0:33:34.17,*Default,NTP,0000,0000,0000,,然后我们只执行函数体
Dialogue: 0,0:33:34.17,0:33:35.77,*Default,NTP,0000,0000,0000,,就好像它是任何其他功能一样
Dialogue: 0,0:33:37.77,0:33:40.37,*Default,NTP,0000,0000,0000,,好吧，让我们更深入地研究一下这些
Dialogue: 0,0:33:40.37,0:33:41.67,*Default,NTP,0000,0000,0000,,点表达式
Dialogue: 0,0:33:42.47,0:33:45.13,*Default,NTP,0000,0000,0000,,在这个隐喻中，对象接收它们的消息
Dialogue: 0,0:33:45.13,0:33:46.93,*Default,NTP,0000,0000,0000,,面向对象编程的
Dialogue: 0,0:33:47.37,0:33:48.97,*Default,NTP,0000,0000,0000,,使用 not 表示法
Dialogue: 0,0:33:49.70,0:33:52.57,*Default,NTP,0000,0000,0000,,所以不要用符号访问属性
Dialogue: 0,0:33:53.00,0:33:57.00,*Default,NTP,0000,0000,0000,,其类的实例或属性
Dialogue: 0,0:33:57.80,0:34:00.20,*Default,NTP,0000,0000,0000,,所以平衡是一个实例属性
Dialogue: 0,0:34:00.57,0:34:02.77,*Default,NTP,0000,0000,0000,,每个实例都有不同的平衡
Dialogue: 0,0:34:03.53,0:34:05.93,*Default,NTP,0000,0000,0000,,撤回方法
Dialogue: 0,0:34:06.57,0:34:08.00,*Default,NTP,0000,0000,0000,,是一个类属性
Dialogue: 0,0:34:08.20,0:34:11.73,*Default,NTP,0000,0000,0000,,所有实例共享相同的提现方法
Dialogue: 0,0:34:12.53,0:34:15.13,*Default,NTP,0000,0000,0000,,好的点符号看起来像这样
Dialogue: 0,0:34:15.13,0:34:17.47,*Default,NTP,0000,0000,0000,,你可以在左边给它任何你想要的表达
Dialogue: 0,0:34:17.53,0:34:19.10,*Default,NTP,0000,0000,0000,,但你只需要给它一个简单的名字
Dialogue: 0,0:34:19.10,0:34:21.00,*Default,NTP,0000,0000,0000,,右边用点分隔
Dialogue: 0,0:34:21.70,0:34:24.00,*Default,NTP,0000,0000,0000,,表达式可以是任何有效的 python 表达式
Dialogue: 0,0:34:24.10,0:34:27.47,*Default,NTP,0000,0000,0000,,它评估某个对象，然后我们查找
Dialogue: 0,0:34:28.10,0:34:30.53,*Default,NTP,0000,0000,0000,,命名属性，因此它必须是一个简单的名称
Dialogue: 0,0:34:30.97,0:34:32.80,*Default,NTP,0000,0000,0000,,那么这个点表达式会发生什么
Dialogue: 0,0:34:32.80,0:34:35.30,*Default,NTP,0000,0000,0000,,它评估属性的值
Dialogue: 0,0:34:35.60,0:34:38.00,*Default,NTP,0000,0000,0000,,在对象中按名称查找
Dialogue: 0,0:34:38.00,0:34:40.07,*Default,NTP,0000,0000,0000,,这就是表达式的值
Dialogue: 0,0:34:40.93,0:34:43.07,*Default,NTP,0000,0000,0000,,通过“我的名字”查找到了什么
Dialogue: 0,0:34:43.07,0:34:44.73,*Default,NTP,0000,0000,0000,,我们必须检查所有细节
Dialogue: 0,0:34:44.73,0:34:46.50,*Default,NTP,0000,0000,0000,,我们将在下节课中完成大部分内容
Dialogue: 0,0:34:46.80,0:34:50.10,*Default,NTP,0000,0000,0000,,但基本的故事是​​你查看实例并看到
Dialogue: 0,0:34:50.33,0:34:51.77,*Default,NTP,0000,0000,0000,,这个名字绑定在那里吗
Dialogue: 0,0:34:51.93,0:34:53.93,*Default,NTP,0000,0000,0000,,如果没有，那么你看看课堂上
Dialogue: 0,0:34:55.20,0:34:59.07,*Default,NTP,0000,0000,0000,,好吧，让我们考虑一下汤姆账户上的帐篷存款
Dialogue: 0,0:34:59.27,0:35:01.10,*Default,NTP,0000,0000,0000,,这是我们以前见过的一个表达式
Dialogue: 0,0:35:01.53,0:35:02.93,*Default,NTP,0000,0000,0000,,到底发生了什么
Dialogue: 0,0:35:02.93,0:35:04.90,*Default,NTP,0000,0000,0000,,这是一个调用表达式
Dialogue: 0,0:35:05.13,0:35:07.40,*Default,NTP,0000,0000,0000,,与复合运算符
Dialogue: 0,0:35:07.60,0:35:10.27,*Default,NTP,0000,0000,0000,,复合运算符是一种思想表达
Dialogue: 0,0:35:10.57,0:35:13.10,*Default,NTP,0000,0000,0000,,它所做的就是去寻找
Dialogue: 0,0:35:13.20,0:35:15.07,*Default,NTP,0000,0000,0000,,存款方式
Dialogue: 0,0:35:15.37,0:35:16.77,*Default,NTP,0000,0000,0000,,汤姆帐户的
Dialogue: 0,0:35:16.97,0:35:19.40,*Default,NTP,0000,0000,0000,,这实际上是帐户类别的一部分
Dialogue: 0,0:35:19.87,0:35:21.40,*Default,NTP,0000,0000,0000,,该汤姆帐户是一个实例
Dialogue: 0,0:35:23.30,0:35:26.70,*Default,NTP,0000,0000,0000,,好的，这个点表达式的计算结果是一个函数
Dialogue: 0,0:35:27.00,0:35:29.00,*Default,NTP,0000,0000,0000,,然后我们在 10 上调用该函数
Dialogue: 0,0:35:29.13,0:35:32.40,*Default,NTP,0000,0000,0000,,这就是我们在定期账户中存入 10 美元的方式
Dialogue: 0,0:35:33.73,0:35:35.37,*Default,NTP,0000,0000,0000,,让我们快速看一下演示
Dialogue: 0,0:35:38.10,0:35:40.10,*Default,NTP,0000,0000,0000,,所以在右边我们会看到
Dialogue: 0,0:35:40.33,0:35:42.50,*Default,NTP,0000,0000,0000,,我们一直在谈论的帐户类别
Dialogue: 0,0:35:42.87,0:35:44.73,*Default,NTP,0000,0000,0000,,与示例完全相同
Dialogue: 0,0:35:44.73,0:35:46.97,*Default,NTP,0000,0000,0000,,但我添加了一些文档
Dialogue: 0,0:35:47.70,0:35:49.20,*Default,NTP,0000,0000,0000,,所以当你定义一个类时
Dialogue: 0,0:35:49.20,0:35:50.93,*Default,NTP,0000,0000,0000,,你通常给它一个码头字符串
Dialogue: 0,0:35:51.13,0:35:53.57,*Default,NTP,0000,0000,0000,,和帐户作为边界和持有人
Dialogue: 0,0:35:53.97,0:35:55.40,*Default,NTP,0000,0000,0000,,然后你可以给它一些码头
Dialogue: 0,0:35:55.40,0:35:57.53,*Default,NTP,0000,0000,0000,,测试向您展示如何使用此帐户
Dialogue: 0,0:35:57.93,0:35:59.27,*Default,NTP,0000,0000,0000,,所以我们创建了一个帐户
Dialogue: 0,0:35:59.37,0:36:00.30,*Default,NTP,0000,0000,0000,,我的账户
Dialogue: 0,0:36:00.77,0:36:03.90,*Default,NTP,0000,0000,0000,,我们存入 100 我们取出 90 我们还剩下 10
Dialogue: 0,0:36:04.20,0:36:06.77,*Default,NTP,0000,0000,0000,,再次提取90资金不足
Dialogue: 0,0:36:06.77,0:36:08.57,*Default,NTP,0000,0000,0000,,因为我们的余额只有 10
Dialogue: 0,0:36:09.47,0:36:12.00,*Default,NTP,0000,0000,0000,,我们通过有一位教练来创造所有这些行为
Dialogue: 0,0:36:12.00,0:36:14.20,*Default,NTP,0000,0000,0000,,这是一个 posit 方法
Dialogue: 0,0:36:14.33,0:36:15.70,*Default,NTP,0000,0000,0000,,以及提款方法
Dialogue: 0,0:36:18.87,0:36:20.27,*Default,NTP,0000,0000,0000,,这确实有效
Dialogue: 0,0:36:20.33,0:36:21.80,*Default,NTP,0000,0000,0000,,如果我加载这个文件
Dialogue: 0,0:36:22.27,0:36:24.07,*Default,NTP,0000,0000,0000,,那么 account 是一个类
Dialogue: 0,0:36:24.80,0:36:25.67,*Default,NTP,0000,0000,0000,,和
Dialogue: 0,0:36:26.80,0:36:27.60,*Default,NTP,0000,0000,0000,,约翰
Dialogue: 0,0:36:28.27,0:36:32.30,*Default,NTP,0000,0000,0000,,将会为我绑定一个帐户
Dialogue: 0,0:36:33.80,0:36:34.90,*Default,NTP,0000,0000,0000,,那么约翰是什么
Dialogue: 0,0:36:35.13,0:36:36.90,*Default,NTP,0000,0000,0000,,约翰是帐户对象
Dialogue: 0,0:36:37.30,0:36:38.67,*Default,NTP,0000,0000,0000,,所以这就是课程
Dialogue: 0,0:36:39.00,0:36:41.70,*Default,NTP,0000,0000,0000,,如果我询问约翰的类型，它会告诉我
Dialogue: 0,0:36:41.93,0:36:44.87,*Default,NTP,0000,0000,0000,,我在这里定义的班级帐户
Dialogue: 0,0:36:46.50,0:36:48.60,*Default,NTP,0000,0000,0000,,约翰有一个平衡
Dialogue: 0,0:36:48.90,0:36:50.20,*Default,NTP,0000,0000,0000,,那里不多
Dialogue: 0,0:36:50.27,0:36:52.77,*Default,NTP,0000,0000,0000,,约翰有一个持有人，那就是我
Dialogue: 0,0:36:53.30,0:36:54.53,*Default,NTP,0000,0000,0000,,当我存款时
Dialogue: 0,0:36:55.10,0:36:58.17,*Default,NTP,0000,0000,0000,,10 进入约翰，我一次又一次地这样做
Dialogue: 0,0:36:58.27,0:37:00.10,*Default,NTP,0000,0000,0000,,然后约翰回来了，这上升了
Dialogue: 0,0:37:05.33,0:37:06.70,*Default,NTP,0000,0000,0000,,然后我就可以撤回
Dialogue: 0,0:37:07.27,0:37:08.90,*Default,NTP,0000,0000,0000,,所有这些再次出现
Dialogue: 0,0:37:10.70,0:37:14.70,*Default,NTP,0000,0000,0000,,好的，它的行为就像一个帐户应该的那样
Dialogue: 0,0:37:14.73,0:37:16.90,*Default,NTP,0000,0000,0000,,你可以存入并提取
Dialogue: 0,0:37:17.10,0:37:19.70,*Default,NTP,0000,0000,0000,,当你透支时它知道该怎么做
Dialogue: 0,0:37:20.07,0:37:22.10,*Default,NTP,0000,0000,0000,,所以我们可以把它看作一个抽象
Dialogue: 0,0:37:22.10,0:37:23.27,*Default,NTP,0000,0000,0000,,银行账户
Dialogue: 0,0:37:23.87,0:37:25.77,*Default,NTP,0000,0000,0000,,我们定义这种行为
Dialogue: 0,0:37:26.27,0:37:28.57,*Default,NTP,0000,0000,0000,,与以下类声明
Dialogue: 0,0:37:33.93,0:37:35.80,*Default,NTP,0000,0000,0000,,那么属性到底是什么
Dialogue: 0,0:37:36.27,0:37:39.17,*Default,NTP,0000,0000,0000,,好吧，它们只是存储在其中的数据
Dialogue: 0,0:37:39.47,0:37:42.27,*Default,NTP,0000,0000,0000,,实例或类本身
Dialogue: 0,0:37:43.13,0:37:44.73,*Default,NTP,0000,0000,0000,,以及我们如何访问它们
Dialogue: 0,0:37:45.00,0:37:46.77,*Default,NTP,0000,0000,0000,,我们可以使用点表达式
Dialogue: 0,0:37:47.30,0:37:50.87,*Default,NTP,0000,0000,0000,,或者有一个内置函数可以做同样的事情
Dialogue: 0,0:37:51.77,0:37:54.30,*Default,NTP,0000,0000,0000,,回到我们的帐户示例
Dialogue: 0,0:37:55.53,0:37:57.10,*Default,NTP,0000,0000,0000,,我可以创建一个帐户
Dialogue: 0,0:37:57.97,0:38:00.00,*Default,NTP,0000,0000,0000,,通过调用帐户类
Dialogue: 0,0:38:00.40,0:38:03.70,*Default,NTP,0000,0000,0000,,我可以查看该帐户的余额
Dialogue: 0,0:38:04.07,0:38:05.60,*Default,NTP,0000,0000,0000,,与约翰点平衡
Dialogue: 0,0:38:06.10,0:38:08.27,*Default,NTP,0000,0000,0000,,还有一个内置函数
Dialogue: 0,0:38:08.97,0:38:11.77,*Default,NTP,0000,0000,0000,,称为 get atter 即 get 属性
Dialogue: 0,0:38:12.47,0:38:14.13,*Default,NTP,0000,0000,0000,,你传入一个对象的地方
Dialogue: 0,0:38:14.30,0:38:16.87,*Default,NTP,0000,0000,0000,,在您想要获取的属性的名称中
Dialogue: 0,0:38:17.10,0:38:18.90,*Default,NTP,0000,0000,0000,,然后你就会恢复平衡
Dialogue: 0,0:38:19.70,0:38:20.80,*Default,NTP,0000,0000,0000,,这有效
Dialogue: 0,0:38:22.00,0:38:24.33,*Default,NTP,0000,0000,0000,,即使我们已经存入
Dialogue: 0,0:38:25.57,0:38:26.53,*Default,NTP,0000,0000,0000,,一些钱
Dialogue: 0,0:38:31.67,0:38:33.30,*Default,NTP,0000,0000,0000,,我们还可以检查一下
Dialogue: 0,0:38:33.73,0:38:36.93,*Default,NTP,0000,0000,0000,,如果一个对象有一个特定的属性
Dialogue: 0,0:38:37.67,0:38:39.30,*Default,NTP,0000,0000,0000,,所以我们有一个平衡
Dialogue: 0,0:38:39.57,0:38:43.57,*Default,NTP,0000,0000,0000,,但我们没有长度
Dialogue: 0,0:38:46.50,0:38:48.27,*Default,NTP,0000,0000,0000,,所以如果访问一个属性
Dialogue: 0,0:38:48.27,0:38:49.97,*Default,NTP,0000,0000,0000,,我们可以使用点表达式
Dialogue: 0,0:38:50.10,0:38:51.90,*Default,NTP,0000,0000,0000,,或者我们可以使用 get adder
Dialogue: 0,0:38:52.53,0:38:53.53,*Default,NTP,0000,0000,0000,,这让我们
Dialogue: 0,0:38:53.53,0:38:55.57,*Default,NTP,0000,0000,0000,,使用条纹查找属性
Dialogue: 0,0:38:56.20,0:38:57.77,*Default,NTP,0000,0000,0000,,所以我们看一下那个例子
Dialogue: 0,0:38:57.90,0:38:59.10,*Default,NTP,0000,0000,0000,,我们还可以检查
Dialogue: 0,0:38:59.27,0:39:01.67,*Default,NTP,0000,0000,0000,,对象是否具有属性
Dialogue: 0,0:39:02.67,0:39:02.93,*Default,NTP,0000,0000,0000,,得到
Dialogue: 0,0:39:02.93,0:39:05.47,*Default,NTP,0000,0000,0000,,加法器和点表达式完全相同
Dialogue: 0,0:39:05.73,0:39:08.87,*Default,NTP,0000,0000,0000,,它只是一种特殊语法的函数形式
Dialogue: 0,0:39:09.53,0:39:11.93,*Default,NTP,0000,0000,0000,,他们以完全相同的方式查找名字
Dialogue: 0,0:39:12.37,0:39:14.00,*Default,NTP,0000,0000,0000,,并查找一个属性
Dialogue: 0,0:39:14.40,0:39:16.30,*Default,NTP,0000,0000,0000,,可能会返回
Dialogue: 0,0:39:16.47,0:39:20.30,*Default,NTP,0000,0000,0000,,实例属性或类的属性
Dialogue: 0,0:39:20.80,0:39:23.77,*Default,NTP,0000,0000,0000,,但基本上你先看实例
Dialogue: 0,0:39:23.77,0:39:26.50,*Default,NTP,0000,0000,0000,,如果它在那里那么这就是你得到的属性
Dialogue: 0,0:39:26.77,0:39:28.60,*Default,NTP,0000,0000,0000,,否则你在课堂上看
Dialogue: 0,0:39:30.30,0:39:33.47,*Default,NTP,0000,0000,0000,,好吧，让我们谈谈方法和功能
Dialogue: 0,0:39:33.73,0:39:35.70,*Default,NTP,0000,0000,0000,,那么方法就是一个属性
Dialogue: 0,0:39:35.77,0:39:36.77,*Default,NTP,0000,0000,0000,,这是一个函数
Dialogue: 0,0:39:37.57,0:39:40.53,*Default,NTP,0000,0000,0000,,所以Python区分两件事
Dialogue: 0,0:39:41.00,0:39:43.07,*Default,NTP,0000,0000,0000,,已实现的功能
Dialogue: 0,0:39:43.17,0:39:45.10,*Default,NTP,0000,0000,0000,,自本课程开始以来
Dialogue: 0,0:39:45.10,0:39:46.30,*Default,NTP,0000,0000,0000,,我们知道所有这些
Dialogue: 0,0:39:46.77,0:39:48.87,*Default,NTP,0000,0000,0000,,和绑定方法
Dialogue: 0,0:39:49.50,0:39:51.30,*Default,NTP,0000,0000,0000,,将一个函数耦合在一起
Dialogue: 0,0:39:51.70,0:39:56.37,*Default,NTP,0000,0000,0000,,以及将调用该方法的对象
Dialogue: 0,0:39:57.60,0:39:58.60,*Default,NTP,0000,0000,0000,,那是什么意思
Dialogue: 0,0:39:58.97,0:40:02.17,*Default,NTP,0000,0000,0000,,好吧，当我有一个对象和一个函数时
Dialogue: 0,0:40:02.60,0:40:04.80,*Default,NTP,0000,0000,0000,,该对象将被传递
Dialogue: 0,0:40:05.37,0:40:08.10,*Default,NTP,0000,0000,0000,,作为该函数的第一个参数
Dialogue: 0,0:40:08.10,0:40:09.40,*Default,NTP,0000,0000,0000,,函数是一种方法
Dialogue: 0,0:40:09.93,0:40:11.60,*Default,NTP,0000,0000,0000,,那么这就是所谓的绑定方法
Dialogue: 0,0:40:12.53,0:40:13.70,*Default,NTP,0000,0000,0000,,让我们看一下
Dialogue: 0,0:40:14.33,0:40:18.10,*Default,NTP,0000,0000,0000,,如果我查找帐户类别上的属性存款
Dialogue: 0,0:40:18.47,0:40:20.10,*Default,NTP,0000,0000,0000,,它只是一个函数
Dialogue: 0,0:40:20.33,0:40:22.60,*Default,NTP,0000,0000,0000,,这是需要两个参数的东西
Dialogue: 0,0:40:22.97,0:40:26.33,*Default,NTP,0000,0000,0000,,它需要我存入的对象
Dialogue: 0,0:40:26.33,0:40:28.47,*Default,NTP,0000,0000,0000,,然后是我要存入的金额
Dialogue: 0,0:40:30.33,0:40:33.90,*Default,NTP,0000,0000,0000,,如果我查找存款
Dialogue: 0,0:40:33.93,0:40:35.93,*Default,NTP,0000,0000,0000,,帐户类的实例
Dialogue: 0,0:40:35.93,0:40:37.87,*Default,NTP,0000,0000,0000,,其中 tom account 是一个帐户
Dialogue: 0,0:40:39.47,0:40:41.97,*Default,NTP,0000,0000,0000,,然后我看到这是一个方法
Dialogue: 0,0:40:42.47,0:40:45.53,*Default,NTP,0000,0000,0000,,这意味着它具有存款功能
Dialogue: 0,0:40:45.67,0:40:48.33,*Default,NTP,0000,0000,0000,,并与时间帐户绑定在一起
Dialogue: 0,0:40:48.33,0:40:51.33,*Default,NTP,0000,0000,0000,,它将作为第一个参数传递
Dialogue: 0,0:40:51.47,0:40:54.20,*Default,NTP,0000,0000,0000,,当我们实际调用该函数时
Dialogue: 0,0:40:55.37,0:40:56.17,*Default,NTP,0000,0000,0000,,好的
Dialogue: 0,0:40:56.77,0:40:58.17,*Default,NTP,0000,0000,0000,,那么发生了什么好事
Dialogue: 0,0:40:58.77,0:41:01.80,*Default,NTP,0000,0000,0000,,如果我们直接从类访问该函数
Dialogue: 0,0:41:02.13,0:41:04.27,*Default,NTP,0000,0000,0000,,那么我们需要传入两个参数
Dialogue: 0,0:41:04.27,0:41:06.10,*Default,NTP,0000,0000,0000,,因为记住它是如何定义的
Dialogue: 0,0:41:06.20,0:41:07.67,*Default,NTP,0000,0000,0000,,需要两个参数
Dialogue: 0,0:41:07.97,0:41:10.90,*Default,NTP,0000,0000,0000,,一个称为 self，另一个称为 amount
Dialogue: 0,0:41:11.73,0:41:15.10,*Default,NTP,0000,0000,0000,,所以如果我把我在1001通过的时间考虑在内
Dialogue: 0,0:41:16.17,0:41:16.47,*Default,NTP,0000,0000,0000,,现在
Dialogue: 0,0:41:16.47,0:41:18.97,*Default,NTP,0000,0000,0000,,账户里有一千零一十一美元
Dialogue: 0,0:41:21.73,0:41:22.80,*Default,NTP,0000,0000,0000,,另一方面
Dialogue: 0,0:41:23.13,0:41:24.97,*Default,NTP,0000,0000,0000,,如果我从时间账户开始
Dialogue: 0,0:41:25.30,0:41:27.97,*Default,NTP,0000,0000,0000,,我查找属性存款
Dialogue: 0,0:41:28.00,0:41:30.27,*Default,NTP,0000,0000,0000,,我得到的是一个方法
Dialogue: 0,0:41:30.90,0:41:32.73,*Default,NTP,0000,0000,0000,,方法与函数不同
Dialogue: 0,0:41:33.10,0:41:35.93,*Default,NTP,0000,0000,0000,,从某种意义上说，第一个参数已经填充了它
Dialogue: 0,0:41:36.27,0:41:37.47,*Default,NTP,0000,0000,0000,,使用汤姆帐户
Dialogue: 0,0:41:37.73,0:41:39.90,*Default,NTP,0000,0000,0000,,所以汤姆帐户已经是第一个参数
Dialogue: 0,0:41:39.90,0:41:42.00,*Default,NTP,0000,0000,0000,,我们需要做的就是提供第二个参数
Dialogue: 0,0:41:42.00,0:41:42.90,*Default,NTP,0000,0000,0000,,1000
Dialogue: 0,0:41:45.47,0:41:47.97,*Default,NTP,0000,0000,0000,,那么我们来谈谈按名称查找属性
Dialogue: 0,0:41:48.37,0:41:49.77,*Default,NTP,0000,0000,0000,,我们看到一个点表达式
Dialogue: 0,0:41:50.07,0:41:52.20,*Default,NTP,0000,0000,0000,,为了计算点表达式
Dialogue: 0,0:41:52.33,0:41:54.87,*Default,NTP,0000,0000,0000,,我们评估点左边的表达式
Dialogue: 0,0:41:55.27,0:41:58.00,*Default,NTP,0000,0000,0000,,产生点表达式的对象
Dialogue: 0,0:41:58.40,0:42:00.27,*Default,NTP,0000,0000,0000,,这就是我们要查找名称的地方
Dialogue: 0,0:42:01.27,0:42:03.57,*Default,NTP,0000,0000,0000,,然后名称与实例匹配
Dialogue: 0,0:42:03.57,0:42:05.00,*Default,NTP,0000,0000,0000,,该对象的属性
Dialogue: 0,0:42:05.37,0:42:07.60,*Default,NTP,0000,0000,0000,,如果存在具有该名称的属性
Dialogue: 0,0:42:07.70,0:42:09.60,*Default,NTP,0000,0000,0000,,它的值被返回
Dialogue: 0,0:42:10.47,0:42:14.13,*Default,NTP,0000,0000,0000,,如果没有，则在班级中查找姓名
Dialogue: 0,0:42:14.47,0:42:17.00,*Default,NTP,0000,0000,0000,,产生一个类属性值
Dialogue: 0,0:42:19.20,0:42:22.73,*Default,NTP,0000,0000,0000,,除非它是一个函数，否则返回该值
Dialogue: 0,0:42:23.10,0:42:24.93,*Default,NTP,0000,0000,0000,,比如提款或存款
Dialogue: 0,0:42:25.13,0:42:27.53,*Default,NTP,0000,0000,0000,,在这种情况下，返回一个绑定方法
Dialogue: 0,0:42:27.53,0:42:30.20,*Default,NTP,0000,0000,0000,,在僵硬的地方结合在一起
Dialogue: 0,0:42:30.53,0:42:32.93,*Default,NTP,0000,0000,0000,,以及思想表达的对象
Dialogue: 0,0:42:32.93,0:42:34.87,*Default,NTP,0000,0000,0000,,与该函数绑定在一起
Dialogue: 0,0:42:35.07,0:42:36.50,*Default,NTP,0000,0000,0000,,创建绑定方法
Dialogue: 0,0:42:39.17,0:42:41.57,*Default,NTP,0000,0000,0000,,所以有一个实例的属性
Dialogue: 0,0:42:41.57,0:42:43.53,*Default,NTP,0000,0000,0000,,并且有一个类的属性
Dialogue: 0,0:42:44.27,0:42:46.67,*Default,NTP,0000,0000,0000,,到目前为止我们所看到的类的所有属性
Dialogue: 0,0:42:46.67,0:42:47.70,*Default,NTP,0000,0000,0000,,已经有方法了
Dialogue: 0,0:42:47.90,0:42:49.87,*Default,NTP,0000,0000,0000,,但这不是我们唯一的选择
Dialogue: 0,0:42:50.77,0:42:52.30,*Default,NTP,0000,0000,0000,,类属性是任何
Dialogue: 0,0:42:52.30,0:42:54.77,*Default,NTP,0000,0000,0000,,在类的所有实例之间共享
Dialogue: 0,0:42:55.07,0:42:56.40,*Default,NTP,0000,0000,0000,,因为他们是班级的一部分
Dialogue: 0,0:42:56.40,0:42:57.67,*Default,NTP,0000,0000,0000,,不是实例的一部分
Dialogue: 0,0:42:58.10,0:42:59.97,*Default,NTP,0000,0000,0000,,现在当你抬头看时会发生什么
Dialogue: 0,0:43:00.30,0:43:02.90,*Default,NTP,0000,0000,0000,,实例上的该属性的名称
Dialogue: 0,0:43:02.90,0:43:04.50,*Default,NTP,0000,0000,0000,,并且它不在实例上
Dialogue: 0,0:43:04.53,0:43:06.00,*Default,NTP,0000,0000,0000,,你会在课堂上找到它
Dialogue: 0,0:43:06.77,0:43:09.57,*Default,NTP,0000,0000,0000,,好的，让我们稍微扩展一下我们的例子
Dialogue: 0,0:43:09.90,0:43:11.37,*Default,NTP,0000,0000,0000,,这是我们的帐户类别
Dialogue: 0,0:43:11.67,0:43:12.73,*Default,NTP,0000,0000,0000,,此外
Dialogue: 0,0:43:13.70,0:43:15.80,*Default,NTP,0000,0000,0000,,定义构造函数
Dialogue: 0,0:43:16.20,0:43:18.80,*Default,NTP,0000,0000,0000,,我们还将添加一个名为的类属性
Dialogue: 0,0:43:19.20,0:43:20.30,*Default,NTP,0000,0000,0000,,指导
Dialogue: 0,0:43:20.77,0:43:22.87,*Default,NTP,0000,0000,0000,,现在这将是大家共享的东西
Dialogue: 0,0:43:22.87,0:43:24.20,*Default,NTP,0000,0000,0000,,所有帐户
Dialogue: 0,0:43:25.13,0:43:27.30,*Default,NTP,0000,0000,0000,,所以所有账户都有相同的兴趣特征
Dialogue: 0,0:43:27.53,0:43:29.33,*Default,NTP,0000,0000,0000,,如果我查找帐户利息
Dialogue: 0,0:43:29.33,0:43:31.93,*Default,NTP,0000,0000,0000,,我会找到 0.02 作为值
Dialogue: 0,0:43:33.27,0:43:35.17,*Default,NTP,0000,0000,0000,,所以我在这里创建一个新帐户
Dialogue: 0,0:43:35.33,0:43:36.73,*Default,NTP,0000,0000,0000,,汤姆是持有者
Dialogue: 0,0:43:37.47,0:43:40.00,*Default,NTP,0000,0000,0000,,吉姆是第二个账户的持有者
Dialogue: 0,0:43:40.60,0:43:44.27,*Default,NTP,0000,0000,0000,,tom账户的利率是多少 0.02
Dialogue: 0,0:43:44.67,0:43:47.17,*Default,NTP,0000,0000,0000,,那么吉姆同样厚呢
Dialogue: 0,0:43:47.47,0:43:50.27,*Default,NTP,0000,0000,0000,,因为它们都是这个类的实例
Dialogue: 0,0:43:50.73,0:43:52.97,*Default,NTP,0000,0000,0000,,他们都没有自己的利益
Dialogue: 0,0:43:53.57,0:43:56.00,*Default,NTP,0000,0000,0000,,但是这个班级有利率
Dialogue: 0,0:43:56.27,0:43:58.67,*Default,NTP,0000,0000,0000,,这就是我们在这两种情况下要查找的内容
Dialogue: 0,0:44:00.50,0:44:01.90,*Default,NTP,0000,0000,0000,,所以重要的是要注意
Dialogue: 0,0:44:02.10,0:44:05.30,*Default,NTP,0000,0000,0000,,该兴趣不会复制到每个实例中
Dialogue: 0,0:44:06.17,0:44:09.33,*Default,NTP,0000,0000,0000,,相反，它总是保存在类中
Dialogue: 0,0:44:09.90,0:44:11.00,*Default,NTP,0000,0000,0000,,这很重要
Dialogue: 0,0:44:11.47,0:44:13.13,*Default,NTP,0000,0000,0000,,因为如果课堂上发生了变化
Dialogue: 0,0:44:13.13,0:44:14.90,*Default,NTP,0000,0000,0000,,好的，这种变化将会得到反映
Dialogue: 0,0:44:14.97,0:44:16.57,*Default,NTP,0000,0000,0000,,在所有情况下
