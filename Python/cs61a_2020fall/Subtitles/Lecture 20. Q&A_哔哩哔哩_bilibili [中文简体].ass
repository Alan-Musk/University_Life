[Script Info]
Title: Lecture 20. Q&A_哔哩哔哩_bilibili
ScriptType: v4.00+
Collisions: Reverse
PlayResX: 1280
PlayResY: 720
WrapStyle: 3
ScaledBorderAndShadow: yes
; ----------------------
; 本字幕由CC字幕助手自动转换
; 字幕来源https://www.bilibili.com/video/BV1s3411G7yM?p=50&vd_source=6ffca0aa1006734a4fba52f389036611
; 脚本地址https://greasyfork.org/scripts/378513
; 设置了字幕过长自动换行，但若字幕中没有空格换行将无效
; 字体大小依据720p 48号字体等比缩放
; 如显示不正常请尝试使用SRT格式

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Segoe UI,48,&H00FFFFFF,&HF0000000,&H00000000,&HF0000000,1,0,0,0,100,100,0,0.00,1,1,3,2,30,30,20,1

[Events]
Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.24,0:00:03.60,*Default,NTP,0000,0000,0000,,61a 讲座 20 问答 好吧，让我问一下
Dialogue: 0,0:00:03.60,0:00:05.12,*Default,NTP,0000,0000,0000,,约翰在我们等待时问一个问题
Dialogue: 0,0:00:05.12,0:00:07.60,*Default,NTP,0000,0000,0000,,大家呃插话一下
Dialogue: 0,0:00:07.60,0:00:09.76,*Default,NTP,0000,0000,0000,,我已经编码很多年了，约翰
Dialogue: 0,0:00:09.76,0:00:10.64,*Default,NTP,0000,0000,0000,,我不得不说
Dialogue: 0,0:00:10.64,0:00:12.40,*Default,NTP,0000,0000,0000,,除了像商业的东西我
Dialogue: 0,0:00:12.40,0:00:13.68,*Default,NTP,0000,0000,0000,,我不认为我曾经做过对象
Dialogue: 0,0:00:13.68,0:00:15.20,*Default,NTP,0000,0000,0000,,就像我刚编码时一样
Dialogue: 0,0:00:15.20,0:00:17.84,*Default,NTP,0000,0000,0000,,即使我们在内部构建大东西
Dialogue: 0,0:00:17.84,0:00:19.76,*Default,NTP,0000,0000,0000,,是某个蹩脚的程序员还是
Dialogue: 0,0:00:19.76,0:00:21.76,*Default,NTP,0000,0000,0000,,那是有一些障碍
Dialogue: 0,0:00:21.76,0:00:24.48,*Default,NTP,0000,0000,0000,,呃，还是像我从来没有建造过很多东西
Dialogue: 0,0:00:24.48,0:00:26.00,*Default,NTP,0000,0000,0000,,上课并做我想做的所有事情
Dialogue: 0,0:00:26.00,0:00:28.40,*Default,NTP,0000,0000,0000,,教导什么是错的
Dialogue: 0,0:00:28.40,0:00:30.80,*Default,NTP,0000,0000,0000,,嗯，面向对象编程
Dialogue: 0,0:00:30.80,0:00:32.80,*Default,NTP,0000,0000,0000,,在这个特殊场景中大放异彩
Dialogue: 0,0:00:32.80,0:00:34.48,*Default,NTP,0000,0000,0000,,一堆东​​西正在改变
Dialogue: 0,0:00:34.48,0:00:37.04,*Default,NTP,0000,0000,0000,,是的，还有很多被编写的代码
Dialogue: 0,0:00:37.04,0:00:38.80,*Default,NTP,0000,0000,0000,,这些天尤其是数据处理
Dialogue: 0,0:00:38.80,0:00:39.44,*Default,NTP,0000,0000,0000,,代码
Dialogue: 0,0:00:39.44,0:00:42.08,*Default,NTP,0000,0000,0000,,并没有真正发生突变
Dialogue: 0,0:00:42.08,0:00:43.04,*Default,NTP,0000,0000,0000,,上面没有
Dialogue: 0,0:00:43.04,0:00:45.12,*Default,NTP,0000,0000,0000,,随着时间的推移改变状态或者你就像
Dialogue: 0,0:00:45.12,0:00:46.64,*Default,NTP,0000,0000,0000,,跟踪很多东西
Dialogue: 0,0:00:46.64,0:00:49.68,*Default,NTP,0000,0000,0000,,这种情况在类似软件中更常见
Dialogue: 0,0:00:49.68,0:00:50.96,*Default,NTP,0000,0000,0000,,那有一个
Dialogue: 0,0:00:50.96,0:00:53.12,*Default,NTP,0000,0000,0000,,用户交互周期或类似的东西
Dialogue: 0,0:00:53.12,0:00:55.44,*Default,NTP,0000,0000,0000,,是的，如果你正在处理大量数据
Dialogue: 0,0:00:55.44,0:00:56.16,*Default,NTP,0000,0000,0000,,加工
Dialogue: 0,0:00:56.16,0:00:58.48,*Default,NTP,0000,0000,0000,,工作流程然后它就不会显示
Dialogue: 0,0:00:58.48,0:00:59.28,*Default,NTP,0000,0000,0000,,尽可能多
Dialogue: 0,0:00:59.28,0:01:00.72,*Default,NTP,0000,0000,0000,,是的，这是一个好点，就是这样
Dialogue: 0,0:01:00.72,0:01:01.76,*Default,NTP,0000,0000,0000,,一种我没想到的有趣方式
Dialogue: 0,0:01:01.76,0:01:03.60,*Default,NTP,0000,0000,0000,,就这样，但我喜欢那样
Dialogue: 0,0:01:03.60,0:01:07.20,*Default,NTP,0000,0000,0000,,哦，在讲座中我说搅拌
Dialogue: 0,0:01:07.20,0:01:11.04,*Default,NTP,0000,0000,0000,,不是一个函数而是一个类
Dialogue: 0,0:01:11.04,0:01:13.92,*Default,NTP,0000,0000,0000,,所以如果我们看看它说的是什么搅拌
Dialogue: 0,0:01:13.92,0:01:15.20,*Default,NTP,0000,0000,0000,,这是一堂课
Dialogue: 0,0:01:15.20,0:01:17.28,*Default,NTP,0000,0000,0000,,类和函数非常
Dialogue: 0,0:01:17.28,0:01:18.88,*Default,NTP,0000,0000,0000,,类似的意思是
Dialogue: 0,0:01:18.88,0:01:20.56,*Default,NTP,0000,0000,0000,,你对他们做某事的方式是
Dialogue: 0,0:01:20.56,0:01:22.24,*Default,NTP,0000,0000,0000,,你称他们为
Dialogue: 0,0:01:22.24,0:01:25.52,*Default,NTP,0000,0000,0000,,所以当你调用像这样的函数时
Dialogue: 0,0:01:25.52,0:01:26.56,*Default,NTP,0000,0000,0000,,腹肌
Dialogue: 0,0:01:26.56,0:01:28.96,*Default,NTP,0000,0000,0000,,它真的可以做任何事情，当你
Dialogue: 0,0:01:28.96,0:01:30.40,*Default,NTP,0000,0000,0000,,呼叫班级
Dialogue: 0,0:01:30.40,0:01:32.72,*Default,NTP,0000,0000,0000,,它总是会创造一个新的
Dialogue: 0,0:01:32.72,0:01:34.24,*Default,NTP,0000,0000,0000,,该类的实例
Dialogue: 0,0:01:34.24,0:01:37.68,*Default,NTP,0000,0000,0000,,所以虽然它看起来像一个搅拌
Dialogue: 0,0:01:37.68,0:01:38.48,*Default,NTP,0000,0000,0000,,功能
Dialogue: 0,0:01:38.48,0:01:40.80,*Default,NTP,0000,0000,0000,,这确实是一堂课，而你是什么
Dialogue: 0,0:01:40.80,0:01:42.56,*Default,NTP,0000,0000,0000,,在这里做的是你正在打电话
Dialogue: 0,0:01:42.56,0:01:45.12,*Default,NTP,0000,0000,0000,,搅拌类构造函数以便
Dialogue: 0,0:01:45.12,0:01:46.72,*Default,NTP,0000,0000,0000,,创建一个新流
Dialogue: 0,0:01:46.72,0:01:48.48,*Default,NTP,0000,0000,0000,,你几乎可以称之为
Dialogue: 0,0:01:48.48,0:01:50.24,*Default,NTP,0000,0000,0000,,任何事情，它总是会让你成为
Dialogue: 0,0:01:50.24,0:01:50.88,*Default,NTP,0000,0000,0000,,细绳
Dialogue: 0,0:01:50.88,0:01:54.40,*Default,NTP,0000,0000,0000,,所以从这个意义上说搅拌是一门课
Dialogue: 0,0:01:54.40,0:01:56.00,*Default,NTP,0000,0000,0000,,这可能是一个不存在的区别
Dialogue: 0,0:01:56.00,0:01:57.60,*Default,NTP,0000,0000,0000,,真的很重要
Dialogue: 0,0:01:57.60,0:02:01.12,*Default,NTP,0000,0000,0000,,嗯，老实说，是的，这并不重要
Dialogue: 0,0:02:01.12,0:02:01.76,*Default,NTP,0000,0000,0000,,全部
Dialogue: 0,0:02:01.76,0:02:03.92,*Default,NTP,0000,0000,0000,,但很有趣的是，是的
Dialogue: 0,0:02:03.92,0:02:04.88,*Default,NTP,0000,0000,0000,,我们的团队和
Dialogue: 0,0:02:04.88,0:02:06.80,*Default,NTP,0000,0000,0000,,课程非常相似，我的意思是对的
Dialogue: 0,0:02:06.80,0:02:09.04,*Default,NTP,0000,0000,0000,,那里只是课程或
Dialogue: 0,0:02:09.04,0:02:10.40,*Default,NTP,0000,0000,0000,,总是创建一个函数
Dialogue: 0,0:02:10.40,0:02:12.64,*Default,NTP,0000,0000,0000,,此类的特定实例
Dialogue: 0,0:02:12.64,0:02:14.40,*Default,NTP,0000,0000,0000,,下一个问题是关于一个错误
Dialogue: 0,0:02:14.40,0:02:16.80,*Default,NTP,0000,0000,0000,,多态函数视频
Dialogue: 0,0:02:16.80,0:02:19.60,*Default,NTP,0000,0000,0000,,从今天的讲座中我重新定义了
Dialogue: 0,0:02:19.60,0:02:20.88,*Default,NTP,0000,0000,0000,,搅拌并包装
Dialogue: 0,0:02:20.88,0:02:22.64,*Default,NTP,0000,0000,0000,,在我打电话的地方下面
Dialogue: 0,0:02:22.64,0:02:24.96,*Default,NTP,0000,0000,0000,,他们，所以这些定义没有
Dialogue: 0,0:02:24.96,0:02:28.40,*Default,NTP,0000,0000,0000,,效果是的好问题
Dialogue: 0,0:02:28.40,0:02:31.44,*Default,NTP,0000,0000,0000,,如果你先打印然后你
Dialogue: 0,0:02:31.44,0:02:34.00,*Default,NTP,0000,0000,0000,,重新定义搅拌和包装然后打印
Dialogue: 0,0:02:34.00,0:02:36.08,*Default,NTP,0000,0000,0000,,不知道读取的定义
Dialogue: 0,0:02:36.08,0:02:37.68,*Default,NTP,0000,0000,0000,,我认为这只是一个错误
Dialogue: 0,0:02:37.68,0:02:39.68,*Default,NTP,0000,0000,0000,,视频但是呃
Dialogue: 0,0:02:39.68,0:02:41.68,*Default,NTP,0000,0000,0000,,我查了一下，如果你重新排列
Dialogue: 0,0:02:41.68,0:02:43.52,*Default,NTP,0000,0000,0000,,代码它仍然做同样的事情所以
Dialogue: 0,0:02:43.52,0:02:46.64,*Default,NTP,0000,0000,0000,,嗯，是的，是的，代码没有执行此操作
Dialogue: 0,0:02:46.64,0:02:47.92,*Default,NTP,0000,0000,0000,,正是我所说的，但它会做
Dialogue: 0,0:02:47.92,0:02:49.92,*Default,NTP,0000,0000,0000,,我所说的如果我写得正确的话
Dialogue: 0,0:02:49.92,0:02:51.68,*Default,NTP,0000,0000,0000,,有任何意义
Dialogue: 0,0:02:51.68,0:02:54.40,*Default,NTP,0000,0000,0000,,所以呃是的所以无论如何你是对的
Dialogue: 0,0:02:54.40,0:02:55.92,*Default,NTP,0000,0000,0000,,如果您在进行更改之前打印
Dialogue: 0,0:02:55.92,0:02:57.44,*Default,NTP,0000,0000,0000,,那么这些改变显然不会
Dialogue: 0,0:02:57.44,0:02:59.44,*Default,NTP,0000,0000,0000,,反映
Dialogue: 0,0:02:59.44,0:03:01.60,*Default,NTP,0000,0000,0000,,好的，这个问题是关于如何
Dialogue: 0,0:03:01.60,0:03:03.04,*Default,NTP,0000,0000,0000,,加建工程
Dialogue: 0,0:03:03.04,0:03:05.20,*Default,NTP,0000,0000,0000,,当有一个实例时
Dialogue: 0,0:03:05.20,0:03:07.44,*Default,NTP,0000,0000,0000,,涉及用户定义的类
Dialogue: 0,0:03:07.44,0:03:08.80,*Default,NTP,0000,0000,0000,,答案是有点
Dialogue: 0,0:03:08.80,0:03:10.48,*Default,NTP,0000,0000,0000,,复杂所以
Dialogue: 0,0:03:10.48,0:03:15.68,*Default,NTP,0000,0000,0000,,当 python 看到 x 加 y 时
Dialogue: 0,0:03:16.16,0:03:19.52,*Default,NTP,0000,0000,0000,,它呃检查是否x
Dialogue: 0,0:03:19.52,0:03:22.56,*Default,NTP,0000,0000,0000,,是用户定义的 有用户定义的
Dialogue: 0,0:03:22.56,0:03:23.68,*Default,NTP,0000,0000,0000,,班级
Dialogue: 0,0:03:23.68,0:03:27.44,*Default,NTP,0000,0000,0000,,如果是的话，如果它有一个 add 方法
Dialogue: 0,0:03:27.44,0:03:30.56,*Default,NTP,0000,0000,0000,,如果这不是真的，那么它会检查 y
Dialogue: 0,0:03:30.56,0:03:33.20,*Default,NTP,0000,0000,0000,,并查看 y 是否是用户
Dialogue: 0,0:03:33.20,0:03:34.32,*Default,NTP,0000,0000,0000,,定义类
Dialogue: 0,0:03:34.32,0:03:37.52,*Default,NTP,0000,0000,0000,,有一个 r add 方法 我们的广告是什么
Dialogue: 0,0:03:37.52,0:03:40.08,*Default,NTP,0000,0000,0000,,这是被调用的方法
Dialogue: 0,0:03:40.08,0:03:42.56,*Default,NTP,0000,0000,0000,,当这个类的一个实例位于
Dialogue: 0,0:03:42.56,0:03:43.44,*Default,NTP,0000,0000,0000,,正确的
Dialogue: 0,0:03:43.44,0:03:46.88,*Default,NTP,0000,0000,0000,,的加号，如果两者都不是，则这些是
Dialogue: 0,0:03:46.88,0:03:47.84,*Default,NTP,0000,0000,0000,,真的
Dialogue: 0,0:03:47.84,0:03:50.16,*Default,NTP,0000,0000,0000,,然后它尝试使用内置的
Dialogue: 0,0:03:50.16,0:03:51.76,*Default,NTP,0000,0000,0000,,它有的版本
Dialogue: 0,0:03:51.76,0:03:54.08,*Default,NTP,0000,0000,0000,,这基本上只适用于
Dialogue: 0,0:03:54.08,0:03:54.80,*Default,NTP,0000,0000,0000,,内置的
Dialogue: 0,0:03:54.80,0:03:58.64,*Default,NTP,0000,0000,0000,,像ant、float和stir这样的类
Dialogue: 0,0:03:58.64,0:04:01.52,*Default,NTP,0000,0000,0000,,嗯，你知道这是否不适用
Dialogue: 0,0:04:01.52,0:04:02.72,*Default,NTP,0000,0000,0000,,然后你会看到一个错误
Dialogue: 0,0:04:02.72,0:04:04.80,*Default,NTP,0000,0000,0000,,这说我不知道​​如何添加
Dialogue: 0,0:04:04.80,0:04:06.08,*Default,NTP,0000,0000,0000,,整数和一个
Dialogue: 0,0:04:06.08,0:04:09.12,*Default,NTP,0000,0000,0000,,小部件或任何你在那里的东西
Dialogue: 0,0:04:09.12,0:04:11.84,*Default,NTP,0000,0000,0000,,所以这个多步骤过程不是
Dialogue: 0,0:04:11.84,0:04:12.80,*Default,NTP,0000,0000,0000,,非常重要
Dialogue: 0,0:04:12.80,0:04:16.00,*Default,NTP,0000,0000,0000,,除了嗯它表明了如何
Dialogue: 0,0:04:16.00,0:04:17.68,*Default,NTP,0000,0000,0000,,很复杂
Dialogue: 0,0:04:17.68,0:04:20.16,*Default,NTP,0000,0000,0000,,设置一种语言，以便您可以
Dialogue: 0,0:04:20.16,0:04:23.04,*Default,NTP,0000,0000,0000,,任意扩展 plus 的作用
Dialogue: 0,0:04:23.04,0:04:24.72,*Default,NTP,0000,0000,0000,,这很复杂，因为有
Dialogue: 0,0:04:24.72,0:04:26.64,*Default,NTP,0000,0000,0000,,这两个不同的论点
Dialogue: 0,0:04:26.64,0:04:27.68,*Default,NTP,0000,0000,0000,,添加
Dialogue: 0,0:04:27.68,0:04:30.80,*Default,NTP,0000,0000,0000,,嗯你知道
Dialogue: 0,0:04:30.80,0:04:32.88,*Default,NTP,0000,0000,0000,,你可能希望你的
Dialogue: 0,0:04:32.88,0:04:35.04,*Default,NTP,0000,0000,0000,,用户定义的东西出现
Dialogue: 0,0:04:35.04,0:04:38.32,*Default,NTP,0000,0000,0000,,两边但有时
Dialogue: 0,0:04:38.32,0:04:40.16,*Default,NTP,0000,0000,0000,,顺序很重要，但情况并非总是如此
Dialogue: 0,0:04:40.16,0:04:41.28,*Default,NTP,0000,0000,0000,,那个每
Dialogue: 0,0:04:41.28,0:04:43.60,*Default,NTP,0000,0000,0000,,加法运算是可交换的
Dialogue: 0,0:04:43.60,0:04:44.48,*Default,NTP,0000,0000,0000,,对于字符串
Dialogue: 0,0:04:44.48,0:04:48.56,*Default,NTP,0000,0000,0000,,a加b是不同的哦来吧
Dialogue: 0,0:04:48.56,0:04:52.48,*Default,NTP,0000,0000,0000,,a 加 b 与 b 加 a 不同
Dialogue: 0,0:04:52.48,0:04:54.80,*Default,NTP,0000,0000,0000,,你可能想要那种行为
Dialogue: 0,0:04:54.80,0:04:56.80,*Default,NTP,0000,0000,0000,,在你自己的版本中，但你需要
Dialogue: 0,0:04:56.80,0:04:57.76,*Default,NTP,0000,0000,0000,,知道是否
Dialogue: 0,0:04:57.76,0:04:59.76,*Default,NTP,0000,0000,0000,,您创建的对象位于左侧或
Dialogue: 0,0:04:59.76,0:05:02.24,*Default,NTP,0000,0000,0000,,加号的右边
Dialogue: 0,0:05:02.24,0:05:04.24,*Default,NTP,0000,0000,0000,,下一个问题是针对袋鼠的
Dialogue: 0,0:05:04.24,0:05:06.40,*Default,NTP,0000,0000,0000,,类可以使用吗
Dialogue: 0,0:05:06.40,0:05:08.96,*Default,NTP,0000,0000,0000,,检查袋子里的东西
Dialogue: 0,0:05:08.96,0:05:11.52,*Default,NTP,0000,0000,0000,,而不是使用 for 语句
Dialogue: 0,0:05:11.52,0:05:14.64,*Default,NTP,0000,0000,0000,,嗯，不，我认为使用 in 就可以了，嗯
Dialogue: 0,0:05:14.64,0:05:16.40,*Default,NTP,0000,0000,0000,,我在中使用 for 循环的原因
Dialogue: 0,0:05:16.40,0:05:18.16,*Default,NTP,0000,0000,0000,,while 循环是我喜欢锻炼的
Dialogue: 0,0:05:18.16,0:05:19.28,*Default,NTP,0000,0000,0000,,让学生确保他们
Dialogue: 0,0:05:19.28,0:05:20.40,*Default,NTP,0000,0000,0000,,明白它
Dialogue: 0,0:05:20.40,0:05:22.48,*Default,NTP,0000,0000,0000,,但 in 运算符非常好
Dialogue: 0,0:05:22.48,0:05:24.08,*Default,NTP,0000,0000,0000,,本质上是嗯
Dialogue: 0,0:05:24.08,0:05:26.00,*Default,NTP,0000,0000,0000,,这是 python 的情况之一
Dialogue: 0,0:05:26.00,0:05:28.16,*Default,NTP,0000,0000,0000,,给了你一个构造
Dialogue: 0,0:05:28.16,0:05:29.44,*Default,NTP,0000,0000,0000,,这可以做一些你可以做的事情
Dialogue: 0,0:05:29.44,0:05:31.12,*Default,NTP,0000,0000,0000,,手动完成，但你可以
Dialogue: 0,0:05:31.12,0:05:32.72,*Default,NTP,0000,0000,0000,,绝对使用了最后并完成了它
Dialogue: 0,0:05:32.72,0:05:33.28,*Default,NTP,0000,0000,0000,,一条线
Dialogue: 0,0:05:33.28,0:05:36.00,*Default,NTP,0000,0000,0000,,而不是两三行 是的，太棒了
Dialogue: 0,0:05:36.00,0:05:36.40,*Default,NTP,0000,0000,0000,,问题
Dialogue: 0,0:05:36.40,0:05:38.48,*Default,NTP,0000,0000,0000,,所以问题是实例是否相同
Dialogue: 0,0:05:38.48,0:05:40.88,*Default,NTP,0000,0000,0000,,就像只是寻找某物的类型
Dialogue: 0,0:05:40.88,0:05:42.48,*Default,NTP,0000,0000,0000,,并弄清楚这是否等于
Dialogue: 0,0:05:42.48,0:05:44.96,*Default,NTP,0000,0000,0000,,一个班级，他们是如此接近
Dialogue: 0,0:05:44.96,0:05:46.96,*Default,NTP,0000,0000,0000,,但由于继承，他们是
Dialogue: 0,0:05:46.96,0:05:48.24,*Default,NTP,0000,0000,0000,,实际上不同
Dialogue: 0,0:05:48.24,0:05:50.64,*Default,NTP,0000,0000,0000,,所以让我给你举个例子，如果你
Dialogue: 0,0:05:50.64,0:05:52.72,*Default,NTP,0000,0000,0000,,有a级
Dialogue: 0,0:05:52.72,0:05:56.24,*Default,NTP,0000,0000,0000,,嗯那个
Dialogue: 0,0:05:56.24,0:05:59.84,*Default,NTP,0000,0000,0000,,是基础，你有一个 b 类
Dialogue: 0,0:05:59.84,0:06:02.88,*Default,NTP,0000,0000,0000,,它继承自 a 并且是
Dialogue: 0,0:06:02.88,0:06:05.36,*Default,NTP,0000,0000,0000,,子类
Dialogue: 0,0:06:05.36,0:06:09.04,*Default,NTP,0000,0000,0000,,如果我构建 ab 并询问
Dialogue: 0,0:06:09.04,0:06:12.56,*Default,NTP,0000,0000,0000,,这是 b 类的实例吗
Dialogue: 0,0:06:12.56,0:06:14.00,*Default,NTP,0000,0000,0000,,答案是肯定的，但是它是
Dialogue: 0,0:06:14.00,0:06:17.44,*Default,NTP,0000,0000,0000,,也是 a 类的一个实例
Dialogue: 0,0:06:17.44,0:06:20.96,*Default,NTP,0000,0000,0000,,而 b 的类型是 b
Dialogue: 0,0:06:20.96,0:06:24.08,*Default,NTP,0000,0000,0000,,类，但它不是 a
Dialogue: 0,0:06:24.08,0:06:27.36,*Default,NTP,0000,0000,0000,,类，所以实例的作用是询问
Dialogue: 0,0:06:27.36,0:06:30.96,*Default,NTP,0000,0000,0000,,b 是一个实例
Dialogue: 0,0:06:30.96,0:06:33.52,*Default,NTP,0000,0000,0000,,这个类或者它的任何子类
Dialogue: 0,0:06:33.52,0:06:36.16,*Default,NTP,0000,0000,0000,,这是一件棘手的小事，不是吗？
Dialogue: 0,0:06:36.16,0:06:38.00,*Default,NTP,0000,0000,0000,,是的，但是它很有用，因为
Dialogue: 0,0:06:38.00,0:06:40.00,*Default,NTP,0000,0000,0000,,基本上你是你的未来证明
Dialogue: 0,0:06:40.00,0:06:42.24,*Default,NTP,0000,0000,0000,,你的代码说它是一个实例
Dialogue: 0,0:06:42.24,0:06:43.28,*Default,NTP,0000,0000,0000,,一只袋鼠
Dialogue: 0,0:06:43.28,0:06:45.20,*Default,NTP,0000,0000,0000,,如果有人想出这个特别的
Dialogue: 0,0:06:45.20,0:06:47.52,*Default,NTP,0000,0000,0000,,像短袋鼠的子类
Dialogue: 0,0:06:47.52,0:06:49.84,*Default,NTP,0000,0000,0000,,你的代码仍然可以正确运行
Dialogue: 0,0:06:49.84,0:06:51.20,*Default,NTP,0000,0000,0000,,是的，好问题，那是什么
Dialogue: 0,0:06:51.20,0:06:52.64,*Default,NTP,0000,0000,0000,,之间的区别
Dialogue: 0,0:06:52.64,0:06:55.92,*Default,NTP,0000,0000,0000,,这个内置的包装函数
Dialogue: 0,0:06:55.92,0:07:00.32,*Default,NTP,0000,0000,0000,,这件事很好嗯
Dialogue: 0,0:07:00.32,0:07:02.64,*Default,NTP,0000,0000,0000,,你会在不同的地方看到它们，所以
Dialogue: 0,0:07:02.64,0:07:05.04,*Default,NTP,0000,0000,0000,,包装器可以出现在任何地方
Dialogue: 0,0:07:05.04,0:07:06.48,*Default,NTP,0000,0000,0000,,这是一个内置函数
Dialogue: 0,0:07:06.48,0:07:08.08,*Default,NTP,0000,0000,0000,,全局框架你可以
Dialogue: 0,0:07:08.08,0:07:11.12,*Default,NTP,0000,0000,0000,,调用任何东西并且
Dialogue: 0,0:07:11.12,0:07:14.32,*Default,NTP,0000,0000,0000,,它会做什么真的很简单
Dialogue: 0,0:07:14.32,0:07:18.00,*Default,NTP,0000,0000,0000,,它会问它的论点是什么
Dialogue: 0,0:07:18.00,0:07:21.44,*Default,NTP,0000,0000,0000,,包装方法，我们就调用它
Dialogue: 0,0:07:21.44,0:07:25.20,*Default,NTP,0000,0000,0000,,这样我就可以得到你的包装纸
Dialogue: 0,0:07:25.20,0:07:28.40,*Default,NTP,0000,0000,0000,,基本上我创建的任何类型的对象
Dialogue: 0,0:07:28.40,0:07:30.72,*Default,NTP,0000,0000,0000,,但当发生的时候
Dialogue: 0,0:07:30.72,0:07:32.56,*Default,NTP,0000,0000,0000,,里面没有一大堆代码
Dialogue: 0,0:07:32.56,0:07:33.92,*Default,NTP,0000,0000,0000,,代表说
Dialogue: 0,0:07:33.92,0:07:35.04,*Default,NTP,0000,0000,0000,,这里有所有不同种类的
Dialogue: 0,0:07:35.04,0:07:36.48,*Default,NTP,0000,0000,0000,,世界上的物体，这就是
Dialogue: 0,0:07:36.48,0:07:37.28,*Default,NTP,0000,0000,0000,,他们是这样
Dialogue: 0,0:07:37.28,0:07:39.84,*Default,NTP,0000,0000,0000,,相反，说唱歌手所做的就是采取其
Dialogue: 0,0:07:39.84,0:07:41.12,*Default,NTP,0000,0000,0000,,争论
Dialogue: 0,0:07:41.12,0:07:45.12,*Default,NTP,0000,0000,0000,,并调用该方法
Dialogue: 0,0:07:45.12,0:07:47.44,*Default,NTP,0000,0000,0000,,这意味着这可以定义在
Dialogue: 0,0:07:47.44,0:07:48.16,*Default,NTP,0000,0000,0000,,班级
Dialogue: 0,0:07:48.16,0:07:49.84,*Default,NTP,0000,0000,0000,,不管这件事是什么，这发生了
Dialogue: 0,0:07:49.84,0:07:51.52,*Default,NTP,0000,0000,0000,,成为一个清单
Dialogue: 0,0:07:51.52,0:07:54.64,*Default,NTP,0000,0000,0000,,呃它有一个
Dialogue: 0,0:07:54.64,0:07:58.40,*Default,NTP,0000,0000,0000,,内置的包装方法
Dialogue: 0,0:07:58.40,0:08:00.80,*Default,NTP,0000,0000,0000,,你可以忽略槽包装器是什么
Dialogue: 0,0:08:00.80,0:08:02.08,*Default,NTP,0000,0000,0000,,就是这样
Dialogue: 0,0:08:02.08,0:08:03.68,*Default,NTP,0000,0000,0000,,我们发现了一些Python的随机细节
Dialogue: 0,0:08:03.68,0:08:05.52,*Default,NTP,0000,0000,0000,,不在乎，但这就像
Dialogue: 0,0:08:05.52,0:08:06.88,*Default,NTP,0000,0000,0000,,一些功能
Dialogue: 0,0:08:06.88,0:08:10.40,*Default,NTP,0000,0000,0000,,那个呃知道如何转弯
Dialogue: 0,0:08:10.40,0:08:13.52,*Default,NTP,0000,0000,0000,,列表成字符串，你知道什么
Dialogue: 0,0:08:13.52,0:08:14.24,*Default,NTP,0000,0000,0000,,可以吗
Dialogue: 0,0:08:14.24,0:08:16.80,*Default,NTP,0000,0000,0000,,它添加了方括号和逗号，并且
Dialogue: 0,0:08:16.80,0:08:18.64,*Default,NTP,0000,0000,0000,,在正确的地方留出空格之类的东西
Dialogue: 0,0:08:18.64,0:08:19.84,*Default,NTP,0000,0000,0000,,那
Dialogue: 0,0:08:19.84,0:08:21.28,*Default,NTP,0000,0000,0000,,所以区别在于这些是
Dialogue: 0,0:08:21.28,0:08:23.52,*Default,NTP,0000,0000,0000,,建立为彼此相关
Dialogue: 0,0:08:23.52,0:08:27.68,*Default,NTP,0000,0000,0000,,这些出现在类定义中
Dialogue: 0,0:08:27.68,0:08:30.80,*Default,NTP,0000,0000,0000,,所以你经常会有一个包装纸
Dialogue: 0,0:08:30.80,0:08:33.44,*Default,NTP,0000,0000,0000,,接受对象的方法
Dialogue: 0,0:08:33.44,0:08:35.04,*Default,NTP,0000,0000,0000,,你正在尝试制作一串
Dialogue: 0,0:08:35.04,0:08:40.08,*Default,NTP,0000,0000,0000,,并返回一个类似的字符串
Dialogue: 0,0:08:40.08,0:08:42.64,*Default,NTP,0000,0000,0000,,这是一个内置函数
Dialogue: 0,0:08:42.64,0:08:43.92,*Default,NTP,0000,0000,0000,,总是知道
Dialogue: 0,0:08:43.92,0:08:45.52,*Default,NTP,0000,0000,0000,,当它得到一个对象但没有得到时
Dialogue: 0,0:08:45.52,0:08:47.60,*Default,NTP,0000,0000,0000,,只知道如何打印出来
Dialogue: 0,0:08:47.60,0:08:49.44,*Default,NTP,0000,0000,0000,,调用此包装方法 this
Dialogue: 0,0:08:49.44,0:08:50.88,*Default,NTP,0000,0000,0000,,underscore 下划线包装方法
Dialogue: 0,0:08:50.88,0:08:52.48,*Default,NTP,0000,0000,0000,,为了完成工作
Dialogue: 0,0:08:52.48,0:08:54.00,*Default,NTP,0000,0000,0000,,但如果你称这个为某事
Dialogue: 0,0:08:54.00,0:08:55.36,*Default,NTP,0000,0000,0000,,否则它不会工作所以
Dialogue: 0,0:08:55.36,0:08:56.80,*Default,NTP,0000,0000,0000,,关系是之间
Dialogue: 0,0:08:56.80,0:08:58.56,*Default,NTP,0000,0000,0000,,不带下划线的代表是
Dialogue: 0,0:08:58.56,0:08:59.84,*Default,NTP,0000,0000,0000,,内置功能
Dialogue: 0,0:08:59.84,0:09:01.28,*Default,NTP,0000,0000,0000,,和特殊的包装纸
Dialogue: 0,0:09:01.28,0:09:03.12,*Default,NTP,0000,0000,0000,,方法名带下划线
Dialogue: 0,0:09:03.12,0:09:06.88,*Default,NTP,0000,0000,0000,,这样就可以了，所以呃，如果我们做一个 a
Dialogue: 0,0:09:06.88,0:09:10.00,*Default,NTP,0000,0000,0000,,现在它看起来像一个而不是
Dialogue: 0,0:09:10.00,0:09:11.68,*Default,NTP,0000,0000,0000,,某种类似时髦的东西
Dialogue: 0,0:09:11.68,0:09:13.04,*Default,NTP,0000,0000,0000,,尖括号
Dialogue: 0,0:09:13.04,0:09:14.48,*Default,NTP,0000,0000,0000,,下一个问题是是否每个
Dialogue: 0,0:09:14.48,0:09:16.80,*Default,NTP,0000,0000,0000,,类定义开膛手
Dialogue: 0,0:09:16.80,0:09:19.12,*Default,NTP,0000,0000,0000,,是的，很好的问题，所以下划线
Dialogue: 0,0:09:19.12,0:09:20.48,*Default,NTP,0000,0000,0000,,下划线包装方法
Dialogue: 0,0:09:20.48,0:09:22.56,*Default,NTP,0000,0000,0000,,是用户必须定义​​的东西
Dialogue: 0,0:09:22.56,0:09:24.32,*Default,NTP,0000,0000,0000,,在每个班级
Dialogue: 0,0:09:24.32,0:09:28.56,*Default,NTP,0000,0000,0000,,如果没有定义，有一些
Dialogue: 0,0:09:28.56,0:09:31.36,*Default,NTP,0000,0000,0000,,默认行为，你已经见过很多次了
Dialogue: 0,0:09:31.36,0:09:32.48,*Default,NTP,0000,0000,0000,,次
Dialogue: 0,0:09:32.48,0:09:36.00,*Default,NTP,0000,0000,0000,,就是这个呃东西在哪里
Dialogue: 0,0:09:36.00,0:09:39.20,*Default,NTP,0000,0000,0000,,呃，它向你展示了一些尖括号
Dialogue: 0,0:09:39.20,0:09:41.12,*Default,NTP,0000,0000,0000,,它会告诉你班级是什么
Dialogue: 0,0:09:41.12,0:09:42.80,*Default,NTP,0000,0000,0000,,它说的是“对象”这个词
Dialogue: 0,0:09:42.80,0:09:44.96,*Default,NTP,0000,0000,0000,,就像这是内置的但它不是
Dialogue: 0,0:09:44.96,0:09:46.24,*Default,NTP,0000,0000,0000,,很有用
Dialogue: 0,0:09:46.24,0:09:48.80,*Default,NTP,0000,0000,0000,,它就像一个占位符，所以它是
Dialogue: 0,0:09:48.80,0:09:50.08,*Default,NTP,0000,0000,0000,,几乎总是这样，当你
Dialogue: 0,0:09:50.08,0:09:51.28,*Default,NTP,0000,0000,0000,,创建一个类
Dialogue: 0,0:09:51.28,0:09:53.68,*Default,NTP,0000,0000,0000,,你想添加一个说唱歌手方法
Dialogue: 0,0:09:53.68,0:09:54.48,*Default,NTP,0000,0000,0000,,节目
Dialogue: 0,0:09:54.48,0:09:57.76,*Default,NTP,0000,0000,0000,,呃，关于 a 的更多有趣信息
Dialogue: 0,0:09:57.76,0:10:00.48,*Default,NTP,0000,0000,0000,,是的，好问题，那么你会如何回答
Dialogue: 0,0:10:00.48,0:10:02.96,*Default,NTP,0000,0000,0000,,一颗树
Dialogue: 0,0:10:03.20,0:10:06.72,*Default,NTP,0000,0000,0000,,并打印所有路径，所以我们可以说
Dialogue: 0,0:10:06.72,0:10:07.68,*Default,NTP,0000,0000,0000,,我们想
Dialogue: 0,0:10:07.68,0:10:09.28,*Default,NTP,0000,0000,0000,,首先打印 a 我们必须决定 a 是什么
Dialogue: 0,0:10:09.28,0:10:11.44,*Default,NTP,0000,0000,0000,,路径看起来像典型的事情
Dialogue: 0,0:10:11.44,0:10:13.12,*Default,NTP,0000,0000,0000,,这是标签列表
Dialogue: 0,0:10:13.12,0:10:15.60,*Default,NTP,0000,0000,0000,,沿着一条路，一条路真的就像一条
Dialogue: 0,0:10:15.60,0:10:16.32,*Default,NTP,0000,0000,0000,,列表
Dialogue: 0,0:10:16.32,0:10:20.16,*Default,NTP,0000,0000,0000,,每个节点都是一棵树但是嗯
Dialogue: 0,0:10:20.16,0:10:21.76,*Default,NTP,0000,0000,0000,,你知道路径中有趣的部分
Dialogue: 0,0:10:21.76,0:10:23.52,*Default,NTP,0000,0000,0000,,就是里面有一堆标签
Dialogue: 0,0:10:23.52,0:10:25.76,*Default,NTP,0000,0000,0000,,是数字或其他什么
Dialogue: 0,0:10:25.76,0:10:28.48,*Default,NTP,0000,0000,0000,,是的，如果我们养一棵茶树，我们
Dialogue: 0,0:10:28.48,0:10:29.52,*Default,NTP,0000,0000,0000,,想要
Dialogue: 0,0:10:29.52,0:10:33.44,*Default,NTP,0000,0000,0000,,打印从根开始的所有路径
Dialogue: 0,0:10:33.44,0:10:36.32,*Default,NTP,0000,0000,0000,,到一片叶子
Dialogue: 0,0:10:37.20,0:10:40.24,*Default,NTP,0000,0000,0000,,一些缩放显示的东西我不知道如何
Dialogue: 0,0:10:40.24,0:10:41.52,*Default,NTP,0000,0000,0000,,还没有做到这一点，但我知道它会
Dialogue: 0,0:10:41.52,0:10:43.68,*Default,NTP,0000,0000,0000,,是递归史蒂夫
Dialogue: 0,0:10:43.68,0:10:45.52,*Default,NTP,0000,0000,0000,,你知道最直接的方法
Dialogue: 0,0:10:45.52,0:10:48.00,*Default,NTP,0000,0000,0000,,分两步执行此操作
Dialogue: 0,0:10:48.00,0:10:51.60,*Default,NTP,0000,0000,0000,,你得到所有的路径然后你打印
Dialogue: 0,0:10:51.60,0:10:52.64,*Default,NTP,0000,0000,0000,,每一个出
Dialogue: 0,0:10:52.64,0:10:56.08,*Default,NTP,0000,0000,0000,,所以让我们尝试一下这样会怎么样
Dialogue: 0,0:10:56.08,0:10:57.04,*Default,NTP,0000,0000,0000,,实际上看起来像
Dialogue: 0,0:10:57.04,0:11:01.84,*Default,NTP,0000,0000,0000,,如果你有一棵树
Dialogue: 0,0:11:04.64,0:11:06.88,*Default,NTP,0000,0000,0000,,呃
Dialogue: 0,0:11:10.48,0:11:13.28,*Default,NTP,0000,0000,0000,,我做了什么
Dialogue: 0,0:11:13.60,0:11:15.12,*Default,NTP,0000,0000,0000,,我讨厌把事情弄得一团糟
Dialogue: 0,0:11:15.12,0:11:17.60,*Default,NTP,0000,0000,0000,,这个符号约翰
Dialogue: 0,0:11:17.60,0:11:19.92,*Default,NTP,0000,0000,0000,,好的
Dialogue: 0,0:11:21.84,0:11:23.36,*Default,NTP,0000,0000,0000,,我不应该把这件事从心里吐出来
Dialogue: 0,0:11:23.36,0:11:23.69,*Default,NTP,0000,0000,0000,,全部
Dialogue: 0,0:11:23.69,0:11:26.24,*Default,NTP,0000,0000,0000,,[笑声]
Dialogue: 0,0:11:26.24,0:11:28.40,*Default,NTP,0000,0000,0000,,好吧，我们得到一二三，然后我们得到
Dialogue: 0,0:11:28.40,0:11:31.36,*Default,NTP,0000,0000,0000,,一四让我们看看
Dialogue: 0,0:11:31.52,0:11:33.84,*Default,NTP,0000,0000,0000,,一
Dialogue: 0,0:11:41.04,0:11:43.12,*Default,NTP,0000,0000,0000,,这似乎是一个好方法
Dialogue: 0,0:11:43.12,0:11:45.76,*Default,NTP,0000,0000,0000,,是所有路径
Dialogue: 0,0:11:46.40,0:11:49.76,*Default,NTP,0000,0000,0000,,有一条路经过
Dialogue: 0,0:11:49.76,0:11:52.64,*Default,NTP,0000,0000,0000,,从 a 的根找到一条路径
Dialogue: 0,0:11:52.64,0:11:53.36,*Default,NTP,0000,0000,0000,,分支
Dialogue: 0,0:11:53.36,0:11:55.76,*Default,NTP,0000,0000,0000,,一直到一片叶子，然后放
Dialogue: 0,0:11:55.76,0:11:58.00,*Default,NTP,0000,0000,0000,,前面的当前标签
Dialogue: 0,0:11:58.00,0:12:00.16,*Default,NTP,0000,0000,0000,,这就像一种递归的思考方式
Dialogue: 0,0:12:00.16,0:12:02.00,*Default,NTP,0000,0000,0000,,关于一条路径，一条路径有
Dialogue: 0,0:12:02.00,0:12:03.04,*Default,NTP,0000,0000,0000,,第一件事
Dialogue: 0,0:12:03.04,0:12:04.48,*Default,NTP,0000,0000,0000,,然后剩下的
Dialogue: 0,0:12:04.48,0:12:06.72,*Default,NTP,0000,0000,0000,,路径中的元素和其余部分
Dialogue: 0,0:12:06.72,0:12:08.24,*Default,NTP,0000,0000,0000,,路径中的元素
Dialogue: 0,0:12:08.24,0:12:11.68,*Default,NTP,0000,0000,0000,,是较小树中的一条路径
Dialogue: 0,0:12:11.68,0:12:14.96,*Default,NTP,0000,0000,0000,,一棵从树枝开始的树
Dialogue: 0,0:12:14.96,0:12:16.16,*Default,NTP,0000,0000,0000,,方法来做到这一点
Dialogue: 0,0:12:16.16,0:12:25.20,*Default,NTP,0000,0000,0000,,就是说对于每个分支
Dialogue: 0,0:12:25.20,0:12:27.04,*Default,NTP,0000,0000,0000,,你想获得其中的所有路径
Dialogue: 0,0:12:27.04,0:12:29.44,*Default,NTP,0000,0000,0000,,分支
Dialogue: 0,0:12:29.84,0:12:32.24,*Default,NTP,0000,0000,0000,,就像这里有一个分支和一条路径
Dialogue: 0,0:12:32.24,0:12:33.44,*Default,NTP,0000,0000,0000,,该分支将是 2
Dialogue: 0,0:12:33.44,0:12:37.12,*Default,NTP,0000,0000,0000,,3 但我们想要 1 2 3。
Dialogue: 0,0:12:37.12,0:12:40.48,*Default,NTP,0000,0000,0000,,所以如果我们遍历所有路径
Dialogue: 0,0:12:40.48,0:12:44.08,*Default,NTP,0000,0000,0000,,在里面
Dialogue: 0,0:12:44.16,0:12:47.76,*Default,NTP,0000,0000,0000,,分支中的路径
Dialogue: 0,0:12:47.76,0:12:51.04,*Default,NTP,0000,0000,0000,,那么我们这里想要返回的不是
Dialogue: 0,0:12:51.04,0:12:54.40,*Default,NTP,0000,0000,0000,,只是 2 3 类似的路径
Dialogue: 0,0:12:54.40,0:12:57.84,*Default,NTP,0000,0000,0000,,路径可能是 2 3 我们想要返回 1
Dialogue: 0,0:12:57.84,0:12:58.72,*Default,NTP,0000,0000,0000,,3
Dialogue: 0,0:12:58.72,0:13:00.24,*Default,NTP,0000,0000,0000,,但可能有多个，所以
Dialogue: 0,0:13:00.24,0:13:01.52,*Default,NTP,0000,0000,0000,,我要把它写成一个生成器
Dialogue: 0,0:13:01.52,0:13:02.96,*Default,NTP,0000,0000,0000,,函数我们可以改变它
Dialogue: 0,0:13:02.96,0:13:06.24,*Default,NTP,0000,0000,0000,,稍后如果你想要的话，但是我们可以
Dialogue: 0,0:13:06.24,0:13:09.28,*Default,NTP,0000,0000,0000,,呃这里的产量是一二三
Dialogue: 0,0:13:09.28,0:13:11.20,*Default,NTP,0000,0000,0000,,必须有 t 标签
Dialogue: 0,0:13:11.20,0:13:13.12,*Default,NTP,0000,0000,0000,,首先然后
Dialogue: 0,0:13:13.12,0:13:16.48,*Default,NTP,0000,0000,0000,,呃剩下的所以这是屈服的
Dialogue: 0,0:13:16.48,0:13:20.16,*Default,NTP,0000,0000,0000,,一二三这就是我们想要的
Dialogue: 0,0:13:20.16,0:13:22.40,*Default,NTP,0000,0000,0000,,我不知道你是否听说过，但是约翰
Dialogue: 0,0:13:22.40,0:13:24.56,*Default,NTP,0000,0000,0000,,有这个漂亮的递归定义
Dialogue: 0,0:13:24.56,0:13:28.96,*Default,NTP,0000,0000,0000,,在那里他说什么是路径
Dialogue: 0,0:13:28.96,0:13:32.00,*Default,NTP,0000,0000,0000,,如果我们从那棵树开始，那就是一个
Dialogue: 0,0:13:32.00,0:13:33.28,*Default,NTP,0000,0000,0000,,他只是
Dialogue: 0,0:13:33.28,0:13:36.64,*Default,NTP,0000,0000,0000,,上面描述了路径
Dialogue: 0,0:13:36.64,0:13:37.52,*Default,NTP,0000,0000,0000,,下面的所有内容
Dialogue: 0,0:13:37.52,0:13:40.16,*Default,NTP,0000,0000,0000,,一切都好所以这就是我的意思
Dialogue: 0,0:13:40.16,0:13:41.28,*Default,NTP,0000,0000,0000,,那个那个
Dialogue: 0,0:13:41.28,0:13:42.88,*Default,NTP,0000,0000,0000,,声明是你写的
Dialogue: 0,0:13:42.88,0:13:45.44,*Default,NTP,0000,0000,0000,,为您提供功能
Dialogue: 0,0:13:45.44,0:13:46.72,*Default,NTP,0000,0000,0000,,所以现在我们必须思考什么
Dialogue: 0,0:13:46.72,0:13:49.04,*Default,NTP,0000,0000,0000,,当你击中一片叶子时就会发生
Dialogue: 0,0:13:49.04,0:13:50.96,*Default,NTP,0000,0000,0000,,这里的叶子中没有分支，所以
Dialogue: 0,0:13:50.96,0:13:52.32,*Default,NTP,0000,0000,0000,,这不会做任何事，但那不是
Dialogue: 0,0:13:52.32,0:13:53.04,*Default,NTP,0000,0000,0000,,完全正确
Dialogue: 0,0:13:53.04,0:13:55.04,*Default,NTP,0000,0000,0000,,当你到达一片叶子时，就有一条路
Dialogue: 0,0:13:55.04,0:13:57.28,*Default,NTP,0000,0000,0000,,这只是一条单长路径，所以
Dialogue: 0,0:13:57.28,0:14:01.68,*Default,NTP,0000,0000,0000,,如果呃 t 是一片叶子那么我想我们想要
Dialogue: 0,0:14:01.68,0:14:02.40,*Default,NTP,0000,0000,0000,,屈服
Dialogue: 0,0:14:02.40,0:14:06.08,*Default,NTP,0000,0000,0000,,长度为 1 的列表可以
Dialogue: 0,0:14:06.08,0:14:09.04,*Default,NTP,0000,0000,0000,,现在一些呃园丁已经
Dialogue: 0,0:14:09.04,0:14:10.64,*Default,NTP,0000,0000,0000,,出现对我来说会很难
Dialogue: 0,0:14:10.64,0:14:12.48,*Default,NTP,0000,0000,0000,,说话但是
Dialogue: 0,0:14:12.48,0:14:14.16,*Default,NTP,0000,0000,0000,,无论如何我都会尝试一下，好吧，看来是这样
Dialogue: 0,0:14:14.16,0:14:15.60,*Default,NTP,0000,0000,0000,,通过测试我认为这是一个好方法
Dialogue: 0,0:14:15.60,0:14:16.08,*Default,NTP,0000,0000,0000,,打印
Dialogue: 0,0:14:16.08,0:14:19.52,*Default,NTP,0000,0000,0000,,所有的路径，实际上这是
Dialogue: 0,0:14:19.52,0:14:21.28,*Default,NTP,0000,0000,0000,,与我们的结构完全相同
Dialogue: 0,0:14:21.28,0:14:22.80,*Default,NTP,0000,0000,0000,,在一个我们必须跳过的问题中
Dialogue: 0,0:14:22.80,0:14:24.64,*Default,NTP,0000,0000,0000,,上次的最后为什么会有
Dialogue: 0,0:14:24.64,0:14:26.64,*Default,NTP,0000,0000,0000,,有时有两个for循环
Dialogue: 0,0:14:26.64,0:14:28.40,*Default,NTP,0000,0000,0000,,有两个 for 循环的原因是
Dialogue: 0,0:14:28.40,0:14:30.48,*Default,NTP,0000,0000,0000,,在每个特定的分支中可能有
Dialogue: 0,0:14:30.48,0:14:31.12,*Default,NTP,0000,0000,0000,,多种的
Dialogue: 0,0:14:31.12,0:14:34.72,*Default,NTP,0000,0000,0000,,路径所以让我们扩展这个例子
Dialogue: 0,0:14:34.72,0:14:36.00,*Default,NTP,0000,0000,0000,,只是一点点
Dialogue: 0,0:14:36.00,0:14:38.16,*Default,NTP,0000,0000,0000,,现在应该发生的是我们应该
Dialogue: 0,0:14:38.16,0:14:40.64,*Default,NTP,0000,0000,0000,,得到一二三一二五
Dialogue: 0,0:14:40.64,0:14:44.72,*Default,NTP,0000,0000,0000,,和一四嗯
Dialogue: 0,0:14:44.72,0:14:47.84,*Default,NTP,0000,0000,0000,,当我们传入 t 时，是一二三
Dialogue: 0,0:14:47.84,0:14:50.64,*Default,NTP,0000,0000,0000,,我们去第一个分支
Dialogue: 0,0:14:50.64,0:14:52.72,*Default,NTP,0000,0000,0000,,这家伙
Dialogue: 0,0:14:52.72,0:14:54.96,*Default,NTP,0000,0000,0000,,这实际上有两条路径
Dialogue: 0,0:14:54.96,0:14:55.92,*Default,NTP,0000,0000,0000,,二三
Dialogue: 0,0:14:55.92,0:14:59.92,*Default,NTP,0000,0000,0000,,或二五 5. 对于分支机构
Dialogue: 0,0:14:59.92,0:15:02.64,*Default,NTP,0000,0000,0000,,看起来像这样不仅仅是
Dialogue: 0,0:15:02.64,0:15:04.24,*Default,NTP,0000,0000,0000,,通过该分支的一条路径
Dialogue: 0,0:15:04.24,0:15:07.20,*Default,NTP,0000,0000,0000,,有两个，这就是为什么我们有一个
Dialogue: 0,0:15:07.20,0:15:07.68,*Default,NTP,0000,0000,0000,,第二
Dialogue: 0,0:15:07.68,0:15:11.04,*Default,NTP,0000,0000,0000,,嵌套迭代是对于每个
Dialogue: 0,0:15:11.04,0:15:13.60,*Default,NTP,0000,0000,0000,,个别分支可能有两个
Dialogue: 0,0:15:13.60,0:15:14.72,*Default,NTP,0000,0000,0000,,不同的路径
Dialogue: 0,0:15:14.72,0:15:16.56,*Default,NTP,0000,0000,0000,,对于每一个我们想要的
Dialogue: 0,0:15:16.56,0:15:18.64,*Default,NTP,0000,0000,0000,,产生一条新路径
Dialogue: 0,0:15:18.64,0:15:20.96,*Default,NTP,0000,0000,0000,,这是一个关于 2015 年秋季的问题
Dialogue: 0,0:15:20.96,0:15:22.88,*Default,NTP,0000,0000,0000,,期中二题三a
Dialogue: 0,0:15:22.88,0:15:25.60,*Default,NTP,0000,0000,0000,,只是理解这个问题
Dialogue: 0,0:15:25.60,0:15:26.00,*Default,NTP,0000,0000,0000,,是一个好
Dialogue: 0,0:15:26.00,0:15:29.76,*Default,NTP,0000,0000,0000,,想要阅读那里的内容但是然后
Dialogue: 0,0:15:29.76,0:15:32.48,*Default,NTP,0000,0000,0000,,看看文档中的例子
Dialogue: 0,0:15:32.48,0:15:33.20,*Default,NTP,0000,0000,0000,,测试
Dialogue: 0,0:15:33.20,0:15:34.40,*Default,NTP,0000,0000,0000,,确保你真的
Dialogue: 0,0:15:34.40,0:15:36.40,*Default,NTP,0000,0000,0000,,了解它的作用并且
Dialogue: 0,0:15:36.40,0:15:39.20,*Default,NTP,0000,0000,0000,,如果它正在做你想做的事情
Dialogue: 0,0:15:39.20,0:15:40.48,*Default,NTP,0000,0000,0000,,别指望
Dialogue: 0,0:15:40.48,0:15:43.60,*Default,NTP,0000,0000,0000,,那么嗯那么
Dialogue: 0,0:15:43.60,0:15:45.60,*Default,NTP,0000,0000,0000,,你必须解决的措辞
Dialogue: 0,0:15:45.60,0:15:46.96,*Default,NTP,0000,0000,0000,,问题 尝试弄清楚发生了什么
Dialogue: 0,0:15:46.96,0:15:47.68,*Default,NTP,0000,0000,0000,,在
Dialogue: 0,0:15:47.68,0:15:50.08,*Default,NTP,0000,0000,0000,,呃你知道在考试中如果你真的
Dialogue: 0,0:15:50.08,0:15:51.92,*Default,NTP,0000,0000,0000,,无法理解问题的含义
Dialogue: 0,0:15:51.92,0:15:54.32,*Default,NTP,0000,0000,0000,,嗯，那么你知道，请随时询问
Dialogue: 0,0:15:54.32,0:15:54.96,*Default,NTP,0000,0000,0000,,问题
Dialogue: 0,0:15:54.96,0:15:56.80,*Default,NTP,0000,0000,0000,,因为努力是没有意义的
Dialogue: 0,0:15:56.80,0:15:58.40,*Default,NTP,0000,0000,0000,,如果你不明白，就解决问题
Dialogue: 0,0:15:58.40,0:16:00.32,*Default,NTP,0000,0000,0000,,它在问什么，好吧
Dialogue: 0,0:16:00.32,0:16:02.48,*Default,NTP,0000,0000,0000,,实现需要一棵树的完成
Dialogue: 0,0:16:02.48,0:16:04.16,*Default,NTP,0000,0000,0000,,实例t
Dialogue: 0,0:16:04.16,0:16:06.96,*Default,NTP,0000,0000,0000,,我会在周五提前告诉你
Dialogue: 0,0:16:06.96,0:16:08.08,*Default,NTP,0000,0000,0000,,我们来谈谈树
Dialogue: 0,0:16:08.08,0:16:10.08,*Default,NTP,0000,0000,0000,,大写 t 就是我们将
Dialogue: 0,0:16:10.08,0:16:11.76,*Default,NTP,0000,0000,0000,,建立一个树类，就像
Dialogue: 0,0:16:11.76,0:16:13.28,*Default,NTP,0000,0000,0000,,树数据抽象
Dialogue: 0,0:16:13.28,0:16:15.52,*Default,NTP,0000,0000,0000,,除了它是一个类，所以你可能会看到
Dialogue: 0,0:16:15.52,0:16:16.80,*Default,NTP,0000,0000,0000,,这里有一些符号
Dialogue: 0,0:16:16.80,0:16:18.48,*Default,NTP,0000,0000,0000,,有点不同，我认为这一切都是真的
Dialogue: 0,0:16:18.48,0:16:18.96,*Default,NTP,0000,0000,0000,,不同的
Dialogue: 0,0:16:18.96,0:16:21.52,*Default,NTP,0000,0000,0000,,是你写 t 点分支代替
Dialogue: 0,0:16:21.52,0:16:22.96,*Default,NTP,0000,0000,0000,,t 的分支
Dialogue: 0,0:16:22.96,0:16:25.92,*Default,NTP,0000,0000,0000,,嗯，和标签一样，所以也许我们
Dialogue: 0,0:16:25.92,0:16:27.04,*Default,NTP,0000,0000,0000,,可以暂时忽略它
Dialogue: 0,0:16:27.04,0:16:28.32,*Default,NTP,0000,0000,0000,,虽然但我只是想让人们
Dialogue: 0,0:16:28.32,0:16:28.88,*Default,NTP,0000,0000,0000,,知道
Dialogue: 0,0:16:28.88,0:16:30.96,*Default,NTP,0000,0000,0000,,这是我们将要讨论的内容，但是
Dialogue: 0,0:16:30.96,0:16:32.00,*Default,NTP,0000,0000,0000,,还没有覆盖好吧
Dialogue: 0,0:16:32.00,0:16:34.56,*Default,NTP,0000,0000,0000,,所以它需要一个树实例 t 和两个
Dialogue: 0,0:16:34.56,0:16:35.68,*Default,NTP,0000,0000,0000,,正整数 d
Dialogue: 0,0:16:35.68,0:16:39.28,*Default,NTP,0000,0000,0000,,和 k 并返回 t 是否为 dk
Dialogue: 0,0:16:39.28,0:16:42.32,*Default,NTP,0000,0000,0000,,完成这是一些术语
Dialogue: 0,0:16:42.32,0:16:43.36,*Default,NTP,0000,0000,0000,,对于这个问题
Dialogue: 0,0:16:43.36,0:16:46.56,*Default,NTP,0000,0000,0000,,如果每个节点都为 dk 完整树
Dialogue: 0,0:16:46.56,0:16:50.00,*Default,NTP,0000,0000,0000,,深度小于 d
Dialogue: 0,0:16:50.00,0:16:53.28,*Default,NTP,0000,0000,0000,,正好有 k 个分支并且
Dialogue: 0,0:16:53.28,0:16:58.32,*Default,NTP,0000,0000,0000,,深度 d 处的每个节点都是叶子
Dialogue: 0,0:16:58.32,0:17:00.24,*Default,NTP,0000,0000,0000,,节点的深度是节点的数量
Dialogue: 0,0:17:00.24,0:17:01.68,*Default,NTP,0000,0000,0000,,从根源开始的步骤
Dialogue: 0,0:17:01.68,0:17:04.64,*Default,NTP,0000,0000,0000,,根节点内置深度为零
Dialogue: 0,0:17:04.64,0:17:06.16,*Default,NTP,0000,0000,0000,,所有功能等等等等
Dialogue: 0,0:17:06.16,0:17:08.96,*Default,NTP,0000,0000,0000,,与事情无关
Dialogue: 0,0:17:08.96,0:17:09.92,*Default,NTP,0000,0000,0000,,想想这个
Dialogue: 0,0:17:09.92,0:17:12.40,*Default,NTP,0000,0000,0000,,就像这到底是什么意思
Dialogue: 0,0:17:12.40,0:17:13.20,*Default,NTP,0000,0000,0000,,还有嗯
Dialogue: 0,0:17:13.20,0:17:14.80,*Default,NTP,0000,0000,0000,,查看示例并思考
Dialogue: 0,0:17:14.80,0:17:16.88,*Default,NTP,0000,0000,0000,,例子对于理解非常重要
Dialogue: 0,0:17:16.88,0:17:18.08,*Default,NTP,0000,0000,0000,,知道这意味着什么
Dialogue: 0,0:17:18.08,0:17:21.68,*Default,NTP,0000,0000,0000,,让我们看看这个例子怎么说
Dialogue: 0,0:17:21.68,0:17:24.80,*Default,NTP,0000,0000,0000,,一棵树有
Dialogue: 0,0:17:24.80,0:17:30.48,*Default,NTP,0000,0000,0000,,深度为 0 的节点，但没有其他节点
Dialogue: 0,0:17:30.48,0:17:34.56,*Default,NTP,0000,0000,0000,,显然 dk 已完成
Dialogue: 0,0:17:34.56,0:17:37.20,*Default,NTP,0000,0000,0000,,d 等于 0，因为深度是
Dialogue: 0,0:17:37.20,0:17:39.12,*Default,NTP,0000,0000,0000,,零
Dialogue: 0,0:17:39.12,0:17:42.96,*Default,NTP,0000,0000,0000,,k 等于 5
Dialogue: 0,0:17:42.96,0:17:45.20,*Default,NTP,0000,0000,0000,,看起来这五个人很友善
Dialogue: 0,0:17:45.20,0:17:47.04,*Default,NTP,0000,0000,0000,,不相关的
Dialogue: 0,0:17:47.04,0:17:50.32,*Default,NTP,0000,0000,0000,,这是怎么回事
Dialogue: 0,0:17:50.32,0:17:52.48,*Default,NTP,0000,0000,0000,,每个深度小于 d 的节点都有
Dialogue: 0,0:17:52.48,0:17:54.56,*Default,NTP,0000,0000,0000,,正好有五个分支，但没有
Dialogue: 0,0:17:54.56,0:17:55.20,*Default,NTP,0000,0000,0000,,节点
Dialogue: 0,0:17:55.20,0:17:57.60,*Default,NTP,0000,0000,0000,,小于零深度零是
Dialogue: 0,0:17:57.60,0:17:58.88,*Default,NTP,0000,0000,0000,,最小深度
Dialogue: 0,0:17:58.88,0:18:01.04,*Default,NTP,0000,0000,0000,,所以这里重要的是它是
Dialogue: 0,0:18:01.04,0:18:02.00,*Default,NTP,0000,0000,0000,,情况是
Dialogue: 0,0:18:02.00,0:18:04.72,*Default,NTP,0000,0000,0000,,深度 d 为零的每个节点都是 a
Dialogue: 0,0:18:04.72,0:18:05.12,*Default,NTP,0000,0000,0000,,叶子
Dialogue: 0,0:18:05.12,0:18:07.60,*Default,NTP,0000,0000,0000,,这是真的所以这只有一个
Dialogue: 0,0:18:07.60,0:18:09.92,*Default,NTP,0000,0000,0000,,节点的深度为零并且是叶子
Dialogue: 0,0:18:09.92,0:18:12.84,*Default,NTP,0000,0000,0000,,因此这恰好满足
Dialogue: 0,0:18:12.84,0:18:14.00,*Default,NTP,0000,0000,0000,,定义
Dialogue: 0,0:18:14.00,0:18:16.32,*Default,NTP,0000,0000,0000,,有点偶然，它没有任何
Dialogue: 0,0:18:16.32,0:18:18.08,*Default,NTP,0000,0000,0000,,小于零的节点
Dialogue: 0,0:18:18.08,0:18:20.32,*Default,NTP,0000,0000,0000,,所以这五个变得无关紧要但是
Dialogue: 0,0:18:20.32,0:18:21.76,*Default,NTP,0000,0000,0000,,这就是为什么这结果是
Dialogue: 0,0:18:21.76,0:18:26.40,*Default,NTP,0000,0000,0000,,是的，好的，嗯
Dialogue: 0,0:18:26.40,0:18:28.48,*Default,NTP,0000,0000,0000,,让我们看一棵更有趣的树
Dialogue: 0,0:18:28.48,0:18:29.44,*Default,NTP,0000,0000,0000,,这是一棵树
Dialogue: 0,0:18:29.44,0:18:32.24,*Default,NTP,0000,0000,0000,,那有三个分支，每个分支
Dialogue: 0,0:18:32.24,0:18:34.72,*Default,NTP,0000,0000,0000,,是一片叶子
Dialogue: 0,0:18:34.72,0:18:38.48,*Default,NTP,0000,0000,0000,,是不是这棵树
Dialogue: 0,0:18:38.48,0:18:41.52,*Default,NTP,0000,0000,0000,,一三完整
Dialogue: 0,0:18:41.52,0:18:45.44,*Default,NTP,0000,0000,0000,,是的，因为对于所有
Dialogue: 0,0:18:45.44,0:18:48.00,*Default,NTP,0000,0000,0000,,深度小于 1 的节点，即
Dialogue: 0,0:18:48.00,0:18:49.28,*Default,NTP,0000,0000,0000,,0
Dialogue: 0,0:18:49.28,0:18:52.72,*Default,NTP,0000,0000,0000,,它有 3 个分支，而 u 本身就是根
Dialogue: 0,0:18:52.72,0:18:56.00,*Default,NTP,0000,0000,0000,,是唯一深度为零的节点
Dialogue: 0,0:18:56.00,0:18:58.24,*Default,NTP,0000,0000,0000,,它实际上有三个分支
Dialogue: 0,0:18:58.24,0:18:59.36,*Default,NTP,0000,0000,0000,,和
Dialogue: 0,0:18:59.36,0:19:01.92,*Default,NTP,0000,0000,0000,,那么深度一的所有节点都是
Dialogue: 0,0:19:01.92,0:19:02.48,*Default,NTP,0000,0000,0000,,树叶
Dialogue: 0,0:19:02.48,0:19:06.88,*Default,NTP,0000,0000,0000,,那是真正的树树树嗯
Dialogue: 0,0:19:06.88,0:19:10.16,*Default,NTP,0000,0000,0000,,难道这就是深度一
Dialogue: 0,0:19:10.16,0:19:12.16,*Default,NTP,0000,0000,0000,,两个完全否，因为根有
Dialogue: 0,0:19:12.16,0:19:14.16,*Default,NTP,0000,0000,0000,,三个分支而不是两个
Dialogue: 0,0:19:14.16,0:19:16.80,*Default,NTP,0000,0000,0000,,深度二三是否完整 否
Dialogue: 0,0:19:16.80,0:19:17.44,*Default,NTP,0000,0000,0000,,因为
Dialogue: 0,0:19:17.44,0:19:19.60,*Default,NTP,0000,0000,0000,,深度一处较小的节点
Dialogue: 0,0:19:19.60,0:19:21.44,*Default,NTP,0000,0000,0000,,比两个这样的
Dialogue: 0,0:19:21.44,0:19:23.68,*Default,NTP,0000,0000,0000,,没有三个分支，它只是叶子
Dialogue: 0,0:19:23.68,0:19:24.88,*Default,NTP,0000,0000,0000,,它没有三个分支
Dialogue: 0,0:19:24.88,0:19:26.72,*Default,NTP,0000,0000,0000,,零分支所以这就是为什么
Dialogue: 0,0:19:26.72,0:19:30.80,*Default,NTP,0000,0000,0000,,假的，这是假的，
Dialogue: 0,0:19:30.80,0:19:33.20,*Default,NTP,0000,0000,0000,,这棵树怎么样，这是一棵
Dialogue: 0,0:19:33.20,0:19:34.80,*Default,NTP,0000,0000,0000,,有趣的树
Dialogue: 0,0:19:34.80,0:19:38.72,*Default,NTP,0000,0000,0000,,这是一棵树，一个人在根
Dialogue: 0,0:19:38.72,0:19:41.04,*Default,NTP,0000,0000,0000,,然后它有三个分支
Dialogue: 0,0:19:41.04,0:19:41.84,*Default,NTP,0000,0000,0000,,每一个造型
Dialogue: 0,0:19:41.84,0:19:45.04,*Default,NTP,0000,0000,0000,,就像你一样，如果我们把这个写出来
Dialogue: 0,0:19:45.04,0:19:47.20,*Default,NTP,0000,0000,0000,,写起来会很长
Dialogue: 0,0:19:47.20,0:19:49.36,*Default,NTP,0000,0000,0000,,它将是一棵树，顶部有一棵树
Dialogue: 0,0:19:49.36,0:19:50.88,*Default,NTP,0000,0000,0000,,然后中间的一个
Dialogue: 0,0:19:50.88,0:19:53.60,*Default,NTP,0000,0000,0000,,三次，然后每一次
Dialogue: 0,0:19:53.60,0:19:55.44,*Default,NTP,0000,0000,0000,,中间节点将有三个叶子
Dialogue: 0,0:19:55.44,0:19:57.04,*Default,NTP,0000,0000,0000,,在它下面都是所有的所以在那里
Dialogue: 0,0:19:57.04,0:19:59.12,*Default,NTP,0000,0000,0000,,将是九片不同的叶子
Dialogue: 0,0:19:59.12,0:20:02.80,*Default,NTP,0000,0000,0000,,这是一棵二三完全树
Dialogue: 0,0:20:02.80,0:20:04.88,*Default,NTP,0000,0000,0000,,这意味着所有的叶子都在
Dialogue: 0,0:20:04.88,0:20:07.68,*Default,NTP,0000,0000,0000,,深度二
Dialogue: 0,0:20:07.68,0:20:10.72,*Default,NTP,0000,0000,0000,,和之间的一切都有
Dialogue: 0,0:20:10.72,0:20:13.92,*Default,NTP,0000,0000,0000,,三个分支你会如何处理
Dialogue: 0,0:20:13.92,0:20:15.84,*Default,NTP,0000,0000,0000,,这种问题
Dialogue: 0,0:20:15.84,0:20:19.36,*Default,NTP,0000,0000,0000,,嗯
Dialogue: 0,0:20:19.36,0:20:20.88,*Default,NTP,0000,0000,0000,,这里的基本情况是你已经达到了
Dialogue: 0,0:20:20.88,0:20:22.48,*Default,NTP,0000,0000,0000,,叶子
Dialogue: 0,0:20:22.48,0:20:24.96,*Default,NTP,0000,0000,0000,,叶子是否真的dk完整
Dialogue: 0,0:20:24.96,0:20:26.72,*Default,NTP,0000,0000,0000,,取决于什么
Dialogue: 0,0:20:26.72,0:20:30.08,*Default,NTP,0000,0000,0000,,所以叶子还可以吗
Dialogue: 0,0:20:30.08,0:20:33.12,*Default,NTP,0000,0000,0000,,如果 d 为零，我们可以看到
Dialogue: 0,0:20:33.12,0:20:36.08,*Default,NTP,0000,0000,0000,,这是第一个例子，但他们不好
Dialogue: 0,0:20:36.08,0:20:36.80,*Default,NTP,0000,0000,0000,,否则
Dialogue: 0,0:20:36.80,0:20:38.80,*Default,NTP,0000,0000,0000,,我们在这个例子中看到，如果有一个
Dialogue: 0,0:20:38.80,0:20:40.32,*Default,NTP,0000,0000,0000,,深度一的叶子
Dialogue: 0,0:20:40.32,0:20:42.88,*Default,NTP,0000,0000,0000,,这应该是深度二
Dialogue: 0,0:20:42.88,0:20:44.00,*Default,NTP,0000,0000,0000,,所有的叶子
Dialogue: 0,0:20:44.00,0:20:46.32,*Default,NTP,0000,0000,0000,,那么你遇到了问题所以你
Dialogue: 0,0:20:46.32,0:20:48.00,*Default,NTP,0000,0000,0000,,不能在这里返回 true 你
Dialogue: 0,0:20:48.00,0:20:51.20,*Default,NTP,0000,0000,0000,,必须返回是否呃
Dialogue: 0,0:20:51.20,0:20:54.08,*Default,NTP,0000,0000,0000,,t 等于零，这意味着
Dialogue: 0,0:20:54.08,0:20:56.56,*Default,NTP,0000,0000,0000,,跳跃是可以的
Dialogue: 0,0:20:56.56,0:20:58.80,*Default,NTP,0000,0000,0000,,这实际上是一件很糟糕的事情
Dialogue: 0,0:20:58.80,0:21:00.80,*Default,NTP,0000,0000,0000,,因为它说两个正整数 d
Dialogue: 0,0:21:00.80,0:21:02.48,*Default,NTP,0000,0000,0000,,和 k 但在这里我们看到一个
Dialogue: 0,0:21:02.48,0:21:05.92,*Default,NTP,0000,0000,0000,,非积极的 d 所以呃我认为无论是谁
Dialogue: 0,0:21:05.92,0:21:07.12,*Default,NTP,0000,0000,0000,,这个写错了
Dialogue: 0,0:21:07.12,0:21:09.60,*Default,NTP,0000,0000,0000,,也许是我，这是一个非负 d
Dialogue: 0,0:21:09.60,0:21:10.56,*Default,NTP,0000,0000,0000,,和正 k
Dialogue: 0,0:21:10.56,0:21:13.04,*Default,NTP,0000,0000,0000,,是的，我认为说明是
Dialogue: 0,0:21:13.04,0:21:14.24,*Default,NTP,0000,0000,0000,,不太正确
Dialogue: 0,0:21:14.24,0:21:16.80,*Default,NTP,0000,0000,0000,,我们正在重写问题
Dialogue: 0,0:21:16.80,0:21:17.76,*Default,NTP,0000,0000,0000,,他们中有一些
Dialogue: 0,0:21:17.76,0:21:19.44,*Default,NTP,0000,0000,0000,,请随意在考试时这样做
Dialogue: 0,0:21:19.44,0:21:20.96,*Default,NTP,0000,0000,0000,,如果您不喜欢，请重写问题
Dialogue: 0,0:21:20.96,0:21:23.12,*Default,NTP,0000,0000,0000,,他们
Dialogue: 0,0:21:24.00,0:21:27.36,*Default,NTP,0000,0000,0000,,我开玩笑的，别那么做
Dialogue: 0,0:21:27.92,0:21:31.84,*Default,NTP,0000,0000,0000,,对那个约翰感到抱歉
Dialogue: 0,0:21:32.64,0:21:34.48,*Default,NTP,0000,0000,0000,,好的，我认为这是一个更好的描述
Dialogue: 0,0:21:34.48,0:21:36.64,*Default,NTP,0000,0000,0000,,问题的原因是显然 d
Dialogue: 0,0:21:36.64,0:21:38.80,*Default,NTP,0000,0000,0000,,似乎不是这样的东西
Dialogue: 0,0:21:38.80,0:21:40.80,*Default,NTP,0000,0000,0000,,必然是积极的
Dialogue: 0,0:21:40.80,0:21:43.84,*Default,NTP,0000,0000,0000,,嗯，这就是说
Dialogue: 0,0:21:43.84,0:21:45.28,*Default,NTP,0000,0000,0000,,如果我们已经达到了
Dialogue: 0,0:21:45.28,0:21:47.36,*Default,NTP,0000,0000,0000,,深度在哪里
Dialogue: 0,0:21:47.36,0:21:49.28,*Default,NTP,0000,0000,0000,,允许有叶子，我们击中了一片叶子
Dialogue: 0,0:21:49.28,0:21:50.56,*Default,NTP,0000,0000,0000,,那么我们应该返回true
Dialogue: 0,0:21:50.56,0:21:54.48,*Default,NTP,0000,0000,0000,,否则我们应该返回 false 嗯
Dialogue: 0,0:21:54.48,0:21:56.32,*Default,NTP,0000,0000,0000,,这里有一个关于该怎么做的线索
Dialogue: 0,0:21:56.32,0:21:57.60,*Default,NTP,0000,0000,0000,,用这条线
Dialogue: 0,0:21:57.60,0:22:00.96,*Default,NTP,0000,0000,0000,,b 就是结果所说的
Dialogue: 0,0:22:00.96,0:22:04.40,*Default,NTP,0000,0000,0000,,all b 和 all 是一个内置函数
Dialogue: 0,0:22:04.40,0:22:06.56,*Default,NTP,0000,0000,0000,,仅当所有
Dialogue: 0,0:22:06.56,0:22:07.84,*Default,NTP,0000,0000,0000,,b 的元素
Dialogue: 0,0:22:07.84,0:22:11.36,*Default,NTP,0000,0000,0000,,是真的所以这需要是
Dialogue: 0,0:22:11.36,0:22:14.40,*Default,NTP,0000,0000,0000,,正确与错误的列表
Dialogue: 0,0:22:14.40,0:22:16.40,*Default,NTP,0000,0000,0000,,正确的，什么给你真实的和
Dialogue: 0,0:22:16.40,0:22:18.80,*Default,NTP,0000,0000,0000,,falses 是递归调用
Dialogue: 0,0:22:18.80,0:22:22.32,*Default,NTP,0000,0000,0000,,完成所以我们需要打电话
Dialogue: 0,0:22:22.32,0:22:27.28,*Default,NTP,0000,0000,0000,,完成某事
Dialogue: 0,0:22:27.28,0:22:30.40,*Default,NTP,0000,0000,0000,,嗯，像往常一样，我认为是
Dialogue: 0,0:22:30.40,0:22:32.32,*Default,NTP,0000,0000,0000,,自然地对每个 b 执行此操作
Dialogue: 0,0:22:32.32,0:22:36.16,*Default,NTP,0000,0000,0000,,在 t 点分支 t 点分支只是
Dialogue: 0,0:22:36.16,0:22:37.68,*Default,NTP,0000,0000,0000,,面向对象的说法
Dialogue: 0,0:22:37.68,0:22:40.32,*Default,NTP,0000,0000,0000,,分支 t
Dialogue: 0,0:22:44.00,0:22:45.68,*Default,NTP,0000,0000,0000,,我们将进行什么递归调用
Dialogue: 0,0:22:45.68,0:22:47.20,*Default,NTP,0000,0000,0000,,好吧，这是
Dialogue: 0,0:22:47.20,0:22:50.24,*Default,NTP,0000,0000,0000,,dk完成它必须是这样
Dialogue: 0,0:22:50.24,0:22:55.52,*Default,NTP,0000,0000,0000,,对于所有分支
Dialogue: 0,0:22:55.52,0:22:59.12,*Default,NTP,0000,0000,0000,,d 负 1 k 完整
Dialogue: 0,0:22:59.12,0:23:01.36,*Default,NTP,0000,0000,0000,,嗯，现在我们得到了真实的列表
Dialogue: 0,0:23:01.36,0:23:03.20,*Default,NTP,0000,0000,0000,,错误的值都在需要的地方
Dialogue: 0,0:23:03.20,0:23:05.12,*Default,NTP,0000,0000,0000,,true 为了得到真实的结果但是
Dialogue: 0,0:23:05.12,0:23:06.64,*Default,NTP,0000,0000,0000,,必须有其他事情为真才能
Dialogue: 0,0:23:06.64,0:23:09.04,*Default,NTP,0000,0000,0000,,得到一个真实的结果
Dialogue: 0,0:23:09.04,0:23:11.76,*Default,NTP,0000,0000,0000,,情况必须是
Dialogue: 0,0:23:11.76,0:23:14.08,*Default,NTP,0000,0000,0000,,分支机构数量
Dialogue: 0,0:23:14.08,0:23:17.44,*Default,NTP,0000,0000,0000,,t 处的 等于这个数
Dialogue: 0,0:23:17.44,0:23:19.36,*Default,NTP,0000,0000,0000,,k 是分支因子
Dialogue: 0,0:23:19.36,0:23:21.12,*Default,NTP,0000,0000,0000,,应该发生
Dialogue: 0,0:23:21.12,0:23:23.36,*Default,NTP,0000,0000,0000,,所以这就像一个非常严格的结构
Dialogue: 0,0:23:23.36,0:23:25.20,*Default,NTP,0000,0000,0000,,对树的外观的描述是
Dialogue: 0,0:23:25.20,0:23:26.56,*Default,NTP,0000,0000,0000,,它有相同数量的
Dialogue: 0,0:23:26.56,0:23:27.92,*Default,NTP,0000,0000,0000,,树枝直到你碰到树叶
Dialogue: 0,0:23:27.92,0:23:29.68,*Default,NTP,0000,0000,0000,,所有的叶子都在相同的深度
Dialogue: 0,0:23:29.68,0:23:32.00,*Default,NTP,0000,0000,0000,,这是你检查它的方法
Dialogue: 0,0:23:32.00,0:23:32.96,*Default,NTP,0000,0000,0000,,问题是
Dialogue: 0,0:23:32.96,0:23:36.48,*Default,NTP,0000,0000,0000,,为什么会这样
Dialogue: 0,0:23:36.48,0:23:40.64,*Default,NTP,0000,0000,0000,,你可以有不同的行为
Dialogue: 0,0:23:40.64,0:23:43.68,*Default,NTP,0000,0000,0000,,打字奥斯基
Dialogue: 0,0:23:43.68,0:23:47.04,*Default,NTP,0000,0000,0000,,包装比你可以的
Dialogue: 0,0:23:47.04,0:23:50.48,*Default,NTP,0000,0000,0000,,在 Oski 和一般情况下称呼说唱歌手
Dialogue: 0,0:23:50.48,0:23:52.80,*Default,NTP,0000,0000,0000,,这似乎并不重要，但我想
Dialogue: 0,0:23:52.80,0:23:54.72,*Default,NTP,0000,0000,0000,,如果我用 python 解释一些东西
Dialogue: 0,0:23:54.72,0:23:56.24,*Default,NTP,0000,0000,0000,,不妨正确解释一下
Dialogue: 0,0:23:56.24,0:23:57.84,*Default,NTP,0000,0000,0000,,有一个奇怪的案例
Dialogue: 0,0:23:57.84,0:24:01.60,*Default,NTP,0000,0000,0000,,其中这可能是真的，但前提是
Dialogue: 0,0:24:01.60,0:24:03.60,*Default,NTP,0000,0000,0000,,你使用对象系统的方式是
Dialogue: 0,0:24:03.60,0:24:04.08,*Default,NTP,0000,0000,0000,,不是
Dialogue: 0,0:24:04.08,0:24:06.64,*Default,NTP,0000,0000,0000,,真正设计的是你放了一个
Dialogue: 0,0:24:06.64,0:24:07.52,*Default,NTP,0000,0000,0000,,功能作为
Dialogue: 0,0:24:07.52,0:24:09.44,*Default,NTP,0000,0000,0000,,实例属性那么这些可以是
Dialogue: 0,0:24:09.44,0:24:11.44,*Default,NTP,0000,0000,0000,,不同的
Dialogue: 0,0:24:11.44,0:24:15.12,*Default,NTP,0000,0000,0000,,所以如果你有一类熊
Dialogue: 0,0:24:15.12,0:24:17.60,*Default,NTP,0000,0000,0000,,里面什么也没有，而你却做了
Dialogue: 0,0:24:17.60,0:24:18.16,*Default,NTP,0000,0000,0000,,你自己
Dialogue: 0,0:24:18.16,0:24:22.40,*Default,NTP,0000,0000,0000,,一只熊，然后你做什么
Dialogue: 0,0:24:22.40,0:24:25.44,*Default,NTP,0000,0000,0000,,你是否构建了一个函数
Dialogue: 0,0:24:25.44,0:24:27.84,*Default,NTP,0000,0000,0000,,某物
Dialogue: 0,0:24:28.00,0:24:31.04,*Default,NTP,0000,0000,0000,,喜欢退货
Dialogue: 0,0:24:31.44,0:24:35.04,*Default,NTP,0000,0000,0000,,去熊和你
Dialogue: 0,0:24:35.04,0:24:38.08,*Default,NTP,0000,0000,0000,,将其设置为实例
Dialogue: 0,0:24:38.08,0:24:41.60,*Default,NTP,0000,0000,0000,,ascii 实例的属性
Dialogue: 0,0:24:41.60,0:24:43.92,*Default,NTP,0000,0000,0000,,不是课程的一部分，而是课程的一部分
Dialogue: 0,0:24:43.92,0:24:46.24,*Default,NTP,0000,0000,0000,,奥斯基本人
Dialogue: 0,0:24:46.24,0:24:49.60,*Default,NTP,0000,0000,0000,,然后你会得到这种奇怪的行为
Dialogue: 0,0:24:49.60,0:24:52.40,*Default,NTP,0000,0000,0000,,他们在哪里打印这个但你会
Dialogue: 0,0:24:52.40,0:24:53.36,*Default,NTP,0000,0000,0000,,永远不要这样做
Dialogue: 0,0:24:53.36,0:24:55.52,*Default,NTP,0000,0000,0000,,就像你知道这有些奇怪
Dialogue: 0,0:24:55.52,0:24:57.68,*Default,NTP,0000,0000,0000,,关于Python的深奥事实
Dialogue: 0,0:24:57.68,0:25:01.04,*Default,NTP,0000,0000,0000,,你知道那很好，如果你
Dialogue: 0,0:25:01.04,0:25:04.72,*Default,NTP,0000,0000,0000,,呃永远不会用这个，但确实如此
Dialogue: 0,0:25:04.72,0:25:06.72,*Default,NTP,0000,0000,0000,,表现出行为是什么
Dialogue: 0,0:25:06.72,0:25:08.48,*Default,NTP,0000,0000,0000,,reper 所做的是它看起来在类中吗
Dialogue: 0,0:25:08.48,0:25:09.12,*Default,NTP,0000,0000,0000,,看起来不像
Dialogue: 0,0:25:09.12,0:25:11.28,*Default,NTP,0000,0000,0000,,很奇怪的例子
Dialogue: 0,0:25:11.28,0:25:13.04,*Default,NTP,0000,0000,0000,,python 中的几乎所有其他内容都会
Dialogue: 0,0:25:13.04,0:25:14.00,*Default,NTP,0000,0000,0000,,首先查看实例
Dialogue: 0,0:25:14.00,0:25:16.48,*Default,NTP,0000,0000,0000,,然后是课程，但这个没有
Dialogue: 0,0:25:16.48,0:25:17.92,*Default,NTP,0000,0000,0000,,否则 python 可能有一件事
Dialogue: 0,0:25:17.92,0:25:19.60,*Default,NTP,0000,0000,0000,,这样做是为了避免这种奇怪的情况，它说你
Dialogue: 0,0:25:19.60,0:25:21.20,*Default,NTP,0000,0000,0000,,不能用 double 定义函数
Dialogue: 0,0:25:21.20,0:25:23.68,*Default,NTP,0000,0000,0000,,名称前后有下划线
Dialogue: 0,0:25:23.68,0:25:25.20,*Default,NTP,0000,0000,0000,,没错，这就是基本上发生的事情
Dialogue: 0,0:25:25.20,0:25:26.72,*Default,NTP,0000,0000,0000,,你正在做一些看起来
Dialogue: 0,0:25:26.72,0:25:28.72,*Default,NTP,0000,0000,0000,,就像它是一个使用它的成员函数
Dialogue: 0,0:25:28.72,0:25:30.16,*Default,NTP,0000,0000,0000,,默认命名法，但没有
Dialogue: 0,0:25:30.16,0:25:33.04,*Default,NTP,0000,0000,0000,,保护那个
Dialogue: 0,0:25:33.04,0:25:34.64,*Default,NTP,0000,0000,0000,,所以有时当你做一些事情时
Dialogue: 0,0:25:34.64,0:25:36.48,*Default,NTP,0000,0000,0000,,像Python一样灵活
Dialogue: 0,0:25:36.48,0:25:38.56,*Default,NTP,0000,0000,0000,,呃然后教练找到了奇怪的方法
Dialogue: 0,0:25:38.56,0:25:40.08,*Default,NTP,0000,0000,0000,,滥用它，我想这就是我所拥有的
Dialogue: 0,0:25:40.08,0:25:42.96,*Default,NTP,0000,0000,0000,,在这里完成但是呃是的所以所以无论如何
Dialogue: 0,0:25:42.96,0:25:44.48,*Default,NTP,0000,0000,0000,,你应该学习的是如何
Dialogue: 0,0:25:44.48,0:25:46.48,*Default,NTP,0000,0000,0000,,包装方法就像你定义的那样
Dialogue: 0,0:25:46.48,0:25:48.24,*Default,NTP,0000,0000,0000,,类中的包装方法
Dialogue: 0,0:25:48.24,0:25:49.76,*Default,NTP,0000,0000,0000,,呃，恰好你不能放
Dialogue: 0,0:25:49.76,0:25:53.44,*Default,NTP,0000,0000,0000,,它们在实例上，否则它们将无法工作
Dialogue: 0,0:25:53.84,0:25:56.96,*Default,NTP,0000,0000,0000,,好问题所以我们为什么没看到呃
Dialogue: 0,0:25:56.96,0:26:00.16,*Default,NTP,0000,0000,0000,,搅拌功能而不是包装纸
Dialogue: 0,0:26:00.16,0:26:01.84,*Default,NTP,0000,0000,0000,,功能
Dialogue: 0,0:26:01.84,0:26:06.16,*Default,NTP,0000,0000,0000,,嗯默认搅拌
Dialogue: 0,0:26:06.16,0:26:10.16,*Default,NTP,0000,0000,0000,,就是做reper会做的事
Dialogue: 0,0:26:10.16,0:26:12.40,*Default,NTP,0000,0000,0000,,这只是关于 python 的一个事实是
Dialogue: 0,0:26:12.40,0:26:14.72,*Default,NTP,0000,0000,0000,,就像没有搅拌方法一样
Dialogue: 0,0:26:14.72,0:26:17.44,*Default,NTP,0000,0000,0000,,然后打印一些我们称之为
Dialogue: 0,0:26:17.44,0:26:18.96,*Default,NTP,0000,0000,0000,,搅拌器但默认搅拌
Dialogue: 0,0:26:18.96,0:26:20.32,*Default,NTP,0000,0000,0000,,只是打电话给销售代表并弄清楚
Dialogue: 0,0:26:20.32,0:26:22.24,*Default,NTP,0000,0000,0000,,那会做什么等等
Dialogue: 0,0:26:22.24,0:26:23.92,*Default,NTP,0000,0000,0000,,对于没有单独的课程
Dialogue: 0,0:26:23.92,0:26:25.44,*Default,NTP,0000,0000,0000,,搅拌裹包法
Dialogue: 0,0:26:25.44,0:26:27.60,*Default,NTP,0000,0000,0000,,他们做同样的事情，因为搅拌只是
Dialogue: 0,0:26:27.60,0:26:29.12,*Default,NTP,0000,0000,0000,,说唱歌手做什么
Dialogue: 0,0:26:29.12,0:26:30.56,*Default,NTP,0000,0000,0000,,所以如果你想同时拥有它们
Dialogue: 0,0:26:30.56,0:26:32.32,*Default,NTP,0000,0000,0000,,你可以定义一个包装方法
Dialogue: 0,0:26:32.32,0:26:34.40,*Default,NTP,0000,0000,0000,,然后你就隐含地
Dialogue: 0,0:26:34.40,0:26:36.08,*Default,NTP,0000,0000,0000,,定义了搅拌方法，因为
Dialogue: 0,0:26:36.08,0:26:39.44,*Default,NTP,0000,0000,0000,,搅拌只是做任何唱片所做的事情
Dialogue: 0,0:26:39.44,0:26:42.80,*Default,NTP,0000,0000,0000,,所以出于这个原因，如果你创建
Dialogue: 0,0:26:42.80,0:26:44.40,*Default,NTP,0000,0000,0000,,没有任何搅动或的东西
Dialogue: 0,0:26:44.40,0:26:46.64,*Default,NTP,0000,0000,0000,,任何地方的包装纸
Dialogue: 0,0:26:46.64,0:26:49.84,*Default,NTP,0000,0000,0000,,我们摆脱所有这些东西
Dialogue: 0,0:26:49.92,0:26:53.68,*Default,NTP,0000,0000,0000,,我们只需打印
Dialogue: 0,0:26:53.68,0:26:55.76,*Default,NTP,0000,0000,0000,,oski 的包装我们会得到相同的
Dialogue: 0,0:26:55.76,0:26:57.36,*Default,NTP,0000,0000,0000,,就像我们打印一样
Dialogue: 0,0:26:57.36,0:27:00.48,*Default,NTP,0000,0000,0000,,奥斯基 这是呃
Dialogue: 0,0:27:00.48,0:27:03.36,*Default,NTP,0000,0000,0000,,默认情况下，搅拌和包装纸
Dialogue: 0,0:27:03.36,0:27:05.28,*Default,NTP,0000,0000,0000,,字符串是相同的
Dialogue: 0,0:27:05.28,0:27:06.56,*Default,NTP,0000,0000,0000,,只有你让它们与众不同
Dialogue: 0,0:27:06.56,0:27:08.80,*Default,NTP,0000,0000,0000,,他们会有所不同
Dialogue: 0,0:27:08.80,0:27:11.76,*Default,NTP,0000,0000,0000,,呃，所以问题是关于顺序的
Dialogue: 0,0:27:11.76,0:27:12.64,*Default,NTP,0000,0000,0000,,广告
Dialogue: 0,0:27:12.64,0:27:14.88,*Default,NTP,0000,0000,0000,,还有我们的广告有什么特别的方法和内容
Dialogue: 0,0:27:14.88,0:27:16.16,*Default,NTP,0000,0000,0000,,他们是这样
Dialogue: 0,0:27:16.16,0:27:18.40,*Default,NTP,0000,0000,0000,,嗯，这就像一个非常特别的
Dialogue: 0,0:27:18.40,0:27:19.28,*Default,NTP,0000,0000,0000,,事物
Dialogue: 0,0:27:19.28,0:27:21.84,*Default,NTP,0000,0000,0000,,但如果你想建立一种新的
Dialogue: 0,0:27:21.84,0:27:22.96,*Default,NTP,0000,0000,0000,,数字
Dialogue: 0,0:27:22.96,0:27:26.00,*Default,NTP,0000,0000,0000,,那么你必须处理很多情况
Dialogue: 0,0:27:26.00,0:27:27.52,*Default,NTP,0000,0000,0000,,特别是你必须处理
Dialogue: 0,0:27:27.52,0:27:29.84,*Default,NTP,0000,0000,0000,,这种新的数字的情况
Dialogue: 0,0:27:29.84,0:27:32.64,*Default,NTP,0000,0000,0000,,显示在左侧，这个新的
Dialogue: 0,0:27:32.64,0:27:33.44,*Default,NTP,0000,0000,0000,,号码的种类
Dialogue: 0,0:27:33.44,0:27:35.60,*Default,NTP,0000,0000,0000,,显示在右侧，因为它可能
Dialogue: 0,0:27:35.60,0:27:37.04,*Default,NTP,0000,0000,0000,,情况有所不同
Dialogue: 0,0:27:37.04,0:27:37.76,*Default,NTP,0000,0000,0000,,发生
Dialogue: 0,0:27:37.76,0:27:40.48,*Default,NTP,0000,0000,0000,,无论是在左边还是在右边
Dialogue: 0,0:27:40.48,0:27:41.36,*Default,NTP,0000,0000,0000,,呃
Dialogue: 0,0:27:41.36,0:27:44.08,*Default,NTP,0000,0000,0000,,如果 python 没有让 plus 如此灵活
Dialogue: 0,0:27:44.08,0:27:45.76,*Default,NTP,0000,0000,0000,,那么也许顺序并不重要
Dialogue: 0,0:27:45.76,0:27:46.48,*Default,NTP,0000,0000,0000,,全部
Dialogue: 0,0:27:46.48,0:27:48.40,*Default,NTP,0000,0000,0000,,但它非常灵活，可以与
Dialogue: 0,0:27:48.40,0:27:50.32,*Default,NTP,0000,0000,0000,,字符串可以与列表一起使用，其中
Dialogue: 0,0:27:50.32,0:27:52.08,*Default,NTP,0000,0000,0000,,有时顺序很重要
Dialogue: 0,0:27:52.08,0:27:54.64,*Default,NTP,0000,0000,0000,,所以出于这个原因，有两个
Dialogue: 0,0:27:54.64,0:27:56.16,*Default,NTP,0000,0000,0000,,不同的特殊方法
Dialogue: 0,0:27:56.16,0:27:58.48,*Default,NTP,0000,0000,0000,,当 x 出现时被调用的一个
Dialogue: 0,0:27:58.48,0:28:00.56,*Default,NTP,0000,0000,0000,,左边和一个单独的被调用的
Dialogue: 0,0:28:00.56,0:28:02.56,*Default,NTP,0000,0000,0000,,当x在右边时
Dialogue: 0,0:28:02.56,0:28:04.56,*Default,NTP,0000,0000,0000,,它们被称为 add 和 r add
Dialogue: 0,0:28:04.56,0:28:06.88,*Default,NTP,0000,0000,0000,,分别
Dialogue: 0,0:28:06.88,0:28:09.92,*Default,NTP,0000,0000,0000,,是的，嗯，也许我们会做一个
Dialogue: 0,0:28:09.92,0:28:10.56,*Default,NTP,0000,0000,0000,,例子
Dialogue: 0,0:28:10.56,0:28:13.68,*Default,NTP,0000,0000,0000,,呃，这可能会解决问题
Dialogue: 0,0:28:13.68,0:28:17.60,*Default,NTP,0000,0000,0000,,让我们假设其他是结束
Dialogue: 0,0:28:17.60,0:28:20.48,*Default,NTP,0000,0000,0000,,你知道如何添加我想你会
Dialogue: 0,0:28:20.48,0:28:23.36,*Default,NTP,0000,0000,0000,,必须返回一个新的理性
Dialogue: 0,0:28:23.36,0:28:28.08,*Default,NTP,0000,0000,0000,,那是你的旧分子
Dialogue: 0,0:28:28.08,0:28:30.72,*Default,NTP,0000,0000,0000,,另外还有其他时间 d 在那里
Dialogue: 0,0:28:30.72,0:28:33.76,*Default,NTP,0000,0000,0000,,你的旧分母
Dialogue: 0,0:28:33.76,0:28:36.96,*Default,NTP,0000,0000,0000,,以及你如何添加好
Dialogue: 0,0:28:36.96,0:28:40.80,*Default,NTP,0000,0000,0000,,好的，所以这就像 x plus
Dialogue: 0,0:28:40.80,0:28:45.60,*Default,NTP,0000,0000,0000,,三种情况，其中其他为 3。
Dialogue: 0,0:28:46.24,0:28:49.36,*Default,NTP,0000,0000,0000,,你会如何添加
Dialogue: 0,0:28:49.36,0:28:50.80,*Default,NTP,0000,0000,0000,,好的，现在我们有一个不同的案例
Dialogue: 0,0:28:50.80,0:28:53.60,*Default,NTP,0000,0000,0000,,这是 3 plus x 的情况
Dialogue: 0,0:28:53.60,0:28:56.48,*Default,NTP,0000,0000,0000,,other 是 3，那么我们返回什么
Dialogue: 0,0:28:56.48,0:28:57.28,*Default,NTP,0000,0000,0000,,那里
Dialogue: 0,0:28:57.28,0:29:00.32,*Default,NTP,0000,0000,0000,,我们返回一个有理数，其中
Dialogue: 0,0:29:00.32,0:29:03.36,*Default,NTP,0000,0000,0000,,分子是n加上其他时间d
Dialogue: 0,0:29:03.36,0:29:06.00,*Default,NTP,0000,0000,0000,,然后相同的分母然后
Dialogue: 0,0:29:06.00,0:29:06.88,*Default,NTP,0000,0000,0000,,会起作用的
Dialogue: 0,0:29:06.88,0:29:08.88,*Default,NTP,0000,0000,0000,,无论哪种情况，我认为为了看到
Dialogue: 0,0:29:08.88,0:29:09.92,*Default,NTP,0000,0000,0000,,这是怎么回事
Dialogue: 0,0:29:09.92,0:29:12.16,*Default,NTP,0000,0000,0000,,我们至少需要一个包装方法
Dialogue: 0,0:29:12.16,0:29:13.60,*Default,NTP,0000,0000,0000,,会回来
Dialogue: 0,0:29:13.60,0:29:15.92,*Default,NTP,0000,0000,0000,,呃
Dialogue: 0,0:29:17.12,0:29:20.56,*Default,NTP,0000,0000,0000,,有理数的
Dialogue: 0,0:29:21.68,0:29:27.84,*Default,NTP,0000,0000,0000,,和和
Dialogue: 0,0:29:27.92,0:29:30.08,*Default,NTP,0000,0000,0000,,d
Dialogue: 0,0:29:31.36,0:29:35.52,*Default,NTP,0000,0000,0000,,哦，我掉线了，没关系
Dialogue: 0,0:29:35.76,0:29:40.00,*Default,NTP,0000,0000,0000,,现在如果我有我的东西x
Dialogue: 0,0:29:40.00,0:29:43.68,*Default,NTP,0000,0000,0000,,这就像呃一半，我写
Dialogue: 0,0:29:43.68,0:29:47.76,*Default,NTP,0000,0000,0000,,x 加三我得到哦
Dialogue: 0,0:29:47.76,0:29:52.80,*Default,NTP,0000,0000,0000,,自我新手错误
Dialogue: 0,0:29:52.84,0:29:55.84,*Default,NTP,0000,0000,0000,,严重地
Dialogue: 0,0:29:56.56,0:30:00.80,*Default,NTP,0000,0000,0000,,我这样做的次数约翰
Dialogue: 0,0:30:04.64,0:30:07.60,*Default,NTP,0000,0000,0000,,然后我们得到七个一半，如果我们写
Dialogue: 0,0:30:07.60,0:30:08.08,*Default,NTP,0000,0000,0000,,三加
Dialogue: 0,0:30:08.08,0:30:10.40,*Default,NTP,0000,0000,0000,,x 我们得到七个一半，但我们写了
Dialogue: 0,0:30:10.40,0:30:11.28,*Default,NTP,0000,0000,0000,,相同的代码
Dialogue: 0,0:30:11.28,0:30:14.32,*Default,NTP,0000,0000,0000,,这里和这里所以嗯一个选择
Dialogue: 0,0:30:14.32,0:30:16.32,*Default,NTP,0000,0000,0000,,而不是写出来
Dialogue: 0,0:30:16.32,0:30:17.92,*Default,NTP,0000,0000,0000,,就写那个r
Dialogue: 0,0:30:17.92,0:30:21.20,*Default,NTP,0000,0000,0000,,add 等于 add 我们已经写过了
Dialogue: 0,0:30:21.20,0:30:24.32,*Default,NTP,0000,0000,0000,,为什么要再写一遍然后我们就不写了
Dialogue: 0,0:30:24.32,0:30:24.96,*Default,NTP,0000,0000,0000,,需要这个
Dialogue: 0,0:30:24.96,0:30:27.44,*Default,NTP,0000,0000,0000,,不再，我们得到相同的行为
Dialogue: 0,0:30:27.44,0:30:29.12,*Default,NTP,0000,0000,0000,,这就是发生的事情
