[Script Info]
Title: Lecture 15. Mutable Values_哔哩哔哩_bilibili
ScriptType: v4.00+
Collisions: Reverse
PlayResX: 1280
PlayResY: 720
WrapStyle: 3
ScaledBorderAndShadow: yes
; ----------------------
; 本字幕由CC字幕助手自动转换
; 字幕来源https://www.bilibili.com/video/BV1s3411G7yM?p=36&vd_source=6ffca0aa1006734a4fba52f389036611
; 脚本地址https://greasyfork.org/scripts/378513
; 设置了字幕过长自动换行，但若字幕中没有空格换行将无效
; 字体大小依据720p 48号字体等比缩放
; 如显示不正常请尝试使用SRT格式

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Segoe UI,48,&H00FFFFFF,&HF0000000,&H00000000,&HF0000000,1,0,0,0,100,100,0,0.00,1,1,3,2,30,30,20,1

[Events]
Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:01.37,0:00:03.80,*Default,NTP,0000,0000,0000,,61第15讲
Dialogue: 0,0:00:04.10,0:00:05.10,*Default,NTP,0000,0000,0000,,公告
Dialogue: 0,0:00:06.07,0:00:08.13,*Default,NTP,0000,0000,0000,,猫项目将于周五截止
Dialogue: 0,0:00:08.27,0:00:10.73,*Default,NTP,0000,0000,0000,,提交整个项目即可获得奖励积分
Dialogue: 0,0:00:10.73,0:00:13.50,*Default,NTP,0000,0000,0000,,周四之前就是今天
Dialogue: 0,0:00:13.67,0:00:15.87,*Default,NTP,0000,0000,0000,,作业三将于周五发布
Dialogue: 0,0:00:15.87,0:00:17.40,*Default,NTP,0000,0000,0000,,下周四做
Dialogue: 0,0:00:17.93,0:00:19.73,*Default,NTP,0000,0000,0000,,我们有一些建议
Dialogue: 0,0:00:19.73,0:00:22.20,*Default,NTP,0000,0000,0000,,星期五、星期六和星期一的约会很糟糕
Dialogue: 0,0:00:22.37,0:00:24.17,*Default,NTP,0000,0000,0000,,这些只是为了提供建议
Dialogue: 0,0:00:24.20,0:00:26.10,*Default,NTP,0000,0000,0000,,不适用于家庭作业或项目帮助
Dialogue: 0,0:00:27.07,0:00:28.47,*Default,NTP,0000,0000,0000,,我知道已经有一些
Dialogue: 0,0:00:28.47,0:00:30.40,*Default,NTP,0000,0000,0000,,办公时间 q 的长重量
Dialogue: 0,0:00:30.40,0:00:31.20,*Default,NTP,0000,0000,0000,,本星期
Dialogue: 0,0:00:31.73,0:00:35.13,*Default,NTP,0000,0000,0000,,我们肯定正在努力改善这种情况
Dialogue: 0,0:00:35.40,0:00:37.90,*Default,NTP,0000,0000,0000,,如果您在获取信息时遇到困难，我很抱歉
Dialogue: 0,0:00:37.90,0:00:39.10,*Default,NTP,0000,0000,0000,,已回答的问题
Dialogue: 0,0:00:39.90,0:00:40.60,*Default,NTP,0000,0000,0000,,请记住
Dialogue: 0,0:00:40.60,0:00:43.70,*Default,NTP,0000,0000,0000,,欢迎您发布私人帖子 sam piazza
Dialogue: 0,0:00:44.13,0:00:45.97,*Default,NTP,0000,0000,0000,,不会立即得到答复
Dialogue: 0,0:00:45.97,0:00:48.13,*Default,NTP,0000,0000,0000,,但我们最终会得到答复
Dialogue: 0,0:00:48.53,0:00:51.17,*Default,NTP,0000,0000,0000,,也欢迎您讨论这些问题
Dialogue: 0,0:00:51.27,0:00:54.00,*Default,NTP,0000,0000,0000,,与您在课程中认识的其他学生
Dialogue: 0,0:00:54.10,0:00:56.27,*Default,NTP,0000,0000,0000,,例如来自您的辅导小组
Dialogue: 0,0:00:56.50,0:00:58.90,*Default,NTP,0000,0000,0000,,如果他们已经完成了一个问题
Dialogue: 0,0:00:59.77,0:01:02.07,*Default,NTP,0000,0000,0000,,那么他们就可以查看你的代码
Dialogue: 0,0:01:02.07,0:01:03.67,*Default,NTP,0000,0000,0000,,并给你一些建议
Dialogue: 0,0:01:04.07,0:01:04.93,*Default,NTP,0000,0000,0000,,你不能分享
Dialogue: 0,0:01:04.93,0:01:07.53,*Default,NTP,0000,0000,0000,,与未完成问题的人分享您的代码
Dialogue: 0,0:01:07.53,0:01:09.57,*Default,NTP,0000,0000,0000,,因为否则他们可能只是复制它
Dialogue: 0,0:01:09.57,0:01:11.27,*Default,NTP,0000,0000,0000,,并且需要你自己写代码
Dialogue: 0,0:01:11.77,0:01:12.73,*Default,NTP,0000,0000,0000,,但如果你想与
Dialogue: 0,0:01:12.73,0:01:14.30,*Default,NTP,0000,0000,0000,,班上的另一名学生
Dialogue: 0,0:01:14.30,0:01:16.40,*Default,NTP,0000,0000,0000,,欢迎您讨论任何想法
Dialogue: 0,0:01:16.40,0:01:17.80,*Default,NTP,0000,0000,0000,,欢迎您帮助别人
Dialogue: 0,0:01:17.80,0:01:19.73,*Default,NTP,0000,0000,0000,,谁没有你那么远
Dialogue: 0,0:01:19.77,0:01:21.70,*Default,NTP,0000,0000,0000,,看看他们迄今为止所做的事情
Dialogue: 0,0:01:21.70,0:01:23.13,*Default,NTP,0000,0000,0000,,并给他们一些建议
Dialogue: 0,0:01:23.90,0:01:26.13,*Default,NTP,0000,0000,0000,,我知道你的时间很宝贵
Dialogue: 0,0:01:26.13,0:01:28.10,*Default,NTP,0000,0000,0000,,我不想让你们都在等待
Dialogue: 0,0:01:28.30,0:01:30.00,*Default,NTP,0000,0000,0000,,我们正在努力解决这个问题
Dialogue: 0,0:01:30.10,0:01:31.77,*Default,NTP,0000,0000,0000,,这是一个不寻常的学期
Dialogue: 0,0:01:31.87,0:01:35.27,*Default,NTP,0000,0000,0000,,我们在广场上的问题量要高得多
Dialogue: 0,0:01:35.93,0:01:37.27,*Default,NTP,0000,0000,0000,,更多的需求
Dialogue: 0,0:01:37.37,0:01:39.73,*Default,NTP,0000,0000,0000,,比我们习惯的一对一办公时间
Dialogue: 0,0:01:40.00,0:01:42.47,*Default,NTP,0000,0000,0000,,我们将尽力满足这一需求
Dialogue: 0,0:01:42.67,0:01:43.93,*Default,NTP,0000,0000,0000,,但请耐心等待
Dialogue: 0,0:01:44.80,0:01:46.77,*Default,NTP,0000,0000,0000,,好吧回到课程内容
Dialogue: 0,0:01:46.77,0:01:48.70,*Default,NTP,0000,0000,0000,,今天是非常重要的一天
Dialogue: 0,0:01:49.00,0:01:51.57,*Default,NTP,0000,0000,0000,,在那里你了解突变
Dialogue: 0,0:01:51.87,0:01:54.47,*Default,NTP,0000,0000,0000,,这是值实际发生变化的时候
Dialogue: 0,0:01:54.67,0:01:55.73,*Default,NTP,0000,0000,0000,,这不是什么
Dialogue: 0,0:01:55.73,0:01:57.53,*Default,NTP,0000,0000,0000,,这在之前的课程中发生过
Dialogue: 0,0:01:58.20,0:01:59.60,*Default,NTP,0000,0000,0000,,但这很常见
Dialogue: 0,0:01:59.80,0:02:01.20,*Default,NTP,0000,0000,0000,,这是一个核心
Dialogue: 0,0:02:01.20,0:02:03.77,*Default,NTP,0000,0000,0000,,我们将要研究的内容
Dialogue: 0,0:02:03.77,0:02:05.47,*Default,NTP,0000,0000,0000,,很快在这门课程中
Dialogue: 0,0:02:05.70,0:02:09.50,*Default,NTP,0000,0000,0000,,这就是所谓的面向对象编程
Dialogue: 0,0:02:09.57,0:02:10.47,*Default,NTP,0000,0000,0000,,当前的
Dialogue: 0,0:02:10.53,0:02:13.80,*Default,NTP,0000,0000,0000,,设计大型程序的主导范式
Dialogue: 0,0:02:14.13,0:02:16.90,*Default,NTP,0000,0000,0000,,以及一系列精彩的想法，其中包括
Dialogue: 0,0:02:16.90,0:02:17.87,*Default,NTP,0000,0000,0000,,作为其中之一
Dialogue: 0,0:02:17.97,0:02:19.90,*Default,NTP,0000,0000,0000,,这种突变的概念
Dialogue: 0,0:02:20.80,0:02:21.87,*Default,NTP,0000,0000,0000,,好的，我们开始吧
Dialogue: 0,0:02:23.90,0:02:26.73,*Default,NTP,0000,0000,0000,,对象是一个重要的概念
Dialogue: 0,0:02:26.97,0:02:28.70,*Default,NTP,0000,0000,0000,,在软件工程中
Dialogue: 0,0:02:29.27,0:02:33.33,*Default,NTP,0000,0000,0000,,对象是一个具有行为的值
Dialogue: 0,0:02:33.60,0:02:36.13,*Default,NTP,0000,0000,0000,,就像它应该代表的东西一样
Dialogue: 0,0:02:36.67,0:02:38.40,*Default,NTP,0000,0000,0000,,让我给你举个例子
Dialogue: 0,0:02:40.67,0:02:43.10,*Default,NTP,0000,0000,0000,,有一个叫做日期时间的模块
Dialogue: 0,0:02:43.97,0:02:46.87,*Default,NTP,0000,0000,0000,,它代表日期和时间之类的东西
Dialogue: 0,0:02:47.47,0:02:50.30,*Default,NTP,0000,0000,0000,,从中我们可以导入日期
Dialogue: 0,0:02:51.60,0:02:54.13,*Default,NTP,0000,0000,0000,,现在日期就是所谓的班级
Dialogue: 0,0:02:54.70,0:02:57.73,*Default,NTP,0000,0000,0000,,当我创建日期实例时
Dialogue: 0,0:02:58.10,0:03:01.07,*Default,NTP,0000,0000,0000,,我通过调用类来做到这一点
Dialogue: 0,0:03:01.73,0:03:03.13,*Default,NTP,0000,0000,0000,,所以如果我创建日期
Dialogue: 0,0:03:03.37,0:03:07.07,*Default,NTP,0000,0000,0000,,两千零一十五 二月二十号
Dialogue: 0,0:03:10.87,0:03:11.93,*Default,NTP,0000,0000,0000,,那是一个约会
Dialogue: 0,0:03:13.47,0:03:16.20,*Default,NTP,0000,0000,0000,,另一个日期是你获得自由的日期
Dialogue: 0,0:03:17.07,0:03:20.70,*Default,NTP,0000,0000,0000,,本课程和本学期的日期为 5 月 12 日
Dialogue: 0,0:03:20.97,0:03:22.90,*Default,NTP,0000,0000,0000,,当你参加期末考试时
Dialogue: 0,0:03:24.90,0:03:27.27,*Default,NTP,0000,0000,0000,,现在一个对象应该表现出
Dialogue: 0,0:03:27.40,0:03:29.87,*Default,NTP,0000,0000,0000,,喜欢它所代表的价值
Dialogue: 0,0:03:30.40,0:03:32.87,*Default,NTP,0000,0000,0000,,所以情况应该是这样，如果我结合
Dialogue: 0,0:03:33.27,0:03:34.53,*Default,NTP,0000,0000,0000,,今天和自由
Dialogue: 0,0:03:34.70,0:03:37.77,*Default,NTP,0000,0000,0000,,例如通过计算它有多长
Dialogue: 0,0:03:38.07,0:03:40.27,*Default,NTP,0000,0000,0000,,自由与今天之间
Dialogue: 0,0:03:41.10,0:03:43.70,*Default,NTP,0000,0000,0000,,我应该得到合理的代表
Dialogue: 0,0:03:43.80,0:03:44.60,*Default,NTP,0000,0000,0000,,一些东西
Dialogue: 0,0:03:44.80,0:03:47.07,*Default,NTP,0000,0000,0000,,告诉我这些都是日期
Dialogue: 0,0:03:47.07,0:03:49.07,*Default,NTP,0000,0000,0000,,我正在从一个或另一个中减去
Dialogue: 0,0:03:49.13,0:03:52.87,*Default,NTP,0000,0000,0000,,距离您可以免费参加这门课程还有 81 天
Dialogue: 0,0:03:55.27,0:03:59.67,*Default,NTP,0000,0000,0000,,对象具有行为的主要机制
Dialogue: 0,0:03:59.93,0:04:01.70,*Default,NTP,0000,0000,0000,,是通过他们的属性
Dialogue: 0,0:04:01.93,0:04:05.07,*Default,NTP,0000,0000,0000,,并且您访问对象的属性
Dialogue: 0,0:04:05.07,0:04:06.73,*Default,NTP,0000,0000,0000,,通过点表达式
Dialogue: 0,0:04:07.73,0:04:10.77,*Default,NTP,0000,0000,0000,,这样你就可以得到今天的年份
Dialogue: 0,0:04:11.17,0:04:13.17,*Default,NTP,0000,0000,0000,,或今天的月份
Dialogue: 0,0:04:15.17,0:04:17.53,*Default,NTP,0000,0000,0000,,通过询问年份
Dialogue: 0,0:04:17.67,0:04:20.97,*Default,NTP,0000,0000,0000,,或其使用点表达式的月份属性
Dialogue: 0,0:04:21.27,0:04:22.40,*Default,NTP,0000,0000,0000,,我们会具体谈谈
Dialogue: 0,0:04:22.40,0:04:24.67,*Default,NTP,0000,0000,0000,,关于如何计算点表达式
Dialogue: 0,0:04:24.73,0:04:25.57,*Default,NTP,0000,0000,0000,,当我们做一个
Dialogue: 0,0:04:25.57,0:04:28.50,*Default,NTP,0000,0000,0000,,深入介绍Python中的对象系统
Dialogue: 0,0:04:29.07,0:04:30.80,*Default,NTP,0000,0000,0000,,但现在你应该意识到
Dialogue: 0,0:04:30.90,0:04:32.87,*Default,NTP,0000,0000,0000,,这些表达之一是什么意思
Dialogue: 0,0:04:33.13,0:04:34.17,*Default,NTP,0000,0000,0000,,这是一个名字
Dialogue: 0,0:04:35.07,0:04:37.93,*Default,NTP,0000,0000,0000,,它可以是任何计算结果为对象的表达式
Dialogue: 0,0:04:38.20,0:04:39.33,*Default,NTP,0000,0000,0000,,然后你就有一个点
Dialogue: 0,0:04:39.33,0:04:39.60,*Default,NTP,0000,0000,0000,,进而
Dialogue: 0,0:04:39.60,0:04:41.77,*Default,NTP,0000,0000,0000,,您要查找的属性的名称
Dialogue: 0,0:04:42.93,0:04:45.87,*Default,NTP,0000,0000,0000,,除了绑定到值的属性之外
Dialogue: 0,0:04:45.87,0:04:48.20,*Default,NTP,0000,0000,0000,,您可以拥有绑定到函数的属性
Dialogue: 0,0:04:48.33,0:04:49.90,*Default,NTP,0000,0000,0000,,这些称为方法
Dialogue: 0,0:04:50.73,0:04:53.20,*Default,NTP,0000,0000,0000,,所以方法是你访问的任何东西
Dialogue: 0,0:04:53.20,0:04:54.90,*Default,NTP,0000,0000,0000,,使用 adot 表达式
Dialogue: 0,0:04:57.60,0:05:00.07,*Default,NTP,0000,0000,0000,,然后像函数一样调用
Dialogue: 0,0:05:01.07,0:05:03.73,*Default,NTP,0000,0000,0000,,日期搅拌时间法
Dialogue: 0,0:05:04.27,0:05:07.40,*Default,NTP,0000,0000,0000,,是将日期格式化为字符串的一种方法
Dialogue: 0,0:05:07.87,0:05:09.47,*Default,NTP,0000,0000,0000,,为什么叫搅拌时间
Dialogue: 0,0:05:09.67,0:05:11.40,*Default,NTP,0000,0000,0000,,嗯，这是一个历史事故
Dialogue: 0,0:05:11.40,0:05:13.73,*Default,NTP,0000,0000,0000,,很久以前就有人给这个命名为stirf time
Dialogue: 0,0:05:14.07,0:05:16.00,*Default,NTP,0000,0000,0000,,所以我们今天仍然使用这个名字
Dialogue: 0,0:05:17.87,0:05:19.70,*Default,NTP,0000,0000,0000,,冲浪时间是什么意思
Dialogue: 0,0:05:19.93,0:05:23.57,*Default,NTP,0000,0000,0000,,它接受一个描述如何的字符串
Dialogue: 0,0:05:23.87,0:05:26.17,*Default,NTP,0000,0000,0000,,我想显示这个日期
Dialogue: 0,0:05:28.17,0:05:30.70,*Default,NTP,0000,0000,0000,,今天正在展示的内容
Dialogue: 0,0:05:31.00,0:05:33.90,*Default,NTP,0000,0000,0000,,所以今天调用了这个方法
Dialogue: 0,0:05:33.97,0:05:36.40,*Default,NTP,0000,0000,0000,,为了给我一个字符串表示
Dialogue: 0,0:05:36.60,0:05:38.50,*Default,NTP,0000,0000,0000,,上面写的是 2 月 20 日星期五
Dialogue: 0,0:05:39.00,0:05:41.33,*Default,NTP,0000,0000,0000,,其中周五的 % 通讯员
Dialogue: 0,0:05:41.33,0:05:44.20,*Default,NTP,0000,0000,0000,,% b 2 月通讯员 % d
Dialogue: 0,0:05:44.53,0:05:45.97,*Default,NTP,0000,0000,0000,,对应20
Dialogue: 0,0:05:47.17,0:05:48.77,*Default,NTP,0000,0000,0000,,现在请注意这里
Dialogue: 0,0:05:49.07,0:05:51.17,*Default,NTP,0000,0000,0000,,我从来没有说过这是星期五
Dialogue: 0,0:05:52.13,0:05:55.87,*Default,NTP,0000,0000,0000,,我什至从来没有说过你所说的二月是二月
Dialogue: 0,0:05:55.87,0:05:57.20,*Default,NTP,0000,0000,0000,,改变
Dialogue: 0,0:05:58.87,0:06:01.57,*Default,NTP,0000,0000,0000,,这只是约会的一部分
Dialogue: 0,0:06:01.67,0:06:03.07,*Default,NTP,0000,0000,0000,,能够生成东西
Dialogue: 0,0:06:03.07,0:06:04.40,*Default,NTP,0000,0000,0000,,就像工作日的名称
Dialogue: 0,0:06:04.40,0:06:05.73,*Default,NTP,0000,0000,0000,,或月份的名称
Dialogue: 0,0:06:06.10,0:06:08.00,*Default,NTP,0000,0000,0000,,这就是我所说的意思
Dialogue: 0,0:06:08.27,0:06:11.33,*Default,NTP,0000,0000,0000,,物体的行为与其所代表的事物相似
Dialogue: 0,0:06:12.17,0:06:14.37,*Default,NTP,0000,0000,0000,,所以对象代表信息
Dialogue: 0,0:06:14.73,0:06:17.70,*Default,NTP,0000,0000,0000,,它们由捆绑在一起的数据和行为组成
Dialogue: 0,0:06:17.90,0:06:19.80,*Default,NTP,0000,0000,0000,,创建抽象
Dialogue: 0,0:06:20.90,0:06:22.67,*Default,NTP,0000,0000,0000,,物体可以代表事物
Dialogue: 0,0:06:22.93,0:06:24.67,*Default,NTP,0000,0000,0000,,还有事物的属性
Dialogue: 0,0:06:24.67,0:06:26.77,*Default,NTP,0000,0000,0000,,或相互作用或过程
Dialogue: 0,0:06:26.77,0:06:29.40,*Default,NTP,0000,0000,0000,,它们是一个非常普遍的概念
Dialogue: 0,0:06:29.67,0:06:31.60,*Default,NTP,0000,0000,0000,,任何有属性的东西
Dialogue: 0,0:06:31.73,0:06:33.87,*Default,NTP,0000,0000,0000,,可以表示为一个对象
Dialogue: 0,0:06:35.07,0:06:38.00,*Default,NTP,0000,0000,0000,,一种对象称为类
Dialogue: 0,0:06:38.53,0:06:40.93,*Default,NTP,0000,0000,0000,,类是Python中的第一类值
Dialogue: 0,0:06:41.00,0:06:44.13,*Default,NTP,0000,0000,0000,,它们可以作为函数的参数传递
Dialogue: 0,0:06:46.53,0:06:49.60,*Default,NTP,0000,0000,0000,,对象是面向对象的核心
Dialogue: 0,0:06:49.60,0:06:52.93,*Default,NTP,0000,0000,0000,,编程是一种逼近编程
Dialogue: 0,0:06:53.87,0:06:57.00,*Default,NTP,0000,0000,0000,,这使我们能够组织大型项目
Dialogue: 0,0:06:57.00,0:06:58.73,*Default,NTP,0000,0000,0000,,使用中心隐喻
Dialogue: 0,0:06:59.10,0:07:01.53,*Default,NTP,0000,0000,0000,,一个大程序只是一件大事
Dialogue: 0,0:07:01.97,0:07:04.17,*Default,NTP,0000,0000,0000,,它是一堆单独的对象
Dialogue: 0,0:07:04.17,0:07:05.73,*Default,NTP,0000,0000,0000,,互相沟通
Dialogue: 0,0:07:05.87,0:07:07.93,*Default,NTP,0000,0000,0000,,通过来回发送消息
Dialogue: 0,0:07:10.67,0:07:13.27,*Default,NTP,0000,0000,0000,,现在为了令人信服地使用
Dialogue: 0,0:07:13.27,0:07:15.50,*Default,NTP,0000,0000,0000,,这个隐喻贯穿了整个大程序
Dialogue: 0,0:07:15.57,0:07:17.27,*Default,NTP,0000,0000,0000,,我们有一个特殊的语法
Dialogue: 0,0:07:17.53,0:07:20.57,*Default,NTP,0000,0000,0000,,点表达式是该特殊语法的一部分
Dialogue: 0,0:07:21.07,0:07:23.00,*Default,NTP,0000,0000,0000,,这有助于我们提高可读性
Dialogue: 0,0:07:23.00,0:07:24.97,*Default,NTP,0000,0000,0000,,或我们的程序的组成
Dialogue: 0,0:07:26.50,0:07:29.73,*Default,NTP,0000,0000,0000,,在Python中每个值都是一个对象
Dialogue: 0,0:07:29.97,0:07:32.20,*Default,NTP,0000,0000,0000,,每个值都有属性
Dialogue: 0,0:07:32.53,0:07:34.97,*Default,NTP,0000,0000,0000,,包括数字和字符串
Dialogue: 0,0:07:37.13,0:07:39.67,*Default,NTP,0000,0000,0000,,许多数据操作实际上是通过
Dialogue: 0,0:07:39.67,0:07:40.87,*Default,NTP,0000,0000,0000,,对象方法
Dialogue: 0,0:07:41.17,0:07:43.30,*Default,NTP,0000,0000,0000,,今天我们要看看其中的几个
Dialogue: 0,0:07:44.70,0:07:46.57,*Default,NTP,0000,0000,0000,,函数是为了做一件事
Dialogue: 0,0:07:47.17,0:07:50.33,*Default,NTP,0000,0000,0000,,所以井设计函数只有一个目的
Dialogue: 0,0:07:50.33,0:07:53.57,*Default,NTP,0000,0000,0000,,你传入一些参数你会得到一些返回值
Dialogue: 0,0:07:54.30,0:07:55.47,*Default,NTP,0000,0000,0000,,对象不同
Dialogue: 0,0:07:55.57,0:07:57.20,*Default,NTP,0000,0000,0000,,它们代表的东西可能
Dialogue: 0,0:07:57.20,0:07:58.53,*Default,NTP,0000,0000,0000,,有很多不同的行为
Dialogue: 0,0:07:58.53,0:07:59.53,*Default,NTP,0000,0000,0000,,捆绑在一起
Dialogue: 0,0:07:59.90,0:08:01.37,*Default,NTP,0000,0000,0000,,日期不只做一件事
Dialogue: 0,0:08:01.37,0:08:03.27,*Default,NTP,0000,0000,0000,,它们有多种不同的使用方式
Dialogue: 0,0:08:03.93,0:08:05.73,*Default,NTP,0000,0000,0000,,所以对象做很多相关的事情
Dialogue: 0,0:08:05.73,0:08:07.57,*Default,NTP,0000,0000,0000,,他们可以有多种方法
Dialogue: 0,0:08:07.57,0:08:09.33,*Default,NTP,0000,0000,0000,,其中每一个都像一个函数
Dialogue: 0,0:08:11.17,0:08:13.07,*Default,NTP,0000,0000,0000,,字符串是对象
Dialogue: 0,0:08:14.87,0:08:17.00,*Default,NTP,0000,0000,0000,,所以字符串有属性
Dialogue: 0,0:08:17.47,0:08:19.07,*Default,NTP,0000,0000,0000,,字符串你好
Dialogue: 0,0:08:21.90,0:08:24.10,*Default,NTP,0000,0000,0000,,有一个名为 upper 的方法
Dialogue: 0,0:08:24.53,0:08:26.10,*Default,NTP,0000,0000,0000,,这使得它变成大写
Dialogue: 0,0:08:26.47,0:08:28.77,*Default,NTP,0000,0000,0000,,这是字符串行为的一部分
Dialogue: 0,0:08:29.73,0:08:31.13,*Default,NTP,0000,0000,0000,,你可以小写它
Dialogue: 0,0:08:31.77,0:08:34.13,*Default,NTP,0000,0000,0000,,你甚至可以交换它的外壳
Dialogue: 0,0:08:35.93,0:08:37.40,*Default,NTP,0000,0000,0000,,现在这些都没有改变
Dialogue: 0,0:08:37.40,0:08:39.33,*Default,NTP,0000,0000,0000,,ss还是你好
Dialogue: 0,0:08:40.00,0:08:41.10,*Default,NTP,0000,0000,0000,,这些方法中的每一个
Dialogue: 0,0:08:41.10,0:08:43.33,*Default,NTP,0000,0000,0000,,调用返回了一个新字符串
Dialogue: 0,0:08:43.50,0:08:44.77,*Default,NTP,0000,0000,0000,,基于旧字符串
Dialogue: 0,0:08:45.17,0:08:47.47,*Default,NTP,0000,0000,0000,,但它做了一些非常像字符串的事情
Dialogue: 0,0:08:47.47,0:08:49.20,*Default,NTP,0000,0000,0000,,所以这些不是通用函数
Dialogue: 0,0:08:49.20,0:08:51.97,*Default,NTP,0000,0000,0000,,这些是字符串特有的东西
Dialogue: 0,0:08:51.97,0:08:53.80,*Default,NTP,0000,0000,0000,,这就是为什么它们是方法
Dialogue: 0,0:08:53.80,0:08:55.13,*Default,NTP,0000,0000,0000,,与函数相反
Dialogue: 0,0:08:55.13,0:08:56.60,*Default,NTP,0000,0000,0000,,是语言中内置的
Dialogue: 0,0:08:58.77,0:09:00.57,*Default,NTP,0000,0000,0000,,现在字符串是一个抽象
Dialogue: 0,0:09:00.60,0:09:02.57,*Default,NTP,0000,0000,0000,,这使我们能够表示文本
Dialogue: 0,0:09:02.93,0:09:07.77,*Default,NTP,0000,0000,0000,,但这些字符串被编码为数字
Dialogue: 0,0:09:07.93,0:09:11.00,*Default,NTP,0000,0000,0000,,实际上这个编码并不是Python特有的
Dialogue: 0,0:09:11.10,0:09:13.77,*Default,NTP,0000,0000,0000,,它在许多编程语言之间共享
Dialogue: 0,0:09:13.93,0:09:16.20,*Default,NTP,0000,0000,0000,,所以我只是告诉你一些有趣的事情
Dialogue: 0,0:09:17.47,0:09:18.93,*Default,NTP,0000,0000,0000,,原始编码
Dialogue: 0,0:09:19.17,0:09:20.97,*Default,NTP,0000,0000,0000,,不是第一个发明的
Dialogue: 0,0:09:20.97,0:09:21.90,*Default,NTP,0000,0000,0000,,但其中第一个
Dialogue: 0,0:09:21.90,0:09:23.90,*Default,NTP,0000,0000,0000,,标准和计算
Dialogue: 0,0:09:24.00,0:09:25.13,*Default,NTP,0000,0000,0000,,被称为asci
Dialogue: 0,0:09:25.13,0:09:28.13,*Default,NTP,0000,0000,0000,,美国信息交换标准代码
Dialogue: 0,0:09:30.30,0:09:32.30,*Default,NTP,0000,0000,0000,,这是一张桌子
Dialogue: 0,0:09:32.30,0:09:33.93,*Default,NTP,0000,0000,0000,,哪些数字对应
Dialogue: 0,0:09:33.93,0:09:36.00,*Default,NTP,0000,0000,0000,,哪些字母和符号
Dialogue: 0,0:09:36.50,0:09:37.93,*Default,NTP,0000,0000,0000,,有八行
Dialogue: 0,0:09:38.00,0:09:39.37,*Default,NTP,0000,0000,0000,,八很重要，因为
Dialogue: 0,0:09:39.37,0:09:41.93,*Default,NTP,0000,0000,0000,,这就是你可以使用多少个不同的行来表示
Dialogue: 0,0:09:41.93,0:09:44.37,*Default,NTP,0000,0000,0000,,三位三个一和零
Dialogue: 0,0:09:45.80,0:09:47.17,*Default,NTP,0000,0000,0000,,有16列
Dialogue: 0,0:09:47.17,0:09:49.47,*Default,NTP,0000,0000,0000,,您可以使用四位来表示
Dialogue: 0,0:09:51.40,0:09:53.57,*Default,NTP,0000,0000,0000,,选择布局以支持
Dialogue: 0,0:09:53.57,0:09:55.67,*Default,NTP,0000,0000,0000,,按字符代码排序
Dialogue: 0,0:09:56.30,0:09:58.70,*Default,NTP,0000,0000,0000,,所以如果你曾经使用过电脑并发现它
Dialogue: 0,0:09:58.70,0:10:00.73,*Default,NTP,0000,0000,0000,,对大写字母进行排序
Dialogue: 0,0:10:00.77,0:10:02.97,*Default,NTP,0000,0000,0000,,小写字母之前
Dialogue: 0,0:10:03.20,0:10:05.97,*Default,NTP,0000,0000,0000,,并将带有感叹号的内容放在顶部
Dialogue: 0,0:10:06.17,0:10:08.30,*Default,NTP,0000,0000,0000,,以及结尾带有蒂尔达的东西
Dialogue: 0,0:10:08.50,0:10:11.80,*Default,NTP,0000,0000,0000,,这是因为 ascii co 图表中的顺序
Dialogue: 0,0:10:13.80,0:10:16.90,*Default,NTP,0000,0000,0000,,它的设计目的还在于，如果您没有
Dialogue: 0,0:10:17.87,0:10:20.90,*Default,NTP,0000,0000,0000,,足够的位来表示整个表
Dialogue: 0,0:10:21.20,0:10:22.77,*Default,NTP,0000,0000,0000,,会有一个有用的
Dialogue: 0,0:10:22.90,0:10:24.97,*Default,NTP,0000,0000,0000,,中间的子集
Dialogue: 0,0:10:25.30,0:10:27.13,*Default,NTP,0000,0000,0000,,这意味着你必须全部大写输入
Dialogue: 0,0:10:27.13,0:10:28.50,*Default,NTP,0000,0000,0000,,但这总比什么都没有好
Dialogue: 0,0:10:30.93,0:10:33.93,*Default,NTP,0000,0000,0000,,顶部的控制字符为红色
Dialogue: 0,0:10:34.17,0:10:34.53,*Default,NTP,0000,0000,0000,,是
Dialogue: 0,0:10:34.53,0:10:37.53,*Default,NTP,0000,0000,0000,,设计用于传输或信息交换
Dialogue: 0,0:10:37.90,0:10:39.53,*Default,NTP,0000,0000,0000,,但它们有原来的含义
Dialogue: 0,0:10:39.53,0:10:41.13,*Default,NTP,0000,0000,0000,,其中大部分今天没有使用
Dialogue: 0,0:10:41.73,0:10:42.97,*Default,NTP,0000,0000,0000,,但其中一些仍然是
Dialogue: 0,0:10:43.30,0:10:45.93,*Default,NTP,0000,0000,0000,,所以换行称为 lf
Dialogue: 0,0:10:46.13,0:10:49.10,*Default,NTP,0000,0000,0000,,应该告诉另一端的打印机
Dialogue: 0,0:10:49.37,0:10:50.93,*Default,NTP,0000,0000,0000,,转到下一行
Dialogue: 0,0:10:53.20,0:10:55.37,*Default,NTP,0000,0000,0000,,如果你想引起某人的注意
Dialogue: 0,0:10:55.40,0:10:57.20,*Default,NTP,0000,0000,0000,,经过一些信息交换后
Dialogue: 0,0:10:57.20,0:10:59.53,*Default,NTP,0000,0000,0000,,你可以按他们打印机上的铃
Dialogue: 0,0:11:00.40,0:11:02.53,*Default,NTP,0000,0000,0000,,这些东西今天仍然存在
Dialogue: 0,0:11:04.77,0:11:07.77,*Default,NTP,0000,0000,0000,,所以如果我说 a 是大写字母 a
Dialogue: 0,0:11:08.53,0:11:09.50,*Default,NTP,0000,0000,0000,,我可以
Dialogue: 0,0:11:10.17,0:11:13.73,*Default,NTP,0000,0000,0000,,找出对应于 a 的数字
Dialogue: 0,0:11:13.77,0:11:19.97,*Default,NTP,0000,0000,0000,,它是No.65，十六进制格式是41
Dialogue: 0,0:11:20.67,0:11:24.27,*Default,NTP,0000,0000,0000,,41 告诉我大写字母 a 的行和列
Dialogue: 0,0:11:24.27,0:11:25.57,*Default,NTP,0000,0000,0000,,和我的 ASCII 表
Dialogue: 0,0:11:26.30,0:11:27.30,*Default,NTP,0000,0000,0000,,哦，就是这样
Dialogue: 0,0:11:27.30,0:11:29.17,*Default,NTP,0000,0000,0000,,行四列一
Dialogue: 0,0:11:34.60,0:11:38.27,*Default,NTP,0000,0000,0000,,如果我多次打印换行符
Dialogue: 0,0:11:38.27,0:11:40.07,*Default,NTP,0000,0000,0000,,我会得到多行
Dialogue: 0,0:11:40.37,0:11:43.57,*Default,NTP,0000,0000,0000,,如果我多次打印响铃字符
Dialogue: 0,0:11:43.73,0:11:46.50,*Default,NTP,0000,0000,0000,,我的电脑应该会发出声音
Dialogue: 0,0:11:49.73,0:11:52.77,*Default,NTP,0000,0000,0000,,现在有更多的角色了
Dialogue: 0,0:11:54.00,0:11:57.20,*Default,NTP,0000,0000,0000,,ascii 标准是 English pacific
Dialogue: 0,0:11:57.47,0:11:59.10,*Default,NTP,0000,0000,0000,,但unicode标准
Dialogue: 0,0:11:59.10,0:12:01.77,*Default,NTP,0000,0000,0000,,设计的目的是为了拥有一个字符集
Dialogue: 0,0:12:01.90,0:12:04.27,*Default,NTP,0000,0000,0000,,将用于所有不同的语言
Dialogue: 0,0:12:06.13,0:12:08.60,*Default,NTP,0000,0000,0000,,所以对于每个角色来说都是如此
Dialogue: 0,0:12:08.87,0:12:11.13,*Default,NTP,0000,0000,0000,,在每种语言和每种文字中
Dialogue: 0,0:12:11.20,0:12:13.67,*Default,NTP,0000,0000,0000,,世界各地都在使用
Dialogue: 0,0:12:13.77,0:12:16.80,*Default,NTP,0000,0000,0000,,它应该有一个 unicode 代码点
Dialogue: 0,0:12:16.80,0:12:18.67,*Default,NTP,0000,0000,0000,,或归属于它的数字
Dialogue: 0,0:12:18.93,0:12:21.90,*Default,NTP,0000,0000,0000,,这让我们将该字符称为数字
Dialogue: 0,0:12:22.00,0:12:25.20,*Default,NTP,0000,0000,0000,,并将其用于任何类型的信息交换
Dialogue: 0,0:12:25.20,0:12:28.17,*Default,NTP,0000,0000,0000,,计算机之间 不同编程语言之间
Dialogue: 0,0:12:28.17,0:12:28.97,*Default,NTP,0000,0000,0000,,ETC
Dialogue: 0,0:12:29.77,0:12:32.27,*Default,NTP,0000,0000,0000,,目前有 109,000 个字符
Dialogue: 0,0:12:32.27,0:12:33.70,*Default,NTP,0000,0000,0000,,至少我上次检查时
Dialogue: 0,0:12:34.27,0:12:36.30,*Default,NTP,0000,0000,0000,,93种不同的文字
Dialogue: 0,0:12:36.50,0:12:38.20,*Default,NTP,0000,0000,0000,,它们是按脚本组织的
Dialogue: 0,0:12:38.47,0:12:40.27,*Default,NTP,0000,0000,0000,,所以这不仅仅是枚举
Dialogue: 0,0:12:40.27,0:12:41.80,*Default,NTP,0000,0000,0000,,人们使用的所有不同的符号
Dialogue: 0,0:12:41.80,0:12:42.60,*Default,NTP,0000,0000,0000,,在语言上
Dialogue: 0,0:12:42.90,0:12:46.00,*Default,NTP,0000,0000,0000,,它们还标有大写字母
Dialogue: 0,0:12:46.00,0:12:48.77,*Default,NTP,0000,0000,0000,,什么没有大写 他们使用什么语言
Dialogue: 0,0:12:48.77,0:12:49.57,*Default,NTP,0000,0000,0000,,ETC
Dialogue: 0,0:12:51.13,0:12:54.00,*Default,NTP,0000,0000,0000,,甚至支持定向显示顺序
Dialogue: 0,0:12:54.50,0:12:55.77,*Default,NTP,0000,0000,0000,,英语是左写右写
Dialogue: 0,0:12:55.77,0:12:57.60,*Default,NTP,0000,0000,0000,,但阿拉伯语是从右到左书写的
Dialogue: 0,0:12:59.73,0:13:02.50,*Default,NTP,0000,0000,0000,,每个角色都有一个名字
Dialogue: 0,0:13:04.40,0:13:07.30,*Default,NTP,0000,0000,0000,,字母 x 称为拉丁大写字母 x
Dialogue: 0,0:13:08.77,0:13:10.40,*Default,NTP,0000,0000,0000,,现在有很多不同的角色
Dialogue: 0,0:13:10.40,0:13:12.17,*Default,NTP,0000,0000,0000,,其中 109,000 个
Dialogue: 0,0:13:12.77,0:13:16.53,*Default,NTP,0000,0000,0000,,包括笑脸和皱眉脸
Dialogue: 0,0:13:16.73,0:13:18.67,*Default,NTP,0000,0000,0000,,这只是某些字母表中的字母
Dialogue: 0,0:13:21.80,0:13:24.67,*Default,NTP,0000,0000,0000,,大多数编程语言都支持 unicode
Dialogue: 0,0:13:24.67,0:13:27.10,*Default,NTP,0000,0000,0000,,这样你就可以直接访问这些字符
Dialogue: 0,0:13:28.00,0:13:31.07,*Default,NTP,0000,0000,0000,,所以我将从 unicode 数据添加类型
Dialogue: 0,0:13:31.10,0:13:33.67,*Default,NTP,0000,0000,0000,,导入名称并查找
Dialogue: 0,0:13:35.10,0:13:37.93,*Default,NTP,0000,0000,0000,,name 给出 unicode 字符的名称
Dialogue: 0,0:13:37.93,0:13:39.80,*Default,NTP,0000,0000,0000,,那是拉丁文大写字母a
Dialogue: 0,0:13:40.47,0:13:42.77,*Default,NTP,0000,0000,0000,,那是一个拉丁小写字母 a
Dialogue: 0,0:13:44.10,0:13:45.53,*Default,NTP,0000,0000,0000,,向上查找则相反
Dialogue: 0,0:13:46.00,0:13:49.13,*Default,NTP,0000,0000,0000,,我从名字开始，它赋予了我性格
Dialogue: 0,0:13:50.00,0:13:51.30,*Default,NTP,0000,0000,0000,,所以如果我抬头看
Dialogue: 0,0:13:51.80,0:13:53.30,*Default,NTP,0000,0000,0000,,笑脸
Dialogue: 0,0:13:57.60,0:13:59.20,*Default,NTP,0000,0000,0000,,那是一张笑脸
Dialogue: 0,0:13:59.70,0:14:01.90,*Default,NTP,0000,0000,0000,,我们可以把它做得更大，这样你就可以看到
Dialogue: 0,0:14:01.90,0:14:03.40,*Default,NTP,0000,0000,0000,,它是多么微笑
Dialogue: 0,0:14:04.93,0:14:07.10,*Default,NTP,0000,0000,0000,,还有更多的角色
Dialogue: 0,0:14:07.40,0:14:08.80,*Default,NTP,0000,0000,0000,,有点古怪
Dialogue: 0,0:14:09.07,0:14:10.60,*Default,NTP,0000,0000,0000,,有一个雪人
Dialogue: 0,0:14:12.93,0:14:13.80,*Default,NTP,0000,0000,0000,,有一个
Dialogue: 0,0:14:14.97,0:14:16.30,*Default,NTP,0000,0000,0000,,吸盘球
Dialogue: 0,0:14:18.80,0:14:20.50,*Default,NTP,0000,0000,0000,,甚至还有一个婴儿
Dialogue: 0,0:14:21.50,0:14:22.60,*Default,NTP,0000,0000,0000,,你好宝贝
Dialogue: 0,0:14:23.47,0:14:25.80,*Default,NTP,0000,0000,0000,,现在取决于您计算机上的字体
Dialogue: 0,0:14:25.80,0:14:27.67,*Default,NTP,0000,0000,0000,,这些将以不同的方式显示
Dialogue: 0,0:14:28.33,0:14:29.60,*Default,NTP,0000,0000,0000,,所以我认为只能在mac上
Dialogue: 0,0:14:29.60,0:14:31.57,*Default,NTP,0000,0000,0000,,你有没有看到一个长得很特别的婴儿
Dialogue: 0,0:14:31.57,0:14:32.67,*Default,NTP,0000,0000,0000,,有了这个发型
Dialogue: 0,0:14:33.10,0:14:36.57,*Default,NTP,0000,0000,0000,,但它也可以存在于其他操作系统上
Dialogue: 0,0:14:37.17,0:14:40.37,*Default,NTP,0000,0000,0000,,重点是有一个代表婴儿的角色
Dialogue: 0,0:14:40.47,0:14:41.97,*Default,NTP,0000,0000,0000,,如果显示的话具体如何
Dialogue: 0,0:14:41.97,0:14:43.90,*Default,NTP,0000,0000,0000,,可能因机器而异
Dialogue: 0,0:14:44.33,0:14:47.00,*Default,NTP,0000,0000,0000,,但外面有一个婴儿的想法
Dialogue: 0,0:14:47.10,0:14:48.80,*Default,NTP,0000,0000,0000,,使用特定的编码
Dialogue: 0,0:14:49.70,0:14:52.67,*Default,NTP,0000,0000,0000,,对于许多不同的编程语言来说是通用的
Dialogue: 0,0:14:53.10,0:14:55.13,*Default,NTP,0000,0000,0000,,你可以看看这个编码
Dialogue: 0,0:14:55.70,0:14:57.70,*Default,NTP,0000,0000,0000,,通过将其编码为叮咬
Dialogue: 0,0:14:57.70,0:14:58.17,*Default,NTP,0000,0000,0000,,你看到了
Dialogue: 0,0:14:58.17,0:15:00.77,*Default,NTP,0000,0000,0000,,这些是代表的四次咬合
Dialogue: 0,0:15:00.77,0:15:01.57,*Default,NTP,0000,0000,0000,,一个宝宝
Dialogue: 0,0:15:03.07,0:15:07.33,*Default,NTP,0000,0000,0000,,而字母 a 的编码方式与字母 a 相同
Dialogue: 0,0:15:10.90,0:15:12.60,*Default,NTP,0000,0000,0000,,今天最大的不知道
Dialogue: 0,0:15:13.00,0:15:15.40,*Default,NTP,0000,0000,0000,,一个物体实际上可以
Dialogue: 0,0:15:15.47,0:15:18.13,*Default,NTP,0000,0000,0000,,随着时间的推移改变其价值
Dialogue: 0,0:15:20.40,0:15:23.07,*Default,NTP,0000,0000,0000,,所以我们特别要看看列表
Dialogue: 0,0:15:23.57,0:15:26.30,*Default,NTP,0000,0000,0000,,列表可以更改其内容
Dialogue: 0,0:15:26.47,0:15:29.00,*Default,NTP,0000,0000,0000,,同一个列表可以包含不同的内容
Dialogue: 0,0:15:29.00,0:15:30.37,*Default,NTP,0000,0000,0000,,随着时间的推移
Dialogue: 0,0:15:31.73,0:15:34.47,*Default,NTP,0000,0000,0000,,所以我将演示它是如何工作的
Dialogue: 0,0:15:34.80,0:15:36.80,*Default,NTP,0000,0000,0000,,给你讲一个故事
Dialogue: 0,0:15:37.10,0:15:41.73,*Default,NTP,0000,0000,0000,,扑克牌花色的历史故事
Dialogue: 0,0:15:42.93,0:15:47.07,*Default,NTP,0000,0000,0000,,所以我们认为扑克牌是在亚洲发明的
Dialogue: 0,0:15:47.77,0:15:49.33,*Default,NTP,0000,0000,0000,,他们从三个开始
Dialogue: 0,0:15:50.00,0:15:53.87,*Default,NTP,0000,0000,0000,,硬币、绳子和无数
Dialogue: 0,0:15:55.00,0:15:56.13,*Default,NTP,0000,0000,0000,,这些代表
Dialogue: 0,0:15:56.13,0:15:58.07,*Default,NTP,0000,0000,0000,,不同的金钱提名
Dialogue: 0,0:15:58.10,0:15:59.93,*Default,NTP,0000,0000,0000,,因为卡片有什么用处
Dialogue: 0,0:16:00.07,0:16:01.90,*Default,NTP,0000,0000,0000,,当然是赌博
Dialogue: 0,0:16:02.90,0:16:04.77,*Default,NTP,0000,0000,0000,,好的，这些是我们的套装
Dialogue: 0,0:16:05.20,0:16:07.17,*Default,NTP,0000,0000,0000,,我们会尽力追踪这些
Dialogue: 0,0:16:07.17,0:16:08.57,*Default,NTP,0000,0000,0000,,原创套装
Dialogue: 0,0:16:10.33,0:16:12.47,*Default,NTP,0000,0000,0000,,通过使用这个赋值语句
Dialogue: 0,0:16:12.87,0:16:14.33,*Default,NTP,0000,0000,0000,,然后我们要讲一个故事
Dialogue: 0,0:16:14.33,0:16:16.70,*Default,NTP,0000,0000,0000,,关于这些套装如何随着时间的推移而变化
Dialogue: 0,0:16:17.67,0:16:20.73,*Default,NTP,0000,0000,0000,,所以扑克牌迁移到了欧洲
Dialogue: 0,0:16:20.90,0:16:22.60,*Default,NTP,0000,0000,0000,,通过埃及我们认为
Dialogue: 0,0:16:23.10,0:16:26.73,*Default,NTP,0000,0000,0000,,在这个过程中，这套无数的套装都丢失了
Dialogue: 0,0:16:28.57,0:16:32.10,*Default,NTP,0000,0000,0000,,还有绳子套装丢失的情况
Dialogue: 0,0:16:33.07,0:16:34.93,*Default,NTP,0000,0000,0000,,只留下硬币
Dialogue: 0,0:16:37.00,0:16:39.60,*Default,NTP,0000,0000,0000,,当扑克牌到达西班牙时
Dialogue: 0,0:16:40.50,0:16:42.93,*Default,NTP,0000,0000,0000,,需要一些新西装
Dialogue: 0,0:16:43.17,0:16:43.97,*Default,NTP,0000,0000,0000,,所以
Dialogue: 0,0:16:44.73,0:16:47.27,*Default,NTP,0000,0000,0000,,在西班牙套牌中，你有圣杯套装
Dialogue: 0,0:16:47.73,0:16:50.97,*Default,NTP,0000,0000,0000,,你还有套装
Dialogue: 0,0:16:52.67,0:16:53.57,*Default,NTP,0000,0000,0000,,剑
Dialogue: 0,0:16:54.33,0:16:55.20,*Default,NTP,0000,0000,0000,,和
Dialogue: 0,0:16:55.93,0:16:56.77,*Default,NTP,0000,0000,0000,,俱乐部
Dialogue: 0,0:16:58.60,0:17:00.40,*Default,NTP,0000,0000,0000,,所以我把杯子变成了剑
Dialogue: 0,0:17:00.90,0:17:04.47,*Default,NTP,0000,0000,0000,,和俱乐部我相信今天现有的西班牙套牌
Dialogue: 0,0:17:05.40,0:17:06.67,*Default,NTP,0000,0000,0000,,到目前为止我们已经看到
Dialogue: 0,0:17:06.90,0:17:09.30,*Default,NTP,0000,0000,0000,,你可以弹出一个元素
Dialogue: 0,0:17:09.47,0:17:11.10,*Default,NTP,0000,0000,0000,,你可以删除一个元素
Dialogue: 0,0:17:11.40,0:17:13.40,*Default,NTP,0000,0000,0000,,这可能在列表中的任何位置
Dialogue: 0,0:17:13.73,0:17:16.17,*Default,NTP,0000,0000,0000,,pop 总是删除并返回最后一个
Dialogue: 0,0:17:16.17,0:17:17.30,*Default,NTP,0000,0000,0000,,列表中的元素
Dialogue: 0,0:17:18.93,0:17:20.37,*Default,NTP,0000,0000,0000,,您可以附加单个元素
Dialogue: 0,0:17:20.37,0:17:21.87,*Default,NTP,0000,0000,0000,,或者您可以通过以下方式扩展列表
Dialogue: 0,0:17:21.87,0:17:23.87,*Default,NTP,0000,0000,0000,,在序列中添加多个元素
Dialogue: 0,0:17:26.67,0:17:29.30,*Default,NTP,0000,0000,0000,,当然，意大利人也改编了扑克牌
Dialogue: 0,0:17:30.10,0:17:32.87,*Default,NTP,0000,0000,0000,,在意大利，就像你说的剑一样
Dialogue: 0,0:17:33.50,0:17:35.13,*Default,NTP,0000,0000,0000,,这是2号元素
Dialogue: 0,0:17:35.40,0:17:37.17,*Default,NTP,0000,0000,0000,,正如你所说的斯帕达
Dialogue: 0,0:17:37.93,0:17:39.27,*Default,NTP,0000,0000,0000,,所以我们有铲子
Dialogue: 0,0:17:39.70,0:17:43.17,*Default,NTP,0000,0000,0000,,然后边缘决定换一些西装
Dialogue: 0,0:17:43.53,0:17:45.73,*Default,NTP,0000,0000,0000,,于是硬币和杯子就消失了
Dialogue: 0,0:17:46.50,0:17:49.97,*Default,NTP,0000,0000,0000,,它们被心形和钻石所取代
Dialogue: 0,0:17:52.50,0:17:54.10,*Default,NTP,0000,0000,0000,,所以这是出现的套装
Dialogue: 0,0:17:54.10,0:17:55.70,*Default,NTP,0000,0000,0000,,在现代美式甲板上
Dialogue: 0,0:17:55.70,0:17:57.53,*Default,NTP,0000,0000,0000,,硬质钻石铲和俱乐部
Dialogue: 0,0:17:57.77,0:17:59.80,*Default,NTP,0000,0000,0000,,我相信它们也在法国使用
Dialogue: 0,0:18:00.93,0:18:03.07,*Default,NTP,0000,0000,0000,,一开始还不错
Dialogue: 0,0:18:03.07,0:18:05.30,*Default,NTP,0000,0000,0000,,我们将原来的套装绑定到套装上
Dialogue: 0,0:18:05.30,0:18:07.40,*Default,NTP,0000,0000,0000,,让我们看看现在的原创套装是什么
Dialogue: 0,0:18:07.87,0:18:09.67,*Default,NTP,0000,0000,0000,,和西装一样
Dialogue: 0,0:18:10.27,0:18:13.33,*Default,NTP,0000,0000,0000,,这很有趣，因为我们跳到了这里
Dialogue: 0,0:18:13.33,0:18:15.60,*Default,NTP,0000,0000,0000,,然后我们做了很多改变
Dialogue: 0,0:18:15.70,0:18:18.13,*Default,NTP,0000,0000,0000,,但事实证明这只是两个不同的名字
Dialogue: 0,0:18:18.13,0:18:19.50,*Default,NTP,0000,0000,0000,,对于同一个对象
Dialogue: 0,0:18:19.70,0:18:22.57,*Default,NTP,0000,0000,0000,,因此对一个的更改会反映在另一个中
Dialogue: 0,0:18:24.90,0:18:25.77,*Default,NTP,0000,0000,0000,,这是第一个
Dialogue: 0,0:18:25.77,0:18:28.70,*Default,NTP,0000,0000,0000,,本课程中对象改变状态的示例
Dialogue: 0,0:18:28.90,0:18:30.90,*Default,NTP,0000,0000,0000,,所以现在发生了一件大事
Dialogue: 0,0:18:31.77,0:18:33.77,*Default,NTP,0000,0000,0000,,同一个对象的值可以改变
Dialogue: 0,0:18:33.77,0:18:35.70,*Default,NTP,0000,0000,0000,,在整个计算过程中
Dialogue: 0,0:18:36.17,0:18:40.17,*Default,NTP,0000,0000,0000,,如果我将同一个人的名字绑定到某个婴儿身上
Dialogue: 0,0:18:40.47,0:18:43.67,*Default,NTP,0000,0000,0000,,顺便说一句，这是一个名为“baby”的 unicode 字符
Dialogue: 0,0:18:44.77,0:18:47.87,*Default,NTP,0000,0000,0000,,那么如果那个婴儿长大了
Dialogue: 0,0:18:48.13,0:18:50.80,*Default,NTP,0000,0000,0000,,同一个人仍然与同一个人绑定
Dialogue: 0,0:18:51.10,0:18:51.90,*Default,NTP,0000,0000,0000,,但
Dialogue: 0,0:18:52.87,0:18:55.07,*Default,NTP,0000,0000,0000,,该对象出现变化
Dialogue: 0,0:18:56.07,0:18:58.70,*Default,NTP,0000,0000,0000,,如果我将两个不同的名称绑定到同一个对象
Dialogue: 0,0:18:58.70,0:19:00.33,*Default,NTP,0000,0000,0000,,并且该对象发生变化
Dialogue: 0,0:19:00.57,0:19:02.33,*Default,NTP,0000,0000,0000,,虽然这些变化将得到反映
Dialogue: 0,0:19:02.33,0:19:04.73,*Default,NTP,0000,0000,0000,,无论我使用哪个更改
Dialogue: 0,0:19:07.80,0:19:08.70,*Default,NTP,0000,0000,0000,,可以，然后呢
Dialogue: 0,0:19:08.70,0:19:11.57,*Default,NTP,0000,0000,0000,,所有引用对象的名称都受
Dialogue: 0,0:19:11.57,0:19:13.37,*Default,NTP,0000,0000,0000,,现在突变
Dialogue: 0,0:19:13.37,0:19:14.57,*Default,NTP,0000,0000,0000,,成为一名老年妇女
Dialogue: 0,0:19:14.57,0:19:17.13,*Default,NTP,0000,0000,0000,,不一定称为突变
Dialogue: 0,0:19:17.13,0:19:18.57,*Default,NTP,0000,0000,0000,,在现实世界中
Dialogue: 0,0:19:18.87,0:19:20.33,*Default,NTP,0000,0000,0000,,但在计算机科学中
Dialogue: 0,0:19:20.37,0:19:22.40,*Default,NTP,0000,0000,0000,,突变是一个使用的词
Dialogue: 0,0:19:22.57,0:19:25.57,*Default,NTP,0000,0000,0000,,每当对象发生变化时
Dialogue: 0,0:19:26.80,0:19:27.17,*Default,NTP,0000,0000,0000,,仅有的
Dialogue: 0,0:19:27.17,0:19:30.73,*Default,NTP,0000,0000,0000,,可变类型的对象可以更改其值
Dialogue: 0,0:19:30.93,0:19:31.73,*Default,NTP,0000,0000,0000,,并列出和
Dialogue: 0,0:19:31.73,0:19:34.00,*Default,NTP,0000,0000,0000,,字典就是我们见过的例子
Dialogue: 0,0:19:34.00,0:19:34.80,*Default,NTP,0000,0000,0000,,迄今为止
Dialogue: 0,0:19:35.50,0:19:36.93,*Default,NTP,0000,0000,0000,,那么让我们看看如何改变
Dialogue: 0,0:19:36.93,0:19:38.50,*Default,NTP,0000,0000,0000,,字典的内容
Dialogue: 0,0:19:40.80,0:19:44.17,*Default,NTP,0000,0000,0000,,如果我创建一个名为数字的字典
Dialogue: 0,0:19:44.47,0:19:49.57,*Default,NTP,0000,0000,0000,,其中 I 绑定到 1，b 绑定到 5 和 x
Dialogue: 0,0:19:50.40,0:19:51.50,*Default,NTP,0000,0000,0000,,限制为 10
Dialogue: 0,0:19:53.10,0:19:55.77,*Default,NTP,0000,0000,0000,,我可以看整本词典的内容
Dialogue: 0,0:19:55.87,0:19:59.70,*Default,NTP,0000,0000,0000,,或者我可以查看绑定到特定键的值
Dialogue: 0,0:20:00.53,0:20:03.67,*Default,NTP,0000,0000,0000,,我还可以更改绑定到键的值
Dialogue: 0,0:20:03.97,0:20:06.00,*Default,NTP,0000,0000,0000,,如果我再查一下
Dialogue: 0,0:20:06.10,0:20:07.70,*Default,NTP,0000,0000,0000,,我会得到不同的答案
Dialogue: 0,0:20:07.93,0:20:10.33,*Default,NTP,0000,0000,0000,,并且数字词典已经改变
Dialogue: 0,0:20:10.67,0:20:13.70,*Default,NTP,0000,0000,0000,,请注意 x 和 10 之间的绑定刚刚消失
Dialogue: 0,0:20:13.70,0:20:17.77,*Default,NTP,0000,0000,0000,,完全被 x 与 11 配对所取代
Dialogue: 0,0:20:18.50,0:20:22.20,*Default,NTP,0000,0000,0000,,现在我还可以在字典中添加新条目
Dialogue: 0,0:20:22.50,0:20:25.60,*Default,NTP,0000,0000,0000,,只需使用这个元素赋值语句
Dialogue: 0,0:20:26.17,0:20:28.87,*Default,NTP,0000,0000,0000,,所以现在数字比以前包含更多内容
Dialogue: 0,0:20:29.27,0:20:31.57,*Default,NTP,0000,0000,0000,,我可以查一下 l 所绑定的内容
Dialogue: 0,0:20:33.27,0:20:38.37,*Default,NTP,0000,0000,0000,,我还可以使用 pop 方法摆脱绑定
Dialogue: 0,0:20:38.50,0:20:39.90,*Default,NTP,0000,0000,0000,,这需要一把钥匙
Dialogue: 0,0:20:40.20,0:20:42.90,*Default,NTP,0000,0000,0000,,并删除该键值对
Dialogue: 0,0:20:43.20,0:20:45.87,*Default,NTP,0000,0000,0000,,所以现在如果我尝试得到
Dialogue: 0,0:20:46.60,0:20:49.47,*Default,NTP,0000,0000,0000,,键 x 的值那里什么也没有
Dialogue: 0,0:20:49.77,0:20:51.53,*Default,NTP,0000,0000,0000,,因为数字变了
Dialogue: 0,0:20:53.20,0:20:56.47,*Default,NTP,0000,0000,0000,,顺便说一下，函数调用中可能会发生突变
Dialogue: 0,0:20:57.50,0:21:00.17,*Default,NTP,0000,0000,0000,,所以函数可以改变任何对象的值
Dialogue: 0,0:21:00.20,0:21:01.40,*Default,NTP,0000,0000,0000,,这在它的范围内
Dialogue: 0,0:21:01.50,0:21:02.90,*Default,NTP,0000,0000,0000,,这是一个可变的值
Dialogue: 0,0:21:03.87,0:21:06.13,*Default,NTP,0000,0000,0000,,所以如果我说四就是 1 2 3 4
Dialogue: 0,0:21:06.53,0:21:08.30,*Default,NTP,0000,0000,0000,,四的长度是四
Dialogue: 0,0:21:08.87,0:21:11.57,*Default,NTP,0000,0000,0000,,可以在四个上调用一些神秘函数
Dialogue: 0,0:21:12.00,0:21:14.93,*Default,NTP,0000,0000,0000,,此时四的长度将仅为二
Dialogue: 0,0:21:15.53,0:21:17.80,*Default,NTP,0000,0000,0000,,什么样的神秘函数可以做到这一点
Dialogue: 0,0:21:18.30,0:21:19.27,*Default,NTP,0000,0000,0000,,这是一个
Dialogue: 0,0:21:20.37,0:21:21.97,*Default,NTP,0000,0000,0000,,所以这个接受了一个论点
Dialogue: 0,0:21:21.97,0:21:24.33,*Default,NTP,0000,0000,0000,,将调用 s 然后弹出它两次
Dialogue: 0,0:21:25.37,0:21:28.97,*Default,NTP,0000,0000,0000,,因此调用 pop 方法会删除最后一个元素
Dialogue: 0,0:21:29.47,0:21:30.73,*Default,NTP,0000,0000,0000,,所以我们定义函数
Dialogue: 0,0:21:30.73,0:21:32.87,*Default,NTP,0000,0000,0000,,我们创建了一个我们称之为神秘的列表
Dialogue: 0,0:21:33.17,0:21:35.67,*Default,NTP,0000,0000,0000,,神秘引入了一个新的框架，其中
Dialogue: 0,0:21:35.67,0:21:39.17,*Default,NTP,0000,0000,0000,,s 与 4 绑定到同一个对象
Dialogue: 0,0:21:39.80,0:21:41.97,*Default,NTP,0000,0000,0000,,这样当我弹出它时
Dialogue: 0,0:21:42.50,0:21:44.93,*Default,NTP,0000,0000,0000,,我实际上正在删除最后一个元素
Dialogue: 0,0:21:45.73,0:21:49.73,*Default,NTP,0000,0000,0000,,这永远改变了 4 所绑定的值
Dialogue: 0,0:21:50.20,0:21:51.77,*Default,NTP,0000,0000,0000,,现在四没有绑定到任何东西
Dialogue: 0,0:21:51.77,0:21:53.13,*Default,NTP,0000,0000,0000,,与以前不同
Dialogue: 0,0:21:53.27,0:21:55.47,*Default,NTP,0000,0000,0000,,只是这个列表不同
Dialogue: 0,0:21:55.50,0:21:57.17,*Default,NTP,0000,0000,0000,,它有不同的内容
Dialogue: 0,0:21:57.37,0:22:00.37,*Default,NTP,0000,0000,0000,,再次弹出意味着它会更短
Dialogue: 0,0:22:04.30,0:22:05.37,*Default,NTP,0000,0000,0000,,这是一个不同的函数
Dialogue: 0,0:22:05.37,0:22:06.77,*Default,NTP,0000,0000,0000,,会做同样的事情
Dialogue: 0,0:22:06.93,0:22:11.40,*Default,NTP,0000,0000,0000,,删除索引二之后的每个元素
Dialogue: 0,0:22:12.20,0:22:15.17,*Default,NTP,0000,0000,0000,,这意味着删除三个和四个
Dialogue: 0,0:22:15.27,0:22:17.90,*Default,NTP,0000,0000,0000,,并替换列表的该部分
Dialogue: 0,0:22:17.90,0:22:19.80,*Default,NTP,0000,0000,0000,,根本没有任何元素
Dialogue: 0,0:22:22.27,0:22:26.07,*Default,NTP,0000,0000,0000,,现在当我们创建四个时会发生什么
Dialogue: 0,0:22:26.33,0:22:28.37,*Default,NTP,0000,0000,0000,,然后我们调用一个神秘函数
Dialogue: 0,0:22:28.40,0:22:30.40,*Default,NTP,0000,0000,0000,,不需要任何参数
Dialogue: 0,0:22:30.87,0:22:32.97,*Default,NTP,0000,0000,0000,,它仍然可以访问四个
Dialogue: 0,0:22:33.27,0:22:35.47,*Default,NTP,0000,0000,0000,,它能改变它吗？
Dialogue: 0,0:22:36.00,0:22:37.00,*Default,NTP,0000,0000,0000,,它是怎么做到的
Dialogue: 0,0:22:37.20,0:22:39.90,*Default,NTP,0000,0000,0000,,好吧，它只是指四个列表
Dialogue: 0,0:22:40.27,0:22:41.80,*Default,NTP,0000,0000,0000,,都在它的范围之内
Dialogue: 0,0:22:42.00,0:22:43.33,*Default,NTP,0000,0000,0000,,它在全局框架中
Dialogue: 0,0:22:43.33,0:22:45.73,*Default,NTP,0000,0000,0000,,任何事物都可以引用全局框架中的事物
Dialogue: 0,0:22:45.97,0:22:48.60,*Default,NTP,0000,0000,0000,,所以它就开始从四个中弹出东西
Dialogue: 0,0:22:52.33,0:22:55.30,*Default,NTP,0000,0000,0000,,元组是序列
Dialogue: 0,0:22:55.73,0:22:58.87,*Default,NTP,0000,0000,0000,,但它们是不可变的序列
Dialogue: 0,0:22:59.37,0:23:01.37,*Default,NTP,0000,0000,0000,,意味着它们无法更改
Dialogue: 0,0:23:02.20,0:23:03.47,*Default,NTP,0000,0000,0000,,在我继续之前
Dialogue: 0,0:23:03.47,0:23:06.07,*Default,NTP,0000,0000,0000,,我会提到有些人称这些元组为
Dialogue: 0,0:23:06.33,0:23:08.37,*Default,NTP,0000,0000,0000,,有些人称这些元组为
Dialogue: 0,0:23:09.90,0:23:11.27,*Default,NTP,0000,0000,0000,,虽然没有
Dialogue: 0,0:23:11.30,0:23:12.67,*Default,NTP,0000,0000,0000,,既定公约
Dialogue: 0,0:23:12.67,0:23:14.73,*Default,NTP,0000,0000,0000,,为了这个词的发音
Dialogue: 0,0:23:15.30,0:23:17.50,*Default,NTP,0000,0000,0000,,两个群体至少可以达成一致
Dialogue: 0,0:23:17.70,0:23:20.17,*Default,NTP,0000,0000,0000,,另一组一定是错的
Dialogue: 0,0:23:20.97,0:23:23.77,*Default,NTP,0000,0000,0000,,我会让你决定这个词的发音
Dialogue: 0,0:23:23.93,0:23:26.33,*Default,NTP,0000,0000,0000,,但大多数时候我会说元组
Dialogue: 0,0:23:26.70,0:23:29.57,*Default,NTP,0000,0000,0000,,虽然偶尔你可能会听到我说
Dialogue: 0,0:23:29.87,0:23:30.67,*Default,NTP,0000,0000,0000,,输卵管
Dialogue: 0,0:23:32.07,0:23:34.40,*Default,NTP,0000,0000,0000,,所以加倍或序列值
Dialogue: 0,0:23:34.80,0:23:37.87,*Default,NTP,0000,0000,0000,,3 4 5 6 是双数
Dialogue: 0,0:23:38.70,0:23:41.07,*Default,NTP,0000,0000,0000,,看看我们如何不使用方括号
Dialogue: 0,0:23:41.07,0:23:42.73,*Default,NTP,0000,0000,0000,,而是用括号代替
Dialogue: 0,0:23:43.47,0:23:44.47,*Default,NTP,0000,0000,0000,,虽然事实上
Dialogue: 0,0:23:44.57,0:23:46.60,*Default,NTP,0000,0000,0000,,你根本不需要那些括号
Dialogue: 0,0:23:46.73,0:23:48.40,*Default,NTP,0000,0000,0000,,为了获得字面意义
Dialogue: 0,0:23:48.70,0:23:52.57,*Default,NTP,0000,0000,0000,,由 thomas 分隔的任何内容都被评估为元组
Dialogue: 0,0:23:53.10,0:23:55.53,*Default,NTP,0000,0000,0000,,很多人总是把括号括起来
Dialogue: 0,0:23:55.53,0:23:57.87,*Default,NTP,0000,0000,0000,,只是为了弄清楚发生了什么
Dialogue: 0,0:23:59.30,0:24:00.90,*Default,NTP,0000,0000,0000,,你可以建造一座空庙
Dialogue: 0,0:24:01.67,0:24:04.57,*Default,NTP,0000,0000,0000,,你可以调用任何东西来创建一个空的寺庙
Dialogue: 0,0:24:05.00,0:24:07.60,*Default,NTP,0000,0000,0000,,或者你可以在名单上打电话给寺庙
Dialogue: 0,0:24:09.30,0:24:11.13,*Default,NTP,0000,0000,0000,,或与此相关的任何顺序
Dialogue: 0,0:24:11.77,0:24:13.57,*Default,NTP,0000,0000,0000,,它会给你一座寺庙
Dialogue: 0,0:24:13.80,0:24:15.87,*Default,NTP,0000,0000,0000,,与该列表内容相同
Dialogue: 0,0:24:17.17,0:24:19.50,*Default,NTP,0000,0000,0000,,现在如果你想要一个 tupel 只包含
Dialogue: 0,0:24:19.50,0:24:22.77,*Default,NTP,0000,0000,0000,,一个元素很好，可以做到这一点
Dialogue: 0,0:24:22.93,0:24:25.13,*Default,NTP,0000,0000,0000,,而且语法很糟糕
Dialogue: 0,0:24:25.30,0:24:27.30,*Default,NTP,0000,0000,0000,,你必须在末尾加一个逗号
Dialogue: 0,0:24:27.93,0:24:30.97,*Default,NTP,0000,0000,0000,,如果你愿意的话你也可以把它放在括号里
Dialogue: 0,0:24:31.30,0:24:32.93,*Default,NTP,0000,0000,0000,,所以这与No.2不同
Dialogue: 0,0:24:32.93,0:24:35.00,*Default,NTP,0000,0000,0000,,这是一个装有两个的桶
Dialogue: 0,0:24:35.13,0:24:36.67,*Default,NTP,0000,0000,0000,,这只是第二名
Dialogue: 0,0:24:39.27,0:24:40.90,*Default,NTP,0000,0000,0000,,现在你可以加在一起
Dialogue: 0,0:24:41.37,0:24:43.50,*Default,NTP,0000,0000,0000,,元组以获得更大的元组
Dialogue: 0,0:24:45.07,0:24:46.47,*Default,NTP,0000,0000,0000,,你可以使用
Dialogue: 0,0:24:46.67,0:24:49.53,*Default,NTP,0000,0000,0000,,会员运算符来确定是否
Dialogue: 0,0:24:49.87,0:24:51.57,*Default,NTP,0000,0000,0000,,元素位于元组中
Dialogue: 0,0:24:52.93,0:24:55.33,*Default,NTP,0000,0000,0000,,你也可以对元组进行切片
Dialogue: 0,0:24:56.97,0:25:00.10,*Default,NTP,0000,0000,0000,,现在元组是不可变的值
Dialogue: 0,0:25:00.37,0:25:02.70,*Default,NTP,0000,0000,0000,,这意味着可以使用它们
Dialogue: 0,0:25:02.70,0:25:05.13,*Default,NTP,0000,0000,0000,,作为字典中的键
Dialogue: 0,0:25:06.17,0:25:09.93,*Default,NTP,0000,0000,0000,,请记住，不允许使用列表作为键
Dialogue: 0,0:25:09.93,0:25:11.17,*Default,NTP,0000,0000,0000,,在字典中
Dialogue: 0,0:25:11.77,0:25:15.37,*Default,NTP,0000,0000,0000,,因为你收到此错误不可散列类型列表
Dialogue: 0,0:25:16.20,0:25:18.77,*Default,NTP,0000,0000,0000,,现在即使你可以使用元组
Dialogue: 0,0:25:19.07,0:25:21.97,*Default,NTP,0000,0000,0000,,你不能在某个地方有一个带有列表的元组
Dialogue: 0,0:25:22.40,0:25:24.50,*Default,NTP,0000,0000,0000,,这也会导致错误
Dialogue: 0,0:25:26.30,0:25:28.60,*Default,NTP,0000,0000,0000,,所以元组是不可变的序列
Dialogue: 0,0:25:28.67,0:25:31.53,*Default,NTP,0000,0000,0000,,不可变的值实际上有一些好处
Dialogue: 0,0:25:31.53,0:25:34.33,*Default,NTP,0000,0000,0000,,一是它们受到某种方式的保护以免受突变
Dialogue: 0,0:25:35.10,0:25:38.53,*Default,NTP,0000,0000,0000,,如果我有一只乌龟，它的序列是 1 2 3
Dialogue: 0,0:25:38.93,0:25:41.60,*Default,NTP,0000,0000,0000,,然后我调用一些名为 ooze 的函数
Dialogue: 0,0:25:42.90,0:25:45.70,*Default,NTP,0000,0000,0000,,海龟仍然是 1 2 3
Dialogue: 0,0:25:45.93,0:25:48.33,*Default,NTP,0000,0000,0000,,因为这个顺序不能改变
Dialogue: 0,0:25:49.13,0:25:51.60,*Default,NTP,0000,0000,0000,,数字也是不可变的值
Dialogue: 0,0:25:51.73,0:25:52.93,*Default,NTP,0000,0000,0000,,字符串也是如此
Dialogue: 0,0:25:52.93,0:25:54.87,*Default,NTP,0000,0000,0000,,唯一可变的值
Dialogue: 0,0:25:54.97,0:25:57.67,*Default,NTP,0000,0000,0000,,可以改变的是列表
Dialogue: 0,0:25:57.87,0:26:01.60,*Default,NTP,0000,0000,0000,,所以如果我有这个列表乌龟 1 2 3 我打电话给软泥
Dialogue: 0,0:26:02.20,0:26:03.70,*Default,NTP,0000,0000,0000,,就像我们之前看到的那样
Dialogue: 0,0:26:03.77,0:26:06.27,*Default,NTP,0000,0000,0000,,此时我们可能在海龟中有任何东西
Dialogue: 0,0:26:07.67,0:26:07.87,*Default,NTP,0000,0000,0000,,现在
Dialogue: 0,0:26:07.87,0:26:11.40,*Default,NTP,0000,0000,0000,,严格来说，软泥不会影响海龟，这并不完全正确
Dialogue: 0,0:26:11.77,0:26:14.13,*Default,NTP,0000,0000,0000,,它不能改变这个值
Dialogue: 0,0:26:14.37,0:26:15.10,*Default,NTP,0000,0000,0000,,但在莱克斯
Dialogue: 0,0:26:15.10,0:26:17.40,*Default,NTP,0000,0000,0000,,讲座中我们将看到函数可以改变
Dialogue: 0,0:26:17.73,0:26:20.13,*Default,NTP,0000,0000,0000,,乌龟这个名字与什么有关
Dialogue: 0,0:26:21.67,0:26:22.97,*Default,NTP,0000,0000,0000,,所以你会得到一些保护
Dialogue: 0,0:26:22.97,0:26:25.10,*Default,NTP,0000,0000,0000,,但没有语言的充分保护
Dialogue: 0,0:26:25.37,0:26:27.77,*Default,NTP,0000,0000,0000,,让函数做出改变
Dialogue: 0,0:26:27.77,0:26:29.27,*Default,NTP,0000,0000,0000,,到您当前的环境
Dialogue: 0,0:26:30.97,0:26:32.80,*Default,NTP,0000,0000,0000,,表达式的值可以改变
Dialogue: 0,0:26:32.80,0:26:34.60,*Default,NTP,0000,0000,0000,,因为名字的改变
Dialogue: 0,0:26:34.60,0:26:38.73,*Default,NTP,0000,0000,0000,,或对象，因此我们已经看到很长时间的名称更改
Dialogue: 0,0:26:38.77,0:26:42.30,*Default,NTP,0000,0000,0000,,如果我有两次 xx 和 XXX 相同的表达式
Dialogue: 0,0:26:42.60,0:26:44.17,*Default,NTP,0000,0000,0000,,我们可能会得到不同的值
Dialogue: 0,0:26:44.17,0:26:47.33,*Default,NTP,0000,0000,0000,,因为名字 x 已被用于其他用途
Dialogue: 0,0:26:47.93,0:26:50.20,*Default,NTP,0000,0000,0000,,所以如果我说 x 等于 2 那么这将是 4
Dialogue: 0,0:26:50.20,0:26:51.13,*Default,NTP,0000,0000,0000,,但如果我说
Dialogue: 0,0:26:51.33,0:26:54.30,*Default,NTP,0000,0000,0000,,x 等于三，那么 x 加 x 就是六
Dialogue: 0,0:26:55.70,0:26:56.77,*Default,NTP,0000,0000,0000,,所以这些都是名字的改变
Dialogue: 0,0:26:56.77,0:26:58.47,*Default,NTP,0000,0000,0000,,我们在整个课程中都看到了他们
Dialogue: 0,0:26:58.77,0:27:00.47,*Default,NTP,0000,0000,0000,,对象突变不同
Dialogue: 0,0:27:01.00,0:27:03.87,*Default,NTP,0000,0000,0000,,但它也可以起到同样的效果
Dialogue: 0,0:27:04.17,0:27:06.73,*Default,NTP,0000,0000,0000,,改变表达式的计算结果
Dialogue: 0,0:27:07.40,0:27:09.87,*Default,NTP,0000,0000,0000,,所以如果 x 曾经是列表一二
Dialogue: 0,0:27:10.20,0:27:12.53,*Default,NTP,0000,0000,0000,,那么 x 将是 1 2 1 2
Dialogue: 0,0:27:12.90,0:27:15.13,*Default,NTP,0000,0000,0000,,但如果我在末尾添加三个
Dialogue: 0,0:27:15.37,0:27:19.27,*Default,NTP,0000,0000,0000,,然后我会得到 xx 的 1 到 3 1 2 3
Dialogue: 0,0:27:21.07,0:27:22.77,*Default,NTP,0000,0000,0000,,所以这是两种不同的方式
Dialogue: 0,0:27:22.93,0:27:23.90,*Default,NTP,0000,0000,0000,,其中相同的
Dialogue: 0,0:27:23.90,0:27:25.93,*Default,NTP,0000,0000,0000,,表达式可以有不同的值
Dialogue: 0,0:27:26.93,0:27:30.33,*Default,NTP,0000,0000,0000,,对于不可变对象，这一点不适用
Dialogue: 0,0:27:30.50,0:27:31.73,*Default,NTP,0000,0000,0000,,但这始终适用
Dialogue: 0,0:27:31.73,0:27:33.53,*Default,NTP,0000,0000,0000,,所以你可以随时更改事物的名称
Dialogue: 0,0:27:35.17,0:27:38.13,*Default,NTP,0000,0000,0000,,不可变的序列仍然可能改变
Dialogue: 0,0:27:38.20,0:27:42.00,*Default,NTP,0000,0000,0000,,如果它包含可变值作为元素
Dialogue: 0,0:27:42.93,0:27:46.13,*Default,NTP,0000,0000,0000,,假设我有一个包含列表的元组
Dialogue: 0,0:27:46.97,0:27:49.00,*Default,NTP,0000,0000,0000,,那么我无法更改元组
Dialogue: 0,0:27:49.53,0:27:51.53,*Default,NTP,0000,0000,0000,,这就是我所说的不可变的意思
Dialogue: 0,0:27:52.40,0:27:55.40,*Default,NTP,0000,0000,0000,,但我可以改变寺庙内的名单
Dialogue: 0,0:27:55.77,0:27:58.17,*Default,NTP,0000,0000,0000,,所以寺庙里仍然有同样的东西
Dialogue: 0,0:27:58.47,0:28:02.30,*Default,NTP,0000,0000,0000,,但其中的列表与以前不同
Dialogue: 0,0:28:02.30,0:28:04.40,*Default,NTP,0000,0000,0000,,因为这个改成了四
Dialogue: 0,0:28:04.57,0:28:06.40,*Default,NTP,0000,0000,0000,,如你所见，事实并非如此
Dialogue: 0,0:28:09.33,0:28:11.30,*Default,NTP,0000,0000,0000,,所以突变
Dialogue: 0,0:28:12.47,0:28:13.60,*Default,NTP,0000,0000,0000,,让我们来谈谈
Dialogue: 0,0:28:13.67,0:28:16.30,*Default,NTP,0000,0000,0000,,相同的事物意味着什么
Dialogue: 0,0:28:16.67,0:28:18.97,*Default,NTP,0000,0000,0000,,以及改变意味着什么
Dialogue: 0,0:28:20.47,0:28:23.90,*Default,NTP,0000,0000,0000,,曾几何时我们从不修改对象
Dialogue: 0,0:28:24.17,0:28:25.87,*Default,NTP,0000,0000,0000,,而在那些时候
Dialogue: 0,0:28:25.93,0:28:29.77,*Default,NTP,0000,0000,0000,,复合物体只是其各个部分的整体
Dialogue: 0,0:28:30.07,0:28:32.33,*Default,NTP,0000,0000,0000,,没有什么比成为一个有理数更重要了
Dialogue: 0,0:28:32.33,0:28:34.27,*Default,NTP,0000,0000,0000,,不仅仅是你的分子是什么
Dialogue: 0,0:28:34.60,0:28:36.07,*Default,NTP,0000,0000,0000,,你的分母是多少
Dialogue: 0,0:28:37.10,0:28:38.10,*Default,NTP,0000,0000,0000,,但这个观点
Dialogue: 0,0:28:38.57,0:28:41.97,*Default,NTP,0000,0000,0000,,这个洞只不过是它的一些部分
Dialogue: 0,0:28:41.97,0:28:45.00,*Default,NTP,0000,0000,0000,,发生变化时不再有效
Dialogue: 0,0:28:46.20,0:28:48.90,*Default,NTP,0000,0000,0000,,复合数据对象，例如列表
Dialogue: 0,0:28:49.17,0:28:50.67,*Default,NTP,0000,0000,0000,,有身份
Dialogue: 0,0:28:50.77,0:28:51.67,*Default,NTP,0000,0000,0000,,此外
Dialogue: 0,0:28:51.67,0:28:55.07,*Default,NTP,0000,0000,0000,,到由其元素组成的各个部分
Dialogue: 0,0:28:56.33,0:28:57.20,*Default,NTP,0000,0000,0000,,所以一个列表可能
Dialogue: 0,0:28:57.20,0:29:00.47,*Default,NTP,0000,0000,0000,,即使我们更改其内容，仍然是相同的列表
Dialogue: 0,0:29:02.27,0:29:04.73,*Default,NTP,0000,0000,0000,,所以如果我必须限制为 10
Dialogue: 0,0:29:05.50,0:29:08.20,*Default,NTP,0000,0000,0000,,然后 b 绑定到同一个列表 a
Dialogue: 0,0:29:09.33,0:29:10.27,*Default,NTP,0000,0000,0000,,那么这里发生了什么
Dialogue: 0,0:29:10.27,0:29:13.20,*Default,NTP,0000,0000,0000,,a 被评估为包含 10 的列表
Dialogue: 0,0:29:13.20,0:29:15.20,*Default,NTP,0000,0000,0000,,然后 b 绑定到该列表
Dialogue: 0,0:29:16.07,0:29:17.93,*Default,NTP,0000,0000,0000,,a 等于 b
Dialogue: 0,0:29:20.07,0:29:22.37,*Default,NTP,0000,0000,0000,,如果我伸出援手 20
Dialogue: 0,0:29:22.90,0:29:24.60,*Default,NTP,0000,0000,0000,,a 仍然等于 b
Dialogue: 0,0:29:24.60,0:29:28.00,*Default,NTP,0000,0000,0000,,因为 a 是十点二十，b 是十点二十
Dialogue: 0,0:29:28.80,0:29:31.80,*Default,NTP,0000,0000,0000,,b 和 a 绑定到同一个列表
Dialogue: 0,0:29:32.30,0:29:34.57,*Default,NTP,0000,0000,0000,,即使我们改变了它的内容
Dialogue: 0,0:29:36.30,0:29:38.07,*Default,NTP,0000,0000,0000,,然而我们可以有
Dialogue: 0,0:29:38.07,0:29:41.20,*Default,NTP,0000,0000,0000,,两个列表恰好具有相同的内容
Dialogue: 0,0:29:41.27,0:29:44.00,*Default,NTP,0000,0000,0000,,但身份不同
Dialogue: 0,0:29:44.10,0:29:45.57,*Default,NTP,0000,0000,0000,,他们不一样
Dialogue: 0,0:29:45.90,0:29:47.67,*Default,NTP,0000,0000,0000,,他们只是可能是平等的
Dialogue: 0,0:29:48.33,0:29:52.27,*Default,NTP,0000,0000,0000,,所以如果我说 a 是列表 10 而 b 是另一个列表 10
Dialogue: 0,0:29:53.80,0:29:55.87,*Default,NTP,0000,0000,0000,,a 等于 b 为真
Dialogue: 0,0:29:56.53,0:29:58.97,*Default,NTP,0000,0000,0000,,到目前为止并没有太大不同
Dialogue: 0,0:29:59.70,0:30:01.93,*Default,NTP,0000,0000,0000,,但如果我将 20 附加到 b
Dialogue: 0,0:30:02.30,0:30:05.77,*Default,NTP,0000,0000,0000,,a 现在是 10 b 是 10 昏迷 20
Dialogue: 0,0:30:05.90,0:30:08.47,*Default,NTP,0000,0000,0000,,这两个不再相等
Dialogue: 0,0:30:09.27,0:30:10.60,*Default,NTP,0000,0000,0000,,他们之前是平等的
Dialogue: 0,0:30:10.90,0:30:13.70,*Default,NTP,0000,0000,0000,,我们从未将 a 或 b 重新分配给任何东西
Dialogue: 0,0:30:13.70,0:30:17.13,*Default,NTP,0000,0000,0000,,所以不存在 a equals this 或 b equals that 语句
Dialogue: 0,0:30:17.20,0:30:19.00,*Default,NTP,0000,0000,0000,,但只是这些
Dialogue: 0,0:30:19.00,0:30:20.77,*Default,NTP,0000,0000,0000,,之前碰巧有相同的内容
Dialogue: 0,0:30:20.77,0:30:21.77,*Default,NTP,0000,0000,0000,,所以他们是平等的
Dialogue: 0,0:30:21.90,0:30:23.33,*Default,NTP,0000,0000,0000,,但他们从来都不一样
Dialogue: 0,0:30:23.77,0:30:26.47,*Default,NTP,0000,0000,0000,,所以当一个改变时另一个没有改变
Dialogue: 0,0:30:28.73,0:30:29.47,*Default,NTP,0000,0000,0000,,现在
Dialogue: 0,0:30:29.47,0:30:31.90,*Default,NTP,0000,0000,0000,,你如何判断两个事物是否相同
Dialogue: 0,0:30:32.33,0:30:34.87,*Default,NTP,0000,0000,0000,,嗯，有一种叫做身份运算符的东西
Dialogue: 0,0:30:34.87,0:30:36.47,*Default,NTP,0000,0000,0000,,看起来这个词是
Dialogue: 0,0:30:36.97,0:30:41.07,*Default,NTP,0000,0000,0000,,is 的反义词称为 is not
Dialogue: 0,0:30:41.93,0:30:45.00,*Default,NTP,0000,0000,0000,,所以一个表达式是另一个表达式如果
Dialogue: 0,0:30:45.60,0:30:49.70,*Default,NTP,0000,0000,0000,,这两个表达式评估同一个对象
Dialogue: 0,0:30:50.87,0:30:52.10,*Default,NTP,0000,0000,0000,,平等
Dialogue: 0,0:30:52.50,0:30:57.57,*Default,NTP,0000,0000,0000,,如果两个表达式计算结果相等，则为 true
Dialogue: 0,0:30:57.67,0:30:58.47,*Default,NTP,0000,0000,0000,,所以任何列表
Dialogue: 0,0:30:58.47,0:31:01.50,*Default,NTP,0000,0000,0000,,包含 10 等于任何其他包含 10 的列表
Dialogue: 0,0:31:01.60,0:31:04.13,*Default,NTP,0000,0000,0000,,但它们可能是也可能不是同一个列表
Dialogue: 0,0:31:05.27,0:31:07.67,*Default,NTP,0000,0000,0000,,相同的对象总是具有相同的值
Dialogue: 0,0:31:08.47,0:31:09.97,*Default,NTP,0000,0000,0000,,但反之则不然
Dialogue: 0,0:31:13.13,0:31:16.20,*Default,NTP,0000,0000,0000,,所以 10 永远是 10
Dialogue: 0,0:31:18.60,0:31:20.17,*Default,NTP,0000,0000,0000,,如果 a 是 10
Dialogue: 0,0:31:20.70,0:31:23.73,*Default,NTP,0000,0000,0000,,b 是一个包含 10 的列表
Dialogue: 0,0:31:24.50,0:31:27.07,*Default,NTP,0000,0000,0000,,那么 amb 将相等
Dialogue: 0,0:31:27.37,0:31:29.80,*Default,NTP,0000,0000,0000,,但它们不会是同一个列表
Dialogue: 0,0:31:30.27,0:31:32.20,*Default,NTP,0000,0000,0000,,当两件事不相同时
Dialogue: 0,0:31:32.40,0:31:33.80,*Default,NTP,0000,0000,0000,,更改为一
Dialogue: 0,0:31:36.70,0:31:38.13,*Default,NTP,0000,0000,0000,,不影响对方
Dialogue: 0,0:31:40.67,0:31:44.80,*Default,NTP,0000,0000,0000,,但 c 绑定到 b 意味着 c 确实是 b
Dialogue: 0,0:31:45.10,0:31:47.47,*Default,NTP,0000,0000,0000,,它们只是同一事物的两个不同名称
Dialogue: 0,0:31:48.77,0:31:51.10,*Default,NTP,0000,0000,0000,,所以如果我从 c 中取出一些东西
Dialogue: 0,0:31:52.30,0:31:54.40,*Default,NTP,0000,0000,0000,,我也把它从b上弹出来了
Dialogue: 0,0:31:54.73,0:31:56.67,*Default,NTP,0000,0000,0000,,但一切都没有改变
Dialogue: 0,0:32:01.10,0:32:04.33,*Default,NTP,0000,0000,0000,,现在少了一件需要注意的事情
Dialogue: 0,0:32:04.70,0:32:09.67,*Default,NTP,0000,0000,0000,,多个默认参数非常危险
Dialogue: 0,0:32:09.87,0:32:11.67,*Default,NTP,0000,0000,0000,,所以一旦你了解了突变
Dialogue: 0,0:32:11.67,0:32:13.77,*Default,NTP,0000,0000,0000,,你必须了解它的风险
Dialogue: 0,0:32:14.67,0:32:17.50,*Default,NTP,0000,0000,0000,,定义函数时的默认参数值
Dialogue: 0,0:32:17.57,0:32:19.33,*Default,NTP,0000,0000,0000,,是该函数值的一部分
Dialogue: 0,0:32:19.73,0:32:22.97,*Default,NTP,0000,0000,0000,,每次调用该函数时不会重新生成
Dialogue: 0,0:32:24.07,0:32:26.40,*Default,NTP,0000,0000,0000,,假设我定义了一个函数 f
Dialogue: 0,0:32:26.60,0:32:28.47,*Default,NTP,0000,0000,0000,,这需要一些序列 s
Dialogue: 0,0:32:28.47,0:32:30.87,*Default,NTP,0000,0000,0000,,默认情况下它采用空序列
Dialogue: 0,0:32:31.33,0:32:33.47,*Default,NTP,0000,0000,0000,,它的作用是在上面附加五个
Dialogue: 0,0:32:33.47,0:32:34.93,*Default,NTP,0000,0000,0000,,然后返回长度
Dialogue: 0,0:32:35.10,0:32:39.17,*Default,NTP,0000,0000,0000,,附加了五个之后的序列 s
Dialogue: 0,0:32:40.13,0:32:41.00,*Default,NTP,0000,0000,0000,,所以你打电话给f
Dialogue: 0,0:32:41.70,0:32:43.57,*Default,NTP,0000,0000,0000,,它使用默认参数值
Dialogue: 0,0:32:43.57,0:32:44.50,*Default,NTP,0000,0000,0000,,这是一个空列表
Dialogue: 0,0:32:44.50,0:32:45.87,*Default,NTP,0000,0000,0000,,取决于五个
Dialogue: 0,0:32:45.97,0:32:47.67,*Default,NTP,0000,0000,0000,,并返回该列表的长度
Dialogue: 0,0:32:47.67,0:32:48.90,*Default,NTP,0000,0000,0000,,其中包含五个
Dialogue: 0,0:32:49.10,0:32:50.30,*Default,NTP,0000,0000,0000,,你得到一个
Dialogue: 0,0:32:51.70,0:32:53.53,*Default,NTP,0000,0000,0000,,如果你再次调用它，你会得到两个
Dialogue: 0,0:32:54.50,0:32:56.40,*Default,NTP,0000,0000,0000,,如果你再叫一次，你会得到三个
Dialogue: 0,0:32:58.27,0:32:59.53,*Default,NTP,0000,0000,0000,,那是因为
Dialogue: 0,0:33:00.27,0:33:01.50,*Default,NTP,0000,0000,0000,,每次你打电话的时候
Dialogue: 0,0:33:01.50,0:33:03.70,*Default,NTP,0000,0000,0000,,s 将绑定到相同的值
Dialogue: 0,0:33:04.17,0:33:06.00,*Default,NTP,0000,0000,0000,,这就是 defeld 论证的工作原理
Dialogue: 0,0:33:07.00,0:33:10.90,*Default,NTP,0000,0000,0000,,如果默认参数值是可变的
Dialogue: 0,0:33:11.13,0:33:14.40,*Default,NTP,0000,0000,0000,,然后你在函数中间改变它
Dialogue: 0,0:33:14.97,0:33:16.37,*Default,NTP,0000,0000,0000,,然后那个改变
Dialogue: 0,0:33:16.53,0:33:18.07,*Default,NTP,0000,0000,0000,,仍然会在附近
Dialogue: 0,0:33:18.07,0:33:19.67,*Default,NTP,0000,0000,0000,,下次调用该函数时
Dialogue: 0,0:33:19.67,0:33:22.00,*Default,NTP,0000,0000,0000,,你会得到相同的默认参数值
Dialogue: 0,0:33:22.93,0:33:25.33,*Default,NTP,0000,0000,0000,,所以看起来很简单的东西
Dialogue: 0,0:33:25.60,0:33:28.13,*Default,NTP,0000,0000,0000,,实际上会有奇怪的行为
Dialogue: 0,0:33:28.40,0:33:31.13,*Default,NTP,0000,0000,0000,,每次调用该函数时都会有所不同
Dialogue: 0,0:33:31.90,0:33:34.30,*Default,NTP,0000,0000,0000,,这绝对是需要注意的事情
Dialogue: 0,0:33:37.33,0:33:40.80,*Default,NTP,0000,0000,0000,,在第一次调用中 s 绑定到一个空列表
Dialogue: 0,0:33:41.93,0:33:45.60,*Default,NTP,0000,0000,0000,,然后该列表被突变为包含三个
Dialogue: 0,0:33:47.17,0:33:48.70,*Default,NTP,0000,0000,0000,,下次我打电话给f时
Dialogue: 0,0:33:49.40,0:33:51.47,*Default,NTP,0000,0000,0000,,s 绑定到同一个列表
Dialogue: 0,0:33:52.10,0:33:54.77,*Default,NTP,0000,0000,0000,,再次变异以添加另外三个
Dialogue: 0,0:33:56.10,0:33:58.77,*Default,NTP,0000,0000,0000,,第三次你得到第三个三
Dialogue: 0,0:33:59.37,0:34:00.27,*Default,NTP,0000,0000,0000,,就在那里
Dialogue: 0,0:34:00.47,0:34:02.93,*Default,NTP,0000,0000,0000,,这就是为什么我们每次都会得到不同的返回值
Dialogue: 0,0:34:02.93,0:34:04.20,*Default,NTP,0000,0000,0000,,一比二比三
Dialogue: 0,0:34:07.27,0:34:12.10,*Default,NTP,0000,0000,0000,,让我们回顾一下列表突变和环境图
Dialogue: 0,0:34:12.97,0:34:14.93,*Default,NTP,0000,0000,0000,,名称可以引用列表
Dialogue: 0,0:34:14.97,0:34:17.00,*Default,NTP,0000,0000,0000,,和赋值语句可以改变
Dialogue: 0,0:34:17.00,0:34:19.37,*Default,NTP,0000,0000,0000,,哪些名称指哪些列表
Dialogue: 0,0:34:19.40,0:34:22.90,*Default,NTP,0000,0000,0000,,另外列表的内容可以改变
Dialogue: 0,0:34:22.97,0:34:25.37,*Default,NTP,0000,0000,0000,,列表的长度可以增长或缩小
Dialogue: 0,0:34:25.73,0:34:26.47,*Default,NTP,0000,0000,0000,,甚至
Dialogue: 0,0:34:26.47,0:34:29.80,*Default,NTP,0000,0000,0000,,如果引用这些列表的名称没有改变
Dialogue: 0,0:34:30.30,0:34:33.50,*Default,NTP,0000,0000,0000,,环境图有助于跟踪所有这些
Dialogue: 0,0:34:33.50,0:34:35.40,*Default,NTP,0000,0000,0000,,随事而变
Dialogue: 0,0:34:35.40,0:34:38.17,*Default,NTP,0000,0000,0000,,在程序执行的整个过程中
Dialogue: 0,0:34:38.80,0:34:40.87,*Default,NTP,0000,0000,0000,,让我们看一个例子
Dialogue: 0,0:34:40.87,0:34:43.27,*Default,NTP,0000,0000,0000,,其中 s 绑定到列表 2 3
Dialogue: 0,0:34:43.53,0:34:45.73,*Default,NTP,0000,0000,0000,,t 绑定到列表 5 6
Dialogue: 0,0:34:45.80,0:34:49.33,*Default,NTP,0000,0000,0000,,我们执行各种变异操作
Dialogue: 0,0:34:49.40,0:34:52.70,*Default,NTP,0000,0000,0000,,有一些示例调用并显示结果
Dialogue: 0,0:34:52.87,0:34:55.10,*Default,NTP,0000,0000,0000,,我们将从追加操作开始
Dialogue: 0,0:34:55.10,0:34:58.37,*Default,NTP,0000,0000,0000,,它将一个元素添加到列表的末尾
Dialogue: 0,0:34:59.17,0:35:02.87,*Default,NTP,0000,0000,0000,,所以如果我将 t 附加到列表 s 中
Dialogue: 0,0:35:03.07,0:35:04.40,*Default,NTP,0000,0000,0000,,这就是发生的事情
Dialogue: 0,0:35:04.47,0:35:06.40,*Default,NTP,0000,0000,0000,,我从一个全局框架开始
Dialogue: 0,0:35:06.40,0:35:08.47,*Default,NTP,0000,0000,0000,,s 绑定到列表二三
Dialogue: 0,0:35:08.60,0:35:10.73,*Default,NTP,0000,0000,0000,,和 t 绑定到列表五六
Dialogue: 0,0:35:11.20,0:35:12.07,*Default,NTP,0000,0000,0000,,s 点一支笔
Dialogue: 0,0:35:12.07,0:35:16.40,*Default,NTP,0000,0000,0000,,t 在 s 的末尾添加一个元素来引用
Dialogue: 0,0:35:16.70,0:35:19.13,*Default,NTP,0000,0000,0000,,到这个包含五个和六个的列表
Dialogue: 0,0:35:19.87,0:35:22.17,*Default,NTP,0000,0000,0000,,重要的是这个箭头不指向
Dialogue: 0,0:35:22.17,0:35:23.47,*Default,NTP,0000,0000,0000,,名字t
Dialogue: 0,0:35:23.97,0:35:26.20,*Default,NTP,0000,0000,0000,,它必须包含一个值
Dialogue: 0,0:35:26.77,0:35:30.10,*Default,NTP,0000,0000,0000,,这是您在评估名称时获得的值
Dialogue: 0,0:35:30.10,0:35:33.10,*Default,NTP,0000,0000,0000,,t 是包含 5 和 6 的列表
Dialogue: 0,0:35:33.93,0:35:36.50,*Default,NTP,0000,0000,0000,,现在当我将名称 t 分配给其他东西时
Dialogue: 0,0:35:36.50,0:35:39.87,*Default,NTP,0000,0000,0000,,就像零一样，这意味着 t 必然为零
Dialogue: 0,0:35:39.87,0:35:42.57,*Default,NTP,0000,0000,0000,,它不再受列表五六的约束
Dialogue: 0,0:35:42.73,0:35:44.67,*Default,NTP,0000,0000,0000,,但这并不影响
Dialogue: 0,0:35:44.97,0:35:48.33,*Default,NTP,0000,0000,0000,,s 现在是二三和列表五六
Dialogue: 0,0:35:48.37,0:35:50.80,*Default,NTP,0000,0000,0000,,这是一个三元素列表，其中包含两个
Dialogue: 0,0:35:50.80,0:35:52.07,*Default,NTP,0000,0000,0000,,列表中的数字
Dialogue: 0,0:35:52.27,0:35:53.93,*Default,NTP,0000,0000,0000,,并且 t 必然为零
Dialogue: 0,0:35:55.53,0:35:58.90,*Default,NTP,0000,0000,0000,,好吧，让我们重新开始看看扩展
Dialogue: 0,0:35:59.50,0:36:03.60,*Default,NTP,0000,0000,0000,,扩展将一个列表中的所有元素添加到另一个列表中
Dialogue: 0,0:36:04.10,0:36:06.47,*Default,NTP,0000,0000,0000,,所以 s 点延伸 t
Dialogue: 0,0:36:06.73,0:36:11.07,*Default,NTP,0000,0000,0000,,将元素五和六添加到 s 的末尾
Dialogue: 0,0:36:11.93,0:36:15.17,*Default,NTP,0000,0000,0000,,现在如果我将 t 指定为 1 等于 0
Dialogue: 0,0:36:15.37,0:36:18.67,*Default,NTP,0000,0000,0000,,我将把这个元素更改为零
Dialogue: 0,0:36:18.70,0:36:21.07,*Default,NTP,0000,0000,0000,,但这不会影响 s 中的内容
Dialogue: 0,0:36:21.07,0:36:23.90,*Default,NTP,0000,0000,0000,,因为 s 只是包含一堆数字
Dialogue: 0,0:36:24.70,0:36:26.20,*Default,NTP,0000,0000,0000,,让我们重新开始吧
Dialogue: 0,0:36:26.20,0:36:29.27,*Default,NTP,0000,0000,0000,,看看加法和切片
Dialogue: 0,0:36:30.07,0:36:33.87,*Default,NTP,0000,0000,0000,,两个列表相加创建一个新列表
Dialogue: 0,0:36:33.87,0:36:36.33,*Default,NTP,0000,0000,0000,,切片创建一个新列表
Dialogue: 0,0:36:36.77,0:36:39.33,*Default,NTP,0000,0000,0000,,这些列表包含元素
Dialogue: 0,0:36:39.33,0:36:42.67,*Default,NTP,0000,0000,0000,,添加或切片的列表的数量
Dialogue: 0,0:36:43.33,0:36:45.47,*Default,NTP,0000,0000,0000,,在这里我们将做一个更长的例子
Dialogue: 0,0:36:46.70,0:36:51.40,*Default,NTP,0000,0000,0000,,我们将把 a 赋给 s 加上一个包含 t 的列表
Dialogue: 0,0:36:51.57,0:36:54.70,*Default,NTP,0000,0000,0000,,我们将把 b 分配给 a 的一个切片
Dialogue: 0,0:36:54.80,0:36:57.47,*Default,NTP,0000,0000,0000,,然后我们对a和b进行一些更改
Dialogue: 0,0:36:57.57,0:36:59.73,*Default,NTP,0000,0000,0000,,看看 s 和 t 会发生什么
Dialogue: 0,0:37:01.17,0:37:02.47,*Default,NTP,0000,0000,0000,,从顶部开始
Dialogue: 0,0:37:02.70,0:37:07.40,*Default,NTP,0000,0000,0000,,如果我将 s 和 t 加在一起，我会得到一个列表 3 5 6
Dialogue: 0,0:37:07.57,0:37:09.00,*Default,NTP,0000,0000,0000,,但这是不同的
Dialogue: 0,0:37:09.30,0:37:13.53,*Default,NTP,0000,0000,0000,,这表示构建一个包含 t 的单元素列表
Dialogue: 0,0:37:13.87,0:37:15.67,*Default,NTP,0000,0000,0000,,所以让我们继续吧
Dialogue: 0,0:37:15.80,0:37:17.93,*Default,NTP,0000,0000,0000,,即使我们不打算给它命名
Dialogue: 0,0:37:18.13,0:37:22.33,*Default,NTP,0000,0000,0000,,相反，我们将添加这个列表和这个列表
Dialogue: 0,0:37:22.57,0:37:25.97,*Default,NTP,0000,0000,0000,,构建一个包含元素二的新列表
Dialogue: 0,0:37:26.33,0:37:30.00,*Default,NTP,0000,0000,0000,,三和清单五六
Dialogue: 0,0:37:30.93,0:37:34.30,*Default,NTP,0000,0000,0000,,所以这个表达式 s 的结果加上列表 t
Dialogue: 0,0:37:34.60,0:37:39.30,*Default,NTP,0000,0000,0000,,用两个三和一个列表构建一个三元素列表
Dialogue: 0,0:37:39.57,0:37:41.30,*Default,NTP,0000,0000,0000,,我们给它起个名字
Dialogue: 0,0:37:42.00,0:37:43.37,*Default,NTP,0000,0000,0000,,在我们继续之前
Dialogue: 0,0:37:43.37,0:37:45.37,*Default,NTP,0000,0000,0000,,我们或许应该弄清楚该怎么做
Dialogue: 0,0:37:45.37,0:37:46.70,*Default,NTP,0000,0000,0000,,与这个浮动
Dialogue: 0,0:37:46.77,0:37:49.20,*Default,NTP,0000,0000,0000,,一个没有名称的元素列表
Dialogue: 0,0:37:49.97,0:37:51.30,*Default,NTP,0000,0000,0000,,你可以把它留在那里
Dialogue: 0,0:37:51.40,0:37:55.73,*Default,NTP,0000,0000,0000,,您也可以删除它，因为无法访问它
Dialogue: 0,0:37:55.77,0:38:00.53,*Default,NTP,0000,0000,0000,,它是在评估期间创建的，但从未命名
Dialogue: 0,0:38:01.37,0:38:03.27,*Default,NTP,0000,0000,0000,,好的，在第二行下
Dialogue: 0,0:38:03.67,0:38:05.67,*Default,NTP,0000,0000,0000,,b 是 a 的切片
Dialogue: 0,0:38:06.13,0:38:08.97,*Default,NTP,0000,0000,0000,,从第一个元素开始一直到最后
Dialogue: 0,0:38:09.10,0:38:12.17,*Default,NTP,0000,0000,0000,,创建一个包含三个的新列表
Dialogue: 0,0:38:12.17,0:38:13.97,*Default,NTP,0000,0000,0000,,和名单五六
Dialogue: 0,0:38:15.17,0:38:16.87,*Default,NTP,0000,0000,0000,,现在我们可以做一些改变
Dialogue: 0,0:38:16.97,0:38:19.10,*Default,NTP,0000,0000,0000,,a 的元素一是九
Dialogue: 0,0:38:19.27,0:38:21.40,*Default,NTP,0000,0000,0000,,这是元素一
Dialogue: 0,0:38:21.47,0:38:22.87,*Default,NTP,0000,0000,0000,,变为九
Dialogue: 0,0:38:23.77,0:38:27.30,*Default,NTP,0000,0000,0000,,b 的元素 one 的元素 1 为零
Dialogue: 0,0:38:27.53,0:38:31.33,*Default,NTP,0000,0000,0000,,这是 b 这是 b 的元素一
Dialogue: 0,0:38:31.53,0:38:34.37,*Default,NTP,0000,0000,0000,,这是 b 的元素 one 的元素 1
Dialogue: 0,0:38:34.37,0:38:36.13,*Default,NTP,0000,0000,0000,,我们将其更改为零
Dialogue: 0,0:38:36.20,0:38:37.77,*Default,NTP,0000,0000,0000,,这实际上影响了t
Dialogue: 0,0:38:38.67,0:38:41.97,*Default,NTP,0000,0000,0000,,所以现在的结果是 s 是一个列表二三
Dialogue: 0,0:38:42.13,0:38:44.07,*Default,NTP,0000,0000,0000,,t 是一个列表 5 0
Dialogue: 0,0:38:44.20,0:38:47.40,*Default,NTP,0000,0000,0000,,a 是一个包含 5 0 的二九列表
Dialogue: 0,0:38:47.40,0:38:50.73,*Default,NTP,0000,0000,0000,,b 是包含 5 0 的列表 3
Dialogue: 0,0:38:51.80,0:38:55.87,*Default,NTP,0000,0000,0000,,事实上这个加法和这个切片
Dialogue: 0,0:38:56.00,0:38:57.90,*Default,NTP,0000,0000,0000,,全部包含t
Dialogue: 0,0:38:58.53,0:39:01.30,*Default,NTP,0000,0000,0000,,意味着改变 t
Dialogue: 0,0:39:01.50,0:39:03.47,*Default,NTP,0000,0000,0000,,影响他们三个
Dialogue: 0,0:39:03.47,0:39:06.10,*Default,NTP,0000,0000,0000,,因此我们看到三个不同的零
Dialogue: 0,0:39:06.13,0:39:09.50,*Default,NTP,0000,0000,0000,,全部引用列表中的相同元素
Dialogue: 0,0:39:10.33,0:39:11.73,*Default,NTP,0000,0000,0000,,好吧，让我们重新开始
Dialogue: 0,0:39:12.33,0:39:14.57,*Default,NTP,0000,0000,0000,,list 函数创建一个新列表
Dialogue: 0,0:39:14.57,0:39:16.57,*Default,NTP,0000,0000,0000,,包含现有元素
Dialogue: 0,0:39:16.80,0:39:19.27,*Default,NTP,0000,0000,0000,,所以如果我说 t 等于列表 s
Dialogue: 0,0:39:19.27,0:39:22.07,*Default,NTP,0000,0000,0000,,我得到一个包含两个和三个的新列表
Dialogue: 0,0:39:22.77,0:39:25.60,*Default,NTP,0000,0000,0000,,取代了 t 过去所指的内容
Dialogue: 0,0:39:26.10,0:39:29.20,*Default,NTP,0000,0000,0000,,如果我将 s 元素设置为 1 等于 0
Dialogue: 0,0:39:29.37,0:39:32.20,*Default,NTP,0000,0000,0000,,然后我改变 s 但我不改变 t
Dialogue: 0,0:39:32.40,0:39:34.07,*Default,NTP,0000,0000,0000,,因为我们复制了它
Dialogue: 0,0:39:34.50,0:39:36.93,*Default,NTP,0000,0000,0000,,所以结果是 s 是零中的二
Dialogue: 0,0:39:36.97,0:39:38.57,*Default,NTP,0000,0000,0000,,t 是三分之二
Dialogue: 0,0:39:39.40,0:39:43.00,*Default,NTP,0000,0000,0000,,这里以切片分配为例
Dialogue: 0,0:39:43.40,0:39:46.30,*Default,NTP,0000,0000,0000,,如果 s 是二和三 t 是五和六
Dialogue: 0,0:39:46.57,0:39:51.67,*Default,NTP,0000,0000,0000,,我分配给列表 s 从零到零等于 t
Dialogue: 0,0:39:52.27,0:39:54.20,*Default,NTP,0000,0000,0000,,我就在这里说
Dialogue: 0,0:39:54.20,0:39:56.13,*Default,NTP,0000,0000,0000,,我应该拥有 t 的所有元素
Dialogue: 0,0:39:56.67,0:39:58.87,*Default,NTP,0000,0000,0000,,因为这个切片的长度为零
Dialogue: 0,0:39:58.93,0:40:00.77,*Default,NTP,0000,0000,0000,,这个列表的长度为二
Dialogue: 0,0:40:00.80,0:40:03.33,*Default,NTP,0000,0000,0000,,我不得不把其他一切都转移过来
Dialogue: 0,0:40:04.10,0:40:07.07,*Default,NTP,0000,0000,0000,,从三层开始进行切片分配
Dialogue: 0,0:40:07.10,0:40:10.07,*Default,NTP,0000,0000,0000,,意味着这个值将会改变
Dialogue: 0,0:40:10.20,0:40:13.27,*Default,NTP,0000,0000,0000,,但因为我用一个替换了长度为一的切片
Dialogue: 0,0:40:13.27,0:40:14.57,*Default,NTP,0000,0000,0000,,长度为二的列表
Dialogue: 0,0:40:14.67,0:40:17.97,*Default,NTP,0000,0000,0000,,我将元素五和六放在适当的位置
Dialogue: 0,0:40:18.77,0:40:22.60,*Default,NTP,0000,0000,0000,,现在 t 等于 0 会改变该值
Dialogue: 0,0:40:23.67,0:40:26.57,*Default,NTP,0000,0000,0000,,但它不会改变这个值，因为
Dialogue: 0,0:40:26.60,0:40:29.37,*Default,NTP,0000,0000,0000,,s 的最后一个元素只是一个数字
Dialogue: 0,0:40:30.50,0:40:36.00,*Default,NTP,0000,0000,0000,,这些是扩展或更改列表的方法
Dialogue: 0,0:40:36.40,0:40:39.10,*Default,NTP,0000,0000,0000,,也可以缩小列表
Dialogue: 0,0:40:39.47,0:40:41.97,*Default,NTP,0000,0000,0000,,我不会为这些绘制环境图
Dialogue: 0,0:40:41.97,0:40:44.07,*Default,NTP,0000,0000,0000,,因为我认为它们非常简单
Dialogue: 0,0:40:44.20,0:40:46.77,*Default,NTP,0000,0000,0000,,但让我们来看看操作
Dialogue: 0,0:40:47.00,0:40:49.93,*Default,NTP,0000,0000,0000,,pop 删除并返回最后一个元素
Dialogue: 0,0:40:50.70,0:40:54.07,*Default,NTP,0000,0000,0000,,所以如果我从 s 开始是二三，t 是五六
Dialogue: 0,0:40:54.13,0:40:55.97,*Default,NTP,0000,0000,0000,,然后将 t 赋值给 s
Dialogue: 0,0:40:56.20,0:40:58.60,*Default,NTP,0000,0000,0000,,删除三个的 pop
Dialogue: 0,0:40:59.40,0:41:02.37,*Default,NTP,0000,0000,0000,,并更改 t 以指代这三个
Dialogue: 0,0:41:02.90,0:41:06.10,*Default,NTP,0000,0000,0000,,所以结果是 s 是一个只包含两个的列表
Dialogue: 0,0:41:06.10,0:41:07.80,*Default,NTP,0000,0000,0000,,因为我已经把三个都去掉了
Dialogue: 0,0:41:08.10,0:41:11.33,*Default,NTP,0000,0000,0000,,现在三个是名称 t 的值
Dialogue: 0,0:41:11.40,0:41:13.77,*Default,NTP,0000,0000,0000,,我们已经忘记了五六名单
Dialogue: 0,0:41:15.10,0:41:18.90,*Default,NTP,0000,0000,0000,,从 ss 二三开始，t 是五六
Dialogue: 0,0:41:19.00,0:41:21.80,*Default,NTP,0000,0000,0000,,如果我删除会删除
Dialogue: 0,0:41:21.80,0:41:24.67,*Default,NTP,0000,0000,0000,,删除等于参数的第一个元素
Dialogue: 0,0:41:25.13,0:41:27.57,*Default,NTP,0000,0000,0000,,所以如果我写 t 点扩展 t
Dialogue: 0,0:41:27.73,0:41:30.73,*Default,NTP,0000,0000,0000,,这意味着 t 现在是 5 6 5 6
Dialogue: 0,0:41:30.87,0:41:35.40,*Default,NTP,0000,0000,0000,,如果我删除 5 个，那么我就只剩下 6 5 6
Dialogue: 0,0:41:35.90,0:41:37.53,*Default,NTP,0000,0000,0000,,s 根本没有改变
Dialogue: 0,0:41:38.30,0:41:39.13,*Default,NTP,0000,0000,0000,,最后
Dialogue: 0,0:41:39.13,0:41:42.00,*Default,NTP,0000,0000,0000,,让我们再做一个切片分配的例子
Dialogue: 0,0:41:42.87,0:41:44.10,*Default,NTP,0000,0000,0000,,这和那件事是一样的
Dialogue: 0,0:41:44.10,0:41:45.90,*Default,NTP,0000,0000,0000,,我们在上一张幻灯片中看到
Dialogue: 0,0:41:46.33,0:41:49.40,*Default,NTP,0000,0000,0000,,我们可以通过赋值从列表中删除元素
Dialogue: 0,0:41:49.70,0:41:51.77,*Default,NTP,0000,0000,0000,,空列表到切片
Dialogue: 0,0:41:52.70,0:41:56.87,*Default,NTP,0000,0000,0000,,所以从 0 到 1 的切片是空的
Dialogue: 0,0:41:57.00,0:42:00.60,*Default,NTP,0000,0000,0000,,意味着切片中的所有元素从 0 到 1
Dialogue: 0,0:42:00.60,0:42:04.87,*Default,NTP,0000,0000,0000,,被删除，只留下 s 中的三个
Dialogue: 0,0:42:05.53,0:42:08.47,*Default,NTP,0000,0000,0000,,事实上，如果我从零删除所有元素
Dialogue: 0,0:42:08.57,0:42:12.13,*Default,NTP,0000,0000,0000,,到其中两个，那么我就没有任何元素了
Dialogue: 0,0:42:14.00,0:42:15.40,*Default,NTP,0000,0000,0000,,所以让我们把它们放在一起
Dialogue: 0,0:42:15.50,0:42:18.70,*Default,NTP,0000,0000,0000,,几个更复杂的例子
Dialogue: 0,0:42:19.17,0:42:22.57,*Default,NTP,0000,0000,0000,,假设我将 t 分配给列表 1 2 3
Dialogue: 0,0:42:23.13,0:42:25.40,*Default,NTP,0000,0000,0000,,然后我执行切片分配
Dialogue: 0,0:42:25.47,0:42:27.40,*Default,NTP,0000,0000,0000,,其中从一到三的切片
Dialogue: 0,0:42:27.73,0:42:30.00,*Default,NTP,0000,0000,0000,,包括元素一和元素二
Dialogue: 0,0:42:30.57,0:42:33.93,*Default,NTP,0000,0000,0000,,被分配给包含 t 的列表
Dialogue: 0,0:42:34.77,0:42:37.37,*Default,NTP,0000,0000,0000,,所以让我们构建包含 t 的列表
Dialogue: 0,0:42:38.50,0:42:41.80,*Default,NTP,0000,0000,0000,,然后我们将两个和三个替换为
Dialogue: 0,0:42:42.10,0:42:44.30,*Default,NTP,0000,0000,0000,,该列表的内容
Dialogue: 0,0:42:44.57,0:42:49.60,*Default,NTP,0000,0000,0000,,这只是整个列表的参考 1 2 3
Dialogue: 0,0:42:50.30,0:42:54.40,*Default,NTP,0000,0000,0000,,所以我们将其替换为对此列表的引用
Dialogue: 0,0:42:55.80,0:42:58.53,*Default,NTP,0000,0000,0000,,现在我们有一个包含自身的列表
Dialogue: 0,0:42:58.77,0:43:00.93,*Default,NTP,0000,0000,0000,,这不会让 python 爆炸
Dialogue: 0,0:43:01.33,0:43:02.73,*Default,NTP,0000,0000,0000,,所以我们可以继续前进
Dialogue: 0,0:43:03.60,0:43:07.87,*Default,NTP,0000,0000,0000,,t 点扩展 t 表示将 t 的所有元素放入 t
Dialogue: 0,0:43:08.17,0:43:11.37,*Default,NTP,0000,0000,0000,,所有元素都是一，然后是对 t 的引用
Dialogue: 0,0:43:12.27,0:43:13.30,*Default,NTP,0000,0000,0000,,如果你打印出来
Dialogue: 0,0:43:13.30,0:43:15.30,*Default,NTP,0000,0000,0000,,你会得到看起来像这样的东西
Dialogue: 0,0:43:16.07,0:43:17.57,*Default,NTP,0000,0000,0000,,好吧，我们再做一个
Dialogue: 0,0:43:18.07,0:43:20.13,*Default,NTP,0000,0000,0000,,t 是 1 2 3 4
Dialogue: 0,0:43:20.30,0:43:23.13,*Default,NTP,0000,0000,0000,,包含两个元素的列表，这两个元素都是列表
Dialogue: 0,0:43:24.13,0:43:27.27,*Default,NTP,0000,0000,0000,,如果我看一下 t 0 就是这个列表
Dialogue: 0,0:43:27.33,0:43:31.07,*Default,NTP,0000,0000,0000,,我在上面附加了一片 t
Dialogue: 0,0:43:32.77,0:43:36.10,*Default,NTP,0000,0000,0000,,t 的切片从 1 到 2
Dialogue: 0,0:43:36.57,0:43:41.27,*Default,NTP,0000,0000,0000,,是一个仅包含三四的列表
Dialogue: 0,0:43:41.57,0:43:43.20,*Default,NTP,0000,0000,0000,,这就是我附加的内容
Dialogue: 0,0:43:43.33,0:43:46.37,*Default,NTP,0000,0000,0000,,所以我构建了该切片并附加它
Dialogue: 0,0:43:46.40,0:43:48.67,*Default,NTP,0000,0000,0000,,我已经构建了结果
Dialogue: 0,0:43:49.27,0:43:50.60,*Default,NTP,0000,0000,0000,,看起来像这样
Dialogue: 0,0:43:52.27,0:43:54.87,*Default,NTP,0000,0000,0000,,我认为直接从
Dialogue: 0,0:43:54.87,0:43:57.70,*Default,NTP,0000,0000,0000,,最终结果的代码
Dialogue: 0,0:43:57.77,0:44:00.37,*Default,NTP,0000,0000,0000,,无需绘制方框和指针图
Dialogue: 0,0:44:00.37,0:44:01.80,*Default,NTP,0000,0000,0000,,显示正在发生的事情
Dialogue: 0,0:44:02.10,0:44:03.53,*Default,NTP,0000,0000,0000,,所以我建议
Dialogue: 0,0:44:03.53,0:44:05.67,*Default,NTP,0000,0000,0000,,你对这个符号感到满意
Dialogue: 0,0:44:05.67,0:44:08.47,*Default,NTP,0000,0000,0000,,这样你就可以解决这类问题
