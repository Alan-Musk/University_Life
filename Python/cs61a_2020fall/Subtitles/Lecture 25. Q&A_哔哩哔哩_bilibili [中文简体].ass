[Script Info]
Title: Lecture 25. Q&A_哔哩哔哩_bilibili
ScriptType: v4.00+
Collisions: Reverse
PlayResX: 1280
PlayResY: 720
WrapStyle: 3
ScaledBorderAndShadow: yes
; ----------------------
; 本字幕由CC字幕助手自动转换
; 字幕来源https://www.bilibili.com/video/BV1s3411G7yM?p=61&vd_source=6ffca0aa1006734a4fba52f389036611
; 脚本地址https://greasyfork.org/scripts/378513
; 设置了字幕过长自动换行，但若字幕中没有空格换行将无效
; 字体大小依据720p 48号字体等比缩放
; 如显示不正常请尝试使用SRT格式

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Segoe UI,48,&H00FFFFFF,&HF0000000,&H00000000,&HF0000000,1,0,0,0,100,100,0,0.00,1,1,3,2,30,30,20,1

[Events]
Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.48,0:00:03.36,*Default,NTP,0000,0000,0000,,61a 讲座 25 问答
Dialogue: 0,0:00:03.36,0:00:04.88,*Default,NTP,0000,0000,0000,,没有人提出任何关于
Dialogue: 0,0:00:04.88,0:00:06.80,*Default,NTP,0000,0000,0000,,讲座，但有一些问题
Dialogue: 0,0:00:06.80,0:00:07.76,*Default,NTP,0000,0000,0000,,关于
Dialogue: 0,0:00:07.76,0:00:10.80,*Default,NTP,0000,0000,0000,,实验室作业和过去的考试问题
Dialogue: 0,0:00:10.80,0:00:12.32,*Default,NTP,0000,0000,0000,,约翰最喜欢的事情之一
Dialogue: 0,0:00:12.32,0:00:15.28,*Default,NTP,0000,0000,0000,,该视频是使用 vhs 磁带
Dialogue: 0,0:00:15.28,0:00:17.04,*Default,NTP,0000,0000,0000,,在会谈期间播放视频
Dialogue: 0,0:00:17.04,0:00:20.48,*Default,NTP,0000,0000,0000,,是不是那么棒，是的，这带来了
Dialogue: 0,0:00:20.48,0:00:21.20,*Default,NTP,0000,0000,0000,,我回来了
Dialogue: 0,0:00:21.20,0:00:22.64,*Default,NTP,0000,0000,0000,,顺便说一句，回到过去当我们
Dialogue: 0,0:00:22.64,0:00:24.64,*Default,NTP,0000,0000,0000,,曾经在我们大家面前做演示
Dialogue: 0,0:00:24.64,0:00:26.48,*Default,NTP,0000,0000,0000,,有笔记本电脑
Dialogue: 0,0:00:26.48,0:00:29.12,*Default,NTP,0000,0000,0000,,我们会为我们的照片拍照
Dialogue: 0,0:00:29.12,0:00:31.12,*Default,NTP,0000,0000,0000,,物理幻灯片
Dialogue: 0,0:00:31.12,0:00:35.36,*Default,NTP,0000,0000,0000,,嗯，将它们开发为 35 毫米幻灯片
Dialogue: 0,0:00:35.36,0:00:38.72,*Default,NTP,0000,0000,0000,,将它们装入转盘托盘中
Dialogue: 0,0:00:38.72,0:00:39.92,*Default,NTP,0000,0000,0000,,带着那个托盘的飞机
Dialogue: 0,0:00:39.92,0:00:41.60,*Default,NTP,0000,0000,0000,,出现在会议上，手上有一个人
Dialogue: 0,0:00:41.60,0:00:43.12,*Default,NTP,0000,0000,0000,,那个托盘，他们实际上会放
Dialogue: 0,0:00:43.12,0:00:44.24,*Default,NTP,0000,0000,0000,,那个托盘
Dialogue: 0,0:00:44.24,0:00:46.48,*Default,NTP,0000,0000,0000,,在旋转木马上，就像滑过它一样
Dialogue: 0,0:00:46.48,0:00:47.60,*Default,NTP,0000,0000,0000,,并且毫无疑问
Dialogue: 0,0:00:47.60,0:00:49.20,*Default,NTP,0000,0000,0000,,每一次谈话都至少有一个
Dialogue: 0,0:00:49.20,0:00:50.72,*Default,NTP,0000,0000,0000,,上下滑动并
Dialogue: 0,0:00:50.72,0:00:52.40,*Default,NTP,0000,0000,0000,,观众只是在做而不是在做
Dialogue: 0,0:00:52.40,0:00:54.40,*Default,NTP,0000,0000,0000,,这是想看幻灯片
Dialogue: 0,0:00:54.40,0:00:56.48,*Default,NTP,0000,0000,0000,,听起来很棒，好事
Dialogue: 0,0:00:56.48,0:00:57.60,*Default,NTP,0000,0000,0000,,顺便说一句
Dialogue: 0,0:00:57.60,0:00:59.68,*Default,NTP,0000,0000,0000,,你现在知道当你去的时候吗
Dialogue: 0,0:00:59.68,0:01:01.12,*Default,NTP,0000,0000,0000,,每个人都参加的会议和演讲
Dialogue: 0,0:01:01.12,0:01:03.12,*Default,NTP,0000,0000,0000,,他们的笔记本电脑和设备
Dialogue: 0,0:01:03.12,0:01:04.80,*Default,NTP,0000,0000,0000,,所以那时你无事可做
Dialogue: 0,0:01:04.80,0:01:06.40,*Default,NTP,0000,0000,0000,,只听该死的谈话
Dialogue: 0,0:01:06.40,0:01:09.12,*Default,NTP,0000,0000,0000,,现在很难引起人们的注意
Dialogue: 0,0:01:09.12,0:01:10.64,*Default,NTP,0000,0000,0000,,是的，现在在会议上每个人
Dialogue: 0,0:01:10.64,0:01:11.84,*Default,NTP,0000,0000,0000,,写下他们的演讲
Dialogue: 0,0:01:11.84,0:01:13.44,*Default,NTP,0000,0000,0000,,咬
Dialogue: 0,0:01:13.44,0:01:14.80,*Default,NTP,0000,0000,0000,,我喜欢坐在后面，这样我就可以
Dialogue: 0,0:01:14.80,0:01:16.56,*Default,NTP,0000,0000,0000,,看到其他人的谈话正在发挥作用
Dialogue: 0,0:01:16.56,0:01:17.20,*Default,NTP,0000,0000,0000,,我就像
Dialogue: 0,0:01:17.20,0:01:18.40,*Default,NTP,0000,0000,0000,,如果我们都在这儿做什么
Dialogue: 0,0:01:18.40,0:01:21.52,*Default,NTP,0000,0000,0000,,准确地研究我们的主题
Dialogue: 0,0:01:21.52,0:01:24.64,*Default,NTP,0000,0000,0000,,我怀念那些日子
Dialogue: 0,0:01:24.96,0:01:27.36,*Default,NTP,0000,0000,0000,,是的，我从一位博士后那里学了一堂课
Dialogue: 0,0:01:27.36,0:01:28.32,*Default,NTP,0000,0000,0000,,决定
Dialogue: 0,0:01:28.32,0:01:30.24,*Default,NTP,0000,0000,0000,,透明胶片更好，我认为
Dialogue: 0,0:01:30.24,0:01:31.36,*Default,NTP,0000,0000,0000,,他是对的
Dialogue: 0,0:01:31.36,0:01:33.84,*Default,NTP,0000,0000,0000,,就像他有一大堆印刷品
Dialogue: 0,0:01:33.84,0:01:34.48,*Default,NTP,0000,0000,0000,,出去
Dialogue: 0,0:01:34.48,0:01:36.08,*Default,NTP,0000,0000,0000,,他把每一张透明胶片都贴上
Dialogue: 0,0:01:36.08,0:01:37.68,*Default,NTP,0000,0000,0000,,投影仪，你知道他会
Dialogue: 0,0:01:37.68,0:01:39.60,*Default,NTP,0000,0000,0000,,当他讲课时骑在它上面
Dialogue: 0,0:01:39.60,0:01:40.08,*Default,NTP,0000,0000,0000,,非常
Dialogue: 0,0:01:40.08,0:01:42.24,*Default,NTP,0000,0000,0000,,很好，但我确实收到了一封惊慌失措的电子邮件
Dialogue: 0,0:01:42.24,0:01:44.00,*Default,NTP,0000,0000,0000,,整个部门曾经说过
Dialogue: 0,0:01:44.00,0:01:46.96,*Default,NTP,0000,0000,0000,,我的四英尺高的一叠透明胶片
Dialogue: 0,0:01:46.96,0:01:48.72,*Default,NTP,0000,0000,0000,,已经消失了，就像我的生活一样
Dialogue: 0,0:01:48.72,0:01:49.12,*Default,NTP,0000,0000,0000,,工作
Dialogue: 0,0:01:49.12,0:01:52.64,*Default,NTP,0000,0000,0000,,有人看到了吗，我遇到了问题
Dialogue: 0,0:01:52.64,0:01:54.72,*Default,NTP,0000,0000,0000,,我过去常去的地方
Dialogue: 0,0:01:54.72,0:01:56.48,*Default,NTP,0000,0000,0000,,每隔一段时间他们就会陷入
Dialogue: 0,0:01:56.48,0:01:58.40,*Default,NTP,0000,0000,0000,,盒子，我会放下盒子和
Dialogue: 0,0:01:58.40,0:02:00.32,*Default,NTP,0000,0000,0000,,幻灯片到处都是
Dialogue: 0,0:02:00.32,0:02:02.32,*Default,NTP,0000,0000,0000,,让我们看看是否有真正我最喜欢的
Dialogue: 0,0:02:02.32,0:02:03.36,*Default,NTP,0000,0000,0000,,我曾经做过的事
Dialogue: 0,0:02:03.36,0:02:05.36,*Default,NTP,0000,0000,0000,,这就是我在介绍我的时所做的
Dialogue: 0,0:02:05.36,0:02:06.72,*Default,NTP,0000,0000,0000,,达特茅斯的工作
Dialogue: 0,0:02:06.72,0:02:08.24,*Default,NTP,0000,0000,0000,,所以我们遇到了透明度问题
Dialogue: 0,0:02:08.24,0:02:09.84,*Default,NTP,0000,0000,0000,,这就是所谓的梯形校正
Dialogue: 0,0:02:09.84,0:02:11.84,*Default,NTP,0000,0000,0000,,所以如果投影仪非常接近
Dialogue: 0,0:02:11.84,0:02:13.60,*Default,NTP,0000,0000,0000,,嗯
Dialogue: 0,0:02:13.60,0:02:16.72,*Default,NTP,0000,0000,0000,,幻灯片的呃呃屏幕
Dialogue: 0,0:02:16.72,0:02:18.08,*Default,NTP,0000,0000,0000,,真的很扭曲，因为你是
Dialogue: 0,0:02:18.08,0:02:19.28,*Default,NTP,0000,0000,0000,,投影某种
Dialogue: 0,0:02:19.28,0:02:23.20,*Default,NTP,0000,0000,0000,,向上是的，所以我有三个版本
Dialogue: 0,0:02:23.20,0:02:25.20,*Default,NTP,0000,0000,0000,,我用打印的幻灯片
Dialogue: 0,0:02:25.20,0:02:26.96,*Default,NTP,0000,0000,0000,,逆畸变
Dialogue: 0,0:02:26.96,0:02:29.44,*Default,NTP,0000,0000,0000,,哦，所以当我把幻灯片放下时，它们
Dialogue: 0,0:02:29.44,0:02:31.12,*Default,NTP,0000,0000,0000,,人们几乎瘫痪了
Dialogue: 0,0:02:31.12,0:02:31.76,*Default,NTP,0000,0000,0000,,完全的
Dialogue: 0,0:02:31.76,0:02:33.68,*Default,NTP,0000,0000,0000,,顺便说一句，这就是过去的事情
Dialogue: 0,0:02:33.68,0:02:36.08,*Default,NTP,0000,0000,0000,,致力于高科技20年
Dialogue: 0,0:02:36.08,0:02:37.52,*Default,NTP,0000,0000,0000,,这肯定会给你找到工作
Dialogue: 0,0:02:37.52,0:02:39.76,*Default,NTP,0000,0000,0000,,太棒了，是的，这只是一个豪
Dialogue: 0,0:02:39.76,0:02:41.04,*Default,NTP,0000,0000,0000,,然后我有一张幻灯片
Dialogue: 0,0:02:41.04,0:02:43.12,*Default,NTP,0000,0000,0000,,显示它只是一个单应性哦
Dialogue: 0,0:02:43.12,0:02:44.48,*Default,NTP,0000,0000,0000,,就这样，如果你是的话
Dialogue: 0,0:02:44.48,0:02:46.08,*Default,NTP,0000,0000,0000,,如果你第一次在场
Dialogue: 0,0:02:46.08,0:02:47.76,*Default,NTP,0000,0000,0000,,我在演讲中谈到了许可证
Dialogue: 0,0:02:47.76,0:02:48.72,*Default,NTP,0000,0000,0000,,盘子
Dialogue: 0,0:02:48.72,0:02:50.64,*Default,NTP,0000,0000,0000,,这是获得许可的同一张地图
Dialogue: 0,0:02:50.64,0:02:52.96,*Default,NTP,0000,0000,0000,,盘子
Dialogue: 0,0:02:52.96,0:02:56.24,*Default,NTP,0000,0000,0000,,非常好，是的，好吧
Dialogue: 0,0:02:56.24,0:02:58.72,*Default,NTP,0000,0000,0000,,好的，我们现在在实验室九问题四
Dialogue: 0,0:02:58.72,0:03:00.56,*Default,NTP,0000,0000,0000,,你所在的二叉树的数量
Dialogue: 0,0:03:00.56,0:03:01.52,*Default,NTP,0000,0000,0000,,吸收
Dialogue: 0,0:03:01.52,0:03:03.04,*Default,NTP,0000,0000,0000,,它会告诉你有多少种不同的
Dialogue: 0,0:03:03.04,0:03:04.56,*Default,NTP,0000,0000,0000,,二叉树
Dialogue: 0,0:03:04.56,0:03:09.52,*Default,NTP,0000,0000,0000,,恰好有 n 个叶子
Dialogue: 0,0:03:09.68,0:03:12.08,*Default,NTP,0000,0000,0000,,和
Dialogue: 0,0:03:13.76,0:03:15.76,*Default,NTP,0000,0000,0000,,它指出有一个封闭的
Dialogue: 0,0:03:15.76,0:03:18.00,*Default,NTP,0000,0000,0000,,形成解决方案
Dialogue: 0,0:03:18.00,0:03:20.16,*Default,NTP,0000,0000,0000,,我认为括号不平衡
Dialogue: 0,0:03:20.16,0:03:22.00,*Default,NTP,0000,0000,0000,,不可接受，但是呃，就是这样
Dialogue: 0,0:03:22.00,0:03:24.16,*Default,NTP,0000,0000,0000,,封闭式解决方案
Dialogue: 0,0:03:24.16,0:03:28.88,*Default,NTP,0000,0000,0000,,让我们看看那是什么样子呃
Dialogue: 0,0:03:29.28,0:03:31.04,*Default,NTP,0000,0000,0000,,哦，它只是指向维基百科
Dialogue: 0,0:03:31.04,0:03:32.64,*Default,NTP,0000,0000,0000,,页面上写着“恰好有”
Dialogue: 0,0:03:32.64,0:03:34.56,*Default,NTP,0000,0000,0000,,这个东西的公式
Dialogue: 0,0:03:34.56,0:03:36.32,*Default,NTP,0000,0000,0000,,好吧，米琼恩说得对，就是这样
Dialogue: 0,0:03:36.32,0:03:37.68,*Default,NTP,0000,0000,0000,,不太可接受
Dialogue: 0,0:03:37.68,0:03:40.16,*Default,NTP,0000,0000,0000,,嗯，但这里的目标实际上不是
Dialogue: 0,0:03:40.16,0:03:41.92,*Default,NTP,0000,0000,0000,,只是
Dialogue: 0,0:03:41.92,0:03:45.04,*Default,NTP,0000,0000,0000,,用代码写下该方程
Dialogue: 0,0:03:45.04,0:03:46.48,*Default,NTP,0000,0000,0000,,但要想想这个
Dialogue: 0,0:03:46.48,0:03:48.56,*Default,NTP,0000,0000,0000,,递归地如此
Dialogue: 0,0:03:48.56,0:03:51.76,*Default,NTP,0000,0000,0000,,只是为了让您开始，如果您
Dialogue: 0,0:03:51.76,0:03:56.16,*Default,NTP,0000,0000,0000,,想要构建一个完整的二叉树
Dialogue: 0,0:03:56.16,0:03:59.76,*Default,NTP,0000,0000,0000,,三片叶子，你必须有
Dialogue: 0,0:03:59.76,0:04:00.08,*Default,NTP,0000,0000,0000,,一些
Dialogue: 0,0:04:00.08,0:04:02.40,*Default,NTP,0000,0000,0000,,左枝上的叶子数量和
Dialogue: 0,0:04:02.40,0:04:04.16,*Default,NTP,0000,0000,0000,,右边有一些叶子
Dialogue: 0,0:04:04.16,0:04:05.52,*Default,NTP,0000,0000,0000,,分支
Dialogue: 0,0:04:05.52,0:04:07.44,*Default,NTP,0000,0000,0000,,在这种情况下，左边有两个
Dialogue: 0,0:04:07.44,0:04:09.76,*Default,NTP,0000,0000,0000,,分支和右侧分支中的一个
Dialogue: 0,0:04:09.76,0:04:11.68,*Default,NTP,0000,0000,0000,,一旦你决定还剩下多少
Dialogue: 0,0:04:11.68,0:04:13.52,*Default,NTP,0000,0000,0000,,有多少是对的
Dialogue: 0,0:04:13.52,0:04:15.60,*Default,NTP,0000,0000,0000,,你可以只使用递归来计数
Dialogue: 0,0:04:15.60,0:04:17.52,*Default,NTP,0000,0000,0000,,完成左边的所有方法
Dialogue: 0,0:04:17.52,0:04:18.56,*Default,NTP,0000,0000,0000,,分支
Dialogue: 0,0:04:18.56,0:04:20.16,*Default,NTP,0000,0000,0000,,完成左分支的方法
Dialogue: 0,0:04:20.16,0:04:22.88,*Default,NTP,0000,0000,0000,,是全部
Dialogue: 0,0:04:24.72,0:04:27.04,*Default,NTP,0000,0000,0000,,有两个叶子的满二叉树
Dialogue: 0,0:04:27.04,0:04:28.32,*Default,NTP,0000,0000,0000,,因为我们决定有两个
Dialogue: 0,0:04:28.32,0:04:29.04,*Default,NTP,0000,0000,0000,,那里
Dialogue: 0,0:04:29.04,0:04:30.32,*Default,NTP,0000,0000,0000,,在右边的分支上就是
Dialogue: 0,0:04:30.32,0:04:31.76,*Default,NTP,0000,0000,0000,,完整活页夹树的数量
Dialogue: 0,0:04:31.76,0:04:33.20,*Default,NTP,0000,0000,0000,,叶子因为那里有一个所以
Dialogue: 0,0:04:33.20,0:04:35.20,*Default,NTP,0000,0000,0000,,两者都可以算作
Dialogue: 0,0:04:35.20,0:04:38.64,*Default,NTP,0000,0000,0000,,递归调用所以基本思想
Dialogue: 0,0:04:38.64,0:04:41.84,*Default,NTP,0000,0000,0000,,你决定吗？我要找三个
Dialogue: 0,0:04:41.84,0:04:42.48,*Default,NTP,0000,0000,0000,,树叶
Dialogue: 0,0:04:42.48,0:04:45.20,*Default,NTP,0000,0000,0000,,好的，所以它可能是呃零
Dialogue: 0,0:04:45.20,0:04:46.56,*Default,NTP,0000,0000,0000,,右边三个在左边
Dialogue: 0,0:04:46.56,0:04:49.04,*Default,NTP,0000,0000,0000,,右边一个 左边两个 依此类推
Dialogue: 0,0:04:49.04,0:04:50.08,*Default,NTP,0000,0000,0000,,等等
Dialogue: 0,0:04:50.08,0:04:52.08,*Default,NTP,0000,0000,0000,,然后一旦你确定了
Dialogue: 0,0:04:52.08,0:04:53.28,*Default,NTP,0000,0000,0000,,对于顶级水平那么一切
Dialogue: 0,0:04:53.28,0:04:56.08,*Default,NTP,0000,0000,0000,,else 只是递归
Dialogue: 0,0:04:56.08,0:04:57.52,*Default,NTP,0000,0000,0000,,然后我不知道该怎么做
Dialogue: 0,0:04:57.52,0:04:59.28,*Default,NTP,0000,0000,0000,,非递归地，它不是
Dialogue: 0,0:04:59.28,0:05:01.92,*Default,NTP,0000,0000,0000,,对我来说显而易见
Dialogue: 0,0:05:02.00,0:05:04.40,*Default,NTP,0000,0000,0000,,是的，我的意思是有这个公式，但是你
Dialogue: 0,0:05:04.40,0:05:05.04,*Default,NTP,0000,0000,0000,,知道是的但是
Dialogue: 0,0:05:05.04,0:05:08.16,*Default,NTP,0000,0000,0000,,除此之外，呃，这就是我的意思
Dialogue: 0,0:05:08.16,0:05:11.28,*Default,NTP,0000,0000,0000,,这看起来像是一个递归问题
Dialogue: 0,0:05:11.28,0:05:12.88,*Default,NTP,0000,0000,0000,,现在我的意思是我猜什么是有趣的
Dialogue: 0,0:05:12.88,0:05:14.72,*Default,NTP,0000,0000,0000,,这是一种不寻常的方式
Dialogue: 0,0:05:14.72,0:05:17.52,*Default,NTP,0000,0000,0000,,结合两个递归调用
Dialogue: 0,0:05:17.52,0:05:20.96,*Default,NTP,0000,0000,0000,,所以呃你知道我们可以讨论这个
Dialogue: 0,0:05:20.96,0:05:22.64,*Default,NTP,0000,0000,0000,,再多一分钟
Dialogue: 0,0:05:22.64,0:05:25.52,*Default,NTP,0000,0000,0000,,你知道，如果 n 是 1 那么
Dialogue: 0,0:05:25.52,0:05:27.28,*Default,NTP,0000,0000,0000,,我们只看到一棵树
Dialogue: 0,0:05:27.28,0:05:30.40,*Default,NTP,0000,0000,0000,,作为一个示范，但是
Dialogue: 0,0:05:30.40,0:05:33.20,*Default,NTP,0000,0000,0000,,否则让我们忘记模板
Dialogue: 0,0:05:33.20,0:05:34.64,*Default,NTP,0000,0000,0000,,一小会儿
Dialogue: 0,0:05:34.64,0:05:36.40,*Default,NTP,0000,0000,0000,,我们想要经历所有的方式
Dialogue: 0,0:05:36.40,0:05:37.68,*Default,NTP,0000,0000,0000,,划分
Dialogue: 0,0:05:37.68,0:05:41.04,*Default,NTP,0000,0000,0000,,所以呃对于
Dialogue: 0,0:05:41.04,0:05:42.40,*Default,NTP,0000,0000,0000,,我们必须至少有一个
Dialogue: 0,0:05:42.40,0:05:44.72,*Default,NTP,0000,0000,0000,,左边
Dialogue: 0,0:05:46.24,0:05:47.84,*Default,NTP,0000,0000,0000,,然后我们最多能拥有什么
Dialogue: 0,0:05:47.84,0:05:49.76,*Default,NTP,0000,0000,0000,,在左边，我们最多可以有 n
Dialogue: 0,0:05:49.76,0:05:53.68,*Default,NTP,0000,0000,0000,,减一，这样我们就进入范围 n
Dialogue: 0,0:05:53.68,0:05:56.64,*Default,NTP,0000,0000,0000,,还剩多少
Dialogue: 0,0:05:57.52,0:06:00.64,*Default,NTP,0000,0000,0000,,这是
Dialogue: 0,0:06:01.20,0:06:04.84,*Default,NTP,0000,0000,0000,,我想你需要一个 i 约翰或者
Dialogue: 0,0:06:04.84,0:06:06.88,*Default,NTP,0000,0000,0000,,某物
Dialogue: 0,0:06:06.88,0:06:09.04,*Default,NTP,0000,0000,0000,,然后右边有多少个
Dialogue: 0,0:06:09.04,0:06:11.60,*Default,NTP,0000,0000,0000,,其余的人
Dialogue: 0,0:06:11.76,0:06:15.20,*Default,NTP,0000,0000,0000,,然后我们可以弄清楚呃
Dialogue: 0,0:06:15.20,0:06:18.80,*Default,NTP,0000,0000,0000,,就像呃树的数量
Dialogue: 0,0:06:19.04,0:06:21.84,*Default,NTP,0000,0000,0000,,左边可能有树，这只是
Dialogue: 0,0:06:21.84,0:06:24.56,*Default,NTP,0000,0000,0000,,递归调用
Dialogue: 0,0:06:27.52,0:06:29.12,*Default,NTP,0000,0000,0000,,对于变量数量变量
Dialogue: 0,0:06:29.12,0:06:31.28,*Default,NTP,0000,0000,0000,,名字有点长
Dialogue: 0,0:06:31.28,0:06:32.96,*Default,NTP,0000,0000,0000,,好吧，我会稍微修剪一下
Dialogue: 0,0:06:32.96,0:06:34.71,*Default,NTP,0000,0000,0000,,这很荒谬吗？
Dialogue: 0,0:06:34.71,0:06:37.60,*Default,NTP,0000,0000,0000,,[笑声]
Dialogue: 0,0:06:37.60,0:06:41.36,*Default,NTP,0000,0000,0000,,右边的井怎么样？
Dialogue: 0,0:06:41.36,0:06:43.60,*Default,NTP,0000,0000,0000,,对称，但你必须思考
Dialogue: 0,0:06:43.60,0:06:46.56,*Default,NTP,0000,0000,0000,,关于您要返回的内容
Dialogue: 0,0:06:46.56,0:06:49.68,*Default,NTP,0000,0000,0000,,也就是说，如果你有
Dialogue: 0,0:06:49.68,0:06:52.80,*Default,NTP,0000,0000,0000,,八种不同的左构建方式
Dialogue: 0,0:06:52.80,0:06:53.44,*Default,NTP,0000,0000,0000,,分支机构
Dialogue: 0,0:06:53.44,0:06:55.52,*Default,NTP,0000,0000,0000,,以及五种不同的构建方式
Dialogue: 0,0:06:55.52,0:06:56.56,*Default,NTP,0000,0000,0000,,右枝
Dialogue: 0,0:06:56.56,0:06:57.92,*Default,NTP,0000,0000,0000,,有多少种不同的方式
Dialogue: 0,0:06:57.92,0:06:59.84,*Default,NTP,0000,0000,0000,,构建一棵完整的树
Dialogue: 0,0:06:59.84,0:07:02.24,*Default,NTP,0000,0000,0000,,好吧，你可以从左边拿走任何一个
Dialogue: 0,0:07:02.24,0:07:04.08,*Default,NTP,0000,0000,0000,,任何从右边开始，所以对于任何
Dialogue: 0,0:07:04.08,0:07:05.36,*Default,NTP,0000,0000,0000,,左边八个
Dialogue: 0,0:07:05.36,0:07:06.96,*Default,NTP,0000,0000,0000,,您有五种不同的选择
Dialogue: 0,0:07:06.96,0:07:09.52,*Default,NTP,0000,0000,0000,,是的，所以第一个你有五个
Dialogue: 0,0:07:09.52,0:07:10.72,*Default,NTP,0000,0000,0000,,对于第二个，你有五个
Dialogue: 0,0:07:10.72,0:07:12.56,*Default,NTP,0000,0000,0000,,第三个你有五个
Dialogue: 0,0:07:12.56,0:07:14.40,*Default,NTP,0000,0000,0000,,第四五四五那么呃五是什么
Dialogue: 0,0:07:14.40,0:07:15.84,*Default,NTP,0000,0000,0000,,加五 加五 加五 加五
Dialogue: 0,0:07:15.84,0:07:16.72,*Default,NTP,0000,0000,0000,,加五
Dialogue: 0,0:07:16.72,0:07:19.92,*Default,NTP,0000,0000,0000,,那是八乘五呃所以嗯
Dialogue: 0,0:07:19.92,0:07:21.76,*Default,NTP,0000,0000,0000,,就像一个总数的概念
Dialogue: 0,0:07:21.76,0:07:23.60,*Default,NTP,0000,0000,0000,,你可以通过相乘得到
Dialogue: 0,0:07:23.60,0:07:24.00,*Default,NTP,0000,0000,0000,,左边
Dialogue: 0,0:07:24.00,0:07:26.80,*Default,NTP,0000,0000,0000,,右边但那只是一个
Dialogue: 0,0:07:26.80,0:07:28.24,*Default,NTP,0000,0000,0000,,分裂
Dialogue: 0,0:07:28.24,0:07:30.00,*Default,NTP,0000,0000,0000,,现在你必须考虑所有
Dialogue: 0,0:07:30.00,0:07:31.68,*Default,NTP,0000,0000,0000,,你有不同的分割
Dialogue: 0,0:07:31.68,0:07:35.76,*Default,NTP,0000,0000,0000,,所以呃，我们真的应该有一个总数
Dialogue: 0,0:07:35.76,0:07:37.84,*Default,NTP,0000,0000,0000,,从零开始
Dialogue: 0,0:07:37.84,0:07:40.64,*Default,NTP,0000,0000,0000,,这只是描述我们是否选择
Dialogue: 0,0:07:40.64,0:07:42.00,*Default,NTP,0000,0000,0000,,特定数字
Dialogue: 0,0:07:42.00,0:07:44.24,*Default,NTP,0000,0000,0000,,左边的叶子一共有多少片
Dialogue: 0,0:07:44.24,0:07:45.20,*Default,NTP,0000,0000,0000,,会有树吗
Dialogue: 0,0:07:45.20,0:07:47.04,*Default,NTP,0000,0000,0000,,我们需要将其添加到总数中
Dialogue: 0,0:07:47.04,0:07:48.96,*Default,NTP,0000,0000,0000,,返回总数，好的，现在你可以
Dialogue: 0,0:07:48.96,0:07:50.32,*Default,NTP,0000,0000,0000,,思考如何将所有这些整合在一起
Dialogue: 0,0:07:50.32,0:07:52.96,*Default,NTP,0000,0000,0000,,你可以用 uh 做的线
Dialogue: 0,0:07:52.96,0:07:56.16,*Default,NTP,0000,0000,0000,,和一些呃你知道我们正在赚一笔钱
Dialogue: 0,0:07:56.16,0:07:57.44,*Default,NTP,0000,0000,0000,,一堆不同的选择和
Dialogue: 0,0:07:57.44,0:07:58.72,*Default,NTP,0000,0000,0000,,也许有一个列表理解
Dialogue: 0,0:07:58.72,0:08:00.32,*Default,NTP,0000,0000,0000,,那里某处
Dialogue: 0,0:08:00.32,0:08:02.32,*Default,NTP,0000,0000,0000,,但我只是试图描述为什么会有
Dialogue: 0,0:08:02.32,0:08:03.44,*Default,NTP,0000,0000,0000,,一个产品
Dialogue: 0,0:08:03.44,0:08:05.36,*Default,NTP,0000,0000,0000,,呃就像中间的乘法
Dialogue: 0,0:08:05.36,0:08:07.04,*Default,NTP,0000,0000,0000,,这真的是因为你
Dialogue: 0,0:08:07.04,0:08:08.48,*Default,NTP,0000,0000,0000,,说我可以接受其中任何一个
Dialogue: 0,0:08:08.48,0:08:09.92,*Default,NTP,0000,0000,0000,,从左侧开始的选项以及以下任一选项
Dialogue: 0,0:08:09.92,0:08:11.04,*Default,NTP,0000,0000,0000,,右侧的选项并将它们配对
Dialogue: 0,0:08:11.04,0:08:12.00,*Default,NTP,0000,0000,0000,,一起
Dialogue: 0,0:08:12.00,0:08:14.80,*Default,NTP,0000,0000,0000,,这就是你获得完整二进制文件的方式
Dialogue: 0,0:08:14.80,0:08:16.56,*Default,NTP,0000,0000,0000,,对待
Dialogue: 0,0:08:16.56,0:08:19.12,*Default,NTP,0000,0000,0000,,这里也有一个很好的教训
Dialogue: 0,0:08:19.12,0:08:21.28,*Default,NTP,0000,0000,0000,,你看到这些模板我总觉得
Dialogue: 0,0:08:21.28,0:08:22.80,*Default,NTP,0000,0000,0000,,就像你知道的，我只有一只手
Dialogue: 0,0:08:22.80,0:08:24.32,*Default,NTP,0000,0000,0000,,绑在我背后
Dialogue: 0,0:08:24.32,0:08:25.44,*Default,NTP,0000,0000,0000,,但当你想到
Dialogue: 0,0:08:25.44,0:08:26.80,*Default,NTP,0000,0000,0000,,你可以摆脱的问题
Dialogue: 0,0:08:26.80,0:08:27.84,*Default,NTP,0000,0000,0000,,模板
Dialogue: 0,0:08:27.84,0:08:29.60,*Default,NTP,0000,0000,0000,,弄清楚如何思考
Dialogue: 0,0:08:29.60,0:08:31.68,*Default,NTP,0000,0000,0000,,算法，然后返回并推它
Dialogue: 0,0:08:31.68,0:08:32.96,*Default,NTP,0000,0000,0000,,进入模板
Dialogue: 0,0:08:32.96,0:08:34.88,*Default,NTP,0000,0000,0000,,嗯，这就是我通常的想法
Dialogue: 0,0:08:34.88,0:08:37.04,*Default,NTP,0000,0000,0000,,这些问题
Dialogue: 0,0:08:37.04,0:08:39.12,*Default,NTP,0000,0000,0000,,你知道当我们谈论聪明时
Dialogue: 0,0:08:39.12,0:08:40.80,*Default,NTP,0000,0000,0000,,虽然我一分钟前还在取笑约翰
Dialogue: 0,0:08:40.80,0:08:42.08,*Default,NTP,0000,0000,0000,,关于他的变量名
Dialogue: 0,0:08:42.08,0:08:44.24,*Default,NTP,0000,0000,0000,,有一个理由这样做，但事实并非如此
Dialogue: 0,0:08:44.24,0:08:45.76,*Default,NTP,0000,0000,0000,,只是很好的编程风格
Dialogue: 0,0:08:45.76,0:08:48.24,*Default,NTP,0000,0000,0000,,特别是递归
Dialogue: 0,0:08:48.24,0:08:50.72,*Default,NTP,0000,0000,0000,,它可以帮助你跳过悬崖
Dialogue: 0,0:08:50.72,0:08:51.36,*Default,NTP,0000,0000,0000,,是的
Dialogue: 0,0:08:51.36,0:08:53.12,*Default,NTP,0000,0000,0000,,因为你可以看到这个东西如果
Dialogue: 0,0:08:53.12,0:08:55.52,*Default,NTP,0000,0000,0000,,你相信事情就是这样
Dialogue: 0,0:08:55.52,0:08:58.80,*Default,NTP,0000,0000,0000,,那么这就是后续的内容
Dialogue: 0,0:08:58.80,0:09:01.68,*Default,NTP,0000,0000,0000,,问题是我们为什么要倍增
Dialogue: 0,0:09:01.68,0:09:06.00,*Default,NTP,0000,0000,0000,,假设我给你
Dialogue: 0,0:09:06.00,0:09:09.04,*Default,NTP,0000,0000,0000,,呃呃，让我们说一个红色，让我们看看这个是否
Dialogue: 0,0:09:09.04,0:09:10.80,*Default,NTP,0000,0000,0000,,类比在这里起作用
Dialogue: 0,0:09:10.80,0:09:13.52,*Default,NTP,0000,0000,0000,,我左手给你两样东西
Dialogue: 0,0:09:13.52,0:09:13.92,*Default,NTP,0000,0000,0000,,和
Dialogue: 0,0:09:13.92,0:09:17.20,*Default,NTP,0000,0000,0000,,我右手里的三样东西 是的，我
Dialogue: 0,0:09:17.20,0:09:18.56,*Default,NTP,0000,0000,0000,,请问你有什么办法
Dialogue: 0,0:09:18.56,0:09:19.68,*Default,NTP,0000,0000,0000,,结合
Dialogue: 0,0:09:19.68,0:09:23.60,*Default,NTP,0000,0000,0000,,他们是的，好吧，所以我可以拿一个
Dialogue: 0,0:09:23.60,0:09:25.44,*Default,NTP,0000,0000,0000,,左手的东西
Dialogue: 0,0:09:25.44,0:09:27.60,*Default,NTP,0000,0000,0000,,并从等待中放入三件事
Dialogue: 0,0:09:27.60,0:09:29.44,*Default,NTP,0000,0000,0000,,这不是我想要的
Dialogue: 0,0:09:29.44,0:09:30.24,*Default,NTP,0000,0000,0000,,正确的约翰
Dialogue: 0,0:09:30.24,0:09:32.08,*Default,NTP,0000,0000,0000,,是的，我想如果你有 abc
Dialogue: 0,0:09:32.08,0:09:34.00,*Default,NTP,0000,0000,0000,,一只手，你有一两个
Dialogue: 0,0:09:34.00,0:09:34.88,*Default,NTP,0000,0000,0000,,另一方面
Dialogue: 0,0:09:34.88,0:09:36.64,*Default,NTP,0000,0000,0000,,是的，有什么不同
Dialogue: 0,0:09:36.64,0:09:37.84,*Default,NTP,0000,0000,0000,,你可以有的组合 你可以
Dialogue: 0,0:09:37.84,0:09:38.88,*Default,NTP,0000,0000,0000,,有a1 a2
Dialogue: 0,0:09:38.88,0:09:40.96,*Default,NTP,0000,0000,0000,,你可以有 b1 b2 你可以有 c1
Dialogue: 0,0:09:40.96,0:09:42.72,*Default,NTP,0000,0000,0000,,c2 这是六件事
Dialogue: 0,0:09:42.72,0:09:44.80,*Default,NTP,0000,0000,0000,,那是因为它是三乘二所以
Dialogue: 0,0:09:44.80,0:09:46.88,*Default,NTP,0000,0000,0000,,就像你是否想过如何配对
Dialogue: 0,0:09:46.88,0:09:48.24,*Default,NTP,0000,0000,0000,,从你右边的东西和东西
Dialogue: 0,0:09:48.24,0:09:50.00,*Default,NTP,0000,0000,0000,,从你左边开始有什么可能
Dialogue: 0,0:09:50.00,0:09:51.20,*Default,NTP,0000,0000,0000,,你最终会这样做的方法
Dialogue: 0,0:09:51.20,0:09:53.76,*Default,NTP,0000,0000,0000,,乘以是的所以这就是我们
Dialogue: 0,0:09:53.76,0:09:54.48,*Default,NTP,0000,0000,0000,,寻找
Dialogue: 0,0:09:54.48,0:09:56.88,*Default,NTP,0000,0000,0000,,我们并没有总结它们，所以它
Dialogue: 0,0:09:56.88,0:09:58.48,*Default,NTP,0000,0000,0000,,不喜欢
Dialogue: 0,0:09:58.48,0:10:00.72,*Default,NTP,0000,0000,0000,,哦，这是左边的答案，这是
Dialogue: 0,0:10:00.72,0:10:01.92,*Default,NTP,0000,0000,0000,,右边的答案就是
Dialogue: 0,0:10:01.92,0:10:03.60,*Default,NTP,0000,0000,0000,,我们仍然需要将它们的总和结合起来
Dialogue: 0,0:10:03.60,0:10:04.56,*Default,NTP,0000,0000,0000,,一切
Dialogue: 0,0:10:04.56,0:10:07.68,*Default,NTP,0000,0000,0000,,我们可以通过选择来组合它们
Dialogue: 0,0:10:07.68,0:10:08.72,*Default,NTP,0000,0000,0000,,从左边开始所有不同的
Dialogue: 0,0:10:08.72,0:10:10.00,*Default,NTP,0000,0000,0000,,手上所有的差价都在右边
Dialogue: 0,0:10:10.00,0:10:12.56,*Default,NTP,0000,0000,0000,,手并进行这些的所有排列
Dialogue: 0,0:10:12.56,0:10:15.84,*Default,NTP,0000,0000,0000,,好的
Dialogue: 0,0:10:15.84,0:10:18.08,*Default,NTP,0000,0000,0000,,我们来看看作业五
Dialogue: 0,0:10:18.08,0:10:19.44,*Default,NTP,0000,0000,0000,,问题六是其中之一
Dialogue: 0,0:10:19.44,0:10:21.52,*Default,NTP,0000,0000,0000,,可选的称为产量路径定义
Dialogue: 0,0:10:21.52,0:10:24.24,*Default,NTP,0000,0000,0000,,生成器函数路径生成器
Dialogue: 0,0:10:24.24,0:10:27.28,*Default,NTP,0000,0000,0000,,它接受一棵树的值
Dialogue: 0,0:10:27.28,0:10:30.64,*Default,NTP,0000,0000,0000,,并返回一个生成器，生成
Dialogue: 0,0:10:30.64,0:10:32.64,*Default,NTP,0000,0000,0000,,从 t 的根到节点的每条路径
Dialogue: 0,0:10:32.64,0:10:33.76,*Default,NTP,0000,0000,0000,,具有
Dialogue: 0,0:10:33.76,0:10:37.20,*Default,NTP,0000,0000,0000,,那个标签叫做价值
Dialogue: 0,0:10:37.20,0:10:41.12,*Default,NTP,0000,0000,0000,,t是用树类实现的
Dialogue: 0,0:10:41.92,0:10:44.08,*Default,NTP,0000,0000,0000,,每条路径应表示为
Dialogue: 0,0:10:44.08,0:10:45.84,*Default,NTP,0000,0000,0000,,标签列表
Dialogue: 0,0:10:45.84,0:10:48.80,*Default,NTP,0000,0000,0000,,沿着树上的路径你可能会得到
Dialogue: 0,0:10:48.80,0:10:50.96,*Default,NTP,0000,0000,0000,,任意顺序的路径
Dialogue: 0,0:10:50.96,0:10:52.88,*Default,NTP,0000,0000,0000,,哦，他们给了我们一些入门代码
Dialogue: 0,0:10:52.88,0:10:54.56,*Default,NTP,0000,0000,0000,,看看他们做了什么
Dialogue: 0,0:10:54.56,0:10:58.08,*Default,NTP,0000,0000,0000,,所以我想我们必须做到这一点
Dialogue: 0,0:10:58.08,0:11:02.48,*Default,NTP,0000,0000,0000,,一大棵，我们这里有一个示例树
Dialogue: 0,0:11:02.48,0:11:07.04,*Default,NTP,0000,0000,0000,,嗯，所以一个是根源
Dialogue: 0,0:11:07.04,0:11:09.60,*Default,NTP,0000,0000,0000,,二和五是它的孩子三和
Dialogue: 0,0:11:09.60,0:11:10.08,*Default,NTP,0000,0000,0000,,四
Dialogue: 0,0:11:10.08,0:11:13.36,*Default,NTP,0000,0000,0000,,是两个孩子哦对不起三四个
Dialogue: 0,0:11:13.36,0:11:14.88,*Default,NTP,0000,0000,0000,,五个是两个孩子的孩子
Dialogue: 0,0:11:14.88,0:11:18.08,*Default,NTP,0000,0000,0000,,六是四岁的孩子，然后
Dialogue: 0,0:11:18.08,0:11:20.32,*Default,NTP,0000,0000,0000,,当我们六点打电话给探路者时
Dialogue: 0,0:11:20.32,0:11:24.00,*Default,NTP,0000,0000,0000,,它找到了通往六的唯一路径
Dialogue: 0,0:11:24.00,0:11:25.76,*Default,NTP,0000,0000,0000,,也就是说你必须从一到
Dialogue: 0,0:11:25.76,0:11:27.92,*Default,NTP,0000,0000,0000,,两到四到六 好吧 然后就是
Dialogue: 0,0:11:27.92,0:11:28.48,*Default,NTP,0000,0000,0000,,列表
Dialogue: 0,0:11:28.48,0:11:30.32,*Default,NTP,0000,0000,0000,,但由于有两个不同的五
Dialogue: 0,0:11:30.32,0:11:32.16,*Default,NTP,0000,0000,0000,,那么我们需要两条不同的路径
Dialogue: 0,0:11:32.16,0:11:33.28,*Default,NTP,0000,0000,0000,,二
Dialogue: 0,0:11:33.28,0:11:37.60,*Default,NTP,0000,0000,0000,,五路和一对五路
Dialogue: 0,0:11:37.60,0:11:40.84,*Default,NTP,0000,0000,0000,,它说就像呃迭代一点所以
Dialogue: 0,0:11:40.84,0:11:42.32,*Default,NTP,0000,0000,0000,,一
Dialogue: 0,0:11:42.32,0:11:44.88,*Default,NTP,0000,0000,0000,,有时你会发现标签
Dialogue: 0,0:11:44.88,0:11:46.48,*Default,NTP,0000,0000,0000,,树的根标签
Dialogue: 0,0:11:46.48,0:11:47.36,*Default,NTP,0000,0000,0000,,轮到你了
Dialogue: 0,0:11:47.36,0:11:50.24,*Default,NTP,0000,0000,0000,,等于您正在寻找的值
Dialogue: 0,0:11:50.24,0:11:51.20,*Default,NTP,0000,0000,0000,,如果是这样
Dialogue: 0,0:11:51.20,0:11:54.56,*Default,NTP,0000,0000,0000,,我认为是时候列出一份清单了
Dialogue: 0,0:11:54.56,0:11:58.24,*Default,NTP,0000,0000,0000,,仅包含该标签
Dialogue: 0,0:11:58.24,0:12:01.12,*Default,NTP,0000,0000,0000,,或者只是这个值，这样
Dialogue: 0,0:12:01.12,0:12:02.64,*Default,NTP,0000,0000,0000,,如果我们这样做的话会处理这个案子
Dialogue: 0,0:12:02.64,0:12:03.92,*Default,NTP,0000,0000,0000,,路径产生者
Dialogue: 0,0:12:03.92,0:12:06.72,*Default,NTP,0000,0000,0000,,其中之一，我们想要那个呃名单
Dialogue: 0,0:12:06.72,0:12:08.48,*Default,NTP,0000,0000,0000,,只包含一个像非常短的
Dialogue: 0,0:12:08.48,0:12:10.96,*Default,NTP,0000,0000,0000,,仅包含一个元素的路径
Dialogue: 0,0:12:10.96,0:12:12.64,*Default,NTP,0000,0000,0000,,另一件事是这将允许
Dialogue: 0,0:12:12.64,0:12:15.44,*Default,NTP,0000,0000,0000,,我们建立更长的清单
Dialogue: 0,0:12:15.44,0:12:17.52,*Default,NTP,0000,0000,0000,,因为我们返回了一个列表
Dialogue: 0,0:12:17.52,0:12:18.64,*Default,NTP,0000,0000,0000,,右边的最后一个
Dialogue: 0,0:12:18.64,0:12:20.32,*Default,NTP,0000,0000,0000,,值，然后我们就会有
Dialogue: 0,0:12:20.32,0:12:22.56,*Default,NTP,0000,0000,0000,,添加东西到它上面以获得完整的
Dialogue: 0,0:12:22.56,0:12:25.04,*Default,NTP,0000,0000,0000,,我们想要的路径
Dialogue: 0,0:12:25.04,0:12:29.84,*Default,NTP,0000,0000,0000,,好的，我们将逐一介绍
Dialogue: 0,0:12:29.84,0:12:32.32,*Default,NTP,0000,0000,0000,,分支
Dialogue: 0,0:12:33.20,0:12:36.80,*Default,NTP,0000,0000,0000,,对于它可能包含的每个分支
Dialogue: 0,0:12:36.80,0:12:39.12,*Default,NTP,0000,0000,0000,,我们有很多通往这个标签的路径
Dialogue: 0,0:12:39.12,0:12:40.00,*Default,NTP,0000,0000,0000,,寻找
Dialogue: 0,0:12:40.00,0:12:42.08,*Default,NTP,0000,0000,0000,,我们需要访问其中的每一个
Dialogue: 0,0:12:42.08,0:12:43.68,*Default,NTP,0000,0000,0000,,分支中的路径
Dialogue: 0,0:12:43.68,0:12:45.84,*Default,NTP,0000,0000,0000,,这样我们就可以在
Dialogue: 0,0:12:45.84,0:12:47.28,*Default,NTP,0000,0000,0000,,整棵树
Dialogue: 0,0:12:47.28,0:12:50.32,*Default,NTP,0000,0000,0000,,这是使用递归的机会
Dialogue: 0,0:12:50.32,0:12:53.28,*Default,NTP,0000,0000,0000,,如果我在分支上调用路径生成器并且
Dialogue: 0,0:12:53.28,0:12:55.04,*Default,NTP,0000,0000,0000,,我正在寻找的价值
Dialogue: 0,0:12:55.04,0:12:57.92,*Default,NTP,0000,0000,0000,,我得到的是一条通过的路径
Dialogue: 0,0:12:57.92,0:12:59.36,*Default,NTP,0000,0000,0000,,分支
Dialogue: 0,0:12:59.36,0:13:00.96,*Default,NTP,0000,0000,0000,,但我真正想要的是
Dialogue: 0,0:13:00.96,0:13:03.68,*Default,NTP,0000,0000,0000,,穿过树的路径
Dialogue: 0,0:13:03.68,0:13:05.36,*Default,NTP,0000,0000,0000,,所以我只是写下来我想
Dialogue: 0,0:13:05.36,0:13:08.00,*Default,NTP,0000,0000,0000,,产生一条穿过树的路径
Dialogue: 0,0:13:08.00,0:13:10.24,*Default,NTP,0000,0000,0000,,一切都通过分支但它
Dialogue: 0,0:13:10.24,0:13:11.68,*Default,NTP,0000,0000,0000,,还有标签
Dialogue: 0,0:13:11.68,0:13:14.64,*Default,NTP,0000,0000,0000,,在前面
Dialogue: 0,0:13:14.72,0:13:20.16,*Default,NTP,0000,0000,0000,,可能是这样的，不
Dialogue: 0,0:13:20.16,0:13:22.32,*Default,NTP,0000,0000,0000,,可能需要一个你知道什么时候两个
Dialogue: 0,0:13:22.32,0:13:24.00,*Default,NTP,0000,0000,0000,,没有定义它说
Dialogue: 0,0:13:24.00,0:13:27.12,*Default,NTP,0000,0000,0000,,是的，你知道树是什么，没关系
Dialogue: 0,0:13:27.12,0:13:30.48,*Default,NTP,0000,0000,0000,,接下来我们在 2020 年春季进行了这项工作
Dialogue: 0,0:13:30.48,0:13:31.28,*Default,NTP,0000,0000,0000,,期中考试
Dialogue: 0,0:13:31.28,0:13:34.88,*Default,NTP,0000,0000,0000,,两个问题第一
Dialogue: 0,0:13:34.88,0:13:37.36,*Default,NTP,0000,0000,0000,,所以这个问题涉及到
Dialogue: 0,0:13:37.36,0:13:39.60,*Default,NTP,0000,0000,0000,,一颗一颗地从树上落下叶子
Dialogue: 0,0:13:39.60,0:13:42.56,*Default,NTP,0000,0000,0000,,具有唯一正整数的树 no
Dialogue: 0,0:13:42.56,0:13:44.40,*Default,NTP,0000,0000,0000,,重复标签
Dialogue: 0,0:13:44.40,0:13:46.64,*Default,NTP,0000,0000,0000,,树的采摘顺序是
Dialogue: 0,0:13:46.64,0:13:48.24,*Default,NTP,0000,0000,0000,,唯一正整数序列
Dialogue: 0,0:13:48.24,0:13:50.88,*Default,NTP,0000,0000,0000,,这些都是 t 的标签
Dialogue: 0,0:13:50.88,0:13:54.56,*Default,NTP,0000,0000,0000,,以及有效的采摘顺序，如果
Dialogue: 0,0:13:54.56,0:13:56.80,*Default,NTP,0000,0000,0000,,呃
Dialogue: 0,0:13:57.68,0:13:59.84,*Default,NTP,0000,0000,0000,,采摘顺序包含所有标签
Dialogue: 0,0:13:59.84,0:14:01.76,*Default,NTP,0000,0000,0000,,t 并且有一些特别之处
Dialogue: 0,0:14:01.76,0:14:02.56,*Default,NTP,0000,0000,0000,,命令
Dialogue: 0,0:14:02.56,0:14:04.72,*Default,NTP,0000,0000,0000,,出现 t 每个音符的标签
Dialogue: 0,0:14:04.72,0:14:07.36,*Default,NTP,0000,0000,0000,,在其后代节点的标签之后
Dialogue: 0,0:14:07.36,0:14:09.28,*Default,NTP,0000,0000,0000,,所以你必须摘下叶子然后
Dialogue: 0,0:14:09.28,0:14:10.88,*Default,NTP,0000,0000,0000,,你可以摘下的外观
Dialogue: 0,0:14:10.88,0:14:12.08,*Default,NTP,0000,0000,0000,,叶子然后你就可以摘下
Dialogue: 0,0:14:12.08,0:14:16.96,*Default,NTP,0000,0000,0000,,叶子的父母的父母等
Dialogue: 0,0:14:16.96,0:14:21.36,*Default,NTP,0000,0000,0000,,好吧呃我想我们可能需要做一个
Dialogue: 0,0:14:21.36,0:14:22.72,*Default,NTP,0000,0000,0000,,为了做 b 所以我们就做
Dialogue: 0,0:14:22.72,0:14:24.40,*Default,NTP,0000,0000,0000,,整个事情执行顺序需要
Dialogue: 0,0:14:24.40,0:14:26.00,*Default,NTP,0000,0000,0000,,一棵数树称为
Dialogue: 0,0:14:26.00,0:14:28.24,*Default,NTP,0000,0000,0000,,redwood 它返回有效的采摘
Dialogue: 0,0:14:28.24,0:14:30.08,*Default,NTP,0000,0000,0000,,以数字列表的形式排序
Dialogue: 0,0:14:30.08,0:14:32.08,*Default,NTP,0000,0000,0000,,如果有不止一个有效的采摘
Dialogue: 0,0:14:32.08,0:14:34.48,*Default,NTP,0000,0000,0000,,order 你的 order 函数应该返回
Dialogue: 0,0:14:34.48,0:14:37.20,*Default,NTP,0000,0000,0000,,他们中的任何一个哦多么好
Dialogue: 0,0:14:37.20,0:14:44.08,*Default,NTP,0000,0000,0000,,呃所以
Dialogue: 0,0:14:44.08,0:14:47.44,*Default,NTP,0000,0000,0000,,我们有一些空的东西
Dialogue: 0,0:14:49.44,0:14:52.96,*Default,NTP,0000,0000,0000,,呃，出于某种原因它被称为红木
Dialogue: 0,0:14:52.96,0:14:53.84,*Default,NTP,0000,0000,0000,,而不是 t
Dialogue: 0,0:14:53.84,0:14:58.72,*Default,NTP,0000,0000,0000,,但是红木分支嗯
Dialogue: 0,0:14:58.72,0:15:01.12,*Default,NTP,0000,0000,0000,,看来我们只能采摘
Dialogue: 0,0:15:01.12,0:15:02.48,*Default,NTP,0000,0000,0000,,分行订单
Dialogue: 0,0:15:02.48,0:15:05.60,*Default,NTP,0000,0000,0000,,并将其添加到我们的采摘订单中
Dialogue: 0,0:15:05.60,0:15:07.20,*Default,NTP,0000,0000,0000,,必须知道哪个
Dialogue: 0,0:15:07.20,0:15:09.36,*Default,NTP,0000,0000,0000,,如果您有列表，则应用方法
Dialogue: 0,0:15:09.36,0:15:11.12,*Default,NTP,0000,0000,0000,,已经并且你正在尝试添加一堆
Dialogue: 0,0:15:11.12,0:15:11.84,*Default,NTP,0000,0000,0000,,元素数
Dialogue: 0,0:15:11.84,0:15:14.24,*Default,NTP,0000,0000,0000,,从其他一些列表然后做的方式
Dialogue: 0,0:15:14.24,0:15:15.92,*Default,NTP,0000,0000,0000,,那就是随着延伸
Dialogue: 0,0:15:15.92,0:15:18.24,*Default,NTP,0000,0000,0000,,方法
Dialogue: 0,0:15:22.40,0:15:26.00,*Default,NTP,0000,0000,0000,,好吧，这是你的问题
Dialogue: 0,0:15:26.00,0:15:26.96,*Default,NTP,0000,0000,0000,,实际上询问了b
Dialogue: 0,0:15:26.96,0:15:28.32,*Default,NTP,0000,0000,0000,,实现需要数字的 pluck
Dialogue: 0,0:15:28.32,0:15:30.40,*Default,NTP,0000,0000,0000,,名为 pine 的树可以，并返回
Dialogue: 0,0:15:30.40,0:15:32.32,*Default,NTP,0000,0000,0000,,重复调用的函数
Dialogue: 0,0:15:32.32,0:15:35.92,*Default,NTP,0000,0000,0000,,采摘顺序的要素
Dialogue: 0,0:15:37.04,0:15:38.64,*Default,NTP,0000,0000,0000,,如果该采摘顺序有效
Dialogue: 0,0:15:38.64,0:15:40.40,*Default,NTP,0000,0000,0000,,最终调用返回成功
Dialogue: 0,0:15:40.40,0:15:42.40,*Default,NTP,0000,0000,0000,,否则，如果重复调用之一
Dialogue: 0,0:15:42.40,0:15:44.80,*Default,NTP,0000,0000,0000,,位于不属于该号码的一部分
Dialogue: 0,0:15:44.80,0:15:47.12,*Default,NTP,0000,0000,0000,,有效采摘顺序的错误
Dialogue: 0,0:15:47.12,0:15:48.16,*Default,NTP,0000,0000,0000,,字符串说嘿
Dialogue: 0,0:15:48.16,0:15:50.88,*Default,NTP,0000,0000,0000,,无效
Dialogue: 0,0:15:51.92,0:15:56.48,*Default,NTP,0000,0000,0000,,有趣，所以我们拿一棵树
Dialogue: 0,0:15:57.28,0:16:00.00,*Default,NTP,0000,0000,0000,,然后我们
Dialogue: 0,0:16:03.28,0:16:06.48,*Default,NTP,0000,0000,0000,,得到一个函数，我们开始调用它
Dialogue: 0,0:16:06.48,0:16:08.32,*Default,NTP,0000,0000,0000,,关于数字
Dialogue: 0,0:16:08.32,0:16:11.52,*Default,NTP,0000,0000,0000,,如果他们是一个采摘订单让我们看看
Dialogue: 0,0:16:11.52,0:16:13.20,*Default,NTP,0000,0000,0000,,我拔了九个会发生什么
Dialogue: 0,0:16:13.20,0:16:15.20,*Default,NTP,0000,0000,0000,,然后是八，然后是七，然后是
Dialogue: 0,0:16:15.20,0:16:16.72,*Default,NTP,0000,0000,0000,,六
Dialogue: 0,0:16:16.72,0:16:19.60,*Default,NTP,0000,0000,0000,,我还不能拔出一个，因为它是
Dialogue: 0,0:16:19.60,0:16:20.00,*Default,NTP,0000,0000,0000,,得到
Dialogue: 0,0:16:20.00,0:16:21.68,*Default,NTP,0000,0000,0000,,东西还在，但我可以摘下五个
Dialogue: 0,0:16:21.68,0:16:22.72,*Default,NTP,0000,0000,0000,,四、三、二、
Dialogue: 0,0:16:22.72,0:16:24.16,*Default,NTP,0000,0000,0000,,然后一个是光秃秃的我可以把它摘下来
Dialogue: 0,0:16:24.16,0:16:25.28,*Default,NTP,0000,0000,0000,,最后它会告诉我
Dialogue: 0,0:16:25.28,0:16:26.08,*Default,NTP,0000,0000,0000,,成功
Dialogue: 0,0:16:26.08,0:16:27.76,*Default,NTP,0000,0000,0000,,但如果我尝试把一些东西拿出来
Dialogue: 0,0:16:27.76,0:16:29.84,*Default,NTP,0000,0000,0000,,然后它说嘿无效
Dialogue: 0,0:16:29.84,0:16:34.24,*Default,NTP,0000,0000,0000,,好吧，很酷，真是个野兽
Dialogue: 0,0:16:34.24,0:16:36.00,*Default,NTP,0000,0000,0000,,这可能是最长的问题
Dialogue: 0,0:16:36.00,0:16:37.84,*Default,NTP,0000,0000,0000,,我们在期中考试中见过，让我们读一下
Dialogue: 0,0:16:37.84,0:16:38.48,*Default,NTP,0000,0000,0000,,它在一起
Dialogue: 0,0:16:38.48,0:16:42.16,*Default,NTP,0000,0000,0000,,呃这是函数
Dialogue: 0,0:16:42.16,0:16:44.32,*Default,NTP,0000,0000,0000,,我们会回来并且我们会回来
Dialogue: 0,0:16:44.32,0:16:46.56,*Default,NTP,0000,0000,0000,,马上
Dialogue: 0,0:16:46.56,0:16:48.32,*Default,NTP,0000,0000,0000,,所以我们回来的唯一原因
Dialogue: 0,0:16:48.32,0:16:50.16,*Default,NTP,0000,0000,0000,,这个功能是因为它有
Dialogue: 0,0:16:50.16,0:16:52.08,*Default,NTP,0000,0000,0000,,上下文树本身，以便我们可以参考
Dialogue: 0,0:16:52.08,0:16:55.04,*Default,NTP,0000,0000,0000,,到那棵好树
Dialogue: 0,0:16:55.20,0:16:58.40,*Default,NTP,0000,0000,0000,,我们有摘一片叶子的概念
Dialogue: 0,0:16:58.40,0:17:02.08,*Default,NTP,0000,0000,0000,,它接受一些东西
Dialogue: 0,0:17:02.08,0:17:04.56,*Default,NTP,0000,0000,0000,,返回塞浦路斯的副本哦，它需要一个
Dialogue: 0,0:17:04.56,0:17:05.44,*Default,NTP,0000,0000,0000,,树
Dialogue: 0,0:17:05.44,0:17:08.88,*Default,NTP,0000,0000,0000,,没有叶子 k 并检查 k 是 a
Dialogue: 0,0:17:08.88,0:17:09.76,*Default,NTP,0000,0000,0000,,叶标签
Dialogue: 0,0:17:09.76,0:17:12.40,*Default,NTP,0000,0000,0000,,不是内部节点标签，好吧，所以这个
Dialogue: 0,0:17:12.40,0:17:14.80,*Default,NTP,0000,0000,0000,,是我们建造一棵新树的时刻
Dialogue: 0,0:17:14.80,0:17:16.88,*Default,NTP,0000,0000,0000,,这有点像那棵老树，除了
Dialogue: 0,0:17:16.88,0:17:20.56,*Default,NTP,0000,0000,0000,,因为我们已经摘下了其中一片叶子
Dialogue: 0,0:17:20.72,0:17:22.64,*Default,NTP,0000,0000,0000,,然后好吧，但是这样就可以了
Dialogue: 0,0:17:22.64,0:17:24.00,*Default,NTP,0000,0000,0000,,我们稍后会解决这个问题
Dialogue: 0,0:17:24.00,0:17:25.76,*Default,NTP,0000,0000,0000,,我们说的外来松是
Dialogue: 0,0:17:25.76,0:17:27.76,*Default,NTP,0000,0000,0000,,有趣的是，我认为非本地松树是
Dialogue: 0,0:17:27.76,0:17:29.60,*Default,NTP,0000,0000,0000,,意味着我们要改变这棵树
Dialogue: 0,0:17:29.60,0:17:31.12,*Default,NTP,0000,0000,0000,,我们正在谈论的是一个有它的
Dialogue: 0,0:17:31.12,0:17:32.48,*Default,NTP,0000,0000,0000,,叶子被摘下来
Dialogue: 0,0:17:32.48,0:17:35.99,*Default,NTP,0000,0000,0000,,如果松树是一片叶子那么嗯
Dialogue: 0,0:17:35.99,0:17:37.12,*Default,NTP,0000,0000,0000,,[音乐]
Dialogue: 0,0:17:37.12,0:17:41.36,*Default,NTP,0000,0000,0000,,它确保它是正确的标签
Dialogue: 0,0:17:41.36,0:17:45.12,*Default,NTP,0000,0000,0000,,然后告诉我们成功否则
Dialogue: 0,0:17:45.12,0:17:48.48,*Default,NTP,0000,0000,0000,,我们需要换松树
Dialogue: 0,0:17:48.48,0:17:51.84,*Default,NTP,0000,0000,0000,,是摘下一片叶子的结果
Dialogue: 0,0:17:51.84,0:17:56.40,*Default,NTP,0000,0000,0000,,脱离当前的
Dialogue: 0,0:17:56.40,0:17:59.84,*Default,NTP,0000,0000,0000,,树如果
Dialogue: 0,0:17:59.84,0:18:03.12,*Default,NTP,0000,0000,0000,,是实例松搅拌哦这说如果
Dialogue: 0,0:18:03.12,0:18:06.40,*Default,NTP,0000,0000,0000,,摘一片叶子引起了问题
Dialogue: 0,0:18:06.40,0:18:08.48,*Default,NTP,0000,0000,0000,,这个问题是一个字符串，上面写着
Dialogue: 0,0:18:08.48,0:18:09.68,*Default,NTP,0000,0000,0000,,就像是
Dialogue: 0,0:18:09.68,0:18:12.40,*Default,NTP,0000,0000,0000,,哇你搞砸了哦嘿无效
Dialogue: 0,0:18:12.40,0:18:14.08,*Default,NTP,0000,0000,0000,,所以我们会返回它
Dialogue: 0,0:18:14.08,0:18:16.40,*Default,NTP,0000,0000,0000,,否则我们会退回同一个采摘机
Dialogue: 0,0:18:16.40,0:18:17.52,*Default,NTP,0000,0000,0000,,我们之前的功能是因为
Dialogue: 0,0:18:17.52,0:18:19.52,*Default,NTP,0000,0000,0000,,我们会再次调用它
Dialogue: 0,0:18:19.52,0:18:21.92,*Default,NTP,0000,0000,0000,,好吧，呃，好像摘了一个
Dialogue: 0,0:18:21.92,0:18:23.44,*Default,NTP,0000,0000,0000,,叶子不仅要
Dialogue: 0,0:18:23.44,0:18:27.52,*Default,NTP,0000,0000,0000,,建立一个新的叶子，呃，少了一个
Dialogue: 0,0:18:27.52,0:18:30.64,*Default,NTP,0000,0000,0000,,一片树叶
Dialogue: 0,0:18:30.64,0:18:32.08,*Default,NTP,0000,0000,0000,,抱歉，建了一棵少了一棵的新树
Dialogue: 0,0:18:32.08,0:18:34.16,*Default,NTP,0000,0000,0000,,叶子在里面，但有时它也必须
Dialogue: 0,0:18:34.16,0:18:37.36,*Default,NTP,0000,0000,0000,,返回一个字符串，表明我们搞砸了
Dialogue: 0,0:18:37.36,0:18:40.88,*Default,NTP,0000,0000,0000,,好吧，让我们来解决这个问题
Dialogue: 0,0:18:40.88,0:18:42.64,*Default,NTP,0000,0000,0000,,等一下，但这说的是如果拨动
Dialogue: 0,0:18:42.64,0:18:43.52,*Default,NTP,0000,0000,0000,,分支机构
Dialogue: 0,0:18:43.52,0:18:45.84,*Default,NTP,0000,0000,0000,,等于好的所以我们要经历
Dialogue: 0,0:18:45.84,0:18:47.04,*Default,NTP,0000,0000,0000,,所有分支机构
Dialogue: 0,0:18:47.04,0:18:49.68,*Default,NTP,0000,0000,0000,,并建立新的分支机构有一些
Dialogue: 0,0:18:49.68,0:18:50.24,*Default,NTP,0000,0000,0000,,状况
Dialogue: 0,0:18:50.24,0:18:53.92,*Default,NTP,0000,0000,0000,,我们跳过一片叶子
Dialogue: 0,0:18:53.92,0:18:57.84,*Default,NTP,0000,0000,0000,,如果我们不跳过这片叶子
Dialogue: 0,0:18:57.92,0:19:03.12,*Default,NTP,0000,0000,0000,,然后我们从树枝上摘下一片叶子
Dialogue: 0,0:19:03.12,0:19:06.72,*Default,NTP,0000,0000,0000,,嗯，这可能是一个字符串
Dialogue: 0,0:19:06.72,0:19:08.84,*Default,NTP,0000,0000,0000,,如果它是一个字符串那么我们就完成了
Dialogue: 0,0:19:08.84,0:19:10.32,*Default,NTP,0000,0000,0000,,否则
Dialogue: 0,0:19:10.32,0:19:13.52,*Default,NTP,0000,0000,0000,,我们可能把这个放进我们的拨弦中
Dialogue: 0,0:19:13.52,0:19:16.00,*Default,NTP,0000,0000,0000,,分支机构
Dialogue: 0,0:19:17.12,0:19:21.52,*Default,NTP,0000,0000,0000,,附加拔下的树枝
Dialogue: 0,0:19:21.52,0:19:23.68,*Default,NTP,0000,0000,0000,,这就是你如何打造一个新的款待
Dialogue: 0,0:19:23.68,0:19:25.44,*Default,NTP,0000,0000,0000,,你会有一个新的分支列表
Dialogue: 0,0:19:25.44,0:19:27.28,*Default,NTP,0000,0000,0000,,你会遍历所有旧分支
Dialogue: 0,0:19:27.28,0:19:29.04,*Default,NTP,0000,0000,0000,,你会放入新分支
Dialogue: 0,0:19:29.04,0:19:30.96,*Default,NTP,0000,0000,0000,,这就像一个拨弦版本
Dialogue: 0,0:19:30.96,0:19:33.52,*Default,NTP,0000,0000,0000,,老分支
Dialogue: 0,0:19:33.92,0:19:37.44,*Default,NTP,0000,0000,0000,,嗯，最后我们将构建一个
Dialogue: 0,0:19:37.44,0:19:38.32,*Default,NTP,0000,0000,0000,,树
Dialogue: 0,0:19:38.32,0:19:42.08,*Default,NTP,0000,0000,0000,,那棵树就是嗯
Dialogue: 0,0:19:42.08,0:19:46.40,*Default,NTP,0000,0000,0000,,老树柏树
Dialogue: 0,0:19:46.56,0:19:51.28,*Default,NTP,0000,0000,0000,,带有采摘树枝的点标签
Dialogue: 0,0:19:51.28,0:19:53.44,*Default,NTP,0000,0000,0000,,我觉得我们已经很接近了
Dialogue: 0,0:19:53.44,0:19:55.20,*Default,NTP,0000,0000,0000,,是不是意味着要好好跳过叶子呢
Dialogue: 0,0:19:55.20,0:19:57.84,*Default,NTP,0000,0000,0000,,必须是一片叶子
Dialogue: 0,0:19:57.84,0:20:00.32,*Default,NTP,0000,0000,0000,,我认为这是我们会检查的一种方法
Dialogue: 0,0:20:00.32,0:20:02.24,*Default,NTP,0000,0000,0000,,一秒钟
Dialogue: 0,0:20:02.24,0:20:05.68,*Default,NTP,0000,0000,0000,,并且它必须有正确的标签
Dialogue: 0,0:20:05.68,0:20:10.56,*Default,NTP,0000,0000,0000,,它叫什么哦，不值钱，好吧
Dialogue: 0,0:20:12.32,0:20:15.44,*Default,NTP,0000,0000,0000,,为什么 kk 是我们假设的下一个值
Dialogue: 0,0:20:15.44,0:20:18.00,*Default,NTP,0000,0000,0000,,采摘
Dialogue: 0,0:20:18.08,0:20:22.00,*Default,NTP,0000,0000,0000,,听起来不错，所以
Dialogue: 0,0:20:22.00,0:20:23.52,*Default,NTP,0000,0000,0000,,这要经过所有检查
Dialogue: 0,0:20:23.52,0:20:25.12,*Default,NTP,0000,0000,0000,,分支摆脱了
Dialogue: 0,0:20:25.12,0:20:29.52,*Default,NTP,0000,0000,0000,,我们应该采摘的一个，嗯
Dialogue: 0,0:20:29.92,0:20:32.56,*Default,NTP,0000,0000,0000,,如果对某些人来说不可能采摘它
Dialogue: 0,0:20:32.56,0:20:33.68,*Default,NTP,0000,0000,0000,,原因
Dialogue: 0,0:20:33.68,0:20:37.04,*Default,NTP,0000,0000,0000,,然后它告诉我们，但我们仍然不知道
Dialogue: 0,0:20:37.04,0:20:37.76,*Default,NTP,0000,0000,0000,,拥有这个
Dialogue: 0,0:20:37.76,0:20:41.20,*Default,NTP,0000,0000,0000,,我们应该返回的情况
Dialogue: 0,0:20:41.20,0:20:44.32,*Default,NTP,0000,0000,0000,,事情发生了可怕的事情
Dialogue: 0,0:20:46.84,0:20:50.96,*Default,NTP,0000,0000,0000,,错误什么时候会发生
Dialogue: 0,0:20:51.04,0:20:55.76,*Default,NTP,0000,0000,0000,,我想如果你的话就会发生这种情况
Dialogue: 0,0:20:55.76,0:20:58.16,*Default,NTP,0000,0000,0000,,一
Dialogue: 0,0:20:59.44,0:21:02.32,*Default,NTP,0000,0000,0000,,如果你看看塞浦路斯的根源
Dialogue: 0,0:21:02.32,0:21:03.84,*Default,NTP,0000,0000,0000,,事实证明
Dialogue: 0,0:21:03.84,0:21:06.96,*Default,NTP,0000,0000,0000,,该根是 k
Dialogue: 0,0:21:06.96,0:21:10.08,*Default,NTP,0000,0000,0000,,而不是一片叶子是 ak
Dialogue: 0,0:21:10.08,0:21:14.08,*Default,NTP,0000,0000,0000,,所以这里我假设塞浦路斯
Dialogue: 0,0:21:14.08,0:21:17.84,*Default,NTP,0000,0000,0000,,本身不是叶子
Dialogue: 0,0:21:18.24,0:21:22.24,*Default,NTP,0000,0000,0000,,如果塞浦路斯的情况如此
Dialogue: 0,0:21:22.24,0:21:25.44,*Default,NTP,0000,0000,0000,,点标签
Dialogue: 0,0:21:25.44,0:21:30.96,*Default,NTP,0000,0000,0000,,等于 k ​​不好
Dialogue: 0,0:21:30.96,0:21:32.88,*Default,NTP,0000,0000,0000,,为什么我假设塞浦路斯不是一片叶子
Dialogue: 0,0:21:32.88,0:21:34.96,*Default,NTP,0000,0000,0000,,好吧，让我们看看我们在哪里称呼它
Dialogue: 0,0:21:34.96,0:21:38.16,*Default,NTP,0000,0000,0000,,我们称摘一片叶子
Dialogue: 0,0:21:38.32,0:21:42.32,*Default,NTP,0000,0000,0000,,嗯在这里
Dialogue: 0,0:21:42.32,0:21:44.96,*Default,NTP,0000,0000,0000,,我们已经检查过这是
Dialogue: 0,0:21:44.96,0:21:46.56,*Default,NTP,0000,0000,0000,,一片叶子并处理了那个案子
Dialogue: 0,0:21:46.56,0:21:48.24,*Default,NTP,0000,0000,0000,,所以我们知道最初的呼叫是采摘一个
Dialogue: 0,0:21:48.24,0:21:50.80,*Default,NTP,0000,0000,0000,,叶子在不是叶子的东西上
Dialogue: 0,0:21:50.80,0:21:52.48,*Default,NTP,0000,0000,0000,,然后我们在哪里进行递归
Dialogue: 0,0:21:52.48,0:21:54.80,*Default,NTP,0000,0000,0000,,来电
Dialogue: 0,0:21:56.84,0:21:59.84,*Default,NTP,0000,0000,0000,,出色地
Dialogue: 0,0:21:59.84,0:22:02.08,*Default,NTP,0000,0000,0000,,如果这个东西是一片叶子那么我们就
Dialogue: 0,0:22:02.08,0:22:04.16,*Default,NTP,0000,0000,0000,,跳过它
Dialogue: 0,0:22:04.16,0:22:06.48,*Default,NTP,0000,0000,0000,,所以我们必须在非叶子上调用它
Dialogue: 0,0:22:06.48,0:22:08.72,*Default,NTP,0000,0000,0000,,这里
Dialogue: 0,0:22:08.80,0:22:12.56,*Default,NTP,0000,0000,0000,,奇迹般的 这是轻描淡写的说法
Dialogue: 0,0:22:12.56,0:22:13.36,*Default,NTP,0000,0000,0000,,约翰
Dialogue: 0,0:22:13.36,0:22:15.84,*Default,NTP,0000,0000,0000,,嗯，这很有帮助，我曾经做过
Dialogue: 0,0:22:15.84,0:22:16.96,*Default,NTP,0000,0000,0000,,是时候写这个问题了
Dialogue: 0,0:22:16.96,0:22:18.64,*Default,NTP,0000,0000,0000,,向所有有过这样经历的学生致歉
Dialogue: 0,0:22:18.64,0:22:20.48,*Default,NTP,0000,0000,0000,,票哦伙计你把它放在
Dialogue: 0,0:22:20.48,0:22:21.36,*Default,NTP,0000,0000,0000,,考试
Dialogue: 0,0:22:21.36,0:22:26.96,*Default,NTP,0000,0000,0000,,嗯，这是一次实验性考试
Dialogue: 0,0:22:26.96,0:22:28.88,*Default,NTP,0000,0000,0000,,实验进行得不太顺利所以
Dialogue: 0,0:22:28.88,0:22:30.40,*Default,NTP,0000,0000,0000,,这是我们第一次给予
Dialogue: 0,0:22:30.40,0:22:32.00,*Default,NTP,0000,0000,0000,,人们是翻译，我认为
Dialogue: 0,0:22:32.00,0:22:33.36,*Default,NTP,0000,0000,0000,,事实证明可能对他们有很大帮助
Dialogue: 0,0:22:33.36,0:22:34.88,*Default,NTP,0000,0000,0000,,对他们没有多大帮助
Dialogue: 0,0:22:34.88,0:22:37.60,*Default,NTP,0000,0000,0000,,嗯，不过这是一个很好的家庭作业问题
Dialogue: 0,0:22:37.60,0:22:38.48,*Default,NTP,0000,0000,0000,,和
Dialogue: 0,0:22:38.48,0:22:40.64,*Default,NTP,0000,0000,0000,,是的，我的意思是你知道这件事的关键
Dialogue: 0,0:22:40.64,0:22:42.72,*Default,NTP,0000,0000,0000,,问题真的很明白
Dialogue: 0,0:22:42.72,0:22:45.44,*Default,NTP,0000,0000,0000,,你想做的事不是关于
Dialogue: 0,0:22:45.44,0:22:47.28,*Default,NTP,0000,0000,0000,,就像记住你见过的一些模式
Dialogue: 0,0:22:47.28,0:22:48.08,*Default,NTP,0000,0000,0000,,前
Dialogue: 0,0:22:48.08,0:22:51.36,*Default,NTP,0000,0000,0000,,但只是专注于呃你知道
Dialogue: 0,0:22:51.36,0:22:54.80,*Default,NTP,0000,0000,0000,,就像这个过程到底是什么
Dialogue: 0,0:22:54.80,0:22:57.76,*Default,NTP,0000,0000,0000,,我试图用代码来描述
Dialogue: 0,0:22:57.76,0:22:59.60,*Default,NTP,0000,0000,0000,,但这是你知道的原因
Dialogue: 0,0:22:59.60,0:23:01.04,*Default,NTP,0000,0000,0000,,结果并不顺利
Dialogue: 0,0:23:01.04,0:23:03.60,*Default,NTP,0000,0000,0000,,呃，就是有这样的错误
Dialogue: 0,0:23:03.60,0:23:05.52,*Default,NTP,0000,0000,0000,,字符串的处理
Dialogue: 0,0:23:05.52,0:23:08.24,*Default,NTP,0000,0000,0000,,事实证明这很难处理
Dialogue: 0,0:23:08.24,0:23:09.76,*Default,NTP,0000,0000,0000,,但至少我现在没有给你
Dialogue: 0,0:23:09.76,0:23:11.28,*Default,NTP,0000,0000,0000,,描述为什么会这样
Dialogue: 0,0:23:11.28,0:23:13.52,*Default,NTP,0000,0000,0000,,这是
Dialogue: 0,0:23:15.52,0:23:16.80,*Default,NTP,0000,0000,0000,,是的，好问题，那么你会怎样
Dialogue: 0,0:23:16.80,0:23:19.04,*Default,NTP,0000,0000,0000,,处理这样的问题并且
Dialogue: 0,0:23:19.04,0:23:20.48,*Default,NTP,0000,0000,0000,,特别是如果你读了一些部分并且
Dialogue: 0,0:23:20.48,0:23:21.68,*Default,NTP,0000,0000,0000,,你就像我不知道这部分是怎么回事
Dialogue: 0,0:23:21.68,0:23:22.40,*Default,NTP,0000,0000,0000,,作品
Dialogue: 0,0:23:22.40,0:23:23.84,*Default,NTP,0000,0000,0000,,好吧，我的意思是我没看过这个
Dialogue: 0,0:23:23.84,0:23:25.44,*Default,NTP,0000,0000,0000,,问题在相当长的一段时间内
Dialogue: 0,0:23:25.44,0:23:27.68,*Default,NTP,0000,0000,0000,,嗯，所以对我来说确实感觉有点新鲜
Dialogue: 0,0:23:27.68,0:23:29.68,*Default,NTP,0000,0000,0000,,虽然呃
Dialogue: 0,0:23:29.68,0:23:32.24,*Default,NTP,0000,0000,0000,,不完全是新的，因为我写了它，但是
Dialogue: 0,0:23:32.24,0:23:33.52,*Default,NTP,0000,0000,0000,,嗯，我不是
Dialogue: 0,0:23:33.52,0:23:35.92,*Default,NTP,0000,0000,0000,,确定这里会发生什么
Dialogue: 0,0:23:35.92,0:23:37.68,*Default,NTP,0000,0000,0000,,我正在读骨架
Dialogue: 0,0:23:37.68,0:23:39.68,*Default,NTP,0000,0000,0000,,所以我就直接跳过了
Dialogue: 0,0:23:39.68,0:23:40.88,*Default,NTP,0000,0000,0000,,去
Dialogue: 0,0:23:40.88,0:23:43.92,*Default,NTP,0000,0000,0000,,我脑子里有这个想法
Dialogue: 0,0:23:43.92,0:23:48.24,*Default,NTP,0000,0000,0000,,我们想要一棵树
Dialogue: 0,0:23:48.24,0:23:50.64,*Default,NTP,0000,0000,0000,,我们想去掉其中一片叶子
Dialogue: 0,0:23:50.64,0:23:52.16,*Default,NTP,0000,0000,0000,,然后我们就会有另一棵树
Dialogue: 0,0:23:52.16,0:23:54.56,*Default,NTP,0000,0000,0000,,我们会从中取出一片叶子
Dialogue: 0,0:23:54.56,0:23:55.60,*Default,NTP,0000,0000,0000,,我想知道
Dialogue: 0,0:23:55.60,0:23:57.68,*Default,NTP,0000,0000,0000,,那会怎样发生，就像我一样
Dialogue: 0,0:23:57.68,0:23:58.96,*Default,NTP,0000,0000,0000,,一个函数可以做到这一点，但是
Dialogue: 0,0:23:58.96,0:24:01.04,*Default,NTP,0000,0000,0000,,这必须被调用很多次，所以
Dialogue: 0,0:24:01.04,0:24:02.88,*Default,NTP,0000,0000,0000,,我最终跳到这里
Dialogue: 0,0:24:02.88,0:24:05.28,*Default,NTP,0000,0000,0000,,试图寻找其中的机制
Dialogue: 0,0:24:05.28,0:24:06.24,*Default,NTP,0000,0000,0000,,涉及
Dialogue: 0,0:24:06.24,0:24:08.40,*Default,NTP,0000,0000,0000,,就像一次摘掉一片叶子一样
Dialogue: 0,0:24:08.40,0:24:10.24,*Default,NTP,0000,0000,0000,,并一遍又一遍地这样做
Dialogue: 0,0:24:10.24,0:24:12.96,*Default,NTP,0000,0000,0000,,我认为这部分不是，嗯不是
Dialogue: 0,0:24:12.96,0:24:15.12,*Default,NTP,0000,0000,0000,,让我很困惑，而这
Dialogue: 0,0:24:15.12,0:24:17.60,*Default,NTP,0000,0000,0000,,你知道，浏览它后，它看起来就像
Dialogue: 0,0:24:17.60,0:24:18.48,*Default,NTP,0000,0000,0000,,相当野兽
Dialogue: 0,0:24:18.48,0:24:20.72,*Default,NTP,0000,0000,0000,,因为有一堆空白
Dialogue: 0,0:24:20.72,0:24:22.64,*Default,NTP,0000,0000,0000,,呃你知道现在看起来很合理但是
Dialogue: 0,0:24:22.64,0:24:24.56,*Default,NTP,0000,0000,0000,,呃，但一开始并没有
Dialogue: 0,0:24:24.56,0:24:26.80,*Default,NTP,0000,0000,0000,,嗯，但是这个想法我们会有点
Dialogue: 0,0:24:26.80,0:24:27.68,*Default,NTP,0000,0000,0000,,跟踪
Dialogue: 0,0:24:27.68,0:24:29.92,*Default,NTP,0000,0000,0000,,我们从那棵树上摘下来的
Dialogue: 0,0:24:29.92,0:24:31.68,*Default,NTP,0000,0000,0000,,然后从中摘下叶子
Dialogue: 0,0:24:31.68,0:24:35.28,*Default,NTP,0000,0000,0000,,我想这是一个完全独立的
Dialogue: 0,0:24:35.28,0:24:35.76,*Default,NTP,0000,0000,0000,,问题
Dialogue: 0,0:24:35.76,0:24:37.84,*Default,NTP,0000,0000,0000,,从你到底如何经历并得到
Dialogue: 0,0:24:37.84,0:24:38.88,*Default,NTP,0000,0000,0000,,去掉一片叶子
Dialogue: 0,0:24:38.88,0:24:41.60,*Default,NTP,0000,0000,0000,,所以我认为在一个非常大的问题上
Dialogue: 0,0:24:41.60,0:24:42.32,*Default,NTP,0000,0000,0000,,这
Dialogue: 0,0:24:42.32,0:24:44.16,*Default,NTP,0000,0000,0000,,嗯正在寻找你可以的方法
Dialogue: 0,0:24:44.16,0:24:46.16,*Default,NTP,0000,0000,0000,,解决一部分并解决另一部分
Dialogue: 0,0:24:46.16,0:24:50.72,*Default,NTP,0000,0000,0000,,模块化可能会使其更易于管理
Dialogue: 0,0:24:50.72,0:24:52.24,*Default,NTP,0000,0000,0000,,好的，让我们看一下这个
Dialogue: 0,0:24:52.24,0:24:54.72,*Default,NTP,0000,0000,0000,,是2018年秋天
Dialogue: 0,0:24:54.72,0:24:59.28,*Default,NTP,0000,0000,0000,,第七题 三次元是一对
Dialogue: 0,0:24:59.28,0:25:02.80,*Default,NTP,0000,0000,0000,,树实例数
Dialogue: 0,0:25:02.80,0:25:06.08,*Default,NTP,0000,0000,0000,,k 和 v 具有相同的
Dialogue: 0,0:25:06.08,0:25:09.12,*Default,NTP,0000,0000,0000,,构造每个节点
Dialogue: 0,0:25:09.12,0:25:13.04,*Default,NTP,0000,0000,0000,,k 在 v 中有对应的节点
Dialogue: 0,0:25:13.04,0:25:16.48,*Default,NTP,0000,0000,0000,,k 中的标签称为键，每个键
Dialogue: 0,0:25:16.48,0:25:21.28,*Default,NTP,0000,0000,0000,,可能是 k 中多个节点的标签
Dialogue: 0,0:25:21.36,0:25:24.64,*Default,NTP,0000,0000,0000,,该键的值都是
Dialogue: 0,0:25:24.64,0:25:25.84,*Default,NTP,0000,0000,0000,,标签
Dialogue: 0,0:25:25.84,0:25:29.36,*Default,NTP,0000,0000,0000,,v 中所有对应节点的
Dialogue: 0,0:25:29.36,0:25:32.56,*Default,NTP,0000,0000,0000,,好的，所以 k 可以有两个标签
Dialogue: 0,0:25:32.56,0:25:34.08,*Default,NTP,0000,0000,0000,,相同
Dialogue: 0,0:25:34.08,0:25:36.40,*Default,NTP,0000,0000,0000,,如果你想知道所有
Dialogue: 0,0:25:36.40,0:25:38.48,*Default,NTP,0000,0000,0000,,两个人对应的事物
Dialogue: 0,0:25:38.48,0:25:41.52,*Default,NTP,0000,0000,0000,,那么你必须查找
Dialogue: 0,0:25:41.52,0:25:45.20,*Default,NTP,0000,0000,0000,,对应的标签c和a
Dialogue: 0,0:25:45.20,0:25:49.04,*Default,NTP,0000,0000,0000,,在 v treat 这就是为什么我们看到
Dialogue: 0,0:25:49.04,0:25:49.68,*Default,NTP,0000,0000,0000,,这里是关键
Dialogue: 0,0:25:49.68,0:25:52.80,*Default,NTP,0000,0000,0000,,2 有两个值
Dialogue: 0,0:25:52.80,0:25:54.84,*Default,NTP,0000,0000,0000,,查找函数返回其中之一
Dialogue: 0,0:25:54.84,0:25:57.44,*Default,NTP,0000,0000,0000,,价值观
Dialogue: 0,0:25:57.44,0:25:58.96,*Default,NTP,0000,0000,0000,,查找函数返回其中之一
Dialogue: 0,0:25:58.96,0:26:00.56,*Default,NTP,0000,0000,0000,,一个键的值
Dialogue: 0,0:26:00.56,0:26:02.48,*Default,NTP,0000,0000,0000,,具体来说是一个查找函数
Dialogue: 0,0:26:02.48,0:26:03.84,*Default,NTP,0000,0000,0000,,k 中的节点
Dialogue: 0,0:26:03.84,0:26:06.24,*Default,NTP,0000,0000,0000,,是一个以 v 为参数的函数
Dialogue: 0,0:26:06.24,0:26:08.40,*Default,NTP,0000,0000,0000,,参数并返回标签
Dialogue: 0,0:26:08.40,0:26:11.68,*Default,NTP,0000,0000,0000,,对于 v 中的对应节点 好吧所以
Dialogue: 0,0:26:11.68,0:26:12.32,*Default,NTP,0000,0000,0000,,记住v
Dialogue: 0,0:26:12.32,0:26:15.60,*Default,NTP,0000,0000,0000,,这里是一棵树
Dialogue: 0,0:26:15.60,0:26:19.04,*Default,NTP,0000,0000,0000,,呃，所以查找函数需要
Dialogue: 0,0:26:19.04,0:26:22.64,*Default,NTP,0000,0000,0000,,整个 v 树并告诉你哪个
Dialogue: 0,0:26:22.64,0:26:25.60,*Default,NTP,0000,0000,0000,,获得或喜欢的标签获得其中之一
Dialogue: 0,0:26:25.60,0:26:27.28,*Default,NTP,0000,0000,0000,,标签并返回
Dialogue: 0,0:26:27.28,0:26:29.20,*Default,NTP,0000,0000,0000,,实现生成器函数查找
Dialogue: 0,0:26:29.20,0:26:31.60,*Default,NTP,0000,0000,0000,,它需要一个树实例 k 和一些
Dialogue: 0,0:26:31.60,0:26:34.72,*Default,NTP,0000,0000,0000,,key 它产生所有的查找函数
Dialogue: 0,0:26:34.72,0:26:36.08,*Default,NTP,0000,0000,0000,,k 中的节点有
Dialogue: 0,0:26:36.08,0:26:39.60,*Default,NTP,0000,0000,0000,,key 作为新查找的标签
Dialogue: 0,0:26:39.60,0:26:40.96,*Default,NTP,0000,0000,0000,,函数是实现的一部分
Dialogue: 0,0:26:40.96,0:26:42.56,*Default,NTP,0000,0000,0000,,可以，然后呢
Dialogue: 0,0:26:42.56,0:26:44.72,*Default,NTP,0000,0000,0000,,哦，我说另一件事真的是
Dialogue: 0,0:26:44.72,0:26:46.40,*Default,NTP,0000,0000,0000,,很大，但这也很大
Dialogue: 0,0:26:46.40,0:26:48.80,*Default,NTP,0000,0000,0000,,好的，所以我想我们应该学习如何做到这一点
Dialogue: 0,0:26:48.80,0:26:50.08,*Default,NTP,0000,0000,0000,,作品
Dialogue: 0,0:26:50.08,0:26:53.60,*Default,NTP,0000,0000,0000,,你在一些 k 树上调用查找，它是
Dialogue: 0,0:26:53.60,0:26:55.20,*Default,NTP,0000,0000,0000,,这是给我们的
Dialogue: 0,0:26:55.20,0:26:57.44,*Default,NTP,0000,0000,0000,,示例和一些值
Dialogue: 0,0:26:57.44,0:27:00.56,*Default,NTP,0000,0000,0000,,就像两个它给我们带来回报
Dialogue: 0,0:27:00.56,0:27:03.68,*Default,NTP,0000,0000,0000,,两个函数的生成器
Dialogue: 0,0:27:03.68,0:27:05.44,*Default,NTP,0000,0000,0000,,每个函数都采用这个
Dialogue: 0,0:27:05.44,0:27:07.28,*Default,NTP,0000,0000,0000,,整棵树在
Dialogue: 0,0:27:07.28,0:27:09.84,*Default,NTP,0000,0000,0000,,但该函数知道一些关于
Dialogue: 0,0:27:09.84,0:27:11.84,*Default,NTP,0000,0000,0000,,就像它将遵循什么路径
Dialogue: 0,0:27:11.84,0:27:15.36,*Default,NTP,0000,0000,0000,,所以它给你相应的
Dialogue: 0,0:27:15.36,0:27:17.76,*Default,NTP,0000,0000,0000,,对于某些特定的值
Dialogue: 0,0:27:17.76,0:27:21.12,*Default,NTP,0000,0000,0000,,k 中的位置，因此称为 f
Dialogue: 0,0:27:21.12,0:27:24.24,*Default,NTP,0000,0000,0000,,第一个 f 给了我们 c 并调用
Dialogue: 0,0:27:24.24,0:27:24.64,*Default,NTP,0000,0000,0000,,第二
Dialogue: 0,0:27:24.64,0:27:27.76,*Default,NTP,0000,0000,0000,,f 给了我们一个
Dialogue: 0,0:27:29.92,0:27:32.56,*Default,NTP,0000,0000,0000,,所以这个问题就是一个
Dialogue: 0,0:27:32.56,0:27:34.08,*Default,NTP,0000,0000,0000,,的混合物
Dialogue: 0,0:27:34.08,0:27:37.44,*Default,NTP,0000,0000,0000,,遍历树木并处理
Dialogue: 0,0:27:37.44,0:27:38.96,*Default,NTP,0000,0000,0000,,生成器函数
Dialogue: 0,0:27:38.96,0:27:41.84,*Default,NTP,0000,0000,0000,,和高阶函数所以它是
Dialogue: 0,0:27:41.84,0:27:43.68,*Default,NTP,0000,0000,0000,,综合了很多主题
Dialogue: 0,0:27:43.68,0:27:44.96,*Default,NTP,0000,0000,0000,,课程
Dialogue: 0,0:27:44.96,0:27:47.04,*Default,NTP,0000,0000,0000,,但我不认为你必须喜欢
Dialogue: 0,0:27:47.04,0:27:48.00,*Default,NTP,0000,0000,0000,,发现
Dialogue: 0,0:27:48.00,0:27:51.04,*Default,NTP,0000,0000,0000,,怎么做到这么多就像
Dialogue: 0,0:27:51.04,0:27:54.48,*Default,NTP,0000,0000,0000,,查找将遍历并找到
Dialogue: 0,0:27:54.48,0:27:57.60,*Default,NTP,0000,0000,0000,,通往第二名的道路，但它正在前进
Dialogue: 0,0:27:57.60,0:27:59.44,*Default,NTP,0000,0000,0000,,将它们编码为函数
Dialogue: 0,0:27:59.44,0:28:01.44,*Default,NTP,0000,0000,0000,,这些功能将会去寻找
Dialogue: 0,0:28:01.44,0:28:02.56,*Default,NTP,0000,0000,0000,,同一条路
Dialogue: 0,0:28:02.56,0:28:04.80,*Default,NTP,0000,0000,0000,,通过 v 并给你
Dialogue: 0,0:28:04.80,0:28:07.76,*Default,NTP,0000,0000,0000,,对应标签
Dialogue: 0,0:28:08.80,0:28:12.64,*Default,NTP,0000,0000,0000,,好吧，那么查找实际上是如何工作的
Dialogue: 0,0:28:12.80,0:28:16.00,*Default,NTP,0000,0000,0000,,如果某物产生一个需要的函数
Dialogue: 0,0:28:16.00,0:28:17.65,*Default,NTP,0000,0000,0000,,在呃
Dialogue: 0,0:28:17.65,0:28:19.12,*Default,NTP,0000,0000,0000,,[音乐]
Dialogue: 0,0:28:19.12,0:28:21.84,*Default,NTP,0000,0000,0000,,整棵树都好并做一些事情
Dialogue: 0,0:28:21.84,0:28:23.28,*Default,NTP,0000,0000,0000,,用它
Dialogue: 0,0:28:23.28,0:28:25.68,*Default,NTP,0000,0000,0000,,否则我们会遍历所有分支
Dialogue: 0,0:28:25.68,0:28:27.92,*Default,NTP,0000,0000,0000,,我们进行新的查找
Dialogue: 0,0:28:27.92,0:28:32.88,*Default,NTP,0000,0000,0000,,嗯，这里的一切都很有趣
Dialogue: 0,0:28:32.96,0:28:36.96,*Default,NTP,0000,0000,0000,,嗯这些查找函数如 f
Dialogue: 0,0:28:37.60,0:28:39.76,*Default,NTP,0000,0000,0000,,他们拿了一棵树，他们必须
Dialogue: 0,0:28:39.76,0:28:40.80,*Default,NTP,0000,0000,0000,,不知何故
Dialogue: 0,0:28:40.80,0:28:42.84,*Default,NTP,0000,0000,0000,,带您一路到达您想要的标签
Dialogue: 0,0:28:42.84,0:28:44.16,*Default,NTP,0000,0000,0000,,想
Dialogue: 0,0:28:44.16,0:28:46.88,*Default,NTP,0000,0000,0000,,我认为最简单的情况是如果你
Dialogue: 0,0:28:46.88,0:28:47.36,*Default,NTP,0000,0000,0000,,抬头
Dialogue: 0,0:28:47.36,0:28:50.48,*Default,NTP,0000,0000,0000,,位于顶部，所以如果
Dialogue: 0,0:28:50.48,0:28:59.84,*Default,NTP,0000,0000,0000,,情况是这样的
Dialogue: 0,0:29:04.88,0:29:07.28,*Default,NTP,0000,0000,0000,,那
Dialogue: 0,0:29:08.48,0:29:12.00,*Default,NTP,0000,0000,0000,,k 是树的标签
Dialogue: 0,0:29:12.00,0:29:16.32,*Default,NTP,0000,0000,0000,,等于我正在寻找的密钥
Dialogue: 0,0:29:18.88,0:29:22.40,*Default,NTP,0000,0000,0000,,那么这意味着
Dialogue: 0,0:29:22.40,0:29:27.60,*Default,NTP,0000,0000,0000,,相应的值标签右侧
Dialogue: 0,0:29:27.60,0:29:28.00,*Default,NTP,0000,0000,0000,,那里
Dialogue: 0,0:29:28.00,0:29:31.04,*Default,NTP,0000,0000,0000,,从根本上来说，如果我接受了
Dialogue: 0,0:29:31.04,0:29:34.56,*Default,NTP,0000,0000,0000,,充满价值观的树
Dialogue: 0,0:29:34.56,0:29:38.24,*Default,NTP,0000,0000,0000,,我想退回那个
Dialogue: 0,0:29:38.24,0:29:41.84,*Default,NTP,0000,0000,0000,,在根
Dialogue: 0,0:29:49.76,0:29:53.20,*Default,NTP,0000,0000,0000,,否则我正在寻找的这把钥匙
Dialogue: 0,0:29:53.20,0:29:56.32,*Default,NTP,0000,0000,0000,,可能在某个地方的树枝上
Dialogue: 0,0:29:56.32,0:29:57.60,*Default,NTP,0000,0000,0000,,所以我要经历
Dialogue: 0,0:29:57.60,0:29:59.04,*Default,NTP,0000,0000,0000,,所有的分支，但这行不通
Dialogue: 0,0:29:59.04,0:30:00.00,*Default,NTP,0000,0000,0000,,穿过它所经过的树枝
Dialogue: 0,0:30:00.00,0:30:02.00,*Default,NTP,0000,0000,0000,,由于某种原因按索引排列
Dialogue: 0,0:30:02.00,0:30:04.32,*Default,NTP,0000,0000,0000,,好吧，我们看到原因是我们使用
Dialogue: 0,0:30:04.32,0:30:06.88,*Default,NTP,0000,0000,0000,,这里的索引
Dialogue: 0,0:30:06.88,0:30:09.84,*Default,NTP,0000,0000,0000,,一
Dialogue: 0,0:30:10.24,0:30:12.48,*Default,NTP,0000,0000,0000,,我们这里有一个提示，我们需要
Dialogue: 0,0:30:12.48,0:30:14.56,*Default,NTP,0000,0000,0000,,就像查找功能一样
Dialogue: 0,0:30:14.56,0:30:15.92,*Default,NTP,0000,0000,0000,,然后我们将建立一些新的
Dialogue: 0,0:30:15.92,0:30:18.24,*Default,NTP,0000,0000,0000,,基本上呃查找功能
Dialogue: 0,0:30:18.24,0:30:21.04,*Default,NTP,0000,0000,0000,,我以某种方式使用这个，所以我要放
Dialogue: 0,0:30:21.04,0:30:22.56,*Default,NTP,0000,0000,0000,,在我认为可能有效的草图中
Dialogue: 0,0:30:22.56,0:30:23.92,*Default,NTP,0000,0000,0000,,然后我们将开始
Dialogue: 0,0:30:23.92,0:30:26.96,*Default,NTP,0000,0000,0000,,新的查找并看看它做了什么
Dialogue: 0,0:30:26.96,0:30:28.72,*Default,NTP,0000,0000,0000,,我想如果你想介绍这个
Dialogue: 0,0:30:28.72,0:30:30.08,*Default,NTP,0000,0000,0000,,姓名查询
Dialogue: 0,0:30:30.08,0:30:31.68,*Default,NTP,0000,0000,0000,,嗯，我们真的得走了
Dialogue: 0,0:30:31.68,0:30:33.60,*Default,NTP,0000,0000,0000,,通过所有不同的
Dialogue: 0,0:30:33.60,0:30:38.72,*Default,NTP,0000,0000,0000,,该键在此分支中出现的次数
Dialogue: 0,0:30:40.64,0:30:43.92,*Default,NTP,0000,0000,0000,,并获取它的查找函数
Dialogue: 0,0:30:43.92,0:30:46.16,*Default,NTP,0000,0000,0000,,听起来像是呃使用递归，这是
Dialogue: 0,0:30:46.16,0:30:47.84,*Default,NTP,0000,0000,0000,,我想与我们的问题非常相似
Dialogue: 0,0:30:47.84,0:30:48.96,*Default,NTP,0000,0000,0000,,刚刚做了
Dialogue: 0,0:30:48.96,0:30:50.72,*Default,NTP,0000,0000,0000,,我们不会在这里查找它
Dialogue: 0,0:30:50.72,0:30:52.64,*Default,NTP,0000,0000,0000,,在 k 中，但我们要在其中查找
Dialogue: 0,0:30:52.64,0:30:55.44,*Default,NTP,0000,0000,0000,,k 的一个分支
Dialogue: 0,0:30:57.92,0:31:00.24,*Default,NTP,0000,0000,0000,,打字不好，我们仍在寻找
Dialogue: 0,0:31:00.24,0:31:02.84,*Default,NTP,0000,0000,0000,,我们正在寻找的同一把钥匙
Dialogue: 0,0:31:02.84,0:31:05.84,*Default,NTP,0000,0000,0000,,前
Dialogue: 0,0:31:07.44,0:31:09.84,*Default,NTP,0000,0000,0000,,这表示产生一个新的查找，所以
Dialogue: 0,0:31:09.84,0:31:11.20,*Default,NTP,0000,0000,0000,,我们来思考一下这个函数是什么
Dialogue: 0,0:31:11.20,0:31:12.32,*Default,NTP,0000,0000,0000,,会做
Dialogue: 0,0:31:12.32,0:31:14.80,*Default,NTP,0000,0000,0000,,这个函数会查看
Dialogue: 0,0:31:14.80,0:31:15.60,*Default,NTP,0000,0000,0000,,分支
Dialogue: 0,0:31:15.60,0:31:19.12,*Default,NTP,0000,0000,0000,,v 并找到相应的值
Dialogue: 0,0:31:19.12,0:31:20.96,*Default,NTP,0000,0000,0000,,与键匹配的
Dialogue: 0,0:31:20.96,0:31:24.08,*Default,NTP,0000,0000,0000,,但我们想查看所有 k 和
Dialogue: 0,0:31:24.08,0:31:26.80,*Default,NTP,0000,0000,0000,,找到对应的值
Dialogue: 0,0:31:26.80,0:31:30.72,*Default,NTP,0000,0000,0000,,所以我们在这里构建一个新函数
Dialogue: 0,0:31:30.72,0:31:35.28,*Default,NTP,0000,0000,0000,,包含整棵树 v
Dialogue: 0,0:31:42.56,0:31:47.60,*Default,NTP,0000,0000,0000,,它必须呃
Dialogue: 0,0:31:47.60,0:31:52.00,*Default,NTP,0000,0000,0000,,在其分支之一内查找
Dialogue: 0,0:31:53.28,0:32:00.32,*Default,NTP,0000,0000,0000,,i 我们正在寻找的标签
Dialogue: 0,0:32:00.32,0:32:03.68,*Default,NTP,0000,0000,0000,,我在这里假设
Dialogue: 0,0:32:03.92,0:32:06.24,*Default,NTP,0000,0000,0000,,那
Dialogue: 0,0:32:08.00,0:32:11.20,*Default,NTP,0000,0000,0000,,假设 f 是一个查找
Dialogue: 0,0:32:11.20,0:32:15.84,*Default,NTP,0000,0000,0000,,v 的一个分支的函数
Dialogue: 0,0:32:27.04,0:32:28.96,*Default,NTP,0000,0000,0000,,那么 new Lookup 基本上是做什么的
Dialogue: 0,0:32:28.96,0:32:30.88,*Default,NTP,0000,0000,0000,,就像如果你有办法
Dialogue: 0,0:32:30.88,0:32:33.52,*Default,NTP,0000,0000,0000,,从这里看，发现或抱歉
Dialogue: 0,0:32:33.52,0:32:34.64,*Default,NTP,0000,0000,0000,,我们在这里做吧
Dialogue: 0,0:32:34.64,0:32:37.52,*Default,NTP,0000,0000,0000,,如果我们可以从这里看并找到a
Dialogue: 0,0:32:37.52,0:32:38.88,*Default,NTP,0000,0000,0000,,我们正在构建的是一个函数
Dialogue: 0,0:32:38.88,0:32:39.84,*Default,NTP,0000,0000,0000,,可以从这里看
Dialogue: 0,0:32:39.84,0:32:45.52,*Default,NTP,0000,0000,0000,,并找到 a 这就是它的作用
Dialogue: 0,0:32:46.40,0:32:48.80,*Default,NTP,0000,0000,0000,,然后我们如何构建所有的
Dialogue: 0,0:32:48.80,0:32:49.44,*Default,NTP,0000,0000,0000,,功能
Dialogue: 0,0:32:49.44,0:32:53.52,*Default,NTP,0000,0000,0000,,找到 c 和 a
Dialogue: 0,0:32:53.52,0:32:54.96,*Default,NTP,0000,0000,0000,,好吧，我们正在经历所有的
Dialogue: 0,0:32:54.96,0:32:57.12,*Default,NTP,0000,0000,0000,,不同的分支所以这是这个分支
Dialogue: 0,0:32:57.12,0:32:58.80,*Default,NTP,0000,0000,0000,,这个分行和这个分行
Dialogue: 0,0:32:58.80,0:33:00.32,*Default,NTP,0000,0000,0000,,然后我们将经历所有
Dialogue: 0,0:33:00.32,0:33:02.00,*Default,NTP,0000,0000,0000,,有几次我找到了其中的关键
Dialogue: 0,0:33:02.00,0:33:02.56,*Default,NTP,0000,0000,0000,,分支
Dialogue: 0,0:33:02.56,0:33:05.84,*Default,NTP,0000,0000,0000,,我只在这里和这里拍摄
Dialogue: 0,0:33:05.84,0:33:07.44,*Default,NTP,0000,0000,0000,,知道如何查看的函数
Dialogue: 0,0:33:07.44,0:33:09.36,*Default,NTP,0000,0000,0000,,通过这里找到
Dialogue: 0,0:33:09.36,0:33:11.84,*Default,NTP,0000,0000,0000,,相应的 c 和函数
Dialogue: 0,0:33:11.84,0:33:13.20,*Default,NTP,0000,0000,0000,,浏览这里并找到
Dialogue: 0,0:33:13.20,0:33:14.48,*Default,NTP,0000,0000,0000,,对应一个
Dialogue: 0,0:33:14.48,0:33:16.24,*Default,NTP,0000,0000,0000,,并构建可以查看的新功能
Dialogue: 0,0:33:16.24,0:33:19.20,*Default,NTP,0000,0000,0000,,从b的顶部
Dialogue: 0,0:33:20.48,0:33:25.84,*Default,NTP,0000,0000,0000,,哦，问题很乱
Dialogue: 0,0:33:28.80,0:33:30.96,*Default,NTP,0000,0000,0000,,是的，很好的问题，所以问题是
Dialogue: 0,0:33:30.96,0:33:32.24,*Default,NTP,0000,0000,0000,,你知道你什么时候会这么做
Dialogue: 0,0:33:32.24,0:33:33.76,*Default,NTP,0000,0000,0000,,它与一切有何关系
Dialogue: 0,0:33:33.76,0:33:35.60,*Default,NTP,0000,0000,0000,,其他你知道的
Dialogue: 0,0:33:35.60,0:33:39.28,*Default,NTP,0000,0000,0000,,嗯，这很抽象但是
Dialogue: 0,0:33:39.28,0:33:41.92,*Default,NTP,0000,0000,0000,,下面的模式经常出现
Dialogue: 0,0:33:41.92,0:33:43.44,*Default,NTP,0000,0000,0000,,也就是说，如果你想构建
Dialogue: 0,0:33:43.44,0:33:44.80,*Default,NTP,0000,0000,0000,,某物
Dialogue: 0,0:33:44.80,0:33:47.76,*Default,NTP,0000,0000,0000,,那就是你知道四件事
Dialogue: 0,0:33:47.76,0:33:49.28,*Default,NTP,0000,0000,0000,,从三件事开始
Dialogue: 0,0:33:49.28,0:33:50.00,*Default,NTP,0000,0000,0000,,长的
Dialogue: 0,0:33:50.00,0:33:52.64,*Default,NTP,0000,0000,0000,,然后你在开头放了一些东西
Dialogue: 0,0:33:52.64,0:33:54.16,*Default,NTP,0000,0000,0000,,或有时结束
Dialogue: 0,0:33:54.16,0:33:56.40,*Default,NTP,0000,0000,0000,,你见过的链接列表看起来像这样
Dialogue: 0,0:33:56.40,0:33:58.08,*Default,NTP,0000,0000,0000,,只使用常规时的这种模式
Dialogue: 0,0:33:58.08,0:33:59.28,*Default,NTP,0000,0000,0000,,列表
Dialogue: 0,0:33:59.28,0:34:02.64,*Default,NTP,0000,0000,0000,,在这里我们看到它使用函数
Dialogue: 0,0:34:02.64,0:34:07.36,*Default,NTP,0000,0000,0000,,其中函数可以表示
Dialogue: 0,0:34:07.36,0:34:09.52,*Default,NTP,0000,0000,0000,,呃大部分路然后我们
Dialogue: 0,0:34:09.52,0:34:11.36,*Default,NTP,0000,0000,0000,,构建一个新函数来表示
Dialogue: 0,0:34:11.36,0:34:12.56,*Default,NTP,0000,0000,0000,,甚至更长的路
Dialogue: 0,0:34:12.56,0:34:14.00,*Default,NTP,0000,0000,0000,,基本上只是喜欢坚持
Dialogue: 0,0:34:14.00,0:34:15.92,*Default,NTP,0000,0000,0000,,前面的东西
Dialogue: 0,0:34:15.92,0:34:18.08,*Default,NTP,0000,0000,0000,,现在这个功能的实现方式
Dialogue: 0,0:34:18.08,0:34:19.36,*Default,NTP,0000,0000,0000,,是由
Dialogue: 0,0:34:19.36,0:34:22.56,*Default,NTP,0000,0000,0000,,调用代表的函数
Dialogue: 0,0:34:22.56,0:34:23.76,*Default,NTP,0000,0000,0000,,路径的其余部分
Dialogue: 0,0:34:23.76,0:34:26.24,*Default,NTP,0000,0000,0000,,所以如果你打电话给 g 你就有点
Dialogue: 0,0:34:26.24,0:34:27.84,*Default,NTP,0000,0000,0000,,现在调用整个路径你为什么要
Dialogue: 0,0:34:27.84,0:34:29.12,*Default,NTP,0000,0000,0000,,想要调用整个路径
Dialogue: 0,0:34:29.12,0:34:31.12,*Default,NTP,0000,0000,0000,,调用路径就像做
Dialogue: 0,0:34:31.12,0:34:33.12,*Default,NTP,0000,0000,0000,,在这种情况下，我们是有树的东西
Dialogue: 0,0:34:33.12,0:34:35.04,*Default,NTP,0000,0000,0000,,从中提取特定标签
Dialogue: 0,0:34:35.04,0:34:36.24,*Default,NTP,0000,0000,0000,,树
Dialogue: 0,0:34:36.24,0:34:39.44,*Default,NTP,0000,0000,0000,,嗯，所以从这个意义上来说，它看起来确实
Dialogue: 0,0:34:39.44,0:34:42.72,*Default,NTP,0000,0000,0000,,就像您以前见过的相同概念
Dialogue: 0,0:34:42.72,0:34:45.36,*Default,NTP,0000,0000,0000,,但肯定以不同的方式
Dialogue: 0,0:34:45.36,0:34:45.84,*Default,NTP,0000,0000,0000,,现在
Dialogue: 0,0:34:45.84,0:34:47.92,*Default,NTP,0000,0000,0000,,使用函数机制
Dialogue: 0,0:34:47.92,0:34:50.00,*Default,NTP,0000,0000,0000,,做你本可以做的事
Dialogue: 0,0:34:50.00,0:34:53.20,*Default,NTP,0000,0000,0000,,带有链表和嗯
Dialogue: 0,0:34:53.20,0:34:55.28,*Default,NTP,0000,0000,0000,,是的，并且知道你可以
Dialogue: 0,0:34:55.28,0:34:57.04,*Default,NTP,0000,0000,0000,,以不同的方式实现同​​一件事
Dialogue: 0,0:34:57.04,0:34:58.72,*Default,NTP,0000,0000,0000,,是计算机科学的一部分，但它是
Dialogue: 0,0:34:58.72,0:35:02.00,*Default,NTP,0000,0000,0000,,这真的是一个新事物
Dialogue: 0,0:35:02.00,0:35:04.80,*Default,NTP,0000,0000,0000,,考试时向您呈现的内容为
Dialogue: 0,0:35:04.80,0:35:06.80,*Default,NTP,0000,0000,0000,,就像一种新的合成方式
Dialogue: 0,0:35:06.80,0:35:08.80,*Default,NTP,0000,0000,0000,,嗯，你知道的现有想法
Dialogue: 0,0:35:08.80,0:35:10.40,*Default,NTP,0000,0000,0000,,如何使用您知道如何使用的功能
Dialogue: 0,0:35:10.40,0:35:12.32,*Default,NTP,0000,0000,0000,,链接列表你知道如何使用路径
Dialogue: 0,0:35:12.32,0:35:14.24,*Default,NTP,0000,0000,0000,,但在这里你被要求放
Dialogue: 0,0:35:14.24,0:35:16.88,*Default,NTP,0000,0000,0000,,他们在一起
Dialogue: 0,0:35:16.88,0:35:21.12,*Default,NTP,0000,0000,0000,,新方法好吧，让我们结束吧
Dialogue: 0,0:35:21.12,0:35:22.40,*Default,NTP,0000,0000,0000,,解释为什么
Dialogue: 0,0:35:22.40,0:35:24.88,*Default,NTP,0000,0000,0000,,产生新的查找我再次查找
Dialogue: 0,0:35:24.88,0:35:26.24,*Default,NTP,0000,0000,0000,,可以，然后呢
Dialogue: 0,0:35:26.24,0:35:29.84,*Default,NTP,0000,0000,0000,,嗯，让我们关注一个例子
Dialogue: 0,0:35:29.84,0:35:30.56,*Default,NTP,0000,0000,0000,,将
Dialogue: 0,0:35:30.56,0:35:33.60,*Default,NTP,0000,0000,0000,,当我们寻找号码时
Dialogue: 0,0:35:33.60,0:35:35.92,*Default,NTP,0000,0000,0000,,三
Dialogue: 0,0:35:37.04,0:35:40.32,*Default,NTP,0000,0000,0000,,我们还没有在顶部找到它
Dialogue: 0,0:35:40.32,0:35:43.52,*Default,NTP,0000,0000,0000,,它从未出现在这里，我们确实得到了
Dialogue: 0,0:35:43.52,0:35:47.20,*Default,NTP,0000,0000,0000,,在此分支中进行一次查找
Dialogue: 0,0:35:47.20,0:35:51.20,*Default,NTP,0000,0000,0000,,所以如果我在这个分支上调用查找
Dialogue: 0,0:35:51.20,0:35:54.80,*Default,NTP,0000,0000,0000,,嗯然后我得到一个查找函数
Dialogue: 0,0:35:54.80,0:35:58.00,*Default,NTP,0000,0000,0000,,但我没有调用查找
Dialogue: 0,0:35:58.00,0:36:01.20,*Default,NTP,0000,0000,0000,,在整棵树上，但仅在树枝上
Dialogue: 0,0:36:01.20,0:36:03.04,*Default,NTP,0000,0000,0000,,这意味着查找函数
Dialogue: 0,0:36:03.04,0:36:05.44,*Default,NTP,0000,0000,0000,,我真的只是准备好了
Dialogue: 0,0:36:05.44,0:36:08.24,*Default,NTP,0000,0000,0000,,来处理这个分支
Dialogue: 0,0:36:08.24,0:36:09.12,*Default,NTP,0000,0000,0000,,相应的
Dialogue: 0,0:36:09.12,0:36:12.72,*Default,NTP,0000,0000,0000,,v 树它知道如何接收
Dialogue: 0,0:36:12.72,0:36:16.24,*Default,NTP,0000,0000,0000,,这个分支并找到 s
Dialogue: 0,0:36:16.24,0:36:18.24,*Default,NTP,0000,0000,0000,,但它不知道如何接受这个
Dialogue: 0,0:36:18.24,0:36:19.44,*Default,NTP,0000,0000,0000,,整棵树
Dialogue: 0,0:36:19.44,0:36:22.56,*Default,NTP,0000,0000,0000,,并找到 s 所以我们需要创建
Dialogue: 0,0:36:22.56,0:36:25.52,*Default,NTP,0000,0000,0000,,一个基于该函数的新函数
Dialogue: 0,0:36:25.52,0:36:26.96,*Default,NTP,0000,0000,0000,,知道如何找到其中的 s
Dialogue: 0,0:36:26.96,0:36:27.68,*Default,NTP,0000,0000,0000,,分支
Dialogue: 0,0:36:27.68,0:36:30.24,*Default,NTP,0000,0000,0000,,并且可以在整个中找到 s
Dialogue: 0,0:36:30.24,0:36:30.80,*Default,NTP,0000,0000,0000,,树
Dialogue: 0,0:36:30.80,0:36:34.08,*Default,NTP,0000,0000,0000,,这就是为什么我们称新查找为我
Dialogue: 0,0:36:34.08,0:36:38.48,*Default,NTP,0000,0000,0000,,是这棵树的索引索引一
Dialogue: 0,0:36:38.48,0:36:40.88,*Default,NTP,0000,0000,0000,,Lookup 是可以使用的函数
Dialogue: 0,0:36:40.88,0:36:41.84,*Default,NTP,0000,0000,0000,,这个分行
Dialogue: 0,0:36:41.84,0:36:45.60,*Default,NTP,0000,0000,0000,,找到 s 然后我们做什么
