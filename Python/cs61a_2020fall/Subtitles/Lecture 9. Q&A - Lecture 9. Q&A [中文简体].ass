[Script Info]
; Script generated by Bilibili Evolved Danmaku Converter
; https://github.com/the1812/Bilibili-Evolved/
Title: Lecture 9. Q&A - Lecture 9. Q&A
ScriptType: v4.00+
PlayResX: 1152
PlayResY: 720
Timer: 10.0000
WrapStyle: 0
ScaledBorderAndShadow: no

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: TopLeft,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,7,32,32,32,0
Style: TopCenter,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,8,32,32,32,0
Style: TopRight,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,9,32,32,32,0
Style: BottomLeft,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,1,32,32,32,0
Style: BottomCenter,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,2,32,32,32,0
Style: BottomRight,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,3,32,32,32,0

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:01.12,0:00:03.44,BottomCenter,,0,0,0,,欢迎来到第九讲问答
Dialogue: 0,0:00:03.44,0:00:05.60,BottomCenter,,0,0,0,,我们来了，问题是关于什么
Dialogue: 0,0:00:05.60,0:00:08.08,BottomCenter,,0,0,0,,进行逆级联并且会
Dialogue: 0,0:00:08.08,0:00:10.00,BottomCenter,,0,0,0,,在 python 导师中查看它可以帮助我们
Dialogue: 0,0:00:10.00,0:00:12.00,BottomCenter,,0,0,0,,明白我猜不明白
Dialogue: 0,0:00:12.00,0:00:15.04,BottomCenter,,0,0,0,,我的意思是你可以尝试呃但是
Dialogue: 0,0:00:15.04,0:00:16.72,BottomCenter,,0,0,0,,大多数递归问题都是最好的
Dialogue: 0,0:00:16.72,0:00:18.48,BottomCenter,,0,0,0,,通过理解什么来理解
Dialogue: 0,0:00:18.48,0:00:19.52,BottomCenter,,0,0,0,,这些碎片做
Dialogue: 0,0:00:19.52,0:00:21.60,BottomCenter,,0,0,0,,以及它们如何组合在一起而不是
Dialogue: 0,0:00:21.60,0:00:22.72,BottomCenter,,0,0,0,,试图追踪它
Dialogue: 0,0:00:22.72,0:00:24.40,BottomCenter,,0,0,0,,因为一旦你提出论点
Dialogue: 0,0:00:24.40,0:00:26.32,BottomCenter,,0,0,0,,只是比追踪大一点
Dialogue: 0,0:00:26.32,0:00:27.84,BottomCenter,,0,0,0,,通过它就变成了
Dialogue: 0,0:00:27.84,0:00:31.44,BottomCenter,,0,0,0,,但更复杂等等
Dialogue: 0,0:00:31.44,0:00:33.68,BottomCenter,,0,0,0,,这里的目标就像一次练习
Dialogue: 0,0:00:33.68,0:00:35.44,BottomCenter,,0,0,0,,在其中一个视频中
Dialogue: 0,0:00:35.44,0:00:38.88,BottomCenter,,0,0,0,,是为了创建这个模式
Dialogue: 0,0:00:38.88,0:00:42.08,BottomCenter,,0,0,0,,嗯，当你的目标时应该是这样
Dialogue: 0,0:00:42.08,0:00:44.08,BottomCenter,,0,0,0,,就是打印一堆东西
Dialogue: 0,0:00:44.08,0:00:46.48,BottomCenter,,0,0,0,,该代码对应于打印
Dialogue: 0,0:00:46.48,0:00:48.08,BottomCenter,,0,0,0,,它的一部分
Dialogue: 0,0:00:48.08,0:00:51.12,BottomCenter,,0,0,0,,所以当 n 时这个调用就会增长
Dialogue: 0,0:00:51.12,0:00:54.24,BottomCenter,,0,0,0,,一二三四对应全部
Dialogue: 0,0:00:54.24,0:00:55.76,BottomCenter,,0,0,0,,那个
Dialogue: 0,0:00:55.76,0:00:59.36,BottomCenter,,0,0,0,,和这个对字符串的调用
Dialogue: 0,0:00:59.36,0:01:01.20,BottomCenter,,0,0,0,,对应于打印所有这些并且
Dialogue: 0,0:01:01.20,0:01:02.88,BottomCenter,,0,0,0,,我们遗漏了什么哦，我们需要一个
Dialogue: 0,0:01:02.88,0:01:04.31,BottomCenter,,0,0,0,,之前打印观察者哦，我们有一个
Dialogue: 0,0:01:04.31,0:01:06.15,BottomCenter,,0,0,0,,行做它
Dialogue: 0,0:01:06.15,0:01:10.07,BottomCenter,,0,0,0,,所以嗯，这可以解释这一点
Dialogue: 0,0:01:10.07,0:01:10.95,BottomCenter,,0,0,0,,执行
Dialogue: 0,0:01:10.95,0:01:12.71,BottomCenter,,0,0,0,,除此之外我们不知道会长什么
Dialogue: 0,0:01:12.71,0:01:14.07,BottomCenter,,0,0,0,,并缩小做，他们是
Dialogue: 0,0:01:14.07,0:01:17.59,BottomCenter,,0,0,0,,以这种复杂的方式定义
Dialogue: 0,0:01:17.59,0:01:19.43,BottomCenter,,0,0,0,,但这种复杂的方式实际上并不是
Dialogue: 0,0:01:19.43,0:01:21.92,BottomCenter,,0,0,0,,如果我们尝试打开它，那就很复杂了
Dialogue: 0,0:01:21.92,0:01:25.36,BottomCenter,,0,0,0,,所以它说成长
Dialogue: 0,0:01:25.36,0:01:27.92,BottomCenter,,0,0,0,,涉及到在
Dialogue: 0,0:01:27.92,0:01:29.59,BottomCenter,,0,0,0,,开头是一二三四我
Dialogue: 0,0:01:29.59,0:01:30.79,BottomCenter,,0,0,0,,认为思考有帮助
Dialogue: 0,0:01:30.79,0:01:32.16,BottomCenter,,0,0,0,,例子
Dialogue: 0,0:01:32.16,0:01:34.72,BottomCenter,,0,0,0,,然后调用一个函数然后
Dialogue: 0,0:01:34.72,0:01:35.20,BottomCenter,,0,0,0,,来电
Dialogue: 0,0:01:35.20,0:01:38.16,BottomCenter,,0,0,0,,另一个函数 f 然后 g 检查
Dialogue: 0,0:01:38.16,0:01:38.80,BottomCenter,,0,0,0,,如果 n
Dialogue: 0,0:01:38.80,0:01:41.28,BottomCenter,,0,0,0,,不为零，如果是，则调用 f 并
Dialogue: 0,0:01:41.28,0:01:41.84,BottomCenter,,0,0,0,,然后g
Dialogue: 0,0:01:41.84,0:01:43.92,BottomCenter,,0,0,0,,然后我们看看 f 和 g 是什么
Dialogue: 0,0:01:43.92,0:01:44.87,BottomCenter,,0,0,0,,好吧，他们正在成长
Dialogue: 0,0:01:44.87,0:01:47.84,BottomCenter,,0,0,0,,和他们的打印以及我们通过的 n
Dialogue: 0,0:01:47.84,0:01:49.76,BottomCenter,,0,0,0,,in 不是一二三四而是
Dialogue: 0,0:01:49.76,0:01:50.16,BottomCenter,,0,0,0,,一
Dialogue: 0,0:01:50.16,0:01:54.48,BottomCenter,,0,0,0,,两三所以呃如果我想重写的话
Dialogue: 0,0:01:54.48,0:01:56.80,BottomCenter,,0,0,0,,生长
Dialogue: 0,0:01:57.20,0:01:58.87,BottomCenter,,0,0,0,,没有这个高阶函数
Dialogue: 0,0:01:58.87,0:02:01.43,BottomCenter,,0,0,0,,生意看起来就像
Dialogue: 0,0:02:01.43,0:02:05.43,BottomCenter,,0,0,0,,增长并除以 10 打印
Dialogue: 0,0:02:05.43,0:02:08.08,BottomCenter,,0,0,0,,除以 10。这就是 f 和
Dialogue: 0,0:02:08.08,0:02:09.43,BottomCenter,,0,0,0,,然后做
Dialogue: 0,0:02:09.43,0:02:12.80,BottomCenter,,0,0,0,,意思是除了这些都是呃
Dialogue: 0,0:02:12.80,0:02:15.75,BottomCenter,,0,0,0,,检查是否是这样的情况 n
Dialogue: 0,0:02:15.75,0:02:18.08,BottomCenter,,0,0,0,,除以 10
Dialogue: 0,0:02:18.08,0:02:20.96,BottomCenter,,0,0,0,,这在Python中只是意味着如果这是
Dialogue: 0,0:02:20.96,0:02:22.56,BottomCenter,,0,0,0,,不等于零那就很好
Dialogue: 0,0:02:22.56,0:02:24.08,BottomCenter,,0,0,0,,一个写任何一个
Dialogue: 0,0:02:24.08,0:02:26.72,BottomCenter,,0,0,0,,事实上 python 的一个怪癖是
Dialogue: 0,0:02:26.72,0:02:28.47,BottomCenter,,0,0,0,,某种标准风格指南告诉你
Dialogue: 0,0:02:28.47,0:02:29.68,BottomCenter,,0,0,0,,应该忽略这部分
Dialogue: 0,0:02:29.68,0:02:31.75,BottomCenter,,0,0,0,,我想也可以把它留在里面
Dialogue: 0,0:02:31.75,0:02:33.75,BottomCenter,,0,0,0,,呃，因为它使它更明确，但是
Dialogue: 0,0:02:33.75,0:02:36.40,BottomCenter,,0,0,0,,无论如何，这就是增长函数
Dialogue: 0,0:02:36.40,0:02:37.44,BottomCenter,,0,0,0,,你构建的
Dialogue: 0,0:02:37.44,0:02:40.72,BottomCenter,,0,0,0,,接受一个数字 n 然后
Dialogue: 0,0:02:40.72,0:02:43.84,BottomCenter,,0,0,0,,调用 f 和 g 进行检查
Dialogue: 0,0:02:43.84,0:02:48.40,BottomCenter,,0,0,0,,如果 n 除以 10 不为 0 并且如果是
Dialogue: 0,0:02:48.40,0:02:50.80,BottomCenter,,0,0,0,,调用 f ，它是增长，然后调用 g ，它是
Dialogue: 0,0:02:50.80,0:02:51.59,BottomCenter,,0,0,0,,正在打印
Dialogue: 0,0:02:51.59,0:02:54.63,BottomCenter,,0,0,0,,为了完成这项工作
Dialogue: 0,0:02:55.19,0:02:57.91,BottomCenter,,0,0,0,,所以在这个替代定义中仍然
Dialogue: 0,0:02:57.91,0:02:59.91,BottomCenter,,0,0,0,,作品
Dialogue: 0,0:02:59.91,0:03:01.84,BottomCenter,,0,0,0,,所以我想这就是我的建议
Dialogue: 0,0:03:01.84,0:03:03.68,BottomCenter,,0,0,0,,理解这个例子
Dialogue: 0,0:03:03.68,0:03:05.59,BottomCenter,,0,0,0,,是你正在使用更高的力量
Dialogue: 0,0:03:05.59,0:03:07.75,BottomCenter,,0,0,0,,对函数进行排序以便编写增长
Dialogue: 0,0:03:07.75,0:03:08.71,BottomCenter,,0,0,0,,并缩小
Dialogue: 0,0:03:08.71,0:03:11.84,BottomCenter,,0,0,0,,以某种方式
Dialogue: 0,0:03:11.84,0:03:15.68,BottomCenter,,0,0,0,,更简洁一点
Dialogue: 0,0:03:15.68,0:03:17.75,BottomCenter,,0,0,0,,有一个可以做这件事的函数
Dialogue: 0,0:03:17.75,0:03:19.03,BottomCenter,,0,0,0,,他们的共同点是
Dialogue: 0,0:03:19.03,0:03:21.03,BottomCenter,,0,0,0,,基本上就像检查基本情况
Dialogue: 0,0:03:21.03,0:03:22.72,BottomCenter,,0,0,0,,调用一个函数，然后调用一些函数
Dialogue: 0,0:03:22.72,0:03:24.63,BottomCenter,,0,0,0,,其他功能结束但增长
Dialogue: 0,0:03:24.63,0:03:26.47,BottomCenter,,0,0,0,,涉及先调用grow，然后调用grow
Dialogue: 0,0:03:26.47,0:03:30.31,BottomCenter,,0,0,0,,打印而短语看起来是什么
Dialogue: 0,0:03:30.84,0:03:32.87,BottomCenter,,0,0,0,,喜欢
Dialogue: 0,0:03:32.87,0:03:34.16,BottomCenter,,0,0,0,,好吧，如果我们看看定义的话
Dialogue: 0,0:03:34.16,0:03:37.52,BottomCenter,,0,0,0,,表示第一个打印尺寸
Dialogue: 0,0:03:40.00,0:03:41.91,BottomCenter,,0,0,0,,那行得通，然后我们就可以摆脱
Dialogue: 0,0:03:41.91,0:03:43.59,BottomCenter,,0,0,0,,所有这些东西它什么也没做
Dialogue: 0,0:03:43.59,0:03:44.84,BottomCenter,,0,0,0,,不再因为这些正在
Dialogue: 0,0:03:44.84,0:03:47.84,BottomCenter,,0,0,0,,重新定义
Dialogue: 0,0:03:48.16,0:03:50.87,BottomCenter,,0,0,0,,所以让我添加一些东西到这个呃
Dialogue: 0,0:03:50.87,0:03:51.44,BottomCenter,,0,0,0,,所以
Dialogue: 0,0:03:51.44,0:03:54.63,BottomCenter,,0,0,0,,我想再次强调
Dialogue: 0,0:03:54.63,0:03:57.59,BottomCenter,,0,0,0,,嗯，当你编码时经常，我仍然这样做
Dialogue: 0,0:03:57.59,0:03:58.80,BottomCenter,,0,0,0,,这到今天
Dialogue: 0,0:03:58.80,0:04:00.47,BottomCenter,,0,0,0,,我从一点点开始
Dialogue: 0,0:04:00.47,0:04:02.40,BottomCenter,,0,0,0,,笨重有点长
Dialogue: 0,0:04:02.40,0:04:04.87,BottomCenter,,0,0,0,,但非常明确具体
Dialogue: 0,0:04:04.87,0:04:06.08,BottomCenter,,0,0,0,,执行
Dialogue: 0,0:04:06.08,0:04:07.43,BottomCenter,,0,0,0,,我确保它有效 我确保我
Dialogue: 0,0:04:07.43,0:04:09.43,BottomCenter,,0,0,0,,理解它，例如如果我是
Dialogue: 0,0:04:09.43,0:04:11.12,BottomCenter,,0,0,0,,这样做我会从梯子开始
Dialogue: 0,0:04:11.12,0:04:12.56,BottomCenter,,0,0,0,,这些函数中我明确地
Dialogue: 0,0:04:12.56,0:04:14.15,BottomCenter,,0,0,0,,定义一下函数
Dialogue: 0,0:04:14.15,0:04:15.03,BottomCenter,,0,0,0,,更清晰
Dialogue: 0,0:04:15.03,0:04:16.31,BottomCenter,,0,0,0,,它有点笨重你可以看到你
Dialogue: 0,0:04:16.31,0:04:17.75,BottomCenter,,0,0,0,,需要更多代码，然后一次
Dialogue: 0,0:04:17.75,0:04:19.04,BottomCenter,,0,0,0,,你已经得到了
Dialogue: 0,0:04:19.04,0:04:20.72,BottomCenter,,0,0,0,,然后我可以开始收紧它
Dialogue: 0,0:04:20.72,0:04:22.16,BottomCenter,,0,0,0,,编写高效的代码并执行
Dialogue: 0,0:04:22.16,0:04:23.83,BottomCenter,,0,0,0,,lambda 表达式和相反的工作
Dialogue: 0,0:04:23.83,0:04:24.95,BottomCenter,,0,0,0,,当你试图理解时
Dialogue: 0,0:04:24.95,0:04:26.00,BottomCenter,,0,0,0,,某物
Dialogue: 0,0:04:26.00,0:04:28.24,BottomCenter,,0,0,0,,你知道 lambda 函数只是
Dialogue: 0,0:04:28.24,0:04:29.68,BottomCenter,,0,0,0,,的捷径
Dialogue: 0,0:04:29.68,0:04:31.83,BottomCenter,,0,0,0,,一个已定义的函数，因此将其重写为
Dialogue: 0,0:04:31.83,0:04:33.27,BottomCenter,,0,0,0,,定义的函数通常很清楚
Dialogue: 0,0:04:33.27,0:04:34.63,BottomCenter,,0,0,0,,因为现在你正在处理这些
Dialogue: 0,0:04:34.63,0:04:36.24,BottomCenter,,0,0,0,,你有某种双重复杂性
Dialogue: 0,0:04:36.24,0:04:37.60,BottomCenter,,0,0,0,,匿名 lambda 表达式
Dialogue: 0,0:04:37.60,0:04:38.31,BottomCenter,,0,0,0,,功能
Dialogue: 0,0:04:38.31,0:04:39.68,BottomCenter,,0,0,0,,你已经有了这个新概念
Dialogue: 0,0:04:39.68,0:04:42.07,BottomCenter,,0,0,0,,递归所以删除
Dialogue: 0,0:04:42.07,0:04:44.63,BottomCenter,,0,0,0,,嗯，复杂性只是非常简单
Dialogue: 0,0:04:44.63,0:04:46.07,BottomCenter,,0,0,0,,解压 lambda 是一个好方法
Dialogue: 0,0:04:46.07,0:04:46.72,BottomCenter,,0,0,0,,做吧
Dialogue: 0,0:04:46.72,0:04:48.16,BottomCenter,,0,0,0,,我还要再次强调，我
Dialogue: 0,0:04:48.16,0:04:50.39,BottomCenter,,0,0,0,,不要考虑太多的递归
Dialogue: 0,0:04:50.39,0:04:52.00,BottomCenter,,0,0,0,,环境图的示例是
Dialogue: 0,0:04:52.00,0:04:53.68,BottomCenter,,0,0,0,,最好的方法我认为更好
Dialogue: 0,0:04:53.68,0:04:55.60,BottomCenter,,0,0,0,,正如约翰所说的那样
Dialogue: 0,0:04:55.60,0:04:57.51,BottomCenter,,0,0,0,,看代码想想树
Dialogue: 0,0:04:57.51,0:04:59.51,BottomCenter,,0,0,0,,您可以进行递归调用的图表
Dialogue: 0,0:04:59.51,0:05:01.12,BottomCenter,,0,0,0,,勾勒出这些东西
Dialogue: 0,0:05:01.12,0:05:04.00,BottomCenter,,0,0,0,,我称之为我称之为我称之为我
Dialogue: 0,0:05:04.00,0:05:05.12,BottomCenter,,0,0,0,,觉得有点
Dialogue: 0,0:05:05.12,0:05:07.27,BottomCenter,,0,0,0,,比尝试跟踪这些更紧凑
Dialogue: 0,0:05:07.27,0:05:08.95,BottomCenter,,0,0,0,,所有的巨大环境图
Dialogue: 0,0:05:08.95,0:05:11.83,BottomCenter,,0,0,0,,变量
Dialogue: 0,0:05:12.07,0:05:13.83,BottomCenter,,0,0,0,,支票上有一个问题
Dialogue: 0,0:05:13.83,0:05:16.16,BottomCenter,,0,0,0,,聊聊为什么这只是如果 n
Dialogue: 0,0:05:16.16,0:05:17.68,BottomCenter,,0,0,0,,而这有一个不
Dialogue: 0,0:05:17.68,0:05:21.27,BottomCenter,,0,0,0,,零，你可以删除这个零是
Dialogue: 0,0:05:21.27,0:05:21.92,BottomCenter,,0,0,0,,错误的
Dialogue: 0,0:05:21.92,0:05:24.16,BottomCenter,,0,0,0,,python 中的值意味着如果你说
Dialogue: 0,0:05:24.16,0:05:26.00,BottomCenter,,0,0,0,,if 然后是一个数字，如果该数字是
Dialogue: 0,0:05:26.00,0:05:26.48,BottomCenter,,0,0,0,,零
Dialogue: 0,0:05:26.48,0:05:28.48,BottomCenter,,0,0,0,,那么它不会执行套件
Dialogue: 0,0:05:28.48,0:05:29.60,BottomCenter,,0,0,0,,if 语句
Dialogue: 0,0:05:29.60,0:05:31.75,BottomCenter,,0,0,0,,如果它不是零，那么这个
Dialogue: 0,0:05:31.75,0:05:33.12,BottomCenter,,0,0,0,,也会做同样的事
Dialogue: 0,0:05:33.12,0:05:35.60,BottomCenter,,0,0,0,,在Python中你实际上可以直接输入
Dialogue: 0,0:05:35.60,0:05:37.04,BottomCenter,,0,0,0,,它不一定是一个平等或
Dialogue: 0,0:05:37.04,0:05:38.07,BottomCenter,,0,0,0,,不平等检查
Dialogue: 0,0:05:38.07,0:05:40.95,BottomCenter,,0,0,0,,你可以输入一个值，所以
Dialogue: 0,0:05:40.95,0:05:42.48,BottomCenter,,0,0,0,,他们现在问，所以没有
Dialogue: 0,0:05:42.48,0:05:45.83,BottomCenter,,0,0,0,,基本情况很好的问题
Dialogue: 0,0:05:45.83,0:05:47.68,BottomCenter,,0,0,0,,那么你的基本情况会在哪里
Dialogue: 0,0:05:47.68,0:05:49.19,BottomCenter,,0,0,0,,想一想是的
Dialogue: 0,0:05:49.19,0:05:53.27,BottomCenter,,0,0,0,,是的，所以这里有一个基本情况
Dialogue: 0,0:05:53.27,0:05:56.39,BottomCenter,,0,0,0,,只是不明确
Dialogue: 0,0:05:58.00,0:06:02.31,BottomCenter,,0,0,0,,是的，所以你好像没什么可做的
Dialogue: 0,0:06:02.31,0:06:04.72,BottomCenter,,0,0,0,,我认为基本情况是你
Dialogue: 0,0:06:04.72,0:06:06.00,BottomCenter,,0,0,0,,只是一种回报
Dialogue: 0,0:06:06.00,0:06:08.39,BottomCenter,,0,0,0,,这将是一个很好的写法，但是
Dialogue: 0,0:06:08.39,0:06:09.83,BottomCenter,,0,0,0,,如果你想打破它
Dialogue: 0,0:06:09.83,0:06:10.48,BottomCenter,,0,0,0,,进入
Dialogue: 0,0:06:10.48,0:06:13.68,BottomCenter,,0,0,0,,基本情况和递归情况
Dialogue: 0,0:06:13.68,0:06:15.68,BottomCenter,,0,0,0,,唯一的动作发生在递归中
Dialogue: 0,0:06:15.68,0:06:17.27,BottomCenter,,0,0,0,,案例和基本案例
Dialogue: 0,0:06:17.27,0:06:20.39,BottomCenter,,0,0,0,,你什么也没做，是的，所以基地
Dialogue: 0,0:06:20.39,0:06:21.60,BottomCenter,,0,0,0,,案例只是说
Dialogue: 0,0:06:21.60,0:06:23.60,BottomCenter,,0,0,0,,如果你有条件的话就停下来
Dialogue: 0,0:06:23.60,0:06:25.83,BottomCenter,,0,0,0,,那里或条件的结果
Dialogue: 0,0:06:25.83,0:06:27.12,BottomCenter,,0,0,0,,我认为
Dialogue: 0,0:06:27.12,0:06:29.27,BottomCenter,,0,0,0,,我们已经以某种方式打破了它，我想你已经做到了
Dialogue: 0,0:06:29.27,0:06:32.63,BottomCenter,,0,0,0,,如果不是的话应该是向后的
Dialogue: 0,0:06:32.83,0:06:35.51,BottomCenter,,0,0,0,,是的，是的，就在那里
Dialogue: 0,0:06:35.51,0:06:38.56,BottomCenter,,0,0,0,,所以如果没有条件的话
Dialogue: 0,0:06:38.56,0:06:40.31,BottomCenter,,0,0,0,,你可能会遇到麻烦
Dialogue: 0,0:06:40.31,0:06:41.27,BottomCenter,,0,0,0,,是的，这意味着它将保留
Dialogue: 0,0:06:41.27,0:06:42.80,BottomCenter,,0,0,0,,递归 递归 递归 你必须
Dialogue: 0,0:06:42.80,0:06:44.07,BottomCenter,,0,0,0,,有话说
Dialogue: 0,0:06:44.07,0:06:46.48,BottomCenter,,0,0,0,,仅在特定条件下执行此操作
Dialogue: 0,0:06:46.48,0:06:48.16,BottomCenter,,0,0,0,,如果某个条件不成立
Dialogue: 0,0:06:48.16,0:06:50.63,BottomCenter,,0,0,0,,遇见好那就无事可做
Dialogue: 0,0:06:50.63,0:06:52.31,BottomCenter,,0,0,0,,在这种情况下，你现在已经完成了一些
Dialogue: 0,0:06:52.31,0:06:54.63,BottomCenter,,0,0,0,,其他基本情况如斐波那契
Dialogue: 0,0:06:54.63,0:06:56.24,BottomCenter,,0,0,0,,我们必须做一些我们必须返回的事情
Dialogue: 0,0:06:56.24,0:06:57.75,BottomCenter,,0,0,0,,零或一
Dialogue: 0,0:06:57.75,0:07:00.16,BottomCenter,,0,0,0,,但这里没什么可做的
Dialogue: 0,0:07:00.16,0:07:02.00,BottomCenter,,0,0,0,,我们完成了我们刚刚停止工作是的
Dialogue: 0,0:07:02.00,0:07:03.12,BottomCenter,,0,0,0,,所以有一个
Dialogue: 0,0:07:03.12,0:07:05.68,BottomCenter,,0,0,0,,隐式基本情况嗯，我认为这个
Dialogue: 0,0:07:05.68,0:07:07.27,BottomCenter,,0,0,0,,讲座中也提到了
Dialogue: 0,0:07:07.27,0:07:08.63,BottomCenter,,0,0,0,,我可能会这样写
Dialogue: 0,0:07:08.63,0:07:11.19,BottomCenter,,0,0,0,,这与明确的基本情况
Dialogue: 0,0:07:11.19,0:07:13.19,BottomCenter,,0,0,0,,这样我就可以看到那是四月份的
Dialogue: 0,0:07:13.19,0:07:14.87,BottomCenter,,0,0,0,,问题是我只是想看看
Dialogue: 0,0:07:14.87,0:07:17.19,BottomCenter,,0,0,0,,它就在那里，所以我不必推断
Dialogue: 0,0:07:17.19,0:07:18.87,BottomCenter,,0,0,0,,是的
Dialogue: 0,0:07:18.87,0:07:20.63,BottomCenter,,0,0,0,,是的，我的意思是这个例子的重点是
Dialogue: 0,0:07:20.63,0:07:22.31,BottomCenter,,0,0,0,,并不是说这是正确的方法
Dialogue: 0,0:07:22.31,0:07:24.16,BottomCenter,,0,0,0,,定义这个函数
Dialogue: 0,0:07:24.16,0:07:25.83,BottomCenter,,0,0,0,,因为我认为这样会好得多
Dialogue: 0,0:07:25.83,0:07:27.36,BottomCenter,,0,0,0,,像这样写
Dialogue: 0,0:07:27.36,0:07:28.87,BottomCenter,,0,0,0,,但这个例子的目的是
Dialogue: 0,0:07:28.87,0:07:31.27,BottomCenter,,0,0,0,,表明这当然是可能的
Dialogue: 0,0:07:31.27,0:07:34.31,BottomCenter,,0,0,0,,有某种隐式的基本情况
Dialogue: 0,0:07:34.31,0:07:35.83,BottomCenter,,0,0,0,,您只需定义要做什么
Dialogue: 0,0:07:35.83,0:07:38.39,BottomCenter,,0,0,0,,在递归的情况下你可以
Dialogue: 0,0:07:38.39,0:07:40.07,BottomCenter,,0,0,0,,使用高阶函数
Dialogue: 0,0:07:40.07,0:07:42.63,BottomCenter,,0,0,0,,其中基本情况如下
Dialogue: 0,0:07:42.63,0:07:45.27,BottomCenter,,0,0,0,,高阶函数，它不在这里
Dialogue: 0,0:07:45.27,0:07:46.72,BottomCenter,,0,0,0,,我们学到的所有东西
Dialogue: 0,0:07:46.72,0:07:48.56,BottomCenter,,0,0,0,,班级里能走远的
Dialogue: 0,0:07:48.56,0:07:51.27,BottomCenter,,0,0,0,,与递归混合并不意味着
Dialogue: 0,0:07:51.27,0:07:52.48,BottomCenter,,0,0,0,,是个好主意
Dialogue: 0,0:07:52.48,0:07:54.00,BottomCenter,,0,0,0,,但值得知道的是
Dialogue: 0,0:07:54.00,0:07:56.24,BottomCenter,,0,0,0,,可能的
Dialogue: 0,0:07:56.24,0:07:58.07,BottomCenter,,0,0,0,,当然是个好问题所以问题是
Dialogue: 0,0:07:58.07,0:08:00.07,BottomCenter,,0,0,0,,关于计数分区，这是一个
Dialogue: 0,0:08:00.07,0:08:01.04,BottomCenter,,0,0,0,,例子
Dialogue: 0,0:08:01.04,0:08:02.87,BottomCenter,,0,0,0,,讲座中的内容以及与
Dialogue: 0,0:08:02.87,0:08:04.31,BottomCenter,,0,0,0,,有他们和没有他们
Dialogue: 0,0:08:04.31,0:08:07.68,BottomCenter,,0,0,0,,这些递归调用与每个
Dialogue: 0,0:08:07.68,0:08:09.83,BottomCenter,,0,0,0,,像这样的预递归问题
Dialogue: 0,0:08:09.83,0:08:11.60,BottomCenter,,0,0,0,,你要去的地方
Dialogue: 0,0:08:11.60,0:08:14.72,BottomCenter,,0,0,0,,问题，你是
Dialogue: 0,0:08:14.72,0:08:17.36,BottomCenter,,0,0,0,,用更小的方法解决它
Dialogue: 0,0:08:17.36,0:08:19.92,BottomCenter,,0,0,0,,同一问题的实例
Dialogue: 0,0:08:19.92,0:08:22.00,BottomCenter,,0,0,0,,我确实认为你非常重要
Dialogue: 0,0:08:22.00,0:08:22.95,BottomCenter,,0,0,0,,理解
Dialogue: 0,0:08:22.95,0:08:24.87,BottomCenter,,0,0,0,,你之前想要完成的事情
Dialogue: 0,0:08:24.87,0:08:26.16,BottomCenter,,0,0,0,,你开始阅读代码
Dialogue: 0,0:08:26.16,0:08:27.51,BottomCenter,,0,0,0,,就像阅读代码不太一样
Dialogue: 0,0:08:27.51,0:08:29.27,BottomCenter,,0,0,0,,有帮助，除非你知道
Dialogue: 0,0:08:29.27,0:08:31.27,BottomCenter,,0,0,0,,你想要模拟什么以及什么
Dialogue: 0,0:08:31.27,0:08:33.12,BottomCenter,,0,0,0,,我们试图在这里模拟
Dialogue: 0,0:08:33.12,0:08:35.67,BottomCenter,,0,0,0,,呃，如果你要写的话
Dialogue: 0,0:08:35.67,0:08:36.96,BottomCenter,,0,0,0,,数 n
Dialogue: 0,0:08:36.96,0:08:40.15,BottomCenter,,0,0,0,,作为将一堆相加的表达式
Dialogue: 0,0:08:40.15,0:08:41.84,BottomCenter,,0,0,0,,不同的数字都是 m 或
Dialogue: 0,0:08:41.84,0:08:43.60,BottomCenter,,0,0,0,,较小
Dialogue: 0,0:08:43.60,0:08:47.12,BottomCenter,,0,0,0,,那么事实证明有
Dialogue: 0,0:08:47.12,0:08:49.36,BottomCenter,,0,0,0,,一种分割整个组的方法
Dialogue: 0,0:08:49.36,0:08:50.48,BottomCenter,,0,0,0,,你正在数的东西
Dialogue: 0,0:08:50.48,0:08:53.67,BottomCenter,,0,0,0,,分成两个小组 好吧
Dialogue: 0,0:08:53.67,0:08:56.48,BottomCenter,,0,0,0,,在这种情况下，两个较小的组
Dialogue: 0,0:08:56.48,0:08:59.20,BottomCenter,,0,0,0,,好吧，让我们填写这些值
Dialogue: 0,0:08:59.20,0:09:03.20,BottomCenter,,0,0,0,,如果我们从六个开始的话
Dialogue: 0,0:09:03.20,0:09:08.32,BottomCenter,,0,0,0,,四 他们现在将是二四
Dialogue: 0,0:09:08.32,0:09:12.87,BottomCenter,,0,0,0,,他们将是 6 3 。
Dialogue: 0,0:09:16.00,0:09:18.72,BottomCenter,,0,0,0,,现在使用以下方法将数字 2 加起来
Dialogue: 0,0:09:18.72,0:09:19.91,BottomCenter,,0,0,0,,正数
Dialogue: 0,0:09:19.91,0:09:22.96,BottomCenter,,0,0,0,,最大尺寸为 4 孔
Dialogue: 0,0:09:22.96,0:09:25.12,BottomCenter,,0,0,0,,你不可能真的有一个 4 在那里或者
Dialogue: 0,0:09:25.12,0:09:26.15,BottomCenter,,0,0,0,,你将会得到一笔钱
Dialogue: 0,0:09:26.15,0:09:29.67,BottomCenter,,0,0,0,,比 2 大，所以这是
Dialogue: 0,0:09:29.67,0:09:31.36,BottomCenter,,0,0,0,,实际上相当于如果我们有
Dialogue: 0,0:09:31.36,0:09:31.91,BottomCenter,,0,0,0,,写2
Dialogue: 0,0:09:31.91,0:09:34.24,BottomCenter,,0,0,0,,2 假设我们的基本情况正确
Dialogue: 0,0:09:34.24,0:09:36.00,BottomCenter,,0,0,0,,所以基本上我们是说
Dialogue: 0,0:09:36.00,0:09:39.51,BottomCenter,,0,0,0,,如果你想写一个大小的总和
Dialogue: 0,0:09:39.51,0:09:42.79,BottomCenter,,0,0,0,,六你真正应该做的是计算
Dialogue: 0,0:09:42.79,0:09:43.51,BottomCenter,,0,0,0,,看看你如何
Dialogue: 0,0:09:43.51,0:09:48.08,BottomCenter,,0,0,0,,总结为两个，为什么这是相关的
Dialogue: 0,0:09:48.08,0:09:52.48,BottomCenter,,0,0,0,,获得六的一种方法是使用四
Dialogue: 0,0:09:52.48,0:09:54.72,BottomCenter,,0,0,0,,然后有其他一些表达
Dialogue: 0,0:09:54.72,0:09:56.15,BottomCenter,,0,0,0,,加起来等于二
Dialogue: 0,0:09:56.15,0:09:57.67,BottomCenter,,0,0,0,,事实上有两个不同的
Dialogue: 0,0:09:57.67,0:09:59.03,BottomCenter,,0,0,0,,方法你可以这样写
Dialogue: 0,0:09:59.03,0:09:59.51,BottomCenter,,0,0,0,,方式
Dialogue: 0,0:09:59.51,0:10:02.84,BottomCenter,,0,0,0,,或者你可以这样写，但是这个
Dialogue: 0,0:10:02.84,0:10:04.55,BottomCenter,,0,0,0,,部分
Dialogue: 0,0:10:04.55,0:10:08.79,BottomCenter,,0,0,0,,由这个递归调用表示
Dialogue: 0,0:10:08.79,0:10:12.32,BottomCenter,,0,0,0,,其中 m 描述了你是什么
Dialogue: 0,0:10:12.32,0:10:13.36,BottomCenter,,0,0,0,,真的
Dialogue: 0,0:10:13.36,0:10:16.39,BottomCenter,,0,0,0,,计数是以以下内容开头的表达式
Dialogue: 0,0:10:16.39,0:10:18.63,BottomCenter,,0,0,0,,数字 m，在本例中为 4
Dialogue: 0,0:10:18.63,0:10:20.72,BottomCenter,,0,0,0,,如果我们看这个例子
Dialogue: 0,0:10:20.72,0:10:23.03,BottomCenter,,0,0,0,,所以一定要考虑一个例子
Dialogue: 0,0:10:23.03,0:10:24.32,BottomCenter,,0,0,0,,当你试图分析哪一个时
Dialogue: 0,0:10:24.32,0:10:25.51,BottomCenter,,0,0,0,,其中
Dialogue: 0,0:10:25.51,0:10:27.12,BottomCenter,,0,0,0,,并确保你知道自己是什么
Dialogue: 0,0:10:27.12,0:10:28.55,BottomCenter,,0,0,0,,如果你在数或者什么
Dialogue: 0,0:10:28.55,0:10:30.32,BottomCenter,,0,0,0,,你试图找到 if 的最大值
Dialogue: 0,0:10:30.32,0:10:31.60,BottomCenter,,0,0,0,,你试图找到最大的东西
Dialogue: 0,0:10:31.60,0:10:32.79,BottomCenter,,0,0,0,,管他呢
Dialogue: 0,0:10:32.79,0:10:35.20,BottomCenter,,0,0,0,,呃，在这种情况下我们正在计数
Dialogue: 0,0:10:35.20,0:10:37.03,BottomCenter,,0,0,0,,看起来像这样的表达式
Dialogue: 0,0:10:37.03,0:10:41.20,BottomCenter,,0,0,0,,我们正在使用那些有四个的
Dialogue: 0,0:10:41.20,0:10:43.44,BottomCenter,,0,0,0,,我认为在讲座描述中我
Dialogue: 0,0:10:43.44,0:10:45.12,BottomCenter,,0,0,0,,说这些需要在
Dialogue: 0,0:10:45.12,0:10:46.72,BottomCenter,,0,0,0,,增加订单所以让我们把
Dialogue: 0,0:10:46.72,0:10:48.79,BottomCenter,,0,0,0,,最后是四，所以它没有
Dialogue: 0,0:10:48.79,0:10:50.87,BottomCenter,,0,0,0,,让它变得更加复杂好吗
Dialogue: 0,0:10:50.87,0:10:52.87,BottomCenter,,0,0,0,,那么没有它怎么办
Dialogue: 0,0:10:52.87,0:10:55.36,BottomCenter,,0,0,0,,所以这说的是计算所有的方式
Dialogue: 0,0:10:55.36,0:10:56.48,BottomCenter,,0,0,0,,总计为六
Dialogue: 0,0:10:56.48,0:10:59.60,BottomCenter,,0,0,0,,零件尺寸最大为三孔
Dialogue: 0,0:10:59.60,0:11:01.75,BottomCenter,,0,0,0,,因为我们没有添加四个
Dialogue: 0,0:11:01.75,0:11:04.32,BottomCenter,,0,0,0,,所以我们必须一直到六
Dialogue: 0,0:11:04.32,0:11:05.67,BottomCenter,,0,0,0,,但我们会这样做
Dialogue: 0,0:11:05.67,0:11:07.84,BottomCenter,,0,0,0,,零件尺寸最大为 3，但我们不是
Dialogue: 0,0:11:07.84,0:11:09.91,BottomCenter,,0,0,0,,在右边末尾添加四个
Dialogue: 0,0:11:09.91,0:11:12.63,BottomCenter,,0,0,0,,嗯，呃，所以可能有一个像
Dialogue: 0,0:11:12.63,0:11:13.03,BottomCenter,,0,0,0,,那
Dialogue: 0,0:11:13.03,0:11:16.96,BottomCenter,,0,0,0,,和这样的一个等等所有这些都下来了
Dialogue: 0,0:11:16.96,0:11:17.84,BottomCenter,,0,0,0,,这里
Dialogue: 0,0:11:17.84,0:11:20.32,BottomCenter,,0,0,0,,将被以此计算
Dialogue: 0,0:11:20.32,0:11:22.00,BottomCenter,,0,0,0,,递归调用
Dialogue: 0,0:11:22.00,0:11:23.84,BottomCenter,,0,0,0,,如果你计算所有这些并且你
Dialogue: 0,0:11:23.84,0:11:25.03,BottomCenter,,0,0,0,,把所有这些都数起来
Dialogue: 0,0:11:25.03,0:11:26.72,BottomCenter,,0,0,0,,然后你把它们加在一起然后得到
Dialogue: 0,0:11:26.72,0:11:28.39,BottomCenter,,0,0,0,,所有到达方式的计数
Dialogue: 0,0:11:28.39,0:11:28.79,BottomCenter,,0,0,0,,六
Dialogue: 0,0:11:28.79,0:11:31.12,BottomCenter,,0,0,0,,使用尺寸最大为四的零件
Dialogue: 0,0:11:31.12,0:11:32.87,BottomCenter,,0,0,0,,要么使用尺寸最大为四的零件
Dialogue: 0,0:11:32.87,0:11:36.39,BottomCenter,,0,0,0,,或者你这样做了让我添加
Dialogue: 0,0:11:36.39,0:11:38.63,BottomCenter,,0,0,0,,如果可以的话，这里有两件事，一是一
Dialogue: 0,0:11:38.63,0:11:41.20,BottomCenter,,0,0,0,,递归的特征
Dialogue: 0,0:11:41.20,0:11:42.87,BottomCenter,,0,0,0,,是你打破了
Dialogue: 0,0:11:42.87,0:11:45.27,BottomCenter,,0,0,0,,问题分解为子问题和那些
Dialogue: 0,0:11:45.27,0:11:47.20,BottomCenter,,0,0,0,,子问题往往更简单
Dialogue: 0,0:11:47.20,0:11:49.60,BottomCenter,,0,0,0,,是的，例如在这种情况下我们是
Dialogue: 0,0:11:49.60,0:11:51.03,BottomCenter,,0,0,0,,寻找
Dialogue: 0,0:11:51.03,0:11:53.36,BottomCenter,,0,0,0,,所有六个分区的最大值
Dialogue: 0,0:11:53.36,0:11:54.08,BottomCenter,,0,0,0,,数字是
Dialogue: 0,0:11:54.08,0:11:56.55,BottomCenter,,0,0,0,,四个，这真的很漂亮
Dialogue: 0,0:11:56.55,0:11:57.51,BottomCenter,,0,0,0,,形象的
Dialogue: 0,0:11:57.51,0:11:59.91,BottomCenter,,0,0,0,,在约翰的演讲中，他展示了他在哪里
Dialogue: 0,0:11:59.91,0:12:02.55,BottomCenter,,0,0,0,,向你展示了所有可能的答案
Dialogue: 0,0:12:02.55,0:12:04.63,BottomCenter,,0,0,0,,是的，你看到的是有一个
Dialogue: 0,0:12:04.63,0:12:06.24,BottomCenter,,0,0,0,,那些的集合
Dialogue: 0,0:12:06.24,0:12:09.36,BottomCenter,,0,0,0,,答案中有 4 是的
Dialogue: 0,0:12:09.36,0:12:11.91,BottomCenter,,0,0,0,,这就是四次递归调用
Dialogue: 0,0:12:11.91,0:12:12.55,BottomCenter,,0,0,0,,所以
Dialogue: 0,0:12:12.55,0:12:15.20,BottomCenter,,0,0,0,,如果我告诉的话，请告诉我如何到达六点
Dialogue: 0,0:12:15.20,0:12:16.39,BottomCenter,,0,0,0,,你是其中之一
Dialogue: 0,0:12:16.39,0:12:18.32,BottomCenter,,0,0,0,,如果最大数量是四 是的这个
Dialogue: 0,0:12:18.32,0:12:20.72,BottomCenter,,0,0,0,,是吗，然后看看下面的一切
Dialogue: 0,0:12:20.72,0:12:21.12,BottomCenter,,0,0,0,,那
Dialogue: 0,0:12:21.12,0:12:23.44,BottomCenter,,0,0,0,,里面没有四个是的所以如果你
Dialogue: 0,0:12:23.44,0:12:25.51,BottomCenter,,0,0,0,,你看这里的前两行
Dialogue: 0,0:12:25.51,0:12:27.75,BottomCenter,,0,0,0,,二加四等于六一加一加
Dialogue: 0,0:12:27.75,0:12:30.63,BottomCenter,,0,0,0,,四六这是唯一的两种方法
Dialogue: 0,0:12:30.63,0:12:32.63,BottomCenter,,0,0,0,,你可以得到六个其中之一
Dialogue: 0,0:12:32.63,0:12:33.67,BottomCenter,,0,0,0,,数字是
Dialogue: 0,0:12:33.67,0:12:36.24,BottomCenter,,0,0,0,,四个右边你当然可以看到
Dialogue: 0,0:12:36.24,0:12:38.15,BottomCenter,,0,0,0,,现在下面的一切
Dialogue: 0,0:12:38.15,0:12:40.24,BottomCenter,,0,0,0,,就好像我们要求解决一个问题
Dialogue: 0,0:12:40.24,0:12:41.75,BottomCenter,,0,0,0,,完全不同的问题
Dialogue: 0,0:12:41.75,0:12:43.36,BottomCenter,,0,0,0,,好吧，这不是一个完全不同的问题
Dialogue: 0,0:12:43.36,0:12:44.87,BottomCenter,,0,0,0,,另一个较小的问题是
Dialogue: 0,0:12:44.87,0:12:46.15,BottomCenter,,0,0,0,,我怎么去
Dialogue: 0,0:12:46.15,0:12:50.15,BottomCenter,,0,0,0,,6，其中最大值为 3
Dialogue: 0,0:12:50.15,0:12:52.15,BottomCenter,,0,0,0,,让我们同意，因为 3 更少
Dialogue: 0,0:12:52.15,0:12:55.20,BottomCenter,,0,0,0,,超过四个，这是解决方案的一部分
Dialogue: 0,0:12:55.20,0:12:57.60,BottomCenter,,0,0,0,,对于第一个问题，我们所做的一切
Dialogue: 0,0:12:57.60,0:12:59.12,BottomCenter,,0,0,0,,有四和无四
Dialogue: 0,0:12:59.12,0:13:00.39,BottomCenter,,0,0,0,,我们已经分手了吗
Dialogue: 0,0:13:00.39,0:13:03.91,BottomCenter,,0,0,0,,将这里的解空间分为两组
Dialogue: 0,0:13:03.91,0:13:05.51,BottomCenter,,0,0,0,,一个包含四个 一个不包含
Dialogue: 0,0:13:05.51,0:13:07.84,BottomCenter,,0,0,0,,包括四个然后我们再做一次
Dialogue: 0,0:13:07.84,0:13:09.51,BottomCenter,,0,0,0,,那么下面是解决方案
Dialogue: 0,0:13:09.51,0:13:11.91,BottomCenter,,0,0,0,,包含三个和不包含三个
Dialogue: 0,0:13:11.91,0:13:13.12,BottomCenter,,0,0,0,,然后是那些包括
Dialogue: 0,0:13:13.12,0:13:14.87,BottomCenter,,0,0,0,,两个并且不包括两个并注意
Dialogue: 0,0:13:14.87,0:13:16.96,BottomCenter,,0,0,0,,我们不断简化问题
Dialogue: 0,0:13:16.96,0:13:20.24,BottomCenter,,0,0,0,,是的，这就是递归的优雅之处
Dialogue: 0,0:13:20.24,0:13:22.72,BottomCenter,,0,0,0,,是你有点剥离
Dialogue: 0,0:13:22.72,0:13:23.91,BottomCenter,,0,0,0,,一点点的问题很简单
Dialogue: 0,0:13:23.91,0:13:25.03,BottomCenter,,0,0,0,,解决
Dialogue: 0,0:13:25.03,0:13:26.15,BottomCenter,,0,0,0,,你知道这几乎就像几乎就像
Dialogue: 0,0:13:26.15,0:13:27.84,BottomCenter,,0,0,0,,基本情况，然后是其他一切
Dialogue: 0,0:13:27.84,0:13:28.63,BottomCenter,,0,0,0,,你只是这样做
Dialogue: 0,0:13:28.63,0:13:30.32,BottomCenter,,0,0,0,,好吧，递归地你只是有点跳跃
Dialogue: 0,0:13:30.32,0:13:32.39,BottomCenter,,0,0,0,,悬崖边说你要去
Dialogue: 0,0:13:32.39,0:13:33.44,BottomCenter,,0,0,0,,做吧
Dialogue: 0,0:13:33.44,0:13:35.75,BottomCenter,,0,0,0,,这就是那两个人发生的事
Dialogue: 0,0:13:35.75,0:13:38.63,BottomCenter,,0,0,0,,事情就在那里
Dialogue: 0,0:13:38.79,0:13:40.48,BottomCenter,,0,0,0,,如果这需要一段时间才能同步
Dialogue: 0,0:13:40.48,0:13:42.15,BottomCenter,,0,0,0,,这是很正常的
Dialogue: 0,0:13:42.15,0:13:44.32,BottomCenter,,0,0,0,,嗯，你知道你可能会做到这一点
Dialogue: 0,0:13:44.32,0:13:46.00,BottomCenter,,0,0,0,,课程中的要点并认为不是
Dialogue: 0,0:13:46.00,0:13:47.36,BottomCenter,,0,0,0,,计算机科学实际上只是
Dialogue: 0,0:13:47.36,0:13:48.72,BottomCenter,,0,0,0,,学习所有规则
Dialogue: 0,0:13:48.72,0:13:52.00,BottomCenter,,0,0,0,,然后喜欢应用它们，也许
Dialogue: 0,0:13:52.00,0:13:53.67,BottomCenter,,0,0,0,,循环遍历东西，但事实证明
Dialogue: 0,0:13:53.67,0:13:55.27,BottomCenter,,0,0,0,,计算机科学比
Dialogue: 0,0:13:55.27,0:13:56.55,BottomCenter,,0,0,0,,这实际上是关于
Dialogue: 0,0:13:56.55,0:13:58.55,BottomCenter,,0,0,0,,使用解决各种问题
Dialogue: 0,0:13:58.55,0:13:59.84,BottomCenter,,0,0,0,,计算
Dialogue: 0,0:13:59.84,0:14:02.39,BottomCenter,,0,0,0,,以及你可以使用东西的想法
Dialogue: 0,0:14:02.39,0:14:02.87,BottomCenter,,0,0,0,,你
Dialogue: 0,0:14:02.87,0:14:04.79,BottomCenter,,0,0,0,,正在建设是为了建设更大
Dialogue: 0,0:14:04.79,0:14:07.12,BottomCenter,,0,0,0,,事情一遍又一遍地出现
Dialogue: 0,0:14:07.12,0:14:08.32,BottomCenter,,0,0,0,,再次，这是一种不同的方式
Dialogue: 0,0:14:08.32,0:14:08.79,BottomCenter,,0,0,0,,思维
Dialogue: 0,0:14:08.79,0:14:12.15,BottomCenter,,0,0,0,,以及最棘手的部分之一
Dialogue: 0,0:14:12.15,0:14:14.96,BottomCenter,,0,0,0,,是你需要将代码关联到
Dialogue: 0,0:14:14.96,0:14:16.15,BottomCenter,,0,0,0,,世界上有什么
Dialogue: 0,0:14:16.15,0:14:17.91,BottomCenter,,0,0,0,,你代表的是那是如何
Dialogue: 0,0:14:17.91,0:14:20.39,BottomCenter,,0,0,0,,最喜欢有趣的程序工作
Dialogue: 0,0:14:20.39,0:14:21.84,BottomCenter,,0,0,0,,是你代表着什么
Dialogue: 0,0:14:21.84,0:14:23.75,BottomCenter,,0,0,0,,关于世界使用
Dialogue: 0,0:14:23.75,0:14:26.15,BottomCenter,,0,0,0,,您的代码，无论是数字还是我们都会
Dialogue: 0,0:14:26.15,0:14:27.12,BottomCenter,,0,0,0,,了解列表
Dialogue: 0,0:14:27.12,0:14:28.79,BottomCenter,,0,0,0,,星期一或者任何时间都可以
Dialogue: 0,0:14:28.79,0:14:30.08,BottomCenter,,0,0,0,,代表了所有种类的东西
Dialogue: 0,0:14:30.08,0:14:32.15,BottomCenter,,0,0,0,,使用您的程序的世界
Dialogue: 0,0:14:32.15,0:14:34.32,BottomCenter,,0,0,0,,但这意味着就像代码行一样
Dialogue: 0,0:14:34.32,0:14:36.00,BottomCenter,,0,0,0,,必须与你的东西相对应
Dialogue: 0,0:14:36.00,0:14:37.03,BottomCenter,,0,0,0,,试图代表
Dialogue: 0,0:14:37.03,0:14:38.32,BottomCenter,,0,0,0,,需要一段时间才能习惯
Dialogue: 0,0:14:38.32,0:14:41.51,BottomCenter,,0,0,0,,但你会做得更好
Dialogue: 0,0:14:42.48,0:14:44.32,BottomCenter,,0,0,0,,聊天中有一个问题询问
Dialogue: 0,0:14:44.32,0:14:46.08,BottomCenter,,0,0,0,,我们是否一直走到
Dialogue: 0,0:14:46.08,0:14:49.20,BottomCenter,,0,0,0,,六二呃对不起六一或者我们可以吗
Dialogue: 0,0:14:49.20,0:14:49.67,BottomCenter,,0,0,0,,停止
Dialogue: 0,0:14:49.67,0:14:52.79,BottomCenter,,0,0,0,,六点二分，你可以在这里看到
Dialogue: 0,0:14:52.79,0:14:53.03,BottomCenter,,0,0,0,,得到
Dialogue: 0,0:14:53.03,0:14:55.91,BottomCenter,,0,0,0,,最后一行我们必须做六
Dialogue: 0,0:14:55.91,0:14:56.79,BottomCenter,,0,0,0,,一
Dialogue: 0,0:14:56.79,0:14:58.79,BottomCenter,,0,0,0,,所以我们一直到 6 1 你
Dialogue: 0,0:14:58.79,0:15:00.96,BottomCenter,,0,0,0,,还可以看到基本情况
Dialogue: 0,0:15:00.96,0:15:04.55,BottomCenter,,0,0,0,,是当n等于0时
Dialogue: 0,0:15:04.55,0:15:06.15,BottomCenter,,0,0,0,,并且小于 0 这意味着我们已经
Dialogue: 0,0:15:06.15,0:15:07.91,BottomCenter,,0,0,0,,偏向某处
Dialogue: 0,0:15:07.91,0:15:11.12,BottomCenter,,0,0,0,,m 为 0。所以基本情况
Dialogue: 0,0:15:11.12,0:15:13.67,BottomCenter,,0,0,0,,当你停下来时，要么 n 已经去了
Dialogue: 0,0:15:13.67,0:15:14.32,BottomCenter,,0,0,0,,零
Dialogue: 0,0:15:14.32,0:15:16.63,BottomCenter,,0,0,0,,或者 m 已为零，在这种情况下
Dialogue: 0,0:15:16.63,0:15:17.60,BottomCenter,,0,0,0,,无事可做
Dialogue: 0,0:15:17.60,0:15:20.32,BottomCenter,,0,0,0,,事实上 m 等于 1
Dialogue: 0,0:15:20.32,0:15:20.63,BottomCenter,,0,0,0,,得到
Dialogue: 0,0:15:20.63,0:15:24.39,BottomCenter,,0,0,0,,um 在递归调用中分区
Dialogue: 0,0:15:24.39,0:15:27.36,BottomCenter,,0,0,0,,是的，所以你从六六四开始
Dialogue: 0,0:15:27.36,0:15:28.63,BottomCenter,,0,0,0,,到二四
Dialogue: 0,0:15:28.63,0:15:31.75,BottomCenter,,0,0,0,,但你也可以从六六或六四
Dialogue: 0,0:15:31.75,0:15:32.55,BottomCenter,,0,0,0,,到六三
Dialogue: 0,0:15:32.55,0:15:37.67,BottomCenter,,0,0,0,,这对双方都有好处
Dialogue: 0,0:15:38.15,0:15:41.51,BottomCenter,,0,0,0,,呃三三五
Dialogue: 0,0:15:41.51,0:15:45.60,BottomCenter,,0,0,0,,六点二呃现在还太早了
Dialogue: 0,0:15:45.60,0:15:46.24,BottomCenter,,0,0,0,,这个人
Dialogue: 0,0:15:46.24,0:15:47.84,BottomCenter,,0,0,0,,但重点是就像有所有这些
Dialogue: 0,0:15:47.84,0:15:49.75,BottomCenter,,0,0,0,,不同的选择，它们都会发生
Dialogue: 0,0:15:49.75,0:15:51.27,BottomCenter,,0,0,0,,每次，所以你从六点四到
Dialogue: 0,0:15:51.27,0:15:52.48,BottomCenter,,0,0,0,,六三到六二
Dialogue: 0,0:15:52.48,0:15:55.51,BottomCenter,,0,0,0,,到六 一到五 一到四 一到
Dialogue: 0,0:15:55.51,0:15:57.27,BottomCenter,,0,0,0,,三一二一一一一
Dialogue: 0,0:15:57.27,0:15:59.27,BottomCenter,,0,0,0,,归零一然后你终于喜欢
Dialogue: 0,0:15:59.27,0:16:00.32,BottomCenter,,0,0,0,,已经建造了这个
Dialogue: 0,0:16:00.32,0:16:02.55,BottomCenter,,0,0,0,,最后一个例子，但它需要一个
Dialogue: 0,0:16:02.55,0:16:04.48,BottomCenter,,0,0,0,,一堆递归调用来计算
Dialogue: 0,0:16:04.48,0:16:05.44,BottomCenter,,0,0,0,,其中之一
Dialogue: 0,0:16:05.44,0:16:06.96,BottomCenter,,0,0,0,,但你赚的太多了
Dialogue: 0,0:16:06.96,0:16:09.12,BottomCenter,,0,0,0,,他们全部所以还有另一个问题
Dialogue: 0,0:16:09.12,0:16:10.24,BottomCenter,,0,0,0,,这是我喜欢的
Dialogue: 0,0:16:10.24,0:16:14.00,BottomCenter,,0,0,0,,我们可以在你和我一起这样做吗
Dialogue: 0,0:16:14.00,0:16:16.79,BottomCenter,,0,0,0,,你说得好，我们真的做不到
Dialogue: 0,0:16:16.79,0:16:18.79,BottomCenter,,0,0,0,,2 4 这基本上是 2 2。所以我们可以
Dialogue: 0,0:16:18.79,0:16:19.91,BottomCenter,,0,0,0,,完成了
Dialogue: 0,0:16:19.91,0:16:23.03,BottomCenter,,0,0,0,,n 减 mn 减 m
Dialogue: 0,0:16:23.03,0:16:26.15,BottomCenter,,0,0,0,,对于 with m 调用
Dialogue: 0,0:16:26.15,0:16:29.20,BottomCenter,,0,0,0,,嗯，是的，这会起作用
Dialogue: 0,0:16:29.20,0:16:32.24,BottomCenter,,0,0,0,,示例但不适用于所有示例一
Dialogue: 0,0:16:32.24,0:16:33.27,BottomCenter,,0,0,0,,你可以做的事
Dialogue: 0,0:16:33.27,0:16:35.84,BottomCenter,,0,0,0,,你可以写我想要的最小值
Dialogue: 0,0:16:35.84,0:16:36.39,BottomCenter,,0,0,0,,米
Dialogue: 0,0:16:36.39,0:16:39.44,BottomCenter,,0,0,0,,n 减 m 表示看起来
Dialogue: 0,0:16:39.44,0:16:42.24,BottomCenter,,0,0,0,,如果这变得如此之小
Dialogue: 0,0:16:42.24,0:16:44.08,BottomCenter,,0,0,0,,比 m 大我们为什么不直接用它
Dialogue: 0,0:16:44.08,0:16:47.44,BottomCenter,,0,0,0,,相反，但有时它并不大
Dialogue: 0,0:16:47.44,0:16:48.08,BottomCenter,,0,0,0,,6
Dialogue: 0,0:16:48.08,0:16:51.60,BottomCenter,,0,0,0,,6 4 事实证明，如果这是
Dialogue: 0,0:16:51.60,0:16:55.44,BottomCenter,,0,0,0,,15 4 然后使用 1 4 之后你会是 11
Dialogue: 0,0:16:55.44,0:16:57.03,BottomCenter,,0,0,0,,4 但你不想进行递归
Dialogue: 0,0:16:57.03,0:16:58.32,BottomCenter,,0,0,0,,请拨打 11 11
Dialogue: 0,0:16:58.32,0:16:59.51,BottomCenter,,0,0,0,,因为那时你使用的零件是
Dialogue: 0,0:16:59.51,0:17:00.96,BottomCenter,,0,0,0,,大于 4 号，这是您的位置
Dialogue: 0,0:17:00.96,0:17:02.08,BottomCenter,,0,0,0,,想这样开始
Dialogue: 0,0:17:02.08,0:17:03.51,BottomCenter,,0,0,0,,这将是一个非常好的
Dialogue: 0,0:17:03.51,0:17:06.31,BottomCenter,,0,0,0,,替代版本
Dialogue: 0,0:17:07.68,0:17:09.75,BottomCenter,,0,0,0,,所以首先记住所以我想
Dialogue: 0,0:17:09.75,0:17:11.27,BottomCenter,,0,0,0,,你问的是关于回报
Dialogue: 0,0:17:11.27,0:17:13.20,BottomCenter,,0,0,0,,else 子句 是的
Dialogue: 0,0:17:13.20,0:17:14.88,BottomCenter,,0,0,0,,是的，所以我们要问的是
Dialogue: 0,0:17:14.88,0:17:16.96,BottomCenter,,0,0,0,,现在返回那个尺寸记住
Dialogue: 0,0:17:16.96,0:17:20.24,BottomCenter,,0,0,0,,必须评估该回报
Dialogue: 0,0:17:20.24,0:17:23.03,BottomCenter,,0,0,0,,每次我们调用 count
Dialogue: 0,0:17:23.03,0:17:24.64,BottomCenter,,0,0,0,,分区
Dialogue: 0,0:17:24.64,0:17:26.31,BottomCenter,,0,0,0,,是的，这里不止一次返回
Dialogue: 0,0:17:26.31,0:17:28.64,BottomCenter,,0,0,0,,有多个多个多个
Dialogue: 0,0:17:28.64,0:17:29.51,BottomCenter,,0,0,0,,回报
Dialogue: 0,0:17:29.51,0:17:31.68,BottomCenter,,0,0,0,,是的，那么为什么让我们进行第一个通话
Dialogue: 0,0:17:31.68,0:17:33.68,BottomCenter,,0,0,0,,关闭计数分区
Dialogue: 0,0:17:33.68,0:17:36.31,BottomCenter,,0,0,0,,你怎么称呼竞争
Dialogue: 0,0:17:36.31,0:17:37.92,BottomCenter,,0,0,0,,这是第一行
Dialogue: 0,0:17:37.92,0:17:38.88,BottomCenter,,0,0,0,,与米
Dialogue: 0,0:17:38.88,0:17:42.00,BottomCenter,,0,0,0,,有一个会回来的承诺 是的
Dialogue: 0,0:17:42.00,0:17:44.31,BottomCenter,,0,0,0,,做无然后返回
Dialogue: 0,0:17:44.31,0:17:46.00,BottomCenter,,0,0,0,,但在完成之前你不能这样做
Dialogue: 0,0:17:46.00,0:17:47.35,BottomCenter,,0,0,0,,与
Dialogue: 0,0:17:47.35,0:17:48.64,BottomCenter,,0,0,0,,所以你就离开并做了很多
Dialogue: 0,0:17:48.64,0:17:50.79,BottomCenter,,0,0,0,,一堆递归调用最终它
Dialogue: 0,0:17:50.79,0:17:52.96,BottomCenter,,0,0,0,,作为回报将达到基本情况
Dialogue: 0,0:17:52.96,0:17:55.11,BottomCenter,,0,0,0,,然后你就可以做没有它会做的事
Dialogue: 0,0:17:55.11,0:17:56.55,BottomCenter,,0,0,0,,一堆递归调用最终在
Dialogue: 0,0:17:56.55,0:17:58.16,BottomCenter,,0,0,0,,作为回报，然后你做一个基本情况
Dialogue: 0,0:17:58.16,0:18:00.40,BottomCenter,,0,0,0,,返回所以不只有一次返回
Dialogue: 0,0:18:00.40,0:18:02.24,BottomCenter,,0,0,0,,一切都会回归
Dialogue: 0,0:18:02.24,0:18:03.68,BottomCenter,,0,0,0,,正在建设中
Dialogue: 0,0:18:03.68,0:18:05.27,BottomCenter,,0,0,0,,是的，这就是为什么你得到所有
Dialogue: 0,0:18:05.27,0:18:07.59,BottomCenter,,0,0,0,,输出不仅仅是最后一个
Dialogue: 0,0:18:07.59,0:18:10.07,BottomCenter,,0,0,0,,一对一
Dialogue: 0,0:18:10.96,0:18:12.64,BottomCenter,,0,0,0,,我们应该做点有趣的事吗
Dialogue: 0,0:18:12.64,0:18:14.64,BottomCenter,,0,0,0,,我们可以使用装饰器来准确地看到
Dialogue: 0,0:18:14.64,0:18:16.00,BottomCenter,,0,0,0,,怎么运行的
Dialogue: 0,0:18:16.00,0:18:17.35,BottomCenter,,0,0,0,,我正想问我想我们应该使用
Dialogue: 0,0:18:17.35,0:18:19.27,BottomCenter,,0,0,0,,装饰器说明
Dialogue: 0,0:18:19.27,0:18:23.75,BottomCenter,,0,0,0,,亲爱的刚才描述了什么呃
Dialogue: 0,0:18:26.88,0:18:29.92,BottomCenter,,0,0,0,,好吧，我们称之为跟踪，这样我们就可以跟踪
Dialogue: 0,0:18:29.92,0:18:30.88,BottomCenter,,0,0,0,,一个函数
Dialogue: 0,0:18:30.88,0:18:34.64,BottomCenter,,0,0,0,,通过创建一个新函数
Dialogue: 0,0:18:34.64,0:18:38.16,BottomCenter,,0,0,0,,n 和 m 实际上是
Dialogue: 0,0:18:38.16,0:18:41.27,BottomCenter,,0,0,0,,获取调用的返回值
Dialogue: 0,0:18:41.27,0:18:44.40,BottomCenter,,0,0,0,,那个呃f
Dialogue: 0,0:18:44.40,0:18:47.11,BottomCenter,,0,0,0,,在 nm 上然后它会打印什么
Dialogue: 0,0:18:47.11,0:18:47.75,BottomCenter,,0,0,0,,发生了
Dialogue: 0,0:18:47.75,0:18:51.27,BottomCenter,,0,0,0,,所以这将打印
Dialogue: 0,0:18:51.27,0:18:54.55,BottomCenter,,0,0,0,,呃f
Dialogue: 0,0:18:54.55,0:18:55.92,BottomCenter,,0,0,0,,这只是为了统计名字
Dialogue: 0,0:18:55.92,0:18:57.68,BottomCenter,,0,0,0,,分区
Dialogue: 0,0:18:57.68,0:19:01.83,BottomCenter,,0,0,0,,呃然后我们有一个m
Dialogue: 0,0:19:01.83,0:19:04.88,BottomCenter,,0,0,0,,然后我们呃
Dialogue: 0,0:19:04.88,0:19:08.72,BottomCenter,,0,0,0,,米然后
Dialogue: 0,0:19:08.72,0:19:11.75,BottomCenter,,0,0,0,,我们得到了呃多么好的回报
Dialogue: 0,0:19:11.75,0:19:14.64,BottomCenter,,0,0,0,,它返回了什么
Dialogue: 0,0:19:15.75,0:19:19.68,BottomCenter,,0,0,0,,结果还好我相信有更好的
Dialogue: 0,0:19:19.68,0:19:20.79,BottomCenter,,0,0,0,,写这个的方法但是
Dialogue: 0,0:19:20.79,0:19:24.31,BottomCenter,,0,0,0,,我们已经做了我们已经做的事情
Dialogue: 0,0:19:24.31,0:19:29.51,BottomCenter,,0,0,0,,呃返回g
Dialogue: 0,0:19:31.68,0:19:34.96,BottomCenter,,0,0,0,,呃我们确实需要移动这个
Dialogue: 0,0:19:34.96,0:19:39.68,BottomCenter,,0,0,0,,放在这里以便我们可以使用它
Dialogue: 0,0:19:39.68,0:19:40.88,BottomCenter,,0,0,0,,我真的需要做一点
Dialogue: 0,0:19:40.88,0:19:42.96,BottomCenter,,0,0,0,,更宽所以看起来不那么奇怪得到我的
Dialogue: 0,0:19:42.96,0:19:44.55,BottomCenter,,0,0,0,,图片不碍事
Dialogue: 0,0:19:44.55,0:19:47.27,BottomCenter,,0,0,0,,然后我们可以追踪这个然后我们
Dialogue: 0,0:19:47.27,0:19:49.68,BottomCenter,,0,0,0,,可以尝试看看会发生什么
Dialogue: 0,0:19:49.68,0:19:52.79,BottomCenter,,0,0,0,,当我们在 6 上调用 count 分区时
Dialogue: 0,0:19:52.79,0:19:54.48,BottomCenter,,0,0,0,,四
Dialogue: 0,0:19:54.48,0:19:58.16,BottomCenter,,0,0,0,,它崩溃了呃我想你已经
Dialogue: 0,0:19:58.16,0:20:01.35,BottomCenter,,0,0,0,,啊你必须转换是的
Dialogue: 0,0:20:03.35,0:20:07.83,BottomCenter,,0,0,0,,那真是一个奇迹
Dialogue: 0,0:20:10.00,0:20:12.24,BottomCenter,,0,0,0,,现在你又发生了一次车祸哦
Dialogue: 0,0:20:12.24,0:20:14.48,BottomCenter,,0,0,0,,结果是一个整数
Dialogue: 0,0:20:14.48,0:20:16.72,BottomCenter,,0,0,0,,好的
Dialogue: 0,0:20:17.51,0:20:19.27,BottomCenter,,0,0,0,,所以有更紧凑的构建方式
Dialogue: 0,0:20:19.27,0:20:20.40,BottomCenter,,0,0,0,,一个大字符串，但我们还没有交谈过
Dialogue: 0,0:20:20.40,0:20:21.51,BottomCenter,,0,0,0,,你对他们还这样
Dialogue: 0,0:20:21.51,0:20:24.88,BottomCenter,,0,0,0,,是啊，哦，你得到了回报
Dialogue: 0,0:20:24.88,0:20:27.92,BottomCenter,,0,0,0,,某处没有哦，是的，就在那里
Dialogue: 0,0:20:27.92,0:20:30.48,BottomCenter,,0,0,0,,好吧，我们终于解决了，所以这里是
Dialogue: 0,0:20:30.48,0:20:32.00,BottomCenter,,0,0,0,,发生的事情是这样的
Dialogue: 0,0:20:32.00,0:20:36.31,BottomCenter,,0,0,0,,比赛实际返回九
Dialogue: 0,0:20:36.31,0:20:40.72,BottomCenter,,0,0,0,,当我们在六点和四点钟打电话时
Dialogue: 0,0:20:40.72,0:20:43.11,BottomCenter,,0,0,0,,所以这个表达式实际上想出了
Dialogue: 0,0:20:43.11,0:20:44.64,BottomCenter,,0,0,0,,最后九个
Dialogue: 0,0:20:44.64,0:20:46.31,BottomCenter,,0,0,0,,为什么它想出了九井呢
Dialogue: 0,0:20:46.31,0:20:48.40,BottomCenter,,0,0,0,,为此想出了两个
Dialogue: 0,0:20:48.40,0:20:50.55,BottomCenter,,0,0,0,,这是哪两个，它想出了
Dialogue: 0,0:20:50.55,0:20:51.68,BottomCenter,,0,0,0,,七为此
Dialogue: 0,0:20:51.68,0:20:52.96,BottomCenter,,0,0,0,,我没有把它们全部列出来，但你看到了
Dialogue: 0,0:20:52.96,0:20:55.27,BottomCenter,,0,0,0,,照片中的他们
Dialogue: 0,0:20:55.27,0:20:57.11,BottomCenter,,0,0,0,,那七个来自召唤
Dialogue: 0,0:20:57.11,0:20:59.59,BottomCenter,,0,0,0,,六、三项比赛
Dialogue: 0,0:20:59.59,0:21:01.75,BottomCenter,,0,0,0,,这两个人是从哪里来的呢？
Dialogue: 0,0:21:01.75,0:21:02.72,BottomCenter,,0,0,0,,很久以前
Dialogue: 0,0:21:02.72,0:21:04.96,BottomCenter,,0,0,0,,我们把所谓的比赛算作两场比赛
Dialogue: 0,0:21:04.96,0:21:07.03,BottomCenter,,0,0,0,,两个，这就是我们得到两个的方式
Dialogue: 0,0:21:07.03,0:21:10.55,BottomCenter,,0,0,0,,所以它补充说你知道两个
Dialogue: 0,0:21:10.55,0:21:14.31,BottomCenter,,0,0,0,,那七个一起得到这九个
Dialogue: 0,0:21:14.31,0:21:16.16,BottomCenter,,0,0,0,,它如何跟踪所有这些东西
Dialogue: 0,0:21:16.16,0:21:18.40,BottomCenter,,0,0,0,,这就是机制
Dialogue: 0,0:21:18.40,0:21:19.92,BottomCenter,,0,0,0,,编程语言如何调用
Dialogue: 0,0:21:19.92,0:21:21.20,BottomCenter,,0,0,0,,表达式的作用在于它们没有作用
Dialogue: 0,0:21:21.20,0:21:22.72,BottomCenter,,0,0,0,,返回，直到他们拥有所有
Dialogue: 0,0:21:22.72,0:21:25.11,BottomCenter,,0,0,0,,他们需要计算的值
Dialogue: 0,0:21:25.11,0:21:27.20,BottomCenter,,0,0,0,,然后呃然后可以计算返回值
Dialogue: 0,0:21:27.20,0:21:28.88,BottomCenter,,0,0,0,,然后返回这样
Dialogue: 0,0:21:28.88,0:21:30.55,BottomCenter,,0,0,0,,这件事正在做很多工作
Dialogue: 0,0:21:30.55,0:21:31.92,BottomCenter,,0,0,0,,为了找出 m
Dialogue: 0,0:21:31.92,0:21:34.24,BottomCenter,,0,0,0,,是两个进行一堆递归调用
Dialogue: 0,0:21:34.24,0:21:35.75,BottomCenter,,0,0,0,,之后找出没有
Dialogue: 0,0:21:35.75,0:21:37.51,BottomCenter,,0,0,0,,m 是七，最后加二
Dialogue: 0,0:21:37.51,0:21:40.00,BottomCenter,,0,0,0,,和七个人一起回来
Dialogue: 0,0:21:40.00,0:21:41.35,BottomCenter,,0,0,0,,这些都是不同的调用
Dialogue: 0,0:21:41.35,0:21:43.20,BottomCenter,,0,0,0,,是的，继续吧，我们是否有
Dialogue: 0,0:21:43.20,0:21:44.16,BottomCenter,,0,0,0,,是否递归
Dialogue: 0,0:21:44.16,0:21:46.00,BottomCenter,,0,0,0,,想象一下有他们和没有我
Dialogue: 0,0:21:46.00,0:21:47.35,BottomCenter,,0,0,0,,只是调用了其他一些函数而不是
Dialogue: 0,0:21:47.35,0:21:48.72,BottomCenter,,0,0,0,,递归地
Dialogue: 0,0:21:48.72,0:21:50.00,BottomCenter,,0,0,0,,这将是完全有意义的
Dialogue: 0,0:21:50.00,0:21:51.44,BottomCenter,,0,0,0,,与他们一起调用一些函数
Dialogue: 0,0:21:51.44,0:21:53.11,BottomCenter,,0,0,0,,得到一个 2 回来，没有 m 打电话给一些人
Dialogue: 0,0:21:53.11,0:21:54.64,BottomCenter,,0,0,0,,函数得到七回来
Dialogue: 0,0:21:54.64,0:21:57.11,BottomCenter,,0,0,0,,然后我们返回这两者的总和
Dialogue: 0,0:21:57.11,0:21:58.00,BottomCenter,,0,0,0,,没关系
Dialogue: 0,0:21:58.00,0:21:59.83,BottomCenter,,0,0,0,,是的，这里发生的一切就是
Dialogue: 0,0:21:59.83,0:22:01.27,BottomCenter,,0,0,0,,为了得到那两个并且为了
Dialogue: 0,0:22:01.27,0:22:02.24,BottomCenter,,0,0,0,,得到那七个
Dialogue: 0,0:22:02.24,0:22:04.55,BottomCenter,,0,0,0,,我们打电话给自己，但没有
Dialogue: 0,0:22:04.55,0:22:06.24,BottomCenter,,0,0,0,,这有问题，因为约翰刚刚
Dialogue: 0,0:22:06.24,0:22:07.27,BottomCenter,,0,0,0,,说的是
Dialogue: 0,0:22:07.27,0:22:09.51,BottomCenter,,0,0,0,,python解释器有状态有
Dialogue: 0,0:22:09.51,0:22:11.03,BottomCenter,,0,0,0,,它知道的记忆
Dialogue: 0,0:22:11.03,0:22:14.07,BottomCenter,,0,0,0,,第一次通话后必须这样做
Dialogue: 0,0:22:14.07,0:22:16.48,BottomCenter,,0,0,0,,返回有它们和没有它们的总和
Dialogue: 0,0:22:16.48,0:22:17.11,BottomCenter,,0,0,0,,他们
Dialogue: 0,0:22:17.11,0:22:19.20,BottomCenter,,0,0,0,,当六点比赛开始时
Dialogue: 0,0:22:19.20,0:22:21.44,BottomCenter,,0,0,0,,三个，所以它必须去做所有的事情
Dialogue: 0,0:22:21.44,0:22:23.35,BottomCenter,,0,0,0,,需要递归地进行工作
Dialogue: 0,0:22:23.35,0:22:25.11,BottomCenter,,0,0,0,,非递归不在乎它必须走
Dialogue: 0,0:22:25.11,0:22:26.31,BottomCenter,,0,0,0,,通过所有要做的工作
Dialogue: 0,0:22:26.31,0:22:28.64,BottomCenter,,0,0,0,,没有 m 递归 不递归
Dialogue: 0,0:22:28.64,0:22:29.44,BottomCenter,,0,0,0,,不在乎
Dialogue: 0,0:22:29.44,0:22:31.68,BottomCenter,,0,0,0,,然后它把它们撞在一起然后
Dialogue: 0,0:22:31.68,0:22:32.79,BottomCenter,,0,0,0,,这里的美丽
Dialogue: 0,0:22:32.79,0:22:35.75,BottomCenter,,0,0,0,,我可以和他们一起得到吗
Dialogue: 0,0:22:35.75,0:22:36.55,BottomCenter,,0,0,0,,去做
Dialogue: 0,0:22:36.55,0:22:38.40,BottomCenter,,0,0,0,,有点颠覆问题所以
Dialogue: 0,0:22:38.40,0:22:39.92,BottomCenter,,0,0,0,,然后我必须解决完全相同的问题
Dialogue: 0,0:22:39.92,0:22:40.55,BottomCenter,,0,0,0,,事物
Dialogue: 0,0:22:40.55,0:22:41.92,BottomCenter,,0,0,0,,但与
Dialogue: 0,0:22:41.92,0:22:43.03,BottomCenter,,0,0,0,,原始调用，因为它位于
Dialogue: 0,0:22:43.03,0:22:44.40,BottomCenter,,0,0,0,,不同的环境
Dialogue: 0,0:22:44.40,0:22:47.11,BottomCenter,,0,0,0,,嗯，如果你愿意的话，所以它正在做它的事情
Dialogue: 0,0:22:47.11,0:22:48.24,BottomCenter,,0,0,0,,在自己的小事中拥有自己的小事
Dialogue: 0,0:22:48.24,0:22:49.51,BottomCenter,,0,0,0,,最终完成时的环境
Dialogue: 0,0:22:49.51,0:22:55.83,BottomCenter,,0,0,0,,弹出到另一个
Dialogue: 0,0:22:56.07,0:22:58.07,BottomCenter,,0,0,0,,下一个问题是你如何获得
Dialogue: 0,0:22:58.07,0:22:59.51,BottomCenter,,0,0,0,,比赛 0
Dialogue: 0,0:22:59.51,0:23:02.72,BottomCenter,,0,0,0,,当只有 n 或 m 之一时为 0
Dialogue: 0,0:23:02.72,0:23:04.40,BottomCenter,,0,0,0,,在任何给定的情况下都在减少
Dialogue: 0,0:23:04.40,0:23:07.20,BottomCenter,,0,0,0,,递归调用
Dialogue: 0,0:23:07.20,0:23:11.03,BottomCenter,,0,0,0,,啊，但他们不对，所以与 m
Dialogue: 0,0:23:11.03,0:23:14.07,BottomCenter,,0,0,0,,减少 n 且没有 m 的是
Dialogue: 0,0:23:14.07,0:23:15.27,BottomCenter,,0,0,0,,减少
Dialogue: 0,0:23:15.27,0:23:19.03,BottomCenter,,0,0,0,,我是对的，这意味着他们都得到了
Dialogue: 0,0:23:19.03,0:23:20.24,BottomCenter,,0,0,0,,减少
Dialogue: 0,0:23:20.24,0:23:22.40,BottomCenter,,0,0,0,,正确，因为在递归调用中所以
Dialogue: 0,0:23:22.40,0:23:23.59,BottomCenter,,0,0,0,,让我们来做
Dialogue: 0,0:23:23.59,0:23:26.31,BottomCenter,,0,0,0,,我是的，所以这样就可以做一个
Dialogue: 0,0:23:26.31,0:23:26.96,BottomCenter,,0,0,0,,拨电至
Dialogue: 0,0:23:26.96,0:23:29.35,BottomCenter,,0,0,0,,嗯 com 分区具有较小的 n 我们可以吗
Dialogue: 0,0:23:29.35,0:23:31.92,BottomCenter,,0,0,0,,同意这一点
Dialogue: 0,0:23:31.92,0:23:33.75,BottomCenter,,0,0,0,,好，这意味着这对
Dialogue: 0,0:23:33.75,0:23:34.96,BottomCenter,,0,0,0,,递归调用
Dialogue: 0,0:23:34.96,0:23:38.64,BottomCenter,,0,0,0,,因为该调用都会有一个较小的 n
Dialogue: 0,0:23:38.64,0:23:41.20,BottomCenter,,0,0,0,,对了，不要在这里混淆第二个结局
Dialogue: 0,0:23:41.20,0:23:42.00,BottomCenter,,0,0,0,,并且没有
Dialogue: 0,0:23:42.00,0:23:45.75,BottomCenter,,0,0,0,,m 与原来的 n 现在是结束
Dialogue: 0,0:23:45.75,0:23:48.88,BottomCenter,,0,0,0,,来自较小的递归调用
Dialogue: 0,0:23:48.88,0:23:51.68,BottomCenter,,0,0,0,,是的，然后又做了一个
Dialogue: 0,0:23:51.68,0:23:53.44,BottomCenter,,0,0,0,,递归调用递减甚至
Dialogue: 0,0:23:53.44,0:23:54.16,BottomCenter,,0,0,0,,再次
Dialogue: 0,0:23:54.16,0:23:56.00,BottomCenter,,0,0,0,,然后它下降，这样你就有了
Dialogue: 0,0:23:56.00,0:23:57.92,BottomCenter,,0,0,0,,要记住那些最终变量是
Dialogue: 0,0:23:57.92,0:23:58.40,BottomCenter,,0,0,0,,和
Dialogue: 0,0:23:58.40,0:24:01.27,BottomCenter,,0,0,0,,关于递归调用不
Dialogue: 0,0:24:01.27,0:24:02.64,BottomCenter,,0,0,0,,原本的
Dialogue: 0,0:24:02.64,0:24:04.00,BottomCenter,,0,0,0,,当然，在哪种情况下调用哪个
Dialogue: 0,0:24:04.00,0:24:05.35,BottomCenter,,0,0,0,,总是一样的，但事实并非如此
Dialogue: 0,0:24:05.35,0:24:07.75,BottomCenter,,0,0,0,,案子
Dialogue: 0,0:24:07.83,0:24:10.64,BottomCenter,,0,0,0,,我明白了，好吧，这是有道理的
Dialogue: 0,0:24:10.64,0:24:11.59,BottomCenter,,0,0,0,,现在
Dialogue: 0,0:24:11.59,0:24:13.75,BottomCenter,,0,0,0,,很好，为了完成这个，我有一个
Dialogue: 0,0:24:13.75,0:24:14.88,BottomCenter,,0,0,0,,多一点痕迹
Dialogue: 0,0:24:14.88,0:24:16.64,BottomCenter,,0,0,0,,这说明了当事情发生时会发生什么
Dialogue: 0,0:24:16.64,0:24:18.07,BottomCenter,,0,0,0,,打电话并
Dialogue: 0,0:24:18.07,0:24:20.24,BottomCenter,,0,0,0,,你知道，首先我们在六点四称之为
Dialogue: 0,0:24:20.24,0:24:22.07,BottomCenter,,0,0,0,,这就是所谓的“二二”
Dialogue: 0,0:24:22.07,0:24:22.64,BottomCenter,,0,0,0,,称之为
Dialogue: 0,0:24:22.64,0:24:25.51,BottomCenter,,0,0,0,,零零然后最后一些东西
Dialogue: 0,0:24:25.51,0:24:27.35,BottomCenter,,0,0,0,,被退回
Dialogue: 0,0:24:27.35,0:24:29.27,BottomCenter,,0,0,0,,所以你可以看到像
Dialogue: 0,0:24:29.27,0:24:31.35,BottomCenter,,0,0,0,,递归调用
Dialogue: 0,0:24:31.35,0:24:34.79,BottomCenter,,0,0,0,,n 现在是 2，m 现在是 2，所以它
Dialogue: 0,0:24:34.79,0:24:39.35,BottomCenter,,0,0,0,,将比赛计数为零和零
Dialogue: 0,0:24:39.35,0:24:41.35,BottomCenter,,0,0,0,,在第二次，所以我们看到
Dialogue: 0,0:24:41.35,0:24:43.51,BottomCenter,,0,0,0,,该调用和该调用是基本情况
Dialogue: 0,0:24:43.51,0:24:46.79,BottomCenter,,0,0,0,,所以我们发现有一种方法
Dialogue: 0,0:24:46.79,0:24:50.64,BottomCenter,,0,0,0,,到嗯
Dialogue: 0,0:24:51.44,0:24:54.79,BottomCenter,,0,0,0,,使用最大尺寸为 2 的零件计算 2
Dialogue: 0,0:24:54.79,0:24:58.16,BottomCenter,,0,0,0,,你实际使用的地方是 2
Dialogue: 0,0:24:58.16,0:24:58.48,BottomCenter,,0,0,0,,只是
Dialogue: 0,0:24:58.48,0:25:01.51,BottomCenter,,0,0,0,,两个好吧，如果这个例子非常
Dialogue: 0,0:25:01.51,0:25:03.11,BottomCenter,,0,0,0,,令人困惑但可以理解
Dialogue: 0,0:25:03.11,0:25:05.03,BottomCenter,,0,0,0,,因为树递归所以我
Dialogue: 0,0:25:05.03,0:25:06.48,BottomCenter,,0,0,0,,建议回到
Dialogue: 0,0:25:06.48,0:25:09.03,BottomCenter,,0,0,0,,到没有的例子之一
Dialogue: 0,0:25:09.03,0:25:10.64,BottomCenter,,0,0,0,,树递归只做了一个简单的事情
Dialogue: 0,0:25:10.64,0:25:13.83,BottomCenter,,0,0,0,,就像阶乘是的并且使
Dialogue: 0,0:25:13.83,0:25:15.75,BottomCenter,,0,0,0,,确保你真的明白如何
Dialogue: 0,0:25:15.75,0:25:17.27,BottomCenter,,0,0,0,,每次进行递归调用时
Dialogue: 0,0:25:17.27,0:25:19.03,BottomCenter,,0,0,0,,你正在重新实例化本地
Dialogue: 0,0:25:19.03,0:25:21.03,BottomCenter,,0,0,0,,变量和参数
Dialogue: 0,0:25:21.03,0:25:22.72,BottomCenter,,0,0,0,,一旦你真正掌握了窍门
Dialogue: 0,0:25:22.72,0:25:24.24,BottomCenter,,0,0,0,,然后树重现
Dialogue: 0,0:25:24.24,0:25:25.35,BottomCenter,,0,0,0,,触发销有点棘手，因为
Dialogue: 0,0:25:25.35,0:25:26.55,BottomCenter,,0,0,0,,你必须有点
Dialogue: 0,0:25:26.55,0:25:28.24,BottomCenter,,0,0,0,,顺便建造这些树
Dialogue: 0,0:25:28.24,0:25:29.68,BottomCenter,,0,0,0,,绝对正确的遵循方式
Dialogue: 0,0:25:29.68,0:25:31.20,BottomCenter,,0,0,0,,这些递归不是环境
Dialogue: 0,0:25:31.20,0:25:33.59,BottomCenter,,0,0,0,,通过画树来绘制图
Dialogue: 0,0:25:33.59,0:25:35.59,BottomCenter,,0,0,0,,是的，所以坐在根部拨打电话
Dialogue: 0,0:25:35.59,0:25:36.96,BottomCenter,,0,0,0,,计数分区 n
Dialogue: 0,0:25:36.96,0:25:40.00,BottomCenter,,0,0,0,,我在做任何事之前先承诺
Dialogue: 0,0:25:40.00,0:25:41.59,BottomCenter,,0,0,0,,为了三件事 为了两件事
Dialogue: 0,0:25:41.59,0:25:42.64,BottomCenter,,0,0,0,,你必须做，我必须打电话
Dialogue: 0,0:25:42.64,0:25:44.48,BottomCenter,,0,0,0,,我必须在这里打电话
Dialogue: 0,0:25:44.48,0:25:45.68,BottomCenter,,0,0,0,,好的，我需要做什么？
Dialogue: 0,0:25:45.68,0:25:48.00,BottomCenter,,0,0,0,,必须打两个电话 两个电话 两个电话
Dialogue: 0,0:25:48.00,0:25:49.83,BottomCenter,,0,0,0,,你会看到图表然后你
Dialogue: 0,0:25:49.83,0:25:51.20,BottomCenter,,0,0,0,,应该能够追踪订单
Dialogue: 0,0:25:51.20,0:25:54.64,BottomCenter,,0,0,0,,正如约翰在讲座中所做的那样
Dialogue: 0,0:25:55.11,0:25:56.55,BottomCenter,,0,0,0,,是的，请记住环境
Dialogue: 0,0:25:56.55,0:25:58.40,BottomCenter,,0,0,0,,图表将有尽可能多的框架
Dialogue: 0,0:25:58.40,0:25:59.51,BottomCenter,,0,0,0,,正如我们所拥有的
Dialogue: 0,0:25:59.51,0:26:01.51,BottomCenter,,0,0,0,,在这里打电话，所以这只是
Dialogue: 0,0:26:01.51,0:26:02.88,BottomCenter,,0,0,0,,大得离谱
Dialogue: 0,0:26:02.88,0:26:04.79,BottomCenter,,0,0,0,,是的，这就是树形图的原因
Dialogue: 0,0:26:04.79,0:26:06.00,BottomCenter,,0,0,0,,更容易看到一点
Dialogue: 0,0:26:06.00,0:26:08.55,BottomCenter,,0,0,0,,只是你没有拖着脚步
Dialogue: 0,0:26:08.55,0:26:11.27,BottomCenter,,0,0,0,,所有这些额外的东西
Dialogue: 0,0:26:11.27,0:26:13.11,BottomCenter,,0,0,0,,我还要说这个痕迹
Dialogue: 0,0:26:13.11,0:26:14.31,BottomCenter,,0,0,0,,虽然很有趣
Dialogue: 0,0:26:14.31,0:26:16.79,BottomCenter,,0,0,0,,观察正在发生的事情
Dialogue: 0,0:26:16.79,0:26:18.24,BottomCenter,,0,0,0,,没那么有用
Dialogue: 0,0:26:18.24,0:26:21.83,BottomCenter,,0,0,0,,用于编写程序或理解
Dialogue: 0,0:26:21.83,0:26:23.68,BottomCenter,,0,0,0,,这个程序是如何运作的，你真的必须这样做
Dialogue: 0,0:26:23.68,0:26:24.07,BottomCenter,,0,0,0,,思考
Dialogue: 0,0:26:24.07,0:26:26.96,BottomCenter,,0,0,0,,抽象地描述这里的内容
Dialogue: 0,0:26:26.96,0:26:28.24,BottomCenter,,0,0,0,,这些要做什么 你要做什么
Dialogue: 0,0:26:28.24,0:26:29.20,BottomCenter,,0,0,0,,会回来
Dialogue: 0,0:26:29.20,0:26:30.40,BottomCenter,,0,0,0,,添加它们后会发生什么
Dialogue: 0,0:26:30.40,0:26:32.40,BottomCenter,,0,0,0,,一起
Dialogue: 0,0:26:32.40,0:26:34.64,BottomCenter,,0,0,0,,下一个问题是你能解释一下吗
Dialogue: 0,0:26:34.64,0:26:35.68,BottomCenter,,0,0,0,,你为什么添加
Dialogue: 0,0:26:35.68,0:26:39.68,BottomCenter,,0,0,0,,最小 n 减去 nm
Dialogue: 0,0:26:39.68,0:26:43.20,BottomCenter,,0,0,0,,在此之前的质量检查中
Dialogue: 0,0:26:43.20,0:26:45.20,BottomCenter,,0,0,0,,问题是关于 min 函数
Dialogue: 0,0:26:45.20,0:26:46.31,BottomCenter,,0,0,0,,与 m
Dialogue: 0,0:26:46.31,0:26:48.31,BottomCenter,,0,0,0,,你实际上并不需要那个
Dialogue: 0,0:26:48.31,0:26:49.75,BottomCenter,,0,0,0,,我们把它放在那里的原因
Dialogue: 0,0:26:49.75,0:26:52.07,BottomCenter,,0,0,0,,在这个特定的例子中，有六个
Dialogue: 0,0:26:52.07,0:26:53.35,BottomCenter,,0,0,0,,四
Dialogue: 0,0:26:53.35,0:26:57.20,BottomCenter,,0,0,0,,第一个电话是 f
Dialogue: 0,0:26:57.20,0:27:00.72,BottomCenter,,0,0,0,,呃四那是什么呃
Dialogue: 0,0:27:00.72,0:27:02.88,BottomCenter,,0,0,0,,让我看看我是否能做到这一点呃
Dialogue: 0,0:27:02.88,0:27:04.79,BottomCenter,,0,0,0,,二四
Dialogue: 0,0:27:04.79,0:27:07.75,BottomCenter,,0,0,0,,在这种情况下，有，有，有
Dialogue: 0,0:27:07.75,0:27:09.44,BottomCenter,,0,0,0,,你不需要第二个学期
Dialogue: 0,0:27:09.44,0:27:11.51,BottomCenter,,0,0,0,,大于第一项
Dialogue: 0,0:27:11.51,0:27:13.59,BottomCenter,,0,0,0,,所以我很确定你是否像这样跑步
Dialogue: 0,0:27:13.59,0:27:14.96,BottomCenter,,0,0,0,,这一切都会运行得很好
Dialogue: 0,0:27:14.96,0:27:16.31,BottomCenter,,0,0,0,,刚刚触及基本情况
Dialogue: 0,0:27:16.31,0:27:18.48,BottomCenter,,0,0,0,,是的，所以我们只是把分钟放在那里
Dialogue: 0,0:27:18.48,0:27:20.07,BottomCenter,,0,0,0,,因为它有点怀疑与
Dialogue: 0,0:27:20.07,0:27:20.79,BottomCenter,,0,0,0,,的情况当
Dialogue: 0,0:27:20.79,0:27:23.59,BottomCenter,,0,0,0,,m 第二个数大于
Dialogue: 0,0:27:23.59,0:27:24.79,BottomCenter,,0,0,0,,第一个数字当然不是
Dialogue: 0,0:27:24.79,0:27:25.75,BottomCenter,,0,0,0,,合理
Dialogue: 0,0:27:25.75,0:27:27.68,BottomCenter,,0,0,0,,因为你不能使用一个来达到两个
Dialogue: 0,0:27:27.68,0:27:29.44,BottomCenter,,0,0,0,,四 它不会造成任何伤害
Dialogue: 0,0:27:29.44,0:27:32.79,BottomCenter,,0,0,0,,你只是这有点不必要
Dialogue: 0,0:27:32.79,0:27:34.16,BottomCenter,,0,0,0,,但这是非常重要的事情
Dialogue: 0,0:27:34.16,0:27:35.83,BottomCenter,,0,0,0,,问题具体就像这样
Dialogue: 0,0:27:35.83,0:27:38.79,BottomCenter,,0,0,0,,事实上你无法建立一个
Dialogue: 0,0:27:38.79,0:27:40.16,BottomCenter,,0,0,0,,使用总和的数字
Dialogue: 0,0:27:40.16,0:27:41.59,BottomCenter,,0,0,0,,使用比这更大的零件
Dialogue: 0,0:27:41.59,0:27:43.75,BottomCenter,,0,0,0,,总和基本上就是那个人在那里的原因
Dialogue: 0,0:27:43.75,0:27:45.44,BottomCenter,,0,0,0,,这不是将军那样的东西
Dialogue: 0,0:27:45.44,0:27:47.20,BottomCenter,,0,0,0,,关于重新创建递归的事实
Dialogue: 0,0:27:47.20,0:27:48.64,BottomCenter,,0,0,0,,一般功能或类似功能
Dialogue: 0,0:27:48.64,0:27:48.96,BottomCenter,,0,0,0,,那
Dialogue: 0,0:27:48.96,0:27:52.07,BottomCenter,,0,0,0,,这很可能是具体的
Dialogue: 0,0:27:52.07,0:27:54.16,BottomCenter,,0,0,0,,下一个问题是什么才算数
Dialogue: 0,0:27:54.16,0:27:57.27,BottomCenter,,0,0,0,,分区 2-4 做
Dialogue: 0,0:27:57.27,0:27:58.79,BottomCenter,,0,0,0,,所以让我们想一下
Dialogue: 0,0:27:58.79,0:28:01.20,BottomCenter,,0,0,0,,我们会运行它 um 2 4 说
Dialogue: 0,0:28:01.20,0:28:03.83,BottomCenter,,0,0,0,,你如何从总和中得到两个
Dialogue: 0,0:28:03.83,0:28:04.79,BottomCenter,,0,0,0,,有两种方法
Dialogue: 0,0:28:04.79,0:28:06.00,BottomCenter,,0,0,0,,你可以只有两个或者你可以
Dialogue: 0,0:28:06.00,0:28:08.40,BottomCenter,,0,0,0,,有一加一所以这应该返回
Dialogue: 0,0:28:08.40,0:28:10.40,BottomCenter,,0,0,0,,二
Dialogue: 0,0:28:10.40,0:28:14.72,BottomCenter,,0,0,0,,和手指交叉
Dialogue: 0,0:28:14.72,0:28:16.88,BottomCenter,,0,0,0,,这就是它返回的内容，所以它发现
Dialogue: 0,0:28:16.88,0:28:18.48,BottomCenter,,0,0,0,,一种用二来做到这一点的方法是
Dialogue: 0,0:28:18.48,0:28:18.88,BottomCenter,,0,0,0,,只是
Dialogue: 0,0:28:18.88,0:28:20.48,BottomCenter,,0,0,0,,二是找到一种方法来做到这一点
Dialogue: 0,0:28:20.48,0:28:22.64,BottomCenter,,0,0,0,,没有二即一加一
Dialogue: 0,0:28:22.64,0:28:30.07,BottomCenter,,0,0,0,,这就是递归调用呃二一
Dialogue: 0,0:28:30.07,0:28:34.07,BottomCenter,,0,0,0,,然后计算这两个
Dialogue: 0,0:28:34.48,0:28:37.11,BottomCenter,,0,0,0,,所以现在的问题是会发生什么
Dialogue: 0,0:28:37.11,0:28:39.51,BottomCenter,,0,0,0,,如果约翰将分区更改为四个
Dialogue: 0,0:28:39.51,0:28:45.35,BottomCenter,,0,0,0,,两两
Dialogue: 0,0:28:45.35,0:28:47.20,BottomCenter,,0,0,0,,相同的答案正确所以发生了什么事
Dialogue: 0,0:28:47.20,0:28:49.83,BottomCenter,,0,0,0,,是的，第二个参数是
Dialogue: 0,0:28:49.83,0:28:52.96,BottomCenter,,0,0,0,,4 但你不能用 4 来得到 2。
Dialogue: 0,0:28:52.96,0:28:54.00,BottomCenter,,0,0,0,,所以它忽略它
Dialogue: 0,0:28:54.00,0:28:56.79,BottomCenter,,0,0,0,,我不能用 3 来得到 2。所以我
Dialogue: 0,0:28:56.79,0:28:58.72,BottomCenter,,0,0,0,,忽略它嗯所以
Dialogue: 0,0:28:58.72,0:29:01.27,BottomCenter,,0,0,0,,最后一个数字不能更大
Dialogue: 0,0:29:01.27,0:29:02.64,BottomCenter,,0,0,0,,比第一个数字
Dialogue: 0,0:29:02.64,0:29:04.00,BottomCenter,,0,0,0,,这就是当时的分钟
Dialogue: 0,0:29:04.00,0:29:05.44,BottomCenter,,0,0,0,,因此只是为了做到这一点
Dialogue: 0,0:29:05.44,0:29:06.24,BottomCenter,,0,0,0,,明确的
Dialogue: 0,0:29:06.24,0:29:08.64,BottomCenter,,0,0,0,,但只有你自己去做也没什么坏处
Dialogue: 0,0:29:08.64,0:29:11.20,BottomCenter,,0,0,0,,将无法到达
Dialogue: 0,0:29:11.20,0:29:13.68,BottomCenter,,0,0,0,,好吧，我还有其他问题吗
Dialogue: 0,0:29:13.68,0:29:15.03,BottomCenter,,0,0,0,,再次强调
Dialogue: 0,0:29:15.03,0:29:16.48,BottomCenter,,0,0,0,,有人说的是不要不要
Dialogue: 0,0:29:16.48,0:29:18.07,BottomCenter,,0,0,0,,对它所需要的递归感到沮丧
Dialogue: 0,0:29:18.07,0:29:19.92,BottomCenter,,0,0,0,,是时候了，它就是其中之一
Dialogue: 0,0:29:19.92,0:29:21.51,BottomCenter,,0,0,0,,有点奇怪，它不像
Dialogue: 0,0:29:21.51,0:29:22.55,BottomCenter,,0,0,0,,真正的循环
Dialogue: 0,0:29:22.55,0:29:24.07,BottomCenter,,0,0,0,,简单的条件和
Dialogue: 0,0:29:24.07,0:29:25.92,BottomCenter,,0,0,0,,这一切都需要你一点时间
Dialogue: 0,0:29:25.92,0:29:27.11,BottomCenter,,0,0,0,,有点不同的想法
Dialogue: 0,0:29:27.11,0:29:27.92,BottomCenter,,0,0,0,,顺便一提
Dialogue: 0,0:29:27.92,0:29:29.83,BottomCenter,,0,0,0,,回到我们过去开始的那一天
Dialogue: 0,0:29:29.83,0:29:31.59,BottomCenter,,0,0,0,,第一天教递归
Dialogue: 0,0:29:31.59,0:29:33.03,BottomCenter,,0,0,0,,约翰班和我刚才正在谈论
Dialogue: 0,0:29:33.03,0:29:34.00,BottomCenter,,0,0,0,,这是前几天
Dialogue: 0,0:29:34.00,0:29:35.35,BottomCenter,,0,0,0,,如果我们不教你迭代
Dialogue: 0,0:29:35.35,0:29:36.40,BottomCenter,,0,0,0,,不要做我们刚刚教你的任何事情
Dialogue: 0,0:29:36.40,0:29:37.51,BottomCenter,,0,0,0,,递归
Dialogue: 0,0:29:37.51,0:29:39.51,BottomCenter,,0,0,0,,在某些方面这是令人难以忍受的
Dialogue: 0,0:29:39.51,0:29:41.35,BottomCenter,,0,0,0,,痛苦但也
Dialogue: 0,0:29:41.35,0:29:43.27,BottomCenter,,0,0,0,,在某些方面更容易，因为你不
Dialogue: 0,0:29:43.27,0:29:45.20,BottomCenter,,0,0,0,,有这种迭代构造
Dialogue: 0,0:29:45.20,0:29:46.24,BottomCenter,,0,0,0,,想一想
Dialogue: 0,0:29:46.24,0:29:47.59,BottomCenter,,0,0,0,,我认为我们的做法是正确的
Dialogue: 0,0:29:47.59,0:29:49.51,BottomCenter,,0,0,0,,把它带到下游一点但是
Dialogue: 0,0:29:49.51,0:29:51.03,BottomCenter,,0,0,0,,没关系，这些需要一点时间
Dialogue: 0,0:29:51.03,0:29:52.24,BottomCenter,,0,0,0,,是时候思考一下如何
Dialogue: 0,0:29:52.24,0:29:54.07,BottomCenter,,0,0,0,,这些东西正在发挥作用
Dialogue: 0,0:29:54.07,0:29:55.92,BottomCenter,,0,0,0,,是的，很多人曾经放弃过
Dialogue: 0,0:29:55.92,0:29:57.75,BottomCenter,,0,0,0,,第二堂课之后，这是一堂课
Dialogue: 0,0:29:57.75,0:29:59.75,BottomCenter,,0,0,0,,两个例子代替第九课
Dialogue: 0,0:29:59.75,0:30:00.88,BottomCenter,,0,0,0,,例子但是
Dialogue: 0,0:30:00.88,0:30:02.79,BottomCenter,,0,0,0,,仍然在这门课程中我们教了这么多
Dialogue: 0,0:30:02.79,0:30:05.20,BottomCenter,,0,0,0,,早于大多数其他大学
Dialogue: 0,0:30:05.20,0:30:07.27,BottomCenter,,0,0,0,,嗯，我认为这是一个很好的习惯方式
Dialogue: 0,0:30:07.27,0:30:09.11,BottomCenter,,0,0,0,,功能抽象的思想
Dialogue: 0,0:30:09.11,0:30:11.59,BottomCenter,,0,0,0,,并查看解决问题的方式
Dialogue: 0,0:30:11.59,0:30:13.44,BottomCenter,,0,0,0,,只编写简单函数的力量
Dialogue: 0,0:30:13.44,0:30:15.03,BottomCenter,,0,0,0,,并让计算机完成工作
Dialogue: 0,0:30:15.03,0:30:16.16,BottomCenter,,0,0,0,,你
Dialogue: 0,0:30:16.16,0:30:19.27,BottomCenter,,0,0,0,,但这一点也不容易
Dialogue: 0,0:30:19.83,0:30:21.44,BottomCenter,,0,0,0,,好的，我们会回来回复您的
Dialogue: 0,0:30:21.44,0:30:23.83,BottomCenter,,0,0,0,,如果您愿意，请在下午 2 点 10 分提问
Dialogue: 0,0:30:23.83,0:30:24.31,BottomCenter,,0,0,0,,加入
Dialogue: 0,0:30:24.31,0:30:28.16,BottomCenter,,0,0,0,,对于未记录的问题，请向我们询问任何问题
Dialogue: 0,0:30:28.16,0:30:29.11,BottomCenter,,0,0,0,,然后会话
Dialogue: 0,0:30:29.11,0:30:30.40,BottomCenter,,0,0,0,,很快见，我以为你会去
Dialogue: 0,0:30:30.40,0:30:33.20,BottomCenter,,0,0,0,,说精神错乱，但好吧，不记录也可以
Dialogue: 0,0:30:33.20,0:30:37.03,BottomCenter,,0,0,0,,也可能在
Dialogue: 0,0:30:37.03,0:30:39.96,BottomCenter,,0,0,0,,谢谢大家，今天下午见
