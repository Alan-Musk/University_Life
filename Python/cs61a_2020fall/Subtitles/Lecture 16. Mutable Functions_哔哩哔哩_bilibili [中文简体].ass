[Script Info]
Title: Lecture 16. Mutable Functions_哔哩哔哩_bilibili
ScriptType: v4.00+
Collisions: Reverse
PlayResX: 1280
PlayResY: 720
WrapStyle: 3
ScaledBorderAndShadow: yes
; ----------------------
; 本字幕由CC字幕助手自动转换
; 字幕来源https://www.bilibili.com/video/BV1s3411G7yM?p=39&vd_source=6ffca0aa1006734a4fba52f389036611
; 脚本地址https://greasyfork.org/scripts/378513
; 设置了字幕过长自动换行，但若字幕中没有空格换行将无效
; 字体大小依据720p 48号字体等比缩放
; 如显示不正常请尝试使用SRT格式

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Segoe UI,48,&H00FFFFFF,&HF0000000,&H00000000,&HF0000000,1,0,0,0,100,100,0,0.00,1,1,3,2,30,30,20,1

[Events]
Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.47,0:00:03.80,*Default,NTP,0000,0000,0000,,61 选举第16号公告
Dialogue: 0,0:00:04.10,0:00:06.20,*Default,NTP,0000,0000,0000,,作业三周四交
Dialogue: 0,0:00:06.53,0:00:07.20,*Default,NTP,0000,0000,0000,,你也可以
Dialogue: 0,0:00:07.20,0:00:10.10,*Default,NTP,0000,0000,0000,,赢回你的猪失去的任何构图点
Dialogue: 0,0:00:10.10,0:00:13.90,*Default,NTP,0000,0000,0000,,本周修改你的项目
Dialogue: 0,0:00:14.53,0:00:17.13,*Default,NTP,0000,0000,0000,,并于周五提交修改后的版本
Dialogue: 0,0:00:17.30,0:00:20.33,*Default,NTP,0000,0000,0000,,您会找到具体操作方法的说明
Dialogue: 0,0:00:20.33,0:00:21.37,*Default,NTP,0000,0000,0000,,在广场上
Dialogue: 0,0:00:21.57,0:00:25.00,*Default,NTP,0000,0000,0000,,重要的一点是，而不是写“ok”
Dialogue: 0,0:00:25.00,0:00:26.17,*Default,NTP,0000,0000,0000,,划线水泥
Dialogue: 0,0:00:26.17,0:00:28.50,*Default,NTP,0000,0000,0000,,你写好破折号破折号修改
Dialogue: 0,0:00:29.50,0:00:31.77,*Default,NTP,0000,0000,0000,,就作业而言，这是较轻松的一周
Dialogue: 0,0:00:31.77,0:00:34.17,*Default,NTP,0000,0000,0000,,但我真的鼓励你
Dialogue: 0,0:00:34.40,0:00:36.40,*Default,NTP,0000,0000,0000,,花一些时间在实验室
Dialogue: 0,0:00:36.50,0:00:38.93,*Default,NTP,0000,0000,0000,,本周的讨论和教程
Dialogue: 0,0:00:39.13,0:00:40.40,*Default,NTP,0000,0000,0000,,为了确保
Dialogue: 0,0:00:40.47,0:00:42.60,*Default,NTP,0000,0000,0000,,你知道课程中发生了什么
Dialogue: 0,0:00:43.17,0:00:45.20,*Default,NTP,0000,0000,0000,,也许当你在做猫项目时
Dialogue: 0,0:00:45.20,0:00:45.97,*Default,NTP,0000,0000,0000,,你落后了
Dialogue: 0,0:00:45.97,0:00:47.17,*Default,NTP,0000,0000,0000,,一个讲座
Dialogue: 0,0:00:47.47,0:00:49.87,*Default,NTP,0000,0000,0000,,现在是追赶的好时机
Dialogue: 0,0:00:50.67,0:00:52.40,*Default,NTP,0000,0000,0000,,这是所有重要的链接
Dialogue: 0,0:00:52.40,0:00:54.30,*Default,NTP,0000,0000,0000,,有任何录音
Dialogue: 0,0:00:54.30,0:00:56.10,*Default,NTP,0000,0000,0000,,您可能错过的过去事件
Dialogue: 0,0:00:56.10,0:00:58.57,*Default,NTP,0000,0000,0000,,比如实验室和讨论方向以及
Dialogue: 0,0:00:58.57,0:01:00.27,*Default,NTP,0000,0000,0000,,考试准备课程
Dialogue: 0,0:01:00.27,0:01:01.90,*Default,NTP,0000,0000,0000,,从前几周开始
Dialogue: 0,0:01:02.77,0:01:04.70,*Default,NTP,0000,0000,0000,,虽然本周比较轻松
Dialogue: 0,0:01:05.20,0:01:07.60,*Default,NTP,0000,0000,0000,,我们距离实习生也只有几周的时间了
Dialogue: 0,0:01:07.73,0:01:10.07,*Default,NTP,0000,0000,0000,,下周还有另一个项目推出
Dialogue: 0,0:01:10.53,0:01:12.10,*Default,NTP,0000,0000,0000,,所以事情会变得更忙
Dialogue: 0,0:01:12.70,0:01:14.87,*Default,NTP,0000,0000,0000,,你将能够很好地处理这一切
Dialogue: 0,0:01:14.87,0:01:17.17,*Default,NTP,0000,0000,0000,,只要你在本周末赶上
Dialogue: 0,0:01:18.13,0:01:20.17,*Default,NTP,0000,0000,0000,,但如果你到这周末还没有分手
Dialogue: 0,0:01:20.47,0:01:23.13,*Default,NTP,0000,0000,0000,,以后会很难追上
Dialogue: 0,0:01:23.73,0:01:24.93,*Default,NTP,0000,0000,0000,,所以现在是你的机会
Dialogue: 0,0:01:24.93,0:01:26.50,*Default,NTP,0000,0000,0000,,我希望你能利用它
Dialogue: 0,0:01:28.93,0:01:30.47,*Default,NTP,0000,0000,0000,,可变函数
Dialogue: 0,0:01:30.50,0:01:33.47,*Default,NTP,0000,0000,0000,,是具有与其关联的数据的函数
Dialogue: 0,0:01:33.67,0:01:35.07,*Default,NTP,0000,0000,0000,,改变
Dialogue: 0,0:01:37.13,0:01:38.90,*Default,NTP,0000,0000,0000,,所以这是一个具有行为的函数
Dialogue: 0,0:01:38.90,0:01:40.30,*Default,NTP,0000,0000,0000,,随着时间的推移而变化
Dialogue: 0,0:01:40.70,0:01:42.40,*Default,NTP,0000,0000,0000,,这是银行账户的模型
Dialogue: 0,0:01:42.40,0:01:45.27,*Default,NTP,0000,0000,0000,,开始时余额为 100 美元
Dialogue: 0,0:01:45.60,0:01:48.13,*Default,NTP,0000,0000,0000,,并使用一个名为withdraw的函数
Dialogue: 0,0:01:48.27,0:01:50.93,*Default,NTP,0000,0000,0000,,或要从银行账户提款
Dialogue: 0,0:01:51.70,0:01:53.27,*Default,NTP,0000,0000,0000,,所以打电话撤回
Dialogue: 0,0:01:53.80,0:01:55.57,*Default,NTP,0000,0000,0000,,金额 25
Dialogue: 0,0:01:56.13,0:01:57.07,*Default,NTP,0000,0000,0000,,将返回
Dialogue: 0,0:01:57.07,0:01:59.67,*Default,NTP,0000,0000,0000,,银行账户中剩余的余额
Dialogue: 0,0:02:00.20,0:02:03.40,*Default,NTP,0000,0000,0000,,我们一开始每小时 100 小时，后来减少到 75 小时
Dialogue: 0,0:02:04.77,0:02:07.17,*Default,NTP,0000,0000,0000,,所以这里的参数是提取的金额
Dialogue: 0,0:02:07.53,0:02:09.90,*Default,NTP,0000,0000,0000,,返回值是剩余余额
Dialogue: 0,0:02:11.10,0:02:13.37,*Default,NTP,0000,0000,0000,,如果我在25号再次打电话提款
Dialogue: 0,0:02:13.70,0:02:16.13,*Default,NTP,0000,0000,0000,,我将从余额中提取
Dialogue: 0,0:02:16.13,0:02:17.57,*Default,NTP,0000,0000,0000,,还剩 50
Dialogue: 0,0:02:18.90,0:02:21.10,*Default,NTP,0000,0000,0000,,第二次提取相同金额
Dialogue: 0,0:02:21.17,0:02:23.10,*Default,NTP,0000,0000,0000,,导致不同的返回值
Dialogue: 0,0:02:23.27,0:02:25.80,*Default,NTP,0000,0000,0000,,这是一个随时间变化的函数
Dialogue: 0,0:02:27.47,0:02:31.57,*Default,NTP,0000,0000,0000,,如果我现在尝试提取 60 但只剩下 50
Dialogue: 0,0:02:31.77,0:02:34.27,*Default,NTP,0000,0000,0000,,它会告诉我资金不足
Dialogue: 0,0:02:35.40,0:02:38.10,*Default,NTP,0000,0000,0000,,所以问题是这个余额存储在哪里
Dialogue: 0,0:02:38.17,0:02:40.07,*Default,NTP,0000,0000,0000,,它将在函数内
Dialogue: 0,0:02:40.57,0:02:43.53,*Default,NTP,0000,0000,0000,,所以我们这样做的方法是创建一个新函数
Dialogue: 0,0:02:43.80,0:02:46.97,*Default,NTP,0000,0000,0000,,使用名为 makewithdraw 的高阶函数
Dialogue: 0,0:02:47.33,0:02:49.27,*Default,NTP,0000,0000,0000,,这需要初始余额
Dialogue: 0,0:02:49.77,0:02:51.00,*Default,NTP,0000,0000,0000,,我们必须这样做
Dialogue: 0,0:02:51.00,0:02:53.27,*Default,NTP,0000,0000,0000,,在我们发出所有这些撤军呼吁之前
Dialogue: 0,0:02:54.40,0:02:56.07,*Default,NTP,0000,0000,0000,,现在撤回
Dialogue: 0,0:02:56.50,0:02:59.93,*Default,NTP,0000,0000,0000,,是一个具有明显框架的函数
Dialogue: 0,0:03:00.70,0:03:02.37,*Default,NTP,0000,0000,0000,,制作退出框架
Dialogue: 0,0:03:02.77,0:03:05.77,*Default,NTP,0000,0000,0000,,这就是数据所在的地方
Dialogue: 0,0:03:05.97,0:03:08.53,*Default,NTP,0000,0000,0000,,记录银行帐户的余额
Dialogue: 0,0:03:08.53,0:03:11.50,*Default,NTP,0000,0000,0000,,由提款函数建模
Dialogue: 0,0:03:13.33,0:03:14.70,*Default,NTP,0000,0000,0000,,好的，所以我已经
Dialogue: 0,0:03:14.70,0:03:15.47,*Default,NTP,0000,0000,0000,,首先告诉你
Dialogue: 0,0:03:15.47,0:03:16.30,*Default,NTP,0000,0000,0000,,如何使用这个
Dialogue: 0,0:03:16.30,0:03:17.77,*Default,NTP,0000,0000,0000,,却没有告诉你如何实现
Dialogue: 0,0:03:17.77,0:03:20.10,*Default,NTP,0000,0000,0000,,我们将努力实施
Dialogue: 0,0:03:20.47,0:03:21.77,*Default,NTP,0000,0000,0000,,我们看过之后
Dialogue: 0,0:03:21.97,0:03:24.77,*Default,NTP,0000,0000,0000,,我们要创建的环境图
Dialogue: 0,0:03:25.67,0:03:27.30,*Default,NTP,0000,0000,0000,,所以这就是目标
Dialogue: 0,0:03:27.50,0:03:30.30,*Default,NTP,0000,0000,0000,,目标是退出
Dialogue: 0,0:03:30.40,0:03:32.00,*Default,NTP,0000,0000,0000,,成为创造的东西
Dialogue: 0,0:03:32.00,0:03:34.27,*Default,NTP,0000,0000,0000,,可以提取的银行账户
Dialogue: 0,0:03:34.47,0:03:36.53,*Default,NTP,0000,0000,0000,,将由函数表示
Dialogue: 0,0:03:37.17,0:03:38.93,*Default,NTP,0000,0000,0000,,并通过调用 makewithdraw
Dialogue: 0,0:03:39.27,0:03:40.93,*Default,NTP,0000,0000,0000,,有一些初始余额
Dialogue: 0,0:03:40.97,0:03:43.20,*Default,NTP,0000,0000,0000,,我会将这种平衡限制在一个框架中
Dialogue: 0,0:03:43.37,0:03:46.47,*Default,NTP,0000,0000,0000,,我将创建一个提款功能并返回它
Dialogue: 0,0:03:47.00,0:03:49.07,*Default,NTP,0000,0000,0000,,我会将其与撤回名称绑定
Dialogue: 0,0:03:49.07,0:03:50.50,*Default,NTP,0000,0000,0000,,在全球框架内
Dialogue: 0,0:03:51.17,0:03:53.53,*Default,NTP,0000,0000,0000,,所以现在每次我打电话撤回
Dialogue: 0,0:03:53.77,0:03:57.30,*Default,NTP,0000,0000,0000,,我将通过引入一个新框架来调用它
Dialogue: 0,0:03:57.53,0:03:59.40,*Default,NTP,0000,0000,0000,,其中父框架是 f 一
Dialogue: 0,0:03:59.60,0:04:01.57,*Default,NTP,0000,0000,0000,,因为作为函数的父函数
Dialogue: 0,0:04:01.87,0:04:04.37,*Default,NTP,0000,0000,0000,,因此它将可以访问反弹
Dialogue: 0,0:04:04.93,0:04:07.97,*Default,NTP,0000,0000,0000,,它可以做撤回所做的事情
Dialogue: 0,0:04:08.13,0:04:10.50,*Default,NTP,0000,0000,0000,,减少余额金额
Dialogue: 0,0:04:10.53,0:04:12.47,*Default,NTP,0000,0000,0000,,并退还剩余余额
Dialogue: 0,0:04:13.33,0:04:15.50,*Default,NTP,0000,0000,0000,,所以平衡将在这里进行
Dialogue: 0,0:04:15.77,0:04:18.27,*Default,NTP,0000,0000,0000,,在父框架 f one 中
Dialogue: 0,0:04:18.60,0:04:20.20,*Default,NTP,0000,0000,0000,,提款功能的
Dialogue: 0,0:04:20.53,0:04:22.70,*Default,NTP,0000,0000,0000,,它在这个父框架内
Dialogue: 0,0:04:23.07,0:04:24.77,*Default,NTP,0000,0000,0000,,这将包含余额
Dialogue: 0,0:04:24.77,0:04:27.37,*Default,NTP,0000,0000,0000,,是提款函数的本地状态
Dialogue: 0,0:04:27.77,0:04:29.13,*Default,NTP,0000,0000,0000,,并按当地州
Dialogue: 0,0:04:29.17,0:04:32.53,*Default,NTP,0000,0000,0000,,我的意思是与功能相关的信息
Dialogue: 0,0:04:33.07,0:04:35.27,*Default,NTP,0000,0000,0000,,这是该功能特有的
Dialogue: 0,0:04:35.40,0:04:37.10,*Default,NTP,0000,0000,0000,,但可能会随着时间的推移而改变
Dialogue: 0,0:04:39.33,0:04:42.33,*Default,NTP,0000,0000,0000,,每次退出调用都会引入一个新的框架
Dialogue: 0,0:04:42.47,0:04:44.50,*Default,NTP,0000,0000,0000,,但具有相同父级的新框架
Dialogue: 0,0:04:44.60,0:04:47.57,*Default,NTP,0000,0000,0000,,并且余额会减少一些
Dialogue: 0,0:04:47.87,0:04:49.90,*Default,NTP,0000,0000,0000,,金额是通过的金额
Dialogue: 0,0:04:49.90,0:04:51.40,*Default,NTP,0000,0000,0000,,当它被调用时退出
Dialogue: 0,0:04:52.97,0:04:55.70,*Default,NTP,0000,0000,0000,,并且对该函数的所有调用都有相同的父级
Dialogue: 0,0:04:55.70,0:04:57.30,*Default,NTP,0000,0000,0000,,所以他们拥有相同的平衡
Dialogue: 0,0:04:57.60,0:04:59.67,*Default,NTP,0000,0000,0000,,这就是为什么需要提现功能
Dialogue: 0,0:04:59.77,0:05:01.53,*Default,NTP,0000,0000,0000,,可以代表一个银行账户
Dialogue: 0,0:05:01.67,0:05:03.07,*Default,NTP,0000,0000,0000,,随着时间的推移而改变
Dialogue: 0,0:05:03.80,0:05:05.47,*Default,NTP,0000,0000,0000,,现在我们如何实现这个
Dialogue: 0,0:05:05.53,0:05:07.93,*Default,NTP,0000,0000,0000,,好吧，我们需要一个赋值语句
Dialogue: 0,0:05:08.27,0:05:09.87,*Default,NTP,0000,0000,0000,,为了改变平衡
Dialogue: 0,0:05:10.17,0:05:11.77,*Default,NTP,0000,0000,0000,,但这将是一种特殊的
Dialogue: 0,0:05:12.40,0:05:13.80,*Default,NTP,0000,0000,0000,,首先让我们回顾一下
Dialogue: 0,0:05:13.90,0:05:16.60,*Default,NTP,0000,0000,0000,,当我们使用赋值语句时会发生什么
Dialogue: 0,0:05:16.73,0:05:18.30,*Default,NTP,0000,0000,0000,,函数内部
Dialogue: 0,0:05:18.97,0:05:22.27,*Default,NTP,0000,0000,0000,,发生的情况是赋值将名称绑定到值
Dialogue: 0,0:05:22.27,0:05:24.77,*Default,NTP,0000,0000,0000,,在当前环境的第一帧中
Dialogue: 0,0:05:25.47,0:05:28.30,*Default,NTP,0000,0000,0000,,所以通常当你有一个赋值语句时
Dialogue: 0,0:05:28.30,0:05:30.07,*Default,NTP,0000,0000,0000,,聋哑人的陈述中
Dialogue: 0,0:05:30.30,0:05:32.50,*Default,NTP,0000,0000,0000,,这将绑定名称差异
Dialogue: 0,0:05:32.70,0:05:35.10,*Default,NTP,0000,0000,0000,,框架内的差异百分比
Dialogue: 0,0:05:35.53,0:05:36.70,*Default,NTP,0000,0000,0000,,所以在这里我们看到
Dialogue: 0,0:05:36.77,0:05:38.93,*Default,NTP,0000,0000,0000,,% 差异包含名称差异
Dialogue: 0,0:05:38.93,0:05:41.80,*Default,NTP,0000,0000,0000,,计算为 x 减去 y 的绝对值
Dialogue: 0,0:05:41.80,0:05:44.17,*Default,NTP,0000,0000,0000,,在这种情况下然后是绑定的
Dialogue: 0,0:05:44.20,0:05:46.57,*Default,NTP,0000,0000,0000,,在当前环境的第一帧中
Dialogue: 0,0:05:47.07,0:05:49.20,*Default,NTP,0000,0000,0000,,因为这是一个赋值语句
Dialogue: 0,0:05:49.47,0:05:52.93,*Default,NTP,0000,0000,0000,,赋值语句的执行规则为
Dialogue: 0,0:05:53.07,0:05:55.57,*Default,NTP,0000,0000,0000,,计算 equals 右边的所有表达式
Dialogue: 0,0:05:55.57,0:05:56.57,*Default,NTP,0000,0000,0000,,从左到右
Dialogue: 0,0:05:56.73,0:06:00.07,*Default,NTP,0000,0000,0000,,然后将左侧的名称绑定到结果值
Dialogue: 0,0:06:00.10,0:06:01.20,*Default,NTP,0000,0000,0000,,在当前帧中
Dialogue: 0,0:06:03.00,0:06:04.77,*Default,NTP,0000,0000,0000,,可以，然后呢
Dialogue: 0,0:06:04.87,0:06:07.37,*Default,NTP,0000,0000,0000,,我们今天的赋值语句
Dialogue: 0,0:06:07.37,0:06:09.47,*Default,NTP,0000,0000,0000,,只能影响当前帧
Dialogue: 0,0:06:09.67,0:06:12.17,*Default,NTP,0000,0000,0000,,它不能影响父框架
Dialogue: 0,0:06:12.80,0:06:15.73,*Default,NTP,0000,0000,0000,,我们需要一种新的赋值语句来做到这一点
Dialogue: 0,0:06:17.40,0:06:19.67,*Default,NTP,0000,0000,0000,,这称为非本地分配
Dialogue: 0,0:06:19.93,0:06:23.17,*Default,NTP,0000,0000,0000,,并且它可以实现持久的本地状态
Dialogue: 0,0:06:24.33,0:06:27.70,*Default,NTP,0000,0000,0000,,这是 makewithdraw 的实际实现
Dialogue: 0,0:06:27.97,0:06:29.77,*Default,NTP,0000,0000,0000,,需要初始平衡
Dialogue: 0,0:06:30.40,0:06:32.27,*Default,NTP,0000,0000,0000,,它返回一个提款函数
Dialogue: 0,0:06:32.47,0:06:34.10,*Default,NTP,0000,0000,0000,,从这个平衡开始
Dialogue: 0,0:06:35.73,0:06:38.13,*Default,NTP,0000,0000,0000,,为了返回该函数
Dialogue: 0,0:06:38.30,0:06:41.20,*Default,NTP,0000,0000,0000,,它定义了提取，需要一定的金额
Dialogue: 0,0:06:41.20,0:06:42.10,*Default,NTP,0000,0000,0000,,去取出
Dialogue: 0,0:06:43.10,0:06:45.70,*Default,NTP,0000,0000,0000,,它声明余额非本地
Dialogue: 0,0:06:46.20,0:06:47.40,*Default,NTP,0000,0000,0000,,现在这个声明
Dialogue: 0,0:06:47.40,0:06:50.07,*Default,NTP,0000,0000,0000,,非局部平衡是一种新的陈述
Dialogue: 0,0:06:50.60,0:06:52.13,*Default,NTP,0000,0000,0000,,它说的是
Dialogue: 0,0:06:52.97,0:06:54.87,*Default,NTP,0000,0000,0000,,名称余额变化
Dialogue: 0,0:06:55.33,0:06:58.27,*Default,NTP,0000,0000,0000,,会发生在帧唤醒退出
Dialogue: 0,0:06:58.50,0:07:00.53,*Default,NTP,0000,0000,0000,,而不是在框架中退出
Dialogue: 0,0:07:01.70,0:07:03.80,*Default,NTP,0000,0000,0000,,现在来说说撤回的逻辑
Dialogue: 0,0:07:04.27,0:07:07.87,*Default,NTP,0000,0000,0000,,如果金额大于余额，那么您就破产了
Dialogue: 0,0:07:08.17,0:07:10.53,*Default,NTP,0000,0000,0000,,退回不足的资金
Dialogue: 0,0:07:11.93,0:07:12.73,*Default,NTP,0000,0000,0000,,否则
Dialogue: 0,0:07:13.80,0:07:16.40,*Default,NTP,0000,0000,0000,,余额是反弹到余额减去金额
Dialogue: 0,0:07:17.33,0:07:18.87,*Default,NTP,0000,0000,0000,,然后我们退还余额
Dialogue: 0,0:07:18.87,0:07:20.00,*Default,NTP,0000,0000,0000,,因为这就是撤回的作用
Dialogue: 0,0:07:20.00,0:07:21.73,*Default,NTP,0000,0000,0000,,它返回剩余余额
Dialogue: 0,0:07:21.87,0:07:24.00,*Default,NTP,0000,0000,0000,,扣除坐骑后
Dialogue: 0,0:07:25.73,0:07:26.93,*Default,NTP,0000,0000,0000,,然后从 make 退出
Dialogue: 0,0:07:26.93,0:07:28.87,*Default,NTP,0000,0000,0000,,我们需要返回提现函数
Dialogue: 0,0:07:30.30,0:07:31.67,*Default,NTP,0000,0000,0000,,所以就有了一条新线
Dialogue: 0,0:07:31.67,0:07:33.07,*Default,NTP,0000,0000,0000,,这里与以前不同
Dialogue: 0,0:07:33.07,0:07:35.57,*Default,NTP,0000,0000,0000,,它声明名称余额非本地
Dialogue: 0,0:07:36.07,0:07:37.17,*Default,NTP,0000,0000,0000,,我们倾向于把非
Dialogue: 0,0:07:37.17,0:07:38.20,*Default,NTP,0000,0000,0000,,当地的声明
Dialogue: 0,0:07:38.20,0:07:40.37,*Default,NTP,0000,0000,0000,,它们出现的函数的顶部
Dialogue: 0,0:07:40.60,0:07:42.53,*Default,NTP,0000,0000,0000,,虽然这不是严格要求的
Dialogue: 0,0:07:43.37,0:07:45.57,*Default,NTP,0000,0000,0000,,它的作用是告诉你
Dialogue: 0,0:07:45.87,0:07:46.17,*Default,NTP,0000,0000,0000,,关于
Dialogue: 0,0:07:46.17,0:07:48.13,*Default,NTP,0000,0000,0000,,所有将要发生的赋值语句
Dialogue: 0,0:07:48.13,0:07:51.50,*Default,NTP,0000,0000,0000,,从此在这个范围内保持平衡
Dialogue: 0,0:07:52.10,0:07:54.90,*Default,NTP,0000,0000,0000,,他们将改变平衡的束缚
Dialogue: 0,0:07:54.90,0:07:56.93,*Default,NTP,0000,0000,0000,,非本地框架中的某处
Dialogue: 0,0:07:59.53,0:08:01.70,*Default,NTP,0000,0000,0000,,那么当我们真正得到时会发生什么
Dialogue: 0,0:08:01.77,0:08:03.13,*Default,NTP,0000,0000,0000,,到分配行
Dialogue: 0,0:08:03.30,0:08:05.40,*Default,NTP,0000,0000,0000,,是它首先重新平衡
Dialogue: 0,0:08:05.40,0:08:06.33,*Default,NTP,0000,0000,0000,,非本地帧
Dialogue: 0,0:08:06.33,0:08:08.60,*Default,NTP,0000,0000,0000,,之前绑定的
Dialogue: 0,0:08:09.40,0:08:12.07,*Default,NTP,0000,0000,0000,,假设你打电话给提款然后你打电话
Dialogue: 0,0:08:12.07,0:08:13.93,*Default,NTP,0000,0000,0000,,出来的函数withdraw
Dialogue: 0,0:08:15.13,0:08:18.00,*Default,NTP,0000,0000,0000,,余额将被绑定在提款框架中
Dialogue: 0,0:08:18.00,0:08:20.40,*Default,NTP,0000,0000,0000,,因为平衡是一个形式参数
Dialogue: 0,0:08:20.67,0:08:22.50,*Default,NTP,0000,0000,0000,,makewithdraw函数的
Dialogue: 0,0:08:22.50,0:08:22.90,*Default,NTP,0000,0000,0000,,这里
Dialogue: 0,0:08:22.90,0:08:25.77,*Default,NTP,0000,0000,0000,,在聋哑语句标题的括号内
Dialogue: 0,0:08:27.33,0:08:29.50,*Default,NTP,0000,0000,0000,,所以这就是它最初绑定的地方
Dialogue: 0,0:08:30.37,0:08:32.73,*Default,NTP,0000,0000,0000,,当你说时会发生重新绑定
Dialogue: 0,0:08:32.73,0:08:34.90,*Default,NTP,0000,0000,0000,,余额等于余额减去金额
Dialogue: 0,0:08:35.60,0:08:37.73,*Default,NTP,0000,0000,0000,,将发生在第一个非本地帧中
Dialogue: 0,0:08:37.87,0:08:40.07,*Default,NTP,0000,0000,0000,,之前绑定的
Dialogue: 0,0:08:41.57,0:08:45.10,*Default,NTP,0000,0000,0000,,那么我们先看一下环境图
Dialogue: 0,0:08:45.20,0:08:46.70,*Default,NTP,0000,0000,0000,,然后添加一些外套
Dialogue: 0,0:08:47.77,0:08:49.67,*Default,NTP,0000,0000,0000,,所以这是相同的实现
Dialogue: 0,0:08:49.67,0:08:50.97,*Default,NTP,0000,0000,0000,,我刚刚给你看了
Dialogue: 0,0:08:52.30,0:08:53.50,*Default,NTP,0000,0000,0000,,通过撤回创建
Dialogue: 0,0:08:53.50,0:08:55.50,*Default,NTP,0000,0000,0000,,function 表示调用 makewithdraw
Dialogue: 0,0:08:56.07,0:08:59.60,*Default,NTP,0000,0000,0000,,引入新框架或平衡反弹 100
Dialogue: 0,0:08:59.93,0:09:01.70,*Default,NTP,0000,0000,0000,,makewithdraw的主体
Dialogue: 0,0:09:01.73,0:09:04.33,*Default,NTP,0000,0000,0000,,定义一个新函数并返回它
Dialogue: 0,0:09:04.87,0:09:07.57,*Default,NTP,0000,0000,0000,,并且该新函数绑定到名称withdraw
Dialogue: 0,0:09:07.57,0:09:08.77,*Default,NTP,0000,0000,0000,,在全球框架内
Dialogue: 0,0:09:10.17,0:09:11.80,*Default,NTP,0000,0000,0000,,现在我要打电话撤回
Dialogue: 0,0:09:12.67,0:09:14.57,*Default,NTP,0000,0000,0000,,引入了一个新的框架
Dialogue: 0,0:09:14.80,0:09:16.87,*Default,NTP,0000,0000,0000,,目前余额为100
Dialogue: 0,0:09:17.33,0:09:19.20,*Default,NTP,0000,0000,0000,,我们声明它是非本地的
Dialogue: 0,0:09:19.67,0:09:22.30,*Default,NTP,0000,0000,0000,,我们检查金额是否大于余额
Dialogue: 0,0:09:22.30,0:09:26.50,*Default,NTP,0000,0000,0000,,不是这样，所以我们不执行这个 return 语句
Dialogue: 0,0:09:26.60,0:09:29.97,*Default,NTP,0000,0000,0000,,相反，我们执行这个赋值语句
Dialogue: 0,0:09:30.50,0:09:34.37,*Default,NTP,0000,0000,0000,,这会将余额从 100 减少到 75
Dialogue: 0,0:09:35.30,0:09:36.80,*Default,NTP,0000,0000,0000,,现在没有非本地的
Dialogue: 0,0:09:37.00,0:09:38.27,*Default,NTP,0000,0000,0000,,这将是一个声明
Dialogue: 0,0:09:38.27,0:09:40.13,*Default,NTP,0000,0000,0000,,关于当前帧的平衡
Dialogue: 0,0:09:40.47,0:09:42.67,*Default,NTP,0000,0000,0000,,但由于有一个非本地声明
Dialogue: 0,0:09:42.90,0:09:46.93,*Default,NTP,0000,0000,0000,,此平衡重新绑定非本地框架中的平衡
Dialogue: 0,0:09:47.37,0:09:49.50,*Default,NTP,0000,0000,0000,,显而易见的
Dialogue: 0,0:09:49.93,0:09:52.40,*Default,NTP,0000,0000,0000,,当前帧 f 的 2
Dialogue: 0,0:09:53.57,0:09:55.70,*Default,NTP,0000,0000,0000,,那么你去哪一帧
Dialogue: 0,0:09:55.77,0:09:57.73,*Default,NTP,0000,0000,0000,,当你沿着父母的链条向上爬时
Dialogue: 0,0:09:57.73,0:10:00.40,*Default,NTP,0000,0000,0000,,从这个父母到这个父母等
Dialogue: 0,0:10:00.80,0:10:03.47,*Default,NTP,0000,0000,0000,,直到找到该名称的第一个实例
Dialogue: 0,0:10:03.47,0:10:04.60,*Default,NTP,0000,0000,0000,,你正在重新绑定
Dialogue: 0,0:10:05.93,0:10:08.17,*Default,NTP,0000,0000,0000,,所以余额变为75
Dialogue: 0,0:10:09.13,0:10:11.13,*Default,NTP,0000,0000,0000,,然后返回 75
Dialogue: 0,0:10:13.57,0:10:15.87,*Default,NTP,0000,0000,0000,,好的，我们再打电话要求撤回
Dialogue: 0,0:10:15.87,0:10:17.97,*Default,NTP,0000,0000,0000,,余额变为 50
Dialogue: 0,0:10:18.47,0:10:21.30,*Default,NTP,0000,0000,0000,,就在那里从 75 到 50
Dialogue: 0,0:10:22.37,0:10:24.27,*Default,NTP,0000,0000,0000,,那么这个例子到底有什么新鲜之处
Dialogue: 0,0:10:24.67,0:10:27.80,*Default,NTP,0000,0000,0000,,您可以随时参考余额的当前值
Dialogue: 0,0:10:27.93,0:10:30.30,*Default,NTP,0000,0000,0000,,从退出体内
Dialogue: 0,0:10:30.70,0:10:32.90,*Default,NTP,0000,0000,0000,,因为你总是可以查到名字
Dialogue: 0,0:10:32.90,0:10:34.20,*Default,NTP,0000,0000,0000,,在明显的框架中
Dialogue: 0,0:10:34.47,0:10:37.67,*Default,NTP,0000,0000,0000,,以前你不能做的就是改变它们
Dialogue: 0,0:10:38.20,0:10:42.13,*Default,NTP,0000,0000,0000,,现在您可以更改绑定到名称的值
Dialogue: 0,0:10:42.20,0:10:43.80,*Default,NTP,0000,0000,0000,,在父框架中
Dialogue: 0,0:10:43.80,0:10:46.67,*Default,NTP,0000,0000,0000,,但要做到这一点，你需要一个非本地声明
Dialogue: 0,0:10:48.13,0:10:51.13,*Default,NTP,0000,0000,0000,,所以这里又是同样的实现
Dialogue: 0,0:10:52.37,0:10:53.50,*Default,NTP,0000,0000,0000,,如果我创建一个
Dialogue: 0,0:10:54.40,0:10:56.13,*Default,NTP,0000,0000,0000,,名为 w 的函数
Dialogue: 0,0:10:57.07,0:10:59.70,*Default,NTP,0000,0000,0000,,拨打 100 进行提现
Dialogue: 0,0:11:00.27,0:11:01.60,*Default,NTP,0000,0000,0000,,w 是一个函数
Dialogue: 0,0:11:01.90,0:11:03.17,*Default,NTP,0000,0000,0000,,当我打电话给它时
Dialogue: 0,0:11:03.20,0:11:05.77,*Default,NTP,0000,0000,0000,,从当前回合中扣除 10
Dialogue: 0,0:11:06.40,0:11:08.57,*Default,NTP,0000,0000,0000,,假设我传入的参数是 10
Dialogue: 0,0:11:08.57,0:11:10.90,*Default,NTP,0000,0000,0000,,但如果我愿意的话我可以传递一个不同的参数
Dialogue: 0,0:11:11.00,0:11:12.93,*Default,NTP,0000,0000,0000,,现在我们已经一路下降到 50
Dialogue: 0,0:11:14.40,0:11:16.27,*Default,NTP,0000,0000,0000,,现在 50 并不是很多
Dialogue: 0,0:11:16.27,0:11:18.53,*Default,NTP,0000,0000,0000,,如果我尝试提取足够的钱来购买新的
Dialogue: 0,0:11:18.80,0:11:21.57,*Default,NTP,0000,0000,0000,,买车我资金不足
Dialogue: 0,0:11:21.97,0:11:25.57,*Default,NTP,0000,0000,0000,,但我仍然可以再提取 10 并减少到 40
Dialogue: 0,0:11:27.20,0:11:30.30,*Default,NTP,0000,0000,0000,,我们来谈谈非本地分配的细节
Dialogue: 0,0:11:31.30,0:11:34.87,*Default,NTP,0000,0000,0000,,非本地语句具有以下效果
Dialogue: 0,0:11:35.47,0:11:37.40,*Default,NTP,0000,0000,0000,,未来对该名称的分配
Dialogue: 0,0:11:38.07,0:11:40.10,*Default,NTP,0000,0000,0000,,更改其预先存在的绑定
Dialogue: 0,0:11:40.10,0:11:40.80,*Default,NTP,0000,0000,0000,,在第一个
Dialogue: 0,0:11:40.80,0:11:42.87,*Default,NTP,0000,0000,0000,,当前环境的非本地框架
Dialogue: 0,0:11:42.87,0:11:44.47,*Default,NTP,0000,0000,0000,,其中绑定了该名称
Dialogue: 0,0:11:46.10,0:11:47.37,*Default,NTP,0000,0000,0000,,和蟒蛇码头
Dialogue: 0,0:11:47.37,0:11:50.53,*Default,NTP,0000,0000,0000,,第一个非本地框架称为封闭范围
Dialogue: 0,0:11:50.87,0:11:52.60,*Default,NTP,0000,0000,0000,,可能有多个
Dialogue: 0,0:11:52.60,0:11:55.73,*Default,NTP,0000,0000,0000,,非本地语句中用逗号分隔的名称
Dialogue: 0,0:11:56.90,0:11:58.13,*Default,NTP,0000,0000,0000,,并且有限制
Dialogue: 0,0:11:58.13,0:12:00.07,*Default,NTP,0000,0000,0000,,你可以在那里放什么名字
Dialogue: 0,0:12:00.97,0:12:01.50,*Default,NTP,0000,0000,0000,,这些都是
Dialogue: 0,0:12:01.50,0:12:03.77,*Default,NTP,0000,0000,0000,,直接来自python三语言参考
Dialogue: 0,0:12:04.20,0:12:07.40,*Default,NTP,0000,0000,0000,,非本地语句中列出的名称必须引用
Dialogue: 0,0:12:07.57,0:12:11.47,*Default,NTP,0000,0000,0000,,在封闭范围内预先存在的绑定
Dialogue: 0,0:12:11.87,0:12:15.00,*Default,NTP,0000,0000,0000,,所以这些名字必须已经被使用过
Dialogue: 0,0:12:16.40,0:12:20.33,*Default,NTP,0000,0000,0000,,并且非本地语句中列出的名称不得
Dialogue: 0,0:12:20.40,0:12:23.27,*Default,NTP,0000,0000,0000,,碰撞的意思是相同的
Dialogue: 0,0:12:23.87,0:12:26.40,*Default,NTP,0000,0000,0000,,本地范围内预先存在的绑定
Dialogue: 0,0:12:26.47,0:12:29.37,*Default,NTP,0000,0000,0000,,或我们在本课程中所说的当前帧
Dialogue: 0,0:12:30.27,0:12:32.47,*Default,NTP,0000,0000,0000,,所以你不能声明非本地的东西
Dialogue: 0,0:12:32.47,0:12:34.37,*Default,NTP,0000,0000,0000,,如果它已经在当前帧中
Dialogue: 0,0:12:34.93,0:12:37.37,*Default,NTP,0000,0000,0000,,但它必须在明显的框架内
Dialogue: 0,0:12:37.40,0:12:39.07,*Default,NTP,0000,0000,0000,,或父母的父母
Dialogue: 0,0:12:39.30,0:12:42.93,*Default,NTP,0000,0000,0000,,全局框架和局部框架之间的某个位置
Dialogue: 0,0:12:43.07,0:12:45.33,*Default,NTP,0000,0000,0000,,在框架链中
Dialogue: 0,0:12:45.33,0:12:47.93,*Default,NTP,0000,0000,0000,,构成当前环境
Dialogue: 0,0:12:49.50,0:12:51.30,*Default,NTP,0000,0000,0000,,如果你想自己阅读更多内容
Dialogue: 0,0:12:51.47,0:12:54.37,*Default,NTP,0000,0000,0000,,你可以在线找到所有的 python 码头
Dialogue: 0,0:12:57.33,0:13:01.07,*Default,NTP,0000,0000,0000,,所以你会看到 x 等于程序中的某个位置
Dialogue: 0,0:13:01.47,0:13:03.50,*Default,NTP,0000,0000,0000,,基于该计划的上下文
Dialogue: 0,0:13:03.50,0:13:05.50,*Default,NTP,0000,0000,0000,,它实际上可能会做不同的事情
Dialogue: 0,0:13:06.07,0:13:06.20,*Default,NTP,0000,0000,0000,,所以
Dialogue: 0,0:13:06.20,0:13:08.73,*Default,NTP,0000,0000,0000,,这是赋值语句的多种含义
Dialogue: 0,0:13:09.67,0:13:11.57,*Default,NTP,0000,0000,0000,,如果没有非本地语句
Dialogue: 0,0:13:11.93,0:13:14.10,*Default,NTP,0000,0000,0000,,x 尚未本地绑定
Dialogue: 0,0:13:14.37,0:13:17.00,*Default,NTP,0000,0000,0000,,然后这会创建一个从 x 到的新绑定
Dialogue: 0,0:13:17.47,0:13:19.77,*Default,NTP,0000,0000,0000,,在当前环境的第一帧中
Dialogue: 0,0:13:19.77,0:13:20.73,*Default,NTP,0000,0000,0000,,当前帧
Dialogue: 0,0:13:22.20,0:13:23.53,*Default,NTP,0000,0000,0000,,如果没有非本地语句
Dialogue: 0,0:13:23.53,0:13:25.10,*Default,NTP,0000,0000,0000,,并且 x 已经绑定
Dialogue: 0,0:13:25.67,0:13:27.20,*Default,NTP,0000,0000,0000,,然后它重新绑定x
Dialogue: 0,0:13:27.60,0:13:29.40,*Default,NTP,0000,0000,0000,,之前的绑定丢失
Dialogue: 0,0:13:29.70,0:13:30.67,*Default,NTP,0000,0000,0000,,这一切都发生了
Dialogue: 0,0:13:30.67,0:13:32.93,*Default,NTP,0000,0000,0000,,在当前环境的第一帧中
Dialogue: 0,0:13:33.60,0:13:35.37,*Default,NTP,0000,0000,0000,,这两个条件是旧的
Dialogue: 0,0:13:36.20,0:13:38.80,*Default,NTP,0000,0000,0000,,但如果有非本地 x 语句怎么办
Dialogue: 0,0:13:38.90,0:13:40.77,*Default,NTP,0000,0000,0000,,在 x 等于 2 之前
Dialogue: 0,0:13:41.13,0:13:41.93,*Default,NTP,0000,0000,0000,,然后
Dialogue: 0,0:13:42.67,0:13:44.17,*Default,NTP,0000,0000,0000,,也一定是这样的
Dialogue: 0,0:13:44.17,0:13:46.40,*Default,NTP,0000,0000,0000,,x 绑定在非本地框架中
Dialogue: 0,0:13:47.00,0:13:49.30,*Default,NTP,0000,0000,0000,,效果是将 x 重新绑定为 2
Dialogue: 0,0:13:49.30,0:13:50.80,*Default,NTP,0000,0000,0000,,在第一个非本地帧中
Dialogue: 0,0:13:50.80,0:13:53.07,*Default,NTP,0000,0000,0000,,发现它的当前环境
Dialogue: 0,0:13:53.47,0:13:55.00,*Default,NTP,0000,0000,0000,,旧的绑定丢失
Dialogue: 0,0:13:56.33,0:13:58.13,*Default,NTP,0000,0000,0000,,如果声明了非局部 x
Dialogue: 0,0:13:58.30,0:14:00.87,*Default,NTP,0000,0000,0000,,但 x 没有绑定在非本地框架中
Dialogue: 0,0:14:01.20,0:14:03.13,*Default,NTP,0000,0000,0000,,然后你会得到一个语法错误
Dialogue: 0,0:14:03.57,0:14:06.13,*Default,NTP,0000,0000,0000,,并且错误消息将显示非本地没有绑定
Dialogue: 0,0:14:06.13,0:14:07.07,*Default,NTP,0000,0000,0000,,找到了x
Dialogue: 0,0:14:08.73,0:14:11.77,*Default,NTP,0000,0000,0000,,如果出现非本地 x 语句
Dialogue: 0,0:14:11.80,0:14:13.73,*Default,NTP,0000,0000,0000,,x 绑定在非本地框架中
Dialogue: 0,0:14:13.73,0:14:15.73,*Default,NTP,0000,0000,0000,,但它也绑定在本地
Dialogue: 0,0:14:15.77,0:14:17.00,*Default,NTP,0000,0000,0000,,这是不允许的
Dialogue: 0,0:14:17.40,0:14:19.27,*Default,NTP,0000,0000,0000,,然后你会得到一个不同的语法击球手
Dialogue: 0,0:14:19.33,0:14:22.87,*Default,NTP,0000,0000,0000,,这表示名称 x 是一个参数并且是非本地的
Dialogue: 0,0:14:23.97,0:14:26.13,*Default,NTP,0000,0000,0000,,这些错误的确切文本将
Dialogue: 0,0:14:26.13,0:14:28.73,*Default,NTP,0000,0000,0000,,随着时间的推移，不同的实现方式会发生变化
Dialogue: 0,0:14:28.73,0:14:30.70,*Default,NTP,0000,0000,0000,,蟒蛇但是
Dialogue: 0,0:14:31.00,0:14:32.00,*Default,NTP,0000,0000,0000,,他们对应
Dialogue: 0,0:14:32.00,0:14:34.73,*Default,NTP,0000,0000,0000,,我们在上一张幻灯片中看到的两个条件
Dialogue: 0,0:14:35.37,0:14:37.13,*Default,NTP,0000,0000,0000,,x 必须已经绑定
Dialogue: 0,0:14:37.17,0:14:40.00,*Default,NTP,0000,0000,0000,,但不能绑定在当前框架中
Dialogue: 0,0:14:43.33,0:14:47.13,*Default,NTP,0000,0000,0000,,现在这些是绑定非本地的一般规则
Dialogue: 0,0:14:47.13,0:14:49.07,*Default,NTP,0000,0000,0000,,它们以多种语言出现
Dialogue: 0,0:14:49.33,0:14:52.20,*Default,NTP,0000,0000,0000,,出现了一个特征
Dialogue: 0,0:14:52.33,0:14:53.90,*Default,NTP,0000,0000,0000,,这是Python特有的
Dialogue: 0,0:14:53.90,0:14:55.57,*Default,NTP,0000,0000,0000,,你只需要知道
Dialogue: 0,0:14:56.73,0:14:59.10,*Default,NTP,0000,0000,0000,,python实际上尝试预先计算
Dialogue: 0,0:14:59.17,0:15:01.07,*Default,NTP,0000,0000,0000,,哪个框架包含每个名称
Dialogue: 0,0:15:01.27,0:15:03.60,*Default,NTP,0000,0000,0000,,在执行函数体之前
Dialogue: 0,0:15:04.60,0:15:06.20,*Default,NTP,0000,0000,0000,,在函数体内
Dialogue: 0,0:15:06.40,0:15:10.20,*Default,NTP,0000,0000,0000,,名称的所有实例必须引用同一框架
Dialogue: 0,0:15:10.60,0:15:13.53,*Default,NTP,0000,0000,0000,,这意味着您不能使用相同的名字
Dialogue: 0,0:15:13.73,0:15:15.93,*Default,NTP,0000,0000,0000,,在同一个函数体内
Dialogue: 0,0:15:16.07,0:15:18.37,*Default,NTP,0000,0000,0000,,实际上指的是两个不同的框架
Dialogue: 0,0:15:18.37,0:15:19.67,*Default,NTP,0000,0000,0000,,那是行不通的
Dialogue: 0,0:15:21.40,0:15:24.50,*Default,NTP,0000,0000,0000,,假设我尝试编写以下程序
Dialogue: 0,0:15:24.67,0:15:26.60,*Default,NTP,0000,0000,0000,,这和我们之前看到的一样
Dialogue: 0,0:15:26.60,0:15:29.07,*Default,NTP,0000,0000,0000,,但删除非本地语句
Dialogue: 0,0:15:29.53,0:15:31.50,*Default,NTP,0000,0000,0000,,这里会出现错误
Dialogue: 0,0:15:32.00,0:15:34.33,*Default,NTP,0000,0000,0000,,如果金额大于余额
Dialogue: 0,0:15:35.60,0:15:36.87,*Default,NTP,0000,0000,0000,,会发生什么是
Dialogue: 0,0:15:37.27,0:15:39.67,*Default,NTP,0000,0000,0000,,通过检查withdraw的主体
Dialogue: 0,0:15:39.97,0:15:41.33,*Default,NTP,0000,0000,0000,,python 会得出这样的结论
Dialogue: 0,0:15:41.33,0:15:42.80,*Default,NTP,0000,0000,0000,,余额是本地名称
Dialogue: 0,0:15:43.47,0:15:45.97,*Default,NTP,0000,0000,0000,,因为这里有本地赋值语句
Dialogue: 0,0:15:46.27,0:15:48.57,*Default,NTP,0000,0000,0000,,记得我们删除了非本地语句
Dialogue: 0,0:15:49.70,0:15:52.53,*Default,NTP,0000,0000,0000,,所以相信平衡是一个当地的名字
Dialogue: 0,0:15:52.57,0:15:53.77,*Default,NTP,0000,0000,0000,,它只会看起来
Dialogue: 0,0:15:53.90,0:15:56.57,*Default,NTP,0000,0000,0000,,在该名称余额提款框架中
Dialogue: 0,0:15:56.77,0:15:59.37,*Default,NTP,0000,0000,0000,,它永远找不到封闭范围内的那个
Dialogue: 0,0:16:00.53,0:16:02.50,*Default,NTP,0000,0000,0000,,所以你会得到一个未绑定的本地错误
Dialogue: 0,0:16:02.50,0:16:06.20,*Default,NTP,0000,0000,0000,,赋值前引用的局部变量余额
Dialogue: 0,0:16:08.07,0:16:09.73,*Default,NTP,0000,0000,0000,,所以之前一切正常
Dialogue: 0,0:16:09.73,0:16:12.67,*Default,NTP,0000,0000,0000,,但现在我们要删除非本地语句
Dialogue: 0,0:16:13.17,0:16:15.53,*Default,NTP,0000,0000,0000,,我会把它注释掉，这样你就知道它在哪里
Dialogue: 0,0:16:15.53,0:16:17.20,*Default,NTP,0000,0000,0000,,但它不会再做任何事情了
Dialogue: 0,0:16:17.20,0:16:18.97,*Default,NTP,0000,0000,0000,,因为现在这只是一条评论
Dialogue: 0,0:16:20.67,0:16:22.33,*Default,NTP,0000,0000,0000,,我仍然可以打电话进行提款
Dialogue: 0,0:16:22.33,0:16:24.17,*Default,NTP,0000,0000,0000,,因为这只是创建了函数
Dialogue: 0,0:16:24.40,0:16:25.93,*Default,NTP,0000,0000,0000,,但一旦我调用该函数
Dialogue: 0,0:16:25.93,0:16:28.07,*Default,NTP,0000,0000,0000,,我收到这个未绑定的本地错误
Dialogue: 0,0:16:28.30,0:16:31.13,*Default,NTP,0000,0000,0000,,它说这是在线四，在这里
Dialogue: 0,0:16:31.87,0:16:33.67,*Default,NTP,0000,0000,0000,,现在这真是一件奇怪的事情
Dialogue: 0,0:16:33.67,0:16:36.50,*Default,NTP,0000,0000,0000,,因为我们总是能够提到平衡
Dialogue: 0,0:16:36.73,0:16:39.20,*Default,NTP,0000,0000,0000,,即使它之前是一个封闭范围
Dialogue: 0,0:16:40.33,0:16:42.20,*Default,NTP,0000,0000,0000,,并且这个能力没有改变
Dialogue: 0,0:16:42.30,0:16:43.50,*Default,NTP,0000,0000,0000,,除此之外
Dialogue: 0,0:16:43.97,0:16:46.53,*Default,NTP,0000,0000,0000,,本地分配以平衡
Dialogue: 0,0:16:46.57,0:16:49.30,*Default,NTP,0000,0000,0000,,和非本地余额查找
Dialogue: 0,0:16:49.53,0:16:51.57,*Default,NTP,0000,0000,0000,,不能出现在同一个函数中
Dialogue: 0,0:16:51.73,0:16:54.87,*Default,NTP,0000,0000,0000,,因为平衡必须参考一个特定的框架
Dialogue: 0,0:16:54.90,0:16:57.20,*Default,NTP,0000,0000,0000,,在这种情况下，它试图引用两个
Dialogue: 0,0:16:59.87,0:17:01.50,*Default,NTP,0000,0000,0000,,现在如果我们去掉这条线
Dialogue: 0,0:17:01.90,0:17:04.00,*Default,NTP,0000,0000,0000,,我们会回到我们可以的情况
Dialogue: 0,0:17:04.00,0:17:04.97,*Default,NTP,0000,0000,0000,,调用这个函数
Dialogue: 0,0:17:06.30,0:17:08.60,*Default,NTP,0000,0000,0000,,它只是不再做任何事情了
Dialogue: 0,0:17:09.27,0:17:11.77,*Default,NTP,0000,0000,0000,,但它不会导致未绑定的本地错误
Dialogue: 0,0:17:12.50,0:17:14.93,*Default,NTP,0000,0000,0000,,所以这是Python语言的一个怪癖
Dialogue: 0,0:17:15.17,0:17:17.37,*Default,NTP,0000,0000,0000,,这只是其实施方式的一部分
Dialogue: 0,0:17:17.57,0:17:19.57,*Default,NTP,0000,0000,0000,,以及你需要注意的事情
Dialogue: 0,0:17:19.57,0:17:21.87,*Default,NTP,0000,0000,0000,,当您开始使用非本地语句时
Dialogue: 0,0:17:23.47,0:17:27.10,*Default,NTP,0000,0000,0000,,现在使用非本地语句并不是唯一的方法
Dialogue: 0,0:17:27.10,0:17:29.40,*Default,NTP,0000,0000,0000,,创建一个可变函数
Dialogue: 0,0:17:31.07,0:17:34.37,*Default,NTP,0000,0000,0000,,相反，我可以使用现有的多个值
Dialogue: 0,0:17:34.73,0:17:37.60,*Default,NTP,0000,0000,0000,,所以这是 mank 撤回的另一种实现
Dialogue: 0,0:17:37.93,0:17:39.40,*Default,NTP,0000,0000,0000,,它需要平衡
Dialogue: 0,0:17:39.53,0:17:42.33,*Default,NTP,0000,0000,0000,,将余额放入只有一个元素的列表中
Dialogue: 0,0:17:43.13,0:17:45.40,*Default,NTP,0000,0000,0000,,请记住，列表可以更改
Dialogue: 0,0:17:45.97,0:17:49.37,*Default,NTP,0000,0000,0000,,那么聋人提款金额可以做什么
Dialogue: 0,0:17:49.80,0:17:52.33,*Default,NTP,0000,0000,0000,,检查金额是否更大
Dialogue: 0,0:17:52.50,0:17:55.07,*Default,NTP,0000,0000,0000,,比列表 b 中存储的余额
Dialogue: 0,0:17:56.30,0:17:59.73,*Default,NTP,0000,0000,0000,,如果是的话我们会返回足够的资金
Dialogue: 0,0:18:00.20,0:18:05.17,*Default,NTP,0000,0000,0000,,否则我们重新分配索引 0 2 处的元素
Dialogue: 0,0:18:05.17,0:18:06.37,*Default,NTP,0000,0000,0000,,不管以前是什么
Dialogue: 0,0:18:06.37,0:18:08.73,*Default,NTP,0000,0000,0000,,减去金额并返回该值
Dialogue: 0,0:18:09.47,0:18:12.50,*Default,NTP,0000,0000,0000,,这里我们看到名字 b 被绑定在外面
Dialogue: 0,0:18:12.70,0:18:15.07,*Default,NTP,0000,0000,0000,,取款函数的定义
Dialogue: 0,0:18:16.33,0:18:17.13,*Default,NTP,0000,0000,0000,,意思是
Dialogue: 0,0:18:17.13,0:18:20.33,*Default,NTP,0000,0000,0000,,所有撤回调用都可以引用同一个 b
Dialogue: 0,0:18:21.17,0:18:25.33,*Default,NTP,0000,0000,0000,,b 可以改变，因为它是一个列表
Dialogue: 0,0:18:25.90,0:18:27.73,*Default,NTP,0000,0000,0000,,我们可以使用它来改变它
Dialogue: 0,0:18:27.90,0:18:30.40,*Default,NTP,0000,0000,0000,,改变列表的元素赋值
Dialogue: 0,0:18:32.47,0:18:34.80,*Default,NTP,0000,0000,0000,,所以这个的环境图
Dialogue: 0,0:18:35.00,0:18:36.87,*Default,NTP,0000,0000,0000,,撤回版本
Dialogue: 0,0:18:37.13,0:18:38.80,*Default,NTP,0000,0000,0000,,看起来有点不同
Dialogue: 0,0:18:39.17,0:18:40.70,*Default,NTP,0000,0000,0000,,让我们仔细看看
Dialogue: 0,0:18:41.87,0:18:43.80,*Default,NTP,0000,0000,0000,,我们创建 makewithdraw 函数
Dialogue: 0,0:18:43.87,0:18:45.67,*Default,NTP,0000,0000,0000,,现在称之为制作提款清单
Dialogue: 0,0:18:46.70,0:18:51.07,*Default,NTP,0000,0000,0000,,我们在这一行中将其称为初始余额 100
Dialogue: 0,0:18:51.73,0:18:54.13,*Default,NTP,0000,0000,0000,,但不是指该余额
Dialogue: 0,0:18:54.37,0:18:57.10,*Default,NTP,0000,0000,0000,,我们将引用一个名为的列表
Dialogue: 0,0:18:57.10,0:18:59.47,*Default,NTP,0000,0000,0000,,b 包含余额
Dialogue: 0,0:18:59.90,0:19:01.90,*Default,NTP,0000,0000,0000,,最初有 100 个
Dialogue: 0,0:19:03.20,0:19:05.07,*Default,NTP,0000,0000,0000,,每个邪教都退出
Dialogue: 0,0:19:05.37,0:19:08.90,*Default,NTP,0000,0000,0000,,在本例中，金额为 25
Dialogue: 0,0:19:09.57,0:19:12.87,*Default,NTP,0000,0000,0000,,我们将更新此列表的可变值
Dialogue: 0,0:19:12.97,0:19:14.17,*Default,NTP,0000,0000,0000,,包含一个新号码
Dialogue: 0,0:19:14.17,0:19:14.97,*Default,NTP,0000,0000,0000,,它
Dialogue: 0,0:19:15.17,0:19:17.40,*Default,NTP,0000,0000,0000,,以前是100，现在75了
Dialogue: 0,0:19:19.07,0:19:21.50,*Default,NTP,0000,0000,0000,,现在我们没有任何非本地语句
Dialogue: 0,0:19:21.50,0:19:23.97,*Default,NTP,0000,0000,0000,,因为我们永远不会改变 b 所绑定的内容
Dialogue: 0,0:19:24.13,0:19:25.80,*Default,NTP,0000,0000,0000,,或者什么平衡是必然的
Dialogue: 0,0:19:25.80,0:19:27.60,*Default,NTP,0000,0000,0000,,或撤回必然会发生什么
Dialogue: 0,0:19:27.70,0:19:29.50,*Default,NTP,0000,0000,0000,,从退出体内
Dialogue: 0,0:19:29.70,0:19:32.27,*Default,NTP,0000,0000,0000,,所以我们不需要进行任何非本地分配
Dialogue: 0,0:19:32.37,0:19:32.80,*Default,NTP,0000,0000,0000,,反而
Dialogue: 0,0:19:32.80,0:19:35.50,*Default,NTP,0000,0000,0000,,我们所做的就是改变可变的值
Dialogue: 0,0:19:36.80,0:19:38.73,*Default,NTP,0000,0000,0000,,所以这是两种不同的方式
Dialogue: 0,0:19:38.73,0:19:40.80,*Default,NTP,0000,0000,0000,,具有持久的本地状态
Dialogue: 0,0:19:40.97,0:19:43.07,*Default,NTP,0000,0000,0000,,在可变函数内部
Dialogue: 0,0:19:45.70,0:19:47.87,*Default,NTP,0000,0000,0000,,我们真的明白为什么
Dialogue: 0,0:19:48.07,0:19:50.00,*Default,NTP,0000,0000,0000,,本地状态称为本地状态
Dialogue: 0,0:19:50.37,0:19:52.87,*Default,NTP,0000,0000,0000,,当我们看看有多个时会发生什么
Dialogue: 0,0:19:52.87,0:19:56.27,*Default,NTP,0000,0000,0000,,同一程序中的可变函数
Dialogue: 0,0:19:58.40,0:20:00.93,*Default,NTP,0000,0000,0000,,所以这是我的实现
Dialogue: 0,0:20:04.93,0:20:07.47,*Default,NTP,0000,0000,0000,,首先我们假设约翰有一个银行账户
Dialogue: 0,0:20:08.60,0:20:10.80,*Default,NTP,0000,0000,0000,,用它的draw函数来表示
Dialogue: 0,0:20:11.20,0:20:13.87,*Default,NTP,0000,0000,0000,,约翰有 100 美元
Dialogue: 0,0:20:15.33,0:20:16.70,*Default,NTP,0000,0000,0000,,这是朋友史蒂文
Dialogue: 0,0:20:18.50,0:20:23.20,*Default,NTP,0000,0000,0000,,还有一个10万美元的银行账户
Dialogue: 0,0:20:25.17,0:20:25.97,*Default,NTP,0000,0000,0000,,所以
Dialogue: 0,0:20:26.80,0:20:29.07,*Default,NTP,0000,0000,0000,,约翰可以约翰是一个函数
Dialogue: 0,0:20:29.17,0:20:31.00,*Default,NTP,0000,0000,0000,,史蒂文是一个不同的函数
Dialogue: 0,0:20:33.47,0:20:34.67,*Default,NTP,0000,0000,0000,,他们不一样
Dialogue: 0,0:20:36.50,0:20:38.17,*Default,NTP,0000,0000,0000,,他们不平等
Dialogue: 0,0:20:41.07,0:20:42.17,*Default,NTP,0000,0000,0000,,为什么是这样
Dialogue: 0,0:20:42.33,0:20:43.47,*Default,NTP,0000,0000,0000,,当他们代表
Dialogue: 0,0:20:43.47,0:20:45.70,*Default,NTP,0000,0000,0000,,不同的bang账户有不同的金额
Dialogue: 0,0:20:46.77,0:20:50.57,*Default,NTP,0000,0000,0000,,所以如果约翰取出 10 然后再取出 10
Dialogue: 0,0:20:51.57,0:20:52.50,*Default,NTP,0000,0000,0000,,斯蒂芬
Dialogue: 0,0:20:53.10,0:20:56.53,*Default,NTP,0000,0000,0000,,有一个完全独立的账户，里面有 100,000
Dialogue: 0,0:20:56.87,0:20:59.40,*Default,NTP,0000,0000,0000,,他一次可能会拿出1000个
Dialogue: 0,0:21:00.00,0:21:01.13,*Default,NTP,0000,0000,0000,,但请注意这样做
Dialogue: 0,0:21:01.13,0:21:02.90,*Default,NTP,0000,0000,0000,,他不会影响约翰的总成绩
Dialogue: 0,0:21:03.17,0:21:05.47,*Default,NTP,0000,0000,0000,,所以如果约翰再拿出 10 个
Dialogue: 0,0:21:05.73,0:21:09.27,*Default,NTP,0000,0000,0000,,这只是在沿着约翰的平衡前进
Dialogue: 0,0:21:09.37,0:21:10.90,*Default,NTP,0000,0000,0000,,在其职能范围内
Dialogue: 0,0:21:11.50,0:21:15.00,*Default,NTP,0000,0000,0000,,斯蒂芬有一个单独的余额，里面有 1000
Dialogue: 0,0:21:15.50,0:21:16.40,*Default,NTP,0000,0000,0000,,所以它可以取出
Dialogue: 0,0:21:16.40,0:21:18.47,*Default,NTP,0000,0000,0000,,只要他愿意，就可以再给一千个
Dialogue: 0,0:21:19.07,0:21:21.10,*Default,NTP,0000,0000,0000,,但如果约翰试图拿出 1000
Dialogue: 0,0:21:21.10,0:21:22.50,*Default,NTP,0000,0000,0000,,好吧，那是行不通的
Dialogue: 0,0:21:22.67,0:21:24.50,*Default,NTP,0000,0000,0000,,因为里面的资金太少了
Dialogue: 0,0:21:24.53,0:21:26.30,*Default,NTP,0000,0000,0000,,取出来更合理
Dialogue: 0,0:21:26.30,0:21:27.50,*Default,NTP,0000,0000,0000,,一次只有一个
Dialogue: 0,0:21:29.47,0:21:31.97,*Default,NTP,0000,0000,0000,,或者如果有真正重要的购买出现
Dialogue: 0,0:21:32.17,0:21:35.07,*Default,NTP,0000,0000,0000,,那么约翰当然可以拿出整整 16 个
Dialogue: 0,0:21:36.57,0:21:38.33,*Default,NTP,0000,0000,0000,,另一方面史蒂文
Dialogue: 0,0:21:38.53,0:21:41.60,*Default,NTP,0000,0000,0000,,一次可以取出10000个没问题
Dialogue: 0,0:21:41.77,0:21:43.40,*Default,NTP,0000,0000,0000,,或另外 80,000
Dialogue: 0,0:21:44.07,0:21:47.90,*Default,NTP,0000,0000,0000,,或另一个 7950
Dialogue: 0,0:21:49.17,0:21:50.47,*Default,NTP,0000,0000,0000,,现在我们已经达到了一个点
Dialogue: 0,0:21:50.47,0:21:52.93,*Default,NTP,0000,0000,0000,,斯蒂芬和约翰都有相同的平衡
Dialogue: 0,0:21:53.30,0:21:54.77,*Default,NTP,0000,0000,0000,,但他们仍然不平等
Dialogue: 0,0:21:55.13,0:21:56.77,*Default,NTP,0000,0000,0000,,因为他们是不同的帐户
Dialogue: 0,0:21:57.37,0:21:58.80,*Default,NTP,0000,0000,0000,,他们还是不一样
Dialogue: 0,0:22:01.40,0:22:03.53,*Default,NTP,0000,0000,0000,,存在某种平等的唯一意义
Dialogue: 0,0:22:03.53,0:22:04.67,*Default,NTP,0000,0000,0000,,那里的关系
Dialogue: 0,0:22:04.97,0:22:06.73,*Default,NTP,0000,0000,0000,,如果他们都退出
Dialogue: 0,0:22:06.90,0:22:08.50,*Default,NTP,0000,0000,0000,,此时的金额相同
Dialogue: 0,0:22:09.93,0:22:11.97,*Default,NTP,0000,0000,0000,,那么他们的余额将相等
Dialogue: 0,0:22:12.37,0:22:14.57,*Default,NTP,0000,0000,0000,,所以就在这短暂的时间内
Dialogue: 0,0:22:14.77,0:22:16.73,*Default,NTP,0000,0000,0000,,约翰的余额为 50
Dialogue: 0,0:22:16.73,0:22:18.90,*Default,NTP,0000,0000,0000,,斯蒂芬的余额为 50
Dialogue: 0,0:22:19.87,0:22:21.77,*Default,NTP,0000,0000,0000,,但约翰刚刚取出一美元
Dialogue: 0,0:22:22.20,0:22:25.87,*Default,NTP,0000,0000,0000,,所以现在他们不再有平等的平衡
Dialogue: 0,0:22:27.97,0:22:30.60,*Default,NTP,0000,0000,0000,,所以我们已经达到了我们的目标
Dialogue: 0,0:22:30.67,0:22:33.73,*Default,NTP,0000,0000,0000,,编写我们失去某些东西的程序
Dialogue: 0,0:22:33.90,0:22:36.57,*Default,NTP,0000,0000,0000,,称为引用透明度
Dialogue: 0,0:22:37.47,0:22:40.33,*Default,NTP,0000,0000,0000,,也许这是你甚至不知道你拥有的东西
Dialogue: 0,0:22:40.97,0:22:42.60,*Default,NTP,0000,0000,0000,,让我告诉你这是什么
Dialogue: 0,0:22:43.30,0:22:46.00,*Default,NTP,0000,0000,0000,,表达式是引用透明的
Dialogue: 0,0:22:46.47,0:22:49.30,*Default,NTP,0000,0000,0000,,if 用表达式的值替换它
Dialogue: 0,0:22:49.70,0:22:52.60,*Default,NTP,0000,0000,0000,,不改变程序的含义
Dialogue: 0,0:22:54.10,0:22:56.57,*Default,NTP,0000,0000,0000,,所以假设我只有乘法
Dialogue: 0,0:22:56.57,0:22:58.53,*Default,NTP,0000,0000,0000,,除了调用表达式之外
Dialogue: 0,0:22:59.30,0:23:01.93,*Default,NTP,0000,0000,0000,,用于进行一些计算
Dialogue: 0,0:23:02.47,0:23:04.50,*Default,NTP,0000,0000,0000,,这是很久以前的课程
Dialogue: 0,0:23:06.77,0:23:09.53,*Default,NTP,0000,0000,0000,,在引用透明的程序中
Dialogue: 0,0:23:09.93,0:23:15.47,*Default,NTP,0000,0000,0000,,如果我将 mull 4 6 替换为其值 24
Dialogue: 0,0:23:16.57,0:23:19.17,*Default,NTP,0000,0000,0000,,我有一个具有相同含义的程序
Dialogue: 0,0:23:20.20,0:23:21.93,*Default,NTP,0000,0000,0000,,所以它仍然是一个表达
Dialogue: 0,0:23:21.93,0:23:23.87,*Default,NTP,0000,0000,0000,,评估为相同的值
Dialogue: 0,0:23:25.80,0:23:27.07,*Default,NTP,0000,0000,0000,,如果我再来一次
Dialogue: 0,0:23:27.80,0:23:31.70,*Default,NTP,0000,0000,0000,,将 24 中的 add to 替换为其值 26
Dialogue: 0,0:23:32.70,0:23:34.77,*Default,NTP,0000,0000,0000,,我还有同样的程序
Dialogue: 0,0:23:36.20,0:23:37.77,*Default,NTP,0000,0000,0000,,当然看起来不一样
Dialogue: 0,0:23:37.77,0:23:39.10,*Default,NTP,0000,0000,0000,,但它有同样的含义
Dialogue: 0,0:23:39.10,0:23:41.57,*Default,NTP,0000,0000,0000,,一切都评估为同一件事
Dialogue: 0,0:23:42.57,0:23:44.67,*Default,NTP,0000,0000,0000,,现在这才是真的
Dialogue: 0,0:23:44.70,0:23:46.93,*Default,NTP,0000,0000,0000,,当我们有参考透明度时
Dialogue: 0,0:23:47.73,0:23:51.07,*Default,NTP,0000,0000,0000,,突变操作破坏了这一点
Dialogue: 0,0:23:51.47,0:23:55.13,*Default,NTP,0000,0000,0000,,因为它们所做的不仅仅是价值回报
Dialogue: 0,0:23:55.80,0:23:57.70,*Default,NTP,0000,0000,0000,,他们改变环境
Dialogue: 0,0:23:59.17,0:24:00.50,*Default,NTP,0000,0000,0000,,所以这个表达式
Dialogue: 0,0:24:00.50,0:24:02.70,*Default,NTP,0000,0000,0000,,会与这个表达式不同
Dialogue: 0,0:24:03.27,0:24:05.80,*Default,NTP,0000,0000,0000,,如果添加以某种方式改变环境
Dialogue: 0,0:24:05.80,0:24:08.53,*Default,NTP,0000,0000,0000,,除了将其参数加在一起之外
Dialogue: 0,0:24:09.00,0:24:10.37,*Default,NTP,0000,0000,0000,,现在添加不
Dialogue: 0,0:24:10.70,0:24:13.57,*Default,NTP,0000,0000,0000,,这些是引用透明的表达式
Dialogue: 0,0:24:14.17,0:24:16.00,*Default,NTP,0000,0000,0000,,但当我们发生突变时
Dialogue: 0,0:24:16.37,0:24:19.53,*Default,NTP,0000,0000,0000,,这是引用透明度的敌人
Dialogue: 0,0:24:19.87,0:24:21.33,*Default,NTP,0000,0000,0000,,那么你就会遇到麻烦
Dialogue: 0,0:24:23.00,0:24:25.07,*Default,NTP,0000,0000,0000,,让我们看一个例子
Dialogue: 0,0:24:25.57,0:24:28.27,*Default,NTP,0000,0000,0000,,参考透明度丢失的地方
Dialogue: 0,0:24:29.57,0:24:32.13,*Default,NTP,0000,0000,0000,,这个例子也只是一个很好的实践
Dialogue: 0,0:24:32.27,0:24:33.07,*Default,NTP,0000,0000,0000,,理解
Dialogue: 0,0:24:33.17,0:24:34.67,*Default,NTP,0000,0000,0000,,非本地分配
Dialogue: 0,0:24:35.00,0:24:36.50,*Default,NTP,0000,0000,0000,,所以我建议你尝试工作
Dialogue: 0,0:24:36.50,0:24:38.50,*Default,NTP,0000,0000,0000,,在你看我之前先把它告诉你自己
Dialogue: 0,0:24:39.47,0:24:40.97,*Default,NTP,0000,0000,0000,,好吧，接下来会发生什么
Dialogue: 0,0:24:41.13,0:24:42.10,*Default,NTP,0000,0000,0000,,很好地定义f
Dialogue: 0,0:24:42.90,0:24:45.33,*Default,NTP,0000,0000,0000,,然后我们将其称为参数一
Dialogue: 0,0:24:46.00,0:24:48.70,*Default,NTP,0000,0000,0000,,所以 x 在框架 f 中绑定到 1
Dialogue: 0,0:24:51.33,0:24:53.67,*Default,NTP,0000,0000,0000,,我们立即将 x 重新绑定为 4
Dialogue: 0,0:24:54.60,0:24:56.80,*Default,NTP,0000,0000,0000,,然后我们定义另一个函数 g
Dialogue: 0,0:24:56.97,0:24:58.27,*Default,NTP,0000,0000,0000,,返回的
Dialogue: 0,0:25:00.17,0:25:03.30,*Default,NTP,0000,0000,0000,,g 函数被返回并绑定到
Dialogue: 0,0:25:03.57,0:25:05.17,*Default,NTP,0000,0000,0000,,在这个赋值语句中
Dialogue: 0,0:25:05.57,0:25:07.90,*Default,NTP,0000,0000,0000,,然后我们调用 a on 2
Dialogue: 0,0:25:08.80,0:25:11.20,*Default,NTP,0000,0000,0000,,那么什么是井 a 就是这个函数 g
Dialogue: 0,0:25:11.80,0:25:14.90,*Default,NTP,0000,0000,0000,,y 的 g 受到约束，其中 y 等于 2
Dialogue: 0,0:25:14.90,0:25:17.50,*Default,NTP,0000,0000,0000,,推出新车架 G 车架
Dialogue: 0,0:25:17.87,0:25:19.27,*Default,NTP,0000,0000,0000,,y 绑定到 2
Dialogue: 0,0:25:20.20,0:25:23.57,*Default,NTP,0000,0000,0000,,它定义了另一个函数 Age 并返回它
Dialogue: 0,0:25:24.70,0:25:27.67,*Default,NTP,0000,0000,0000,,返回函数 h 将绑定到 b
Dialogue: 0,0:25:28.10,0:25:30.17,*Default,NTP,0000,0000,0000,,根据这个赋值语句
Dialogue: 0,0:25:31.17,0:25:32.77,*Default,NTP,0000,0000,0000,,所以现在我们有了 amb
Dialogue: 0,0:25:33.30,0:25:35.90,*Default,NTP,0000,0000,0000,,分别与 gnh 绑定
Dialogue: 0,0:25:36.17,0:25:38.87,*Default,NTP,0000,0000,0000,,我们要做的就是调用 b 两次
Dialogue: 0,0:25:40.07,0:25:41.37,*Default,NTP,0000,0000,0000,,在第一个邪教b
Dialogue: 0,0:25:41.87,0:25:43.77,*Default,NTP,0000,0000,0000,,我将传递论点三
Dialogue: 0,0:25:43.87,0:25:45.33,*Default,NTP,0000,0000,0000,,其形式参数 z
Dialogue: 0,0:25:46.60,0:25:48.33,*Default,NTP,0000,0000,0000,,好的，我们已经打电话了
Dialogue: 0,0:25:49.17,0:25:50.70,*Default,NTP,0000,0000,0000,,其中 z 绑定为 3
Dialogue: 0,0:25:51.60,0:25:53.57,*Default,NTP,0000,0000,0000,,x 被声明为非本地的
Dialogue: 0,0:25:54.10,0:25:54.67,*Default,NTP,0000,0000,0000,,进而
Dialogue: 0,0:25:54.67,0:25:57.80,*Default,NTP,0000,0000,0000,,x 反弹到当前 x 加一的值
Dialogue: 0,0:25:59.07,0:26:01.07,*Default,NTP,0000,0000,0000,,我们必须审视当前的环境
Dialogue: 0,0:26:01.07,0:26:02.53,*Default,NTP,0000,0000,0000,,以 f 3 开头
Dialogue: 0,0:26:02.67,0:26:04.10,*Default,NTP,0000,0000,0000,,然后转到 f 2
Dialogue: 0,0:26:04.10,0:26:05.87,*Default,NTP,0000,0000,0000,,然后它的父级是 f one
Dialogue: 0,0:26:05.93,0:26:07.80,*Default,NTP,0000,0000,0000,,它的父级是全局框架
Dialogue: 0,0:26:08.20,0:26:09.93,*Default,NTP,0000,0000,0000,,并找到第一个出现的地方
Dialogue: 0,0:26:10.60,0:26:13.20,*Default,NTP,0000,0000,0000,,在 x 被束缚的这条链中
Dialogue: 0,0:26:13.37,0:26:14.40,*Default,NTP,0000,0000,0000,,这是这里
Dialogue: 0,0:26:14.73,0:26:16.07,*Default,NTP,0000,0000,0000,,在f一帧中
Dialogue: 0,0:26:16.67,0:26:18.93,*Default,NTP,0000,0000,0000,,所以 x 值的任何变化
Dialogue: 0,0:26:18.97,0:26:21.33,*Default,NTP,0000,0000,0000,,将在此框架中重新绑定
Dialogue: 0,0:26:21.73,0:26:23.97,*Default,NTP,0000,0000,0000,,在这种情况下，我们将其从四个更改为五个
Dialogue: 0,0:26:25.13,0:26:26.70,*Default,NTP,0000,0000,0000,,然后我们返回 xy 和 z
Dialogue: 0,0:26:27.13,0:26:29.17,*Default,NTP,0000,0000,0000,,嗯，有 z，有 3 个，有 y，有 2 个
Dialogue: 0,0:26:29.17,0:26:30.87,*Default,NTP,0000,0000,0000,,有x，是五
Dialogue: 0,0:26:31.10,0:26:32.77,*Default,NTP,0000,0000,0000,,总数为 10
Dialogue: 0,0:26:33.37,0:26:35.30,*Default,NTP,0000,0000,0000,,所以让我们长久地记住这一点
Dialogue: 0,0:26:35.30,0:26:37.20,*Default,NTP,0000,0000,0000,,这东西评价为10
Dialogue: 0,0:26:37.73,0:26:38.70,*Default,NTP,0000,0000,0000,,我们必须记住它
Dialogue: 0,0:26:38.70,0:26:40.57,*Default,NTP,0000,0000,0000,,因为我们还得评估这个东西
Dialogue: 0,0:26:40.57,0:26:43.57,*Default,NTP,0000,0000,0000,,所以总数是十加上其他东西
Dialogue: 0,0:26:44.37,0:26:46.47,*Default,NTP,0000,0000,0000,,好吧，这是什么别的东西
Dialogue: 0,0:26:46.77,0:26:47.10,*Default,NTP,0000,0000,0000,,出色地
Dialogue: 0,0:26:47.10,0:26:51.30,*Default,NTP,0000,0000,0000,,这就是当你在 4 上调用 h 函数时得到的结果
Dialogue: 0,0:26:53.00,0:26:56.30,*Default,NTP,0000,0000,0000,,重新绑定 x 2 x 加一
Dialogue: 0,0:26:56.37,0:26:58.30,*Default,NTP,0000,0000,0000,,让我们看看哪一个
Dialogue: 0,0:26:58.53,0:27:00.60,*Default,NTP,0000,0000,0000,,我们首先看 f 4 没有 x
Dialogue: 0,0:27:00.60,0:27:02.70,*Default,NTP,0000,0000,0000,,然后我们看 f 两个没有 x
Dialogue: 0,0:27:02.70,0:27:04.70,*Default,NTP,0000,0000,0000,,然后我们看看它的父 f one
Dialogue: 0,0:27:04.73,0:27:05.73,*Default,NTP,0000,0000,0000,,有x
Dialogue: 0,0:27:05.80,0:27:07.60,*Default,NTP,0000,0000,0000,,这就是我们要重新绑定的那个
Dialogue: 0,0:27:07.70,0:27:10.33,*Default,NTP,0000,0000,0000,,现在是六个而不是五个
Dialogue: 0,0:27:11.50,0:27:16.37,*Default,NTP,0000,0000,0000,,我们返回四加二加六等于十二
Dialogue: 0,0:27:16.50,0:27:19.93,*Default,NTP,0000,0000,0000,,十和十二加起来总共是 22
Dialogue: 0,0:27:21.93,0:27:22.13,*Default,NTP,0000,0000,0000,,所以
Dialogue: 0,0:27:22.13,0:27:24.77,*Default,NTP,0000,0000,0000,,有一个有趣的例子来说明非本地如何工作
Dialogue: 0,0:27:24.77,0:27:27.30,*Default,NTP,0000,0000,0000,,但是引用透明度呢
Dialogue: 0,0:27:27.90,0:27:29.67,*Default,NTP,0000,0000,0000,,那么这曾经等于 22
Dialogue: 0,0:27:29.90,0:27:32.00,*Default,NTP,0000,0000,0000,,b3 评价为 10
Dialogue: 0,0:27:32.67,0:27:35.87,*Default,NTP,0000,0000,0000,,但如果我替换这个函数调用呢
Dialogue: 0,0:27:35.90,0:27:37.10,*Default,NTP,0000,0000,0000,,按其价值
Dialogue: 0,0:27:38.37,0:27:40.53,*Default,NTP,0000,0000,0000,,然后我想象执行过程
Dialogue: 0,0:27:41.50,0:27:44.57,*Default,NTP,0000,0000,0000,,现在的区别是调用 p 的效果
Dialogue: 0,0:27:44.77,0:27:46.10,*Default,NTP,0000,0000,0000,,永远不会发生
Dialogue: 0,0:27:46.10,0:27:48.20,*Default,NTP,0000,0000,0000,,因为我用它的值代替
Dialogue: 0,0:27:48.37,0:27:50.17,*Default,NTP,0000,0000,0000,,所以总数是 21
Dialogue: 0,0:27:51.90,0:27:55.00,*Default,NTP,0000,0000,0000,,从来没有第二次调用 h 函数
Dialogue: 0,0:27:55.00,0:27:56.73,*Default,NTP,0000,0000,0000,,因为我刚刚使用了值 10
Dialogue: 0,0:27:56.77,0:27:58.60,*Default,NTP,0000,0000,0000,,而不是调用超过三个
Dialogue: 0,0:27:59.07,0:27:59.90,*Default,NTP,0000,0000,0000,,因此
Dialogue: 0,0:28:00.17,0:28:02.10,*Default,NTP,0000,0000,0000,,x 只增加一次
Dialogue: 0,0:28:02.10,0:28:04.13,*Default,NTP,0000,0000,0000,,而不是增加两次
Dialogue: 0,0:28:04.13,0:28:05.80,*Default,NTP,0000,0000,0000,,从四到五到六
Dialogue: 0,0:28:06.90,0:28:11.00,*Default,NTP,0000,0000,0000,,所以这个程序有不同的意义
Dialogue: 0,0:28:11.10,0:28:13.67,*Default,NTP,0000,0000,0000,,从我不会成为三岁的那个人
Dialogue: 0,0:28:13.93,0:28:15.60,*Default,NTP,0000,0000,0000,,以及它们不同的原因
Dialogue: 0,0:28:15.60,0:28:17.40,*Default,NTP,0000,0000,0000,,现在我有功能了
Dialogue: 0,0:28:17.40,0:28:19.27,*Default,NTP,0000,0000,0000,,导致突变的
Dialogue: 0,0:28:20.40,0:28:23.73,*Default,NTP,0000,0000,0000,,参考透明度丢失
Dialogue: 0,0:28:26.47,0:28:28.17,*Default,NTP,0000,0000,0000,,这就是今天讲座的全部内容
Dialogue: 0,0:28:28.57,0:28:30.57,*Default,NTP,0000,0000,0000,,但我会回去推荐一个
Dialogue: 0,0:28:30.57,0:28:32.17,*Default,NTP,0000,0000,0000,,老考试题
Dialogue: 0,0:28:32.30,0:28:34.17,*Default,NTP,0000,0000,0000,,从2008年春季开始
Dialogue: 0,0:28:34.80,0:28:37.10,*Default,NTP,0000,0000,0000,,作为评论问题的一个很好的例子
Dialogue: 0,0:28:37.10,0:28:38.20,*Default,NTP,0000,0000,0000,,你应该看看
Dialogue: 0,0:28:38.37,0:28:39.90,*Default,NTP,0000,0000,0000,,大约在课程的这个时间
Dialogue: 0,0:28:40.60,0:28:42.77,*Default,NTP,0000,0000,0000,,我选了第四题b
Dialogue: 0,0:28:43.17,0:28:44.47,*Default,NTP,0000,0000,0000,,从2018年春季开始
Dialogue: 0,0:28:44.80,0:28:45.70,*Default,NTP,0000,0000,0000,,期中考试2
Dialogue: 0,0:28:46.60,0:28:48.50,*Default,NTP,0000,0000,0000,,这是一个六点问题
Dialogue: 0,0:28:48.53,0:28:50.00,*Default,NTP,0000,0000,0000,,实施组合
Dialogue: 0,0:28:50.17,0:28:53.13,*Default,NTP,0000,0000,0000,,它采用两个非负整数 a 和 b
Dialogue: 0,0:28:53.27,0:28:55.47,*Default,NTP,0000,0000,0000,,它返回最小的整数
Dialogue: 0,0:28:55.50,0:28:58.80,*Default,NTP,0000,0000,0000,,按顺序包含 a 的所有数字
Dialogue: 0,0:28:59.10,0:29:02.20,*Default,NTP,0000,0000,0000,,以及 b 按顺序排列的所有数字
Dialogue: 0,0:29:02.67,0:29:05.10,*Default,NTP,0000,0000,0000,,进入zin，一出来
Dialogue: 0,0:29:05.67,0:29:08.20,*Default,NTP,0000,0000,0000,,我不会详细介绍如何解决这个问题
Dialogue: 0,0:29:08.60,0:29:09.93,*Default,NTP,0000,0000,0000,,我只是要去
Dialogue: 0,0:29:11.53,0:29:14.77,*Default,NTP,0000,0000,0000,,指出一些值得注意的事情
Dialogue: 0,0:29:14.90,0:29:17.40,*Default,NTP,0000,0000,0000,,在你开始解决这个问题之前
Dialogue: 0,0:29:18.47,0:29:22.07,*Default,NTP,0000,0000,0000,,1、这是什么类型的问题
Dialogue: 0,0:29:22.27,0:29:24.17,*Default,NTP,0000,0000,0000,,解决方案技术可能适用
Dialogue: 0,0:29:24.87,0:29:26.87,*Default,NTP,0000,0000,0000,,好吧，如果你有两个整数
Dialogue: 0,0:29:27.07,0:29:27.90,*Default,NTP,0000,0000,0000,,你想
Dialogue: 0,0:29:27.90,0:29:29.13,*Default,NTP,0000,0000,0000,,构建一个具有以下性质的整数
Dialogue: 0,0:29:29.13,0:29:30.80,*Default,NTP,0000,0000,0000,,他们两个的所有数字
Dialogue: 0,0:29:31.20,0:29:33.10,*Default,NTP,0000,0000,0000,,有很多方法可以做到这一点
Dialogue: 0,0:29:33.37,0:29:36.30,*Default,NTP,0000,0000,0000,,例如这个五三一和四三二
Dialogue: 0,0:29:36.33,0:29:38.77,*Default,NTP,0000,0000,0000,,我可以从四开始，也可以从五开始
Dialogue: 0,0:29:38.77,0:29:39.93,*Default,NTP,0000,0000,0000,,两者都是合理的
Dialogue: 0,0:29:39.93,0:29:49.13,*Default,NTP,0000,0000,0000,,所以我可以做 4 5 3 1 2 或 4 5 3 2 1 或 4 3 2 5 3 1
Dialogue: 0,0:29:49.13,0:29:50.80,*Default,NTP,0000,0000,0000,,有很多不同的方法
Dialogue: 0,0:29:51.47,0:29:54.33,*Default,NTP,0000,0000,0000,,当你在许多不同的选项中进行选择时
Dialogue: 0,0:29:54.50,0:29:56.07,*Default,NTP,0000,0000,0000,,而你正试图将它们全部数完
Dialogue: 0,0:29:56.37,0:29:57.77,*Default,NTP,0000,0000,0000,,或找到最好的一个
Dialogue: 0,0:29:58.10,0:29:59.57,*Default,NTP,0000,0000,0000,,或全部打印出来
Dialogue: 0,0:29:59.90,0:30:01.93,*Default,NTP,0000,0000,0000,,这是一个树递归问题
Dialogue: 0,0:30:02.87,0:30:04.90,*Default,NTP,0000,0000,0000,,这里我们有一系列的选择
Dialogue: 0,0:30:05.07,0:30:07.87,*Default,NTP,0000,0000,0000,,结果中接下来要放入哪个数字
Dialogue: 0,0:30:08.57,0:30:10.90,*Default,NTP,0000,0000,0000,,并且有很多不同的方式可供选择
Dialogue: 0,0:30:11.77,0:30:14.77,*Default,NTP,0000,0000,0000,,所以树递归意味着寻找基本情况
Dialogue: 0,0:30:14.90,0:30:16.87,*Default,NTP,0000,0000,0000,,寻找递归案例
Dialogue: 0,0:30:16.87,0:30:18.73,*Default,NTP,0000,0000,0000,,并弄清楚如何结合
Dialogue: 0,0:30:18.87,0:30:21.90,*Default,NTP,0000,0000,0000,,多次递归调用的结果
Dialogue: 0,0:30:22.93,0:30:25.77,*Default,NTP,0000,0000,0000,,还有其他提示，比如这是一个递归调用
Dialogue: 0,0:30:26.53,0:30:27.77,*Default,NTP,0000,0000,0000,,好吧好吧但是
Dialogue: 0,0:30:28.20,0:30:30.70,*Default,NTP,0000,0000,0000,,甚至不用看起始代码
Dialogue: 0,0:30:30.70,0:30:31.27,*Default,NTP,0000,0000,0000,,你应该试试
Dialogue: 0,0:30:31.27,0:30:33.30,*Default,NTP,0000,0000,0000,,弄清楚这是什么类型的问题
Dialogue: 0,0:30:34.33,0:30:37.70,*Default,NTP,0000,0000,0000,,第二，你可以开始寻找基本案例
Dialogue: 0,0:30:38.10,0:30:39.30,*Default,NTP,0000,0000,0000,,在这个问题中
Dialogue: 0,0:30:39.33,0:30:42.07,*Default,NTP,0000,0000,0000,,向您提供了一种基本情况
Dialogue: 0,0:30:42.10,0:30:44.60,*Default,NTP,0000,0000,0000,,记住基本情况是
Dialogue: 0,0:30:44.77,0:30:47.77,*Default,NTP,0000,0000,0000,,输入可以立即返回答案的位置
Dialogue: 0,0:30:48.37,0:30:49.93,*Default,NTP,0000,0000,0000,,所以如果你想构建一个整数
Dialogue: 0,0:30:49.93,0:30:51.37,*Default,NTP,0000,0000,0000,,所有数字为零
Dialogue: 0,0:30:51.37,0:30:53.20,*Default,NTP,0000,0000,0000,,以及三比一的所有数字
Dialogue: 0,0:30:53.33,0:30:55.13,*Default,NTP,0000,0000,0000,,显然答案是三比一
Dialogue: 0,0:30:55.13,0:30:56.30,*Default,NTP,0000,0000,0000,,零发生了什么
Dialogue: 0,0:30:56.37,0:30:57.57,*Default,NTP,0000,0000,0000,,哦，有一个解释
Dialogue: 0,0:30:57.57,0:31:01.33,*Default,NTP,0000,0000,0000,,0 号没有数字，因此结果中不包含零
Dialogue: 0,0:31:01.53,0:31:02.67,*Default,NTP,0000,0000,0000,,所以这是一个有用的
Dialogue: 0,0:31:02.67,0:31:05.07,*Default,NTP,0000,0000,0000,,码头测试，因为它告诉你如何处理零
Dialogue: 0,0:31:05.57,0:31:07.27,*Default,NTP,0000,0000,0000,,还有一个有用的码头测试
Dialogue: 0,0:31:07.33,0:31:09.07,*Default,NTP,0000,0000,0000,,因为我似乎可以计算
Dialogue: 0,0:31:09.07,0:31:11.00,*Default,NTP,0000,0000,0000,,这些输入的结果
Dialogue: 0,0:31:11.13,0:31:12.37,*Default,NTP,0000,0000,0000,,真的很容易
Dialogue: 0,0:31:12.93,0:31:14.33,*Default,NTP,0000,0000,0000,,这是一个基本情况
Dialogue: 0,0:31:14.67,0:31:16.20,*Default,NTP,0000,0000,0000,,我会让你从那里拿走它
Dialogue: 0,0:31:16.33,0:31:17.53,*Default,NTP,0000,0000,0000,,如果你想了解更多
Dialogue: 0,0:31:17.53,0:31:19.10,*Default,NTP,0000,0000,0000,,关于如何解决这个问题
Dialogue: 0,0:31:19.27,0:31:21.07,*Default,NTP,0000,0000,0000,,你可以去资源页面
Dialogue: 0,0:31:21.07,0:31:22.40,*Default,NTP,0000,0000,0000,,课程网站的
Dialogue: 0,0:31:22.53,0:31:24.80,*Default,NTP,0000,0000,0000,,并找到演练视频
Dialogue: 0,0:31:25.00,0:31:27.93,*Default,NTP,0000,0000,0000,,描述如何处理和解决问题
Dialogue: 0,0:31:28.30,0:31:29.10,*Default,NTP,0000,0000,0000,,祝你好运
