[Script Info]
Title: Lecture 14. Circuits_哔哩哔哩_bilibili
ScriptType: v4.00+
Collisions: Reverse
PlayResX: 1280
PlayResY: 720
WrapStyle: 3
ScaledBorderAndShadow: yes
; ----------------------
; 本字幕由CC字幕助手自动转换
; 字幕来源https://www.bilibili.com/video/BV1s3411G7yM/?p=34&vd_source=6ffca0aa1006734a4fba52f389036611
; 脚本地址https://greasyfork.org/scripts/378513
; 设置了字幕过长自动换行，但若字幕中没有空格换行将无效
; 字体大小依据720p 48号字体等比缩放
; 如显示不正常请尝试使用SRT格式

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Segoe UI,48,&H00FFFFFF,&HF0000000,&H00000000,&HF0000000,1,0,0,0,100,100,0,0.00,1,1,3,2,30,30,20,1

[Events]
Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.47,0:00:02.70,*Default,NTP,0000,0000,0000,,61 a lecture No.14
Dialogue: 0,0:00:03.00,0:00:03.90,*Default,NTP,0000,0000,0000,,announcements
Dialogue: 0,0:00:04.50,0:00:06.53,*Default,NTP,0000,0000,0000,,project two is due on Friday
Dialogue: 0,0:00:06.87,0:00:09.33,*Default,NTP,0000,0000,0000,,but please get the checkpoint
Dialogue: 0,0:00:09.50,0:00:11.67,*Default,NTP,0000,0000,0000,,by submitting phase one by today
Dialogue: 0,0:00:11.93,0:00:14.80,*Default,NTP,0000,0000,0000,,and the bonus point by submitting the whole project by
Dialogue: 0,0:00:14.80,0:00:15.67,*Default,NTP,0000,0000,0000,,Thursday
Dialogue: 0,0:00:17.07,0:00:17.87,*Default,NTP,0000,0000,0000,,today's lecture
Dialogue: 0,0:00:17.87,0:00:19.20,*Default,NTP,0000,0000,0000,,along with monday's lecture
Dialogue: 0,0:00:19.20,0:00:21.90,*Default,NTP,0000,0000,0000,,will not be covered on exams or assignments
Dialogue: 0,0:00:21.97,0:00:23.73,*Default,NTP,0000,0000,0000,,but they're pretty interesting
Dialogue: 0,0:00:23.77,0:00:26.57,*Default,NTP,0000,0000,0000,,so definitely watch them and come ask
Dialogue: 0,0:00:26.57,0:00:28.53,*Default,NTP,0000,0000,0000,,questions if you're curious
Dialogue: 0,0:00:29.60,0:00:31.37,*Default,NTP,0000,0000,0000,,we have some advising office hour
Dialogue: 0,0:00:31.37,0:00:32.57,*Default,NTP,0000,0000,0000,,appointments coming up
Dialogue: 0,0:00:32.57,0:00:34.97,*Default,NTP,0000,0000,0000,,this Friday Saturday and Monday
Dialogue: 0,0:00:35.27,0:00:37.13,*Default,NTP,0000,0000,0000,,those office hour appointments
Dialogue: 0,0:00:37.13,0:00:39.77,*Default,NTP,0000,0000,0000,,whose location is marked as advising
Dialogue: 0,0:00:39.90,0:00:41.77,*Default,NTP,0000,0000,0000,,are just for receiving advising
Dialogue: 0,0:00:41.77,0:00:43.53,*Default,NTP,0000,0000,0000,,not homework or project help
Dialogue: 0,0:00:44.17,0:00:45.30,*Default,NTP,0000,0000,0000,,so if you want to ask
Dialogue: 0,0:00:45.30,0:00:48.30,*Default,NTP,0000,0000,0000,,about study strategies or future classes
Dialogue: 0,0:00:48.30,0:00:52.13,*Default,NTP,0000,0000,0000,,or clubs or research or internships or
Dialogue: 0,0:00:52.13,0:00:54.53,*Default,NTP,0000,0000,0000,,what it's like to live in berkeley or whatever
Dialogue: 0,0:00:54.53,0:00:56.87,*Default,NTP,0000,0000,0000,,then grab one of these 1 on 1 appointments
Dialogue: 0,0:00:56.87,0:00:58.47,*Default,NTP,0000,0000,0000,,but if you need help with your homework
Dialogue: 0,0:00:58.77,0:01:01.50,*Default,NTP,0000,0000,0000,,grab an appointment that has a different location than
Dialogue: 0,0:01:01.53,0:01:02.40,*Default,NTP,0000,0000,0000,,advising
Dialogue: 0,0:01:03.27,0:01:04.30,*Default,NTP,0000,0000,0000,,okay here we go
Dialogue: 0,0:01:04.30,0:01:06.87,*Default,NTP,0000,0000,0000,,continuing mondays lecture
Dialogue: 0,0:01:07.10,0:01:10.50,*Default,NTP,0000,0000,0000,,with a description of how the circuitry in a computer
Dialogue: 0,0:01:10.50,0:01:11.97,*Default,NTP,0000,0000,0000,,actually implements
Dialogue: 0,0:01:12.13,0:01:14.67,*Default,NTP,0000,0000,0000,,basic operations on numbers
Dialogue: 0,0:01:17.53,0:01:19.90,*Default,NTP,0000,0000,0000,,welcome back so let's see where we left off
Dialogue: 0,0:01:19.90,0:01:21.13,*Default,NTP,0000,0000,0000,,so at this point
Dialogue: 0,0:01:21.37,0:01:24.07,*Default,NTP,0000,0000,0000,,we know that you can use binary numbers only
Dialogue: 0,0:01:24.07,0:01:25.13,*Default,NTP,0000,0000,0000,,zeros and ones
Dialogue: 0,0:01:25.13,0:01:27.47,*Default,NTP,0000,0000,0000,,to represent numbers positive and negative
Dialogue: 0,0:01:27.47,0:01:28.87,*Default,NTP,0000,0000,0000,,and floating point numbers
Dialogue: 0,0:01:29.27,0:01:32.53,*Default,NTP,0000,0000,0000,,and we know that we have three basic
Dialogue: 0,0:01:32.93,0:01:34.73,*Default,NTP,0000,0000,0000,,boolean or logical operators
Dialogue: 0,0:01:34.73,0:01:37.73,*Default,NTP,0000,0000,0000,,logical and logical or and logical not
Dialogue: 0,0:01:38.30,0:01:41.17,*Default,NTP,0000,0000,0000,,and I showed you using transistors
Dialogue: 0,0:01:41.47,0:01:43.90,*Default,NTP,0000,0000,0000,,two in series for an and gate
Dialogue: 0,0:01:44.20,0:01:46.93,*Default,NTP,0000,0000,0000,,two in parallel for nate and for an orgate
Dialogue: 0,0:01:47.17,0:01:49.87,*Default,NTP,0000,0000,0000,,and a single transistor and a resistor for a not gate
Dialogue: 0,0:01:49.87,0:01:51.27,*Default,NTP,0000,0000,0000,,how I can physically
Dialogue: 0,0:01:51.73,0:01:56.27,*Default,NTP,0000,0000,0000,,build these logical boolean operators and or not
Dialogue: 0,0:01:56.60,0:01:58.30,*Default,NTP,0000,0000,0000,,and now what I need to show you is
Dialogue: 0,0:01:58.30,0:01:59.57,*Default,NTP,0000,0000,0000,,how I can go from these three
Dialogue: 0,0:01:59.57,0:02:02.97,*Default,NTP,0000,0000,0000,,incredibly simple operations computations
Dialogue: 0,0:02:03.13,0:02:06.70,*Default,NTP,0000,0000,0000,,two full blown computation on a modern computer
Dialogue: 0,0:02:06.70,0:02:08.73,*Default,NTP,0000,0000,0000,,that's what we're going to start talking about today
Dialogue: 0,0:02:08.73,0:02:09.93,*Default,NTP,0000,0000,0000,,so let's go ahead and just dig in
Dialogue: 0,0:02:11.30,0:02:13.73,*Default,NTP,0000,0000,0000,,so let me start by defining a circuit
Dialogue: 0,0:02:13.87,0:02:16.87,*Default,NTP,0000,0000,0000,,a circuit is a collection of logical gates
Dialogue: 0,0:02:16.93,0:02:18.13,*Default,NTP,0000,0000,0000,,you know what a gate is
Dialogue: 0,0:02:18.20,0:02:20.53,*Default,NTP,0000,0000,0000,,that's simply an instantiation
Dialogue: 0,0:02:20.53,0:02:23.53,*Default,NTP,0000,0000,0000,,of and or not using the transistors
Dialogue: 0,0:02:23.53,0:02:25.90,*Default,NTP,0000,0000,0000,,but you know this again is the power of abstraction
Dialogue: 0,0:02:25.90,0:02:26.57,*Default,NTP,0000,0000,0000,,so at this point
Dialogue: 0,0:02:26.57,0:02:28.37,*Default,NTP,0000,0000,0000,,I'm going to just start calling them gates
Dialogue: 0,0:02:28.50,0:02:29.53,*Default,NTP,0000,0000,0000,,I don't have to worry anymore
Dialogue: 0,0:02:29.53,0:02:31.10,*Default,NTP,0000,0000,0000,,that they're built from multiple
Dialogue: 0,0:02:31.10,0:02:32.60,*Default,NTP,0000,0000,0000,,in series in parallel
Dialogue: 0,0:02:32.60,0:02:34.67,*Default,NTP,0000,0000,0000,,resistors transistors doesn't matter
Dialogue: 0,0:02:34.77,0:02:35.57,*Default,NTP,0000,0000,0000,,they're just gates
Dialogue: 0,0:02:35.57,0:02:37.77,*Default,NTP,0000,0000,0000,,they are operations that do and or not
Dialogue: 0,0:02:37.77,0:02:41.27,*Default,NTP,0000,0000,0000,,okay so a circuit is a collection of logical gates that
Dialogue: 0,0:02:41.60,0:02:45.50,*Default,NTP,0000,0000,0000,,transforms a set of binary inputs into a set of
Dialogue: 0,0:02:45.67,0:02:46.93,*Default,NTP,0000,0000,0000,,binary outputs
Dialogue: 0,0:02:46.93,0:02:47.87,*Default,NTP,0000,0000,0000,,it's just a function
Dialogue: 0,0:02:48.17,0:02:50.40,*Default,NTP,0000,0000,0000,,so a bunch of things come in that are binary
Dialogue: 0,0:02:50.40,0:02:52.67,*Default,NTP,0000,0000,0000,,because that's the language of modern computer
Dialogue: 0,0:02:52.80,0:02:54.77,*Default,NTP,0000,0000,0000,,and a bunch one or more things can come out
Dialogue: 0,0:02:54.77,0:02:56.37,*Default,NTP,0000,0000,0000,,which are also a binary
Dialogue: 0,0:02:56.37,0:02:57.90,*Default,NTP,0000,0000,0000,,such as definition of a circuit
Dialogue: 0,0:02:57.93,0:03:00.17,*Default,NTP,0000,0000,0000,,and all it's made up is a collection of gates
Dialogue: 0,0:03:00.17,0:03:03.47,*Default,NTP,0000,0000,0000,,so all you get to do is and or and not
Dialogue: 0,0:03:03.67,0:03:05.90,*Default,NTP,0000,0000,0000,,okay so let's look at a really simple example
Dialogue: 0,0:03:07.13,0:03:09.07,*Default,NTP,0000,0000,0000,,so this is not a meaningful computation
Dialogue: 0,0:03:09.07,0:03:10.87,*Default,NTP,0000,0000,0000,,I'm not computing anything that's meaningful
Dialogue: 0,0:03:10.87,0:03:12.17,*Default,NTP,0000,0000,0000,,I just want to show you
Dialogue: 0,0:03:12.40,0:03:13.80,*Default,NTP,0000,0000,0000,,an example of a circuit
Dialogue: 0,0:03:13.80,0:03:14.33,*Default,NTP,0000,0000,0000,,and then of course
Dialogue: 0,0:03:14.33,0:03:16.20,*Default,NTP,0000,0000,0000,,we'll get into meaningful computation
Dialogue: 0,0:03:16.37,0:03:18.50,*Default,NTP,0000,0000,0000,,in a little bit and then how we build these circuits
Dialogue: 0,0:03:18.50,0:03:20.50,*Default,NTP,0000,0000,0000,,I just want you to see what a circuit would look like
Dialogue: 0,0:03:20.50,0:03:22.17,*Default,NTP,0000,0000,0000,,so typically in a circuit
Dialogue: 0,0:03:22.70,0:03:24.17,*Default,NTP,0000,0000,0000,,the input is on the left
Dialogue: 0,0:03:24.17,0:03:26.53,*Default,NTP,0000,0000,0000,,I have two inputs here and b
Dialogue: 0,0:03:26.67,0:03:29.67,*Default,NTP,0000,0000,0000,,this can be a zero or one this can be a zero or one
Dialogue: 0,0:03:30.10,0:03:31.73,*Default,NTP,0000,0000,0000,,I have two outputs
Dialogue: 0,0:03:31.97,0:03:35.07,*Default,NTP,0000,0000,0000,,c and d of course these have to be zero or ones
Dialogue: 0,0:03:35.07,0:03:36.50,*Default,NTP,0000,0000,0000,,because they are the output of
Dialogue: 0,0:03:36.50,0:03:39.53,*Default,NTP,0000,0000,0000,,pushing binary inputs through a series of gates
Dialogue: 0,0:03:39.67,0:03:40.87,*Default,NTP,0000,0000,0000,,and here are my gates
Dialogue: 0,0:03:40.87,0:03:41.87,*Default,NTP,0000,0000,0000,,so here's an ore gate
Dialogue: 0,0:03:41.87,0:03:42.87,*Default,NTP,0000,0000,0000,,remember the shape of the ore gate
Dialogue: 0,0:03:42.87,0:03:44.73,*Default,NTP,0000,0000,0000,,it's got that sort of funny rounded back
Dialogue: 0,0:03:44.73,0:03:45.97,*Default,NTP,0000,0000,0000,,and a plus sign in the middle
Dialogue: 0,0:03:45.97,0:03:46.77,*Default,NTP,0000,0000,0000,,just to remember it
Dialogue: 0,0:03:46.77,0:03:49.97,*Default,NTP,0000,0000,0000,,an ore here's an end gate with little dot
Dialogue: 0,0:03:50.00,0:03:51.87,*Default,NTP,0000,0000,0000,,and I have a knot gate right there
Dialogue: 0,0:03:51.87,0:03:53.53,*Default,NTP,0000,0000,0000,,and a knot gate right here
Dialogue: 0,0:03:53.70,0:03:55.90,*Default,NTP,0000,0000,0000,,so let's see what's happening here
Dialogue: 0,0:03:57.57,0:04:01.73,*Default,NTP,0000,0000,0000,,so let's see this output is the result of what
Dialogue: 0,0:04:01.73,0:04:03.97,*Default,NTP,0000,0000,0000,,a is coming into this oregate
Dialogue: 0,0:04:04.50,0:04:05.27,*Default,NTP,0000,0000,0000,,b is coming in
Dialogue: 0,0:04:05.27,0:04:07.70,*Default,NTP,0000,0000,0000,,and notice that little white dot right there
Dialogue: 0,0:04:07.70,0:04:09.90,*Default,NTP,0000,0000,0000,,that tells me I'm going to take this input
Dialogue: 0,0:04:09.97,0:04:11.13,*Default,NTP,0000,0000,0000,,and I'm going to bifurcated
Dialogue: 0,0:04:11.13,0:04:14.00,*Default,NTP,0000,0000,0000,,I'm going to bring it up here into this orgate
Dialogue: 0,0:04:14.10,0:04:16.37,*Default,NTP,0000,0000,0000,,but I'm also going to carry it through into this knot
Dialogue: 0,0:04:16.37,0:04:17.40,*Default,NTP,0000,0000,0000,,and eventually into this
Dialogue: 0,0:04:17.40,0:04:20.13,*Default,NTP,0000,0000,0000,,and so that little dot tells me that the same
Dialogue: 0,0:04:20.13,0:04:20.97,*Default,NTP,0000,0000,0000,,signal goes in
Dialogue: 0,0:04:20.97,0:04:21.90,*Default,NTP,0000,0000,0000,,two different directions
Dialogue: 0,0:04:21.90,0:04:23.10,*Default,NTP,0000,0000,0000,,so whatever b is
Dialogue: 0,0:04:23.30,0:04:27.57,*Default,NTP,0000,0000,0000,,it comes up here and out of here comes what arb
Dialogue: 0,0:04:28.10,0:04:32.60,*Default,NTP,0000,0000,0000,,so the output c is simply the result of arb
Dialogue: 0,0:04:32.80,0:04:33.40,*Default,NTP,0000,0000,0000,,not meaningful
Dialogue: 0,0:04:33.40,0:04:34.67,*Default,NTP,0000,0000,0000,,it doesn't mean anything right now
Dialogue: 0,0:04:34.67,0:04:35.40,*Default,NTP,0000,0000,0000,,but let's not worry about it
Dialogue: 0,0:04:35.40,0:04:37.33,*Default,NTP,0000,0000,0000,,I'm just trying to show you what a circuit looks like
Dialogue: 0,0:04:37.67,0:04:38.93,*Default,NTP,0000,0000,0000,,so that is the output
Dialogue: 0,0:04:38.93,0:04:39.77,*Default,NTP,0000,0000,0000,,and of course
Dialogue: 0,0:04:39.87,0:04:42.37,*Default,NTP,0000,0000,0000,,since a can be zero or one true or false
Dialogue: 0,0:04:42.37,0:04:44.13,*Default,NTP,0000,0000,0000,,b can be 0 1 true or false
Dialogue: 0,0:04:44.17,0:04:47.33,*Default,NTP,0000,0000,0000,,c of course is zero or one true or false
Dialogue: 0,0:04:47.53,0:04:49.67,*Default,NTP,0000,0000,0000,,so let's see what d is
Dialogue: 0,0:04:49.67,0:04:51.47,*Default,NTP,0000,0000,0000,,okay so let's see
Dialogue: 0,0:04:51.47,0:04:57.87,*Default,NTP,0000,0000,0000,,so the output of this oar is coming into the and gate
Dialogue: 0,0:04:58.17,0:05:00.53,*Default,NTP,0000,0000,0000,,so first of all is that allowed sure
Dialogue: 0,0:05:00.53,0:05:01.73,*Default,NTP,0000,0000,0000,,this is just a 0 1
Dialogue: 0,0:05:01.73,0:05:03.47,*Default,NTP,0000,0000,0000,,and the result of oaring these two bits
Dialogue: 0,0:05:03.47,0:05:06.10,*Default,NTP,0000,0000,0000,,so this is just another binary number it's coming in
Dialogue: 0,0:05:06.33,0:05:10.00,*Default,NTP,0000,0000,0000,,so this is the end of and or b
Dialogue: 0,0:05:10.53,0:05:11.80,*Default,NTP,0000,0000,0000,,and what else well let's see
Dialogue: 0,0:05:11.80,0:05:12.80,*Default,NTP,0000,0000,0000,,b comes in here
Dialogue: 0,0:05:12.80,0:05:14.30,*Default,NTP,0000,0000,0000,,it goes through a knot gate
Dialogue: 0,0:05:14.30,0:05:15.73,*Default,NTP,0000,0000,0000,,which I'll have to note is b
Dialogue: 0,0:05:15.93,0:05:16.90,*Default,NTP,0000,0000,0000,,with a hashtag
Dialogue: 0,0:05:16.90,0:05:19.97,*Default,NTP,0000,0000,0000,,sometimes you'll see a b with a b with an apostrophe
Dialogue: 0,0:05:20.10,0:05:22.93,*Default,NTP,0000,0000,0000,,sometimes you'll see b with a line over the top of it
Dialogue: 0,0:05:23.10,0:05:25.40,*Default,NTP,0000,0000,0000,,so that's also coming into the and gate
Dialogue: 0,0:05:25.40,0:05:27.80,*Default,NTP,0000,0000,0000,,so I'm ending a or b
Dialogue: 0,0:05:28.00,0:05:29.20,*Default,NTP,0000,0000,0000,,the output of this
Dialogue: 0,0:05:29.53,0:05:32.20,*Default,NTP,0000,0000,0000,,and not b going through here
Dialogue: 0,0:05:32.20,0:05:35.10,*Default,NTP,0000,0000,0000,,and then I'm going to knot the whole thing to get
Dialogue: 0,0:05:35.30,0:05:37.90,*Default,NTP,0000,0000,0000,,d at the end so the expression d
Dialogue: 0,0:05:38.27,0:05:40.30,*Default,NTP,0000,0000,0000,,is equal to a or b
Dialogue: 0,0:05:40.77,0:05:42.00,*Default,NTP,0000,0000,0000,,coming in from up here
Dialogue: 0,0:05:42.73,0:05:46.50,*Default,NTP,0000,0000,0000,,and not be and then the whole thing is nodded
Dialogue: 0,0:05:46.50,0:05:48.27,*Default,NTP,0000,0000,0000,,there's the a little apostrophe there
Dialogue: 0,0:05:48.30,0:05:49.53,*Default,NTP,0000,0000,0000,,okay so it's a circuit
Dialogue: 0,0:05:49.93,0:05:52.77,*Default,NTP,0000,0000,0000,,what is a circuit it's a collection of gates
Dialogue: 0,0:05:53.00,0:05:55.77,*Default,NTP,0000,0000,0000,,or not and that's all I can do
Dialogue: 0,0:05:56.07,0:05:59.80,*Default,NTP,0000,0000,0000,,that takes a series of binary inputs one or more
Dialogue: 0,0:06:00.27,0:06:03.93,*Default,NTP,0000,0000,0000,,and outputs a series one or more of binary outputs
Dialogue: 0,0:06:03.93,0:06:04.90,*Default,NTP,0000,0000,0000,,that's a circuit
Dialogue: 0,0:06:05.20,0:06:06.93,*Default,NTP,0000,0000,0000,,now again this isn't a particularly meaningful
Dialogue: 0,0:06:06.93,0:06:08.67,*Default,NTP,0000,0000,0000,,in fact it's not at all meaningful
Dialogue: 0,0:06:08.73,0:06:11.07,*Default,NTP,0000,0000,0000,,and now what we want to ask ourselves as well
Dialogue: 0,0:06:11.10,0:06:11.40,*Default,NTP,0000,0000,0000,,okay
Dialogue: 0,0:06:11.40,0:06:13.70,*Default,NTP,0000,0000,0000,,now that I have a mechanism for creating a circuit
Dialogue: 0,0:06:13.70,0:06:15.60,*Default,NTP,0000,0000,0000,,that is a computation right
Dialogue: 0,0:06:15.60,0:06:17.30,*Default,NTP,0000,0000,0000,,we're going to take a bunch of binary inputs
Dialogue: 0,0:06:17.30,0:06:18.70,*Default,NTP,0000,0000,0000,,and create a bunch of binary outputs
Dialogue: 0,0:06:18.70,0:06:20.53,*Default,NTP,0000,0000,0000,,so imagine my binary inputs are two
Dialogue: 0,0:06:20.53,0:06:21.97,*Default,NTP,0000,0000,0000,,binary numbers I want to add
Dialogue: 0,0:06:22.30,0:06:24.07,*Default,NTP,0000,0000,0000,,and the output is the summation
Dialogue: 0,0:06:24.30,0:06:25.67,*Default,NTP,0000,0000,0000,,or my input is two things
Dialogue: 0,0:06:25.67,0:06:27.37,*Default,NTP,0000,0000,0000,,I want to compare if they're equal
Dialogue: 0,0:06:27.50,0:06:29.80,*Default,NTP,0000,0000,0000,,and my output is true or false
Dialogue: 0,0:06:29.80,0:06:32.57,*Default,NTP,0000,0000,0000,,and so the nature of computation is going to happen
Dialogue: 0,0:06:32.80,0:06:35.97,*Default,NTP,0000,0000,0000,,by pushing inputs a and b c and d
Dialogue: 0,0:06:35.97,0:06:37.87,*Default,NTP,0000,0000,0000,,whatever that is on the left hand side
Dialogue: 0,0:06:37.97,0:06:40.20,*Default,NTP,0000,0000,0000,,through a series of gates and or a not
Dialogue: 0,0:06:40.20,0:06:41.60,*Default,NTP,0000,0000,0000,,to get a series of outputs which
Dialogue: 0,0:06:41.67,0:06:44.67,*Default,NTP,0000,0000,0000,,hopefully are going to be meaningfully computations
Dialogue: 0,0:06:44.67,0:06:46.50,*Default,NTP,0000,0000,0000,,okay so we're going to do nexus
Dialogue: 0,0:06:46.50,0:06:47.00,*Default,NTP,0000,0000,0000,,we're going to show
Dialogue: 0,0:06:47.00,0:06:49.37,*Default,NTP,0000,0000,0000,,how do you actually build meaningful computation
Dialogue: 0,0:06:49.37,0:06:50.40,*Default,NTP,0000,0000,0000,,now that we know
Dialogue: 0,0:06:50.53,0:06:52.30,*Default,NTP,0000,0000,0000,,what a circuit is and how we build a circuit
Dialogue: 0,0:06:52.30,0:06:53.80,*Default,NTP,0000,0000,0000,,from gates so
Dialogue: 0,0:06:53.80,0:06:54.57,*Default,NTP,0000,0000,0000,,that's the end for now
Dialogue: 0,0:06:54.57,0:06:56.17,*Default,NTP,0000,0000,0000,,and we'll pick it up in a few minutes
Dialogue: 0,0:06:58.10,0:06:58.90,*Default,NTP,0000,0000,0000,,okay so
Dialogue: 0,0:06:58.90,0:07:00.27,*Default,NTP,0000,0000,0000,,the nature of computation
Dialogue: 0,0:07:00.27,0:07:02.97,*Default,NTP,0000,0000,0000,,using boolean operations and or a knot
Dialogue: 0,0:07:03.10,0:07:04.40,*Default,NTP,0000,0000,0000,,is we're going to build a circuit
Dialogue: 0,0:07:04.40,0:07:06.40,*Default,NTP,0000,0000,0000,,a collection of gates that transforms
Dialogue: 0,0:07:06.53,0:07:08.40,*Default,NTP,0000,0000,0000,,binary input to a binary output
Dialogue: 0,0:07:08.40,0:07:10.37,*Default,NTP,0000,0000,0000,,that's what we just saw in the previous lecture
Dialogue: 0,0:07:10.57,0:07:10.93,*Default,NTP,0000,0000,0000,,and now
Dialogue: 0,0:07:10.93,0:07:12.73,*Default,NTP,0000,0000,0000,,what I'm going to take you through is a four step
Dialogue: 0,0:07:12.73,0:07:15.97,*Default,NTP,0000,0000,0000,,process for going from what you want to compute
Dialogue: 0,0:07:16.47,0:07:17.97,*Default,NTP,0000,0000,0000,,to a circuit
Dialogue: 0,0:07:17.97,0:07:19.67,*Default,NTP,0000,0000,0000,,okay so I'm going to go through the four steps
Dialogue: 0,0:07:19.67,0:07:21.30,*Default,NTP,0000,0000,0000,,and then we're going to see a bunch of examples
Dialogue: 0,0:07:21.30,0:07:23.53,*Default,NTP,0000,0000,0000,,on really meaningful computations that you might see
Dialogue: 0,0:07:23.53,0:07:25.30,*Default,NTP,0000,0000,0000,,for example on a modern computer
Dialogue: 0,0:07:25.80,0:07:27.10,*Default,NTP,0000,0000,0000,,so the first thing we're going to do
Dialogue: 0,0:07:27.10,0:07:28.50,*Default,NTP,0000,0000,0000,,is we have to ask ourselves
Dialogue: 0,0:07:28.50,0:07:30.27,*Default,NTP,0000,0000,0000,,what is the input and what is the output
Dialogue: 0,0:07:30.27,0:07:31.73,*Default,NTP,0000,0000,0000,,okay so let me do an example
Dialogue: 0,0:07:31.73,0:07:33.70,*Default,NTP,0000,0000,0000,,where I have two in and two out
Dialogue: 0,0:07:33.97,0:07:35.87,*Default,NTP,0000,0000,0000,,I could have one in and three out
Dialogue: 0,0:07:35.87,0:07:37.93,*Default,NTP,0000,0000,0000,,I could have three in and four out
Dialogue: 0,0:07:38.40,0:07:39.73,*Default,NTP,0000,0000,0000,,that's irrelevant right now
Dialogue: 0,0:07:39.73,0:07:42.37,*Default,NTP,0000,0000,0000,,but we're going to start with just this simple example
Dialogue: 0,0:07:42.70,0:07:44.60,*Default,NTP,0000,0000,0000,,so four steps we're going to follow
Dialogue: 0,0:07:45.70,0:07:49.53,*Default,NTP,0000,0000,0000,,and the first step is to build the truth table for all
Dialogue: 0,0:07:49.53,0:07:52.40,*Default,NTP,0000,0000,0000,,possible input output values
Dialogue: 0,0:07:52.60,0:07:55.77,*Default,NTP,0000,0000,0000,,okay so if I have two inputs a and b
Dialogue: 0,0:07:56.13,0:07:58.27,*Default,NTP,0000,0000,0000,,my truth table must have
Dialogue: 0,0:07:58.70,0:08:02.13,*Default,NTP,0000,0000,0000,,two to the two four possible rows
Dialogue: 0,0:08:02.17,0:08:05.80,*Default,NTP,0000,0000,0000,,so I have to enumerate every possible pair of inputs
Dialogue: 0,0:08:05.80,0:08:08.30,*Default,NTP,0000,0000,0000,,so if I have three inputs I need
Dialogue: 0,0:08:09.00,0:08:12.77,*Default,NTP,0000,0000,0000,,eight rows if I have four inputs I need 16 rows
Dialogue: 0,0:08:12.77,0:08:14.90,*Default,NTP,0000,0000,0000,,I need two to the end rows
Dialogue: 0,0:08:15.00,0:08:17.40,*Default,NTP,0000,0000,0000,,because I have to enumerate every possible input
Dialogue: 0,0:08:17.40,0:08:18.80,*Default,NTP,0000,0000,0000,,nothing can be left out
Dialogue: 0,0:08:19.17,0:08:21.27,*Default,NTP,0000,0000,0000,,so if I have two inputs a and b
Dialogue: 0,0:08:21.50,0:08:23.67,*Default,NTP,0000,0000,0000,,I know what all the possibilities are
Dialogue: 0,0:08:23.67,0:08:25.80,*Default,NTP,0000,0000,0000,,there are 0 0 1 0 1 1
Dialogue: 0,0:08:25.80,0:08:26.57,*Default,NTP,0000,0000,0000,,by the way notice
Dialogue: 0,0:08:26.57,0:08:28.67,*Default,NTP,0000,0000,0000,,this is the easiest way to build your truth table
Dialogue: 0,0:08:28.70,0:08:30.00,*Default,NTP,0000,0000,0000,,just count in binary
Dialogue: 0,0:08:30.17,0:08:35.40,*Default,NTP,0000,0000,0000,,0 1 2 3 4 rows from zero to two to the end minus one
Dialogue: 0,0:08:35.40,0:08:36.97,*Default,NTP,0000,0000,0000,,two to the end total rows
Dialogue: 0,0:08:37.13,0:08:38.80,*Default,NTP,0000,0000,0000,,okay so that's the easy part
Dialogue: 0,0:08:38.80,0:08:41.93,*Default,NTP,0000,0000,0000,,so no matter what circuit I'm building
Dialogue: 0,0:08:43.07,0:08:44.20,*Default,NTP,0000,0000,0000,,with two inputs
Dialogue: 0,0:08:44.33,0:08:46.17,*Default,NTP,0000,0000,0000,,those four rows are gonna be exactly the same
Dialogue: 0,0:08:46.17,0:08:49.47,*Default,NTP,0000,0000,0000,,that is the four possible inputs into the circuit
Dialogue: 0,0:08:49.87,0:08:50.90,*Default,NTP,0000,0000,0000,,and now I have to decide
Dialogue: 0,0:08:50.90,0:08:52.47,*Default,NTP,0000,0000,0000,,what do I want the output to be
Dialogue: 0,0:08:52.73,0:08:56.20,*Default,NTP,0000,0000,0000,,okay so for now I'm going to pick something arbitrary
Dialogue: 0,0:08:56.50,0:08:57.30,*Default,NTP,0000,0000,0000,,because this isn't
Dialogue: 0,0:08:57.30,0:08:58.97,*Default,NTP,0000,0000,0000,,again not a meaningful calculation
Dialogue: 0,0:08:58.97,0:09:00.67,*Default,NTP,0000,0000,0000,,like the previous circuit we did in the previous
Dialogue: 0,0:09:00.67,0:09:01.73,*Default,NTP,0000,0000,0000,,lecture eventually
Dialogue: 0,0:09:01.73,0:09:03.20,*Default,NTP,0000,0000,0000,,I'm going to do something more meaningful here
Dialogue: 0,0:09:03.20,0:09:05.50,*Default,NTP,0000,0000,0000,,but I want to take you through the four steps
Dialogue: 0,0:09:05.70,0:09:06.67,*Default,NTP,0000,0000,0000,,and then we're going to start doing
Dialogue: 0,0:09:06.67,0:09:07.87,*Default,NTP,0000,0000,0000,,meaningful computation
Dialogue: 0,0:09:08.37,0:09:10.67,*Default,NTP,0000,0000,0000,,so what is my output I'm determining
Dialogue: 0,0:09:10.67,0:09:12.60,*Default,NTP,0000,0000,0000,,I'm just telling you this is your job
Dialogue: 0,0:09:12.67,0:09:14.47,*Default,NTP,0000,0000,0000,,this is the nature of the computation
Dialogue: 0,0:09:14.60,0:09:18.47,*Default,NTP,0000,0000,0000,,is that c should be a one when a a 01
Dialogue: 0,0:09:19.33,0:09:21.67,*Default,NTP,0000,0000,0000,,and sorry when a is one and b is 0
Dialogue: 0,0:09:22.07,0:09:24.70,*Default,NTP,0000,0000,0000,,or when a is one and b is 0
Dialogue: 0,0:09:24.80,0:09:26.07,*Default,NTP,0000,0000,0000,,and it should be zero otherwise
Dialogue: 0,0:09:26.27,0:09:30.10,*Default,NTP,0000,0000,0000,,and d should be one only when a is one and b is one
Dialogue: 0,0:09:30.10,0:09:30.97,*Default,NTP,0000,0000,0000,,it's computation
Dialogue: 0,0:09:30.97,0:09:32.70,*Default,NTP,0000,0000,0000,,it doesn't really mean anything right now
Dialogue: 0,0:09:32.70,0:09:33.77,*Default,NTP,0000,0000,0000,,but again we'll see what
Dialogue: 0,0:09:33.77,0:09:35.70,*Default,NTP,0000,0000,0000,,meaningful computation is in a little bit
Dialogue: 0,0:09:36.13,0:09:37.53,*Default,NTP,0000,0000,0000,,so now I have a truth table
Dialogue: 0,0:09:38.00,0:09:39.47,*Default,NTP,0000,0000,0000,,I predetermine the rows
Dialogue: 0,0:09:39.47,0:09:40.37,*Default,NTP,0000,0000,0000,,that's super easy
Dialogue: 0,0:09:40.37,0:09:43.27,*Default,NTP,0000,0000,0000,,just enumerate all the possible instead of inputs
Dialogue: 0,0:09:43.30,0:09:45.37,*Default,NTP,0000,0000,0000,,and then you tell me what the computation is you want
Dialogue: 0,0:09:45.37,0:09:46.77,*Default,NTP,0000,0000,0000,,if you want to add two things
Dialogue: 0,0:09:46.77,0:09:48.93,*Default,NTP,0000,0000,0000,,your output has to have something to do with summation
Dialogue: 0,0:09:48.93,0:09:49.47,*Default,NTP,0000,0000,0000,,for example
Dialogue: 0,0:09:49.47,0:09:51.30,*Default,NTP,0000,0000,0000,,and we'll see examples of that in a few minutes
Dialogue: 0,0:09:51.67,0:09:53.70,*Default,NTP,0000,0000,0000,,so these are again are just arbitrary for now
Dialogue: 0,0:09:53.77,0:09:57.13,*Default,NTP,0000,0000,0000,,step two build sub expressions
Dialogue: 0,0:09:58.07,0:10:00.10,*Default,NTP,0000,0000,0000,,with and and not
Dialogue: 0,0:10:00.13,0:10:03.13,*Default,NTP,0000,0000,0000,,for each output column I have two output columns here
Dialogue: 0,0:10:03.13,0:10:04.33,*Default,NTP,0000,0000,0000,,this is really important
Dialogue: 0,0:10:04.57,0:10:06.07,*Default,NTP,0000,0000,0000,,you're gonna build a sub expression
Dialogue: 0,0:10:06.07,0:10:07.40,*Default,NTP,0000,0000,0000,,I'm gonna show you how to do it in a second
Dialogue: 0,0:10:07.40,0:10:10.87,*Default,NTP,0000,0000,0000,,and the only things you can use are and and not
Dialogue: 0,0:10:10.87,0:10:12.27,*Default,NTP,0000,0000,0000,,you can't use the oars yet
Dialogue: 0,0:10:12.27,0:10:14.50,*Default,NTP,0000,0000,0000,,and I'm gonna explain it a little bit why that is
Dialogue: 0,0:10:14.60,0:10:17.07,*Default,NTP,0000,0000,0000,,okay so how do you build those sub expressions
Dialogue: 0,0:10:17.37,0:10:18.33,*Default,NTP,0000,0000,0000,,all right so here's what we're gonna do
Dialogue: 0,0:10:18.33,0:10:20.30,*Default,NTP,0000,0000,0000,,let's do d because this is a little bit easier
Dialogue: 0,0:10:20.30,0:10:21.87,*Default,NTP,0000,0000,0000,,and then we'll go back and do c
Dialogue: 0,0:10:22.17,0:10:25.60,*Default,NTP,0000,0000,0000,,so for each output column
Dialogue: 0,0:10:25.93,0:10:29.50,*Default,NTP,0000,0000,0000,,we are going to go down and find where there's a one
Dialogue: 0,0:10:29.50,0:10:31.20,*Default,NTP,0000,0000,0000,,ah there's a one right there
Dialogue: 0,0:10:31.37,0:10:34.37,*Default,NTP,0000,0000,0000,,okay and then so d is going to be equal to
Dialogue: 0,0:10:34.37,0:10:38.00,*Default,NTP,0000,0000,0000,,now obviously d must have something to do with a and b
Dialogue: 0,0:10:38.37,0:10:39.67,*Default,NTP,0000,0000,0000,,because it's the output
Dialogue: 0,0:10:40.00,0:10:42.13,*Default,NTP,0000,0000,0000,,input rather is determining the output
Dialogue: 0,0:10:42.27,0:10:43.93,*Default,NTP,0000,0000,0000,,okay and so what we're going to do is
Dialogue: 0,0:10:43.93,0:10:44.80,*Default,NTP,0000,0000,0000,,we're going to say that
Dialogue: 0,0:10:44.80,0:10:46.47,*Default,NTP,0000,0000,0000,,d is equal to
Dialogue: 0,0:10:46.47,0:10:49.17,*Default,NTP,0000,0000,0000,,again I can only use and a knot so there's no knots yet
Dialogue: 0,0:10:49.27,0:10:51.73,*Default,NTP,0000,0000,0000,,is equal to a and b
Dialogue: 0,0:10:51.73,0:10:53.70,*Default,NTP,0000,0000,0000,,and the reason I'm doing that is because a has a one
Dialogue: 0,0:10:53.70,0:10:55.53,*Default,NTP,0000,0000,0000,,here and b has a one here
Dialogue: 0,0:10:55.70,0:10:57.60,*Default,NTP,0000,0000,0000,,okay so just logically
Dialogue: 0,0:10:57.60,0:10:58.27,*Default,NTP,0000,0000,0000,,what you're going to do is
Dialogue: 0,0:10:58.27,0:10:59.47,*Default,NTP,0000,0000,0000,,you're going to find the one
Dialogue: 0,0:10:59.57,0:11:01.87,*Default,NTP,0000,0000,0000,,you're going to go back into here
Dialogue: 0,0:11:01.87,0:11:03.47,*Default,NTP,0000,0000,0000,,and wherever you see a one
Dialogue: 0,0:11:03.47,0:11:05.13,*Default,NTP,0000,0000,0000,,you're going to use that variable
Dialogue: 0,0:11:05.70,0:11:07.40,*Default,NTP,0000,0000,0000,,when you have a zero you're going to nod it
Dialogue: 0,0:11:07.40,0:11:09.17,*Default,NTP,0000,0000,0000,,I'll show you an example of that in a minute
Dialogue: 0,0:11:09.17,0:11:10.97,*Default,NTP,0000,0000,0000,,and you're going to add the two together
Dialogue: 0,0:11:11.27,0:11:13.77,*Default,NTP,0000,0000,0000,,now let's ask ourselves why this makes sense
Dialogue: 0,0:11:13.87,0:11:14.87,*Default,NTP,0000,0000,0000,,alright let's see
Dialogue: 0,0:11:14.87,0:11:16.60,*Default,NTP,0000,0000,0000,,well first of all can we agree
Dialogue: 0,0:11:17.17,0:11:22.07,*Default,NTP,0000,0000,0000,,that column d is in fact the end of an b sure
Dialogue: 0,0:11:22.20,0:11:23.97,*Default,NTP,0000,0000,0000,,because what's the and
Dialogue: 0,0:11:24.27,0:11:26.47,*Default,NTP,0000,0000,0000,,the and is that when a and b are one
Dialogue: 0,0:11:26.80,0:11:30.00,*Default,NTP,0000,0000,0000,,the output is one and it's zero everywhere else
Dialogue: 0,0:11:30.20,0:11:32.13,*Default,NTP,0000,0000,0000,,okay so look what I'm doing here
Dialogue: 0,0:11:32.13,0:11:35.33,*Default,NTP,0000,0000,0000,,I'm saying that when a is one there it is right there
Dialogue: 0,0:11:35.33,0:11:36.97,*Default,NTP,0000,0000,0000,,and when b is one
Dialogue: 0,0:11:38.10,0:11:39.97,*Default,NTP,0000,0000,0000,,the output is one
Dialogue: 0,0:11:40.33,0:11:43.00,*Default,NTP,0000,0000,0000,,and notice that sort of for free
Dialogue: 0,0:11:43.07,0:11:45.87,*Default,NTP,0000,0000,0000,,I get all the other rows of that output
Dialogue: 0,0:11:46.10,0:11:47.27,*Default,NTP,0000,0000,0000,,because for all other
Dialogue: 0,0:11:47.60,0:11:49.00,*Default,NTP,0000,0000,0000,,instances of this
Dialogue: 0,0:11:49.07,0:11:51.80,*Default,NTP,0000,0000,0000,,when aa zero or b a zero or their bow zero
Dialogue: 0,0:11:51.87,0:11:55.10,*Default,NTP,0000,0000,0000,,I get a zero so this little expression here that's it
Dialogue: 0,0:11:55.10,0:11:56.07,*Default,NTP,0000,0000,0000,,this little and
Dialogue: 0,0:11:56.70,0:12:01.10,*Default,NTP,0000,0000,0000,,embodies that entire output for those two inputs
Dialogue: 0,0:12:01.17,0:12:01.97,*Default,NTP,0000,0000,0000,,okay
Dialogue: 0,0:12:02.07,0:12:04.30,*Default,NTP,0000,0000,0000,,so let's see another example that's a little bit like
Dialogue: 0,0:12:04.30,0:12:04.97,*Default,NTP,0000,0000,0000,,we'll do c
Dialogue: 0,0:12:04.97,0:12:07.80,*Default,NTP,0000,0000,0000,,and we'll see exactly where this is coming from it now
Dialogue: 0,0:12:08.37,0:12:09.97,*Default,NTP,0000,0000,0000,,all right so see we're gonna play the same game
Dialogue: 0,0:12:09.97,0:12:10.70,*Default,NTP,0000,0000,0000,,we're gonna roll down
Dialogue: 0,0:12:10.70,0:12:12.60,*Default,NTP,0000,0000,0000,,we're gonna see where do you see a one
Dialogue: 0,0:12:12.77,0:12:14.13,*Default,NTP,0000,0000,0000,,okay there it is right there
Dialogue: 0,0:12:14.30,0:12:15.87,*Default,NTP,0000,0000,0000,,and now I'm gonna build a sub expression
Dialogue: 0,0:12:15.87,0:12:18.17,*Default,NTP,0000,0000,0000,,and I can only use ants or not ands and knots
Dialogue: 0,0:12:18.17,0:12:20.50,*Default,NTP,0000,0000,0000,,okay so I'm gonna roll over to the input
Dialogue: 0,0:12:20.70,0:12:21.90,*Default,NTP,0000,0000,0000,,and what do I have
Dialogue: 0,0:12:21.97,0:12:25.17,*Default,NTP,0000,0000,0000,,I have a zero here so I'm going to knot that
Dialogue: 0,0:12:25.53,0:12:26.77,*Default,NTP,0000,0000,0000,,and then I have a one here
Dialogue: 0,0:12:26.77,0:12:28.33,*Default,NTP,0000,0000,0000,,so I'm going to just carry that over
Dialogue: 0,0:12:28.47,0:12:33.13,*Default,NTP,0000,0000,0000,,and this c is equal to not a and b
Dialogue: 0,0:12:33.13,0:12:34.90,*Default,NTP,0000,0000,0000,,so let's make sure we understand that
Dialogue: 0,0:12:35.27,0:12:41.17,*Default,NTP,0000,0000,0000,,alright so when a is zero what is the nod of a one
Dialogue: 0,0:12:41.60,0:12:42.90,*Default,NTP,0000,0000,0000,,when b is one
Dialogue: 0,0:12:43.53,0:12:47.37,*Default,NTP,0000,0000,0000,,b is one so the knot of zero and one is one
Dialogue: 0,0:12:47.47,0:12:49.60,*Default,NTP,0000,0000,0000,,sure that's that one right there
Dialogue: 0,0:12:49.97,0:12:52.33,*Default,NTP,0000,0000,0000,,now unlike this one here
Dialogue: 0,0:12:52.40,0:12:54.93,*Default,NTP,0000,0000,0000,,this little expression doesn't capture everything
Dialogue: 0,0:12:55.57,0:12:57.77,*Default,NTP,0000,0000,0000,,why the only time
Dialogue: 0,0:12:57.77,0:13:01.97,*Default,NTP,0000,0000,0000,,the only time when this expression is one is when
Dialogue: 0,0:13:02.30,0:13:04.20,*Default,NTP,0000,0000,0000,,when a is 0 and b is one
Dialogue: 0,0:13:04.20,0:13:05.27,*Default,NTP,0000,0000,0000,,I've captured that
Dialogue: 0,0:13:05.27,0:13:08.13,*Default,NTP,0000,0000,0000,,one row right here with this little sub expression
Dialogue: 0,0:13:08.57,0:13:10.67,*Default,NTP,0000,0000,0000,,but notice I have another one I have to capture
Dialogue: 0,0:13:10.67,0:13:14.27,*Default,NTP,0000,0000,0000,,I also care when a is one and b is 0
Dialogue: 0,0:13:14.37,0:13:15.70,*Default,NTP,0000,0000,0000,,my output should be one
Dialogue: 0,0:13:16.00,0:13:17.50,*Default,NTP,0000,0000,0000,,well so if I put a
Dialogue: 0,0:13:17.93,0:13:20.37,*Default,NTP,0000,0000,0000,,one into here that goes to a zero
Dialogue: 0,0:13:20.70,0:13:22.77,*Default,NTP,0000,0000,0000,,b goes to a zero that's not one
Dialogue: 0,0:13:22.77,0:13:25.90,*Default,NTP,0000,0000,0000,,so this little sub expression doesn't help me here
Dialogue: 0,0:13:26.13,0:13:27.33,*Default,NTP,0000,0000,0000,,it sort of helps me here
Dialogue: 0,0:13:27.33,0:13:28.33,*Default,NTP,0000,0000,0000,,we'll get back to that in a minute
Dialogue: 0,0:13:28.33,0:13:29.57,*Default,NTP,0000,0000,0000,,and sort of helps me here
Dialogue: 0,0:13:29.60,0:13:30.53,*Default,NTP,0000,0000,0000,,but it doesn't help me here
Dialogue: 0,0:13:30.53,0:13:32.60,*Default,NTP,0000,0000,0000,,I need another sub expression for there
Dialogue: 0,0:13:33.10,0:13:35.07,*Default,NTP,0000,0000,0000,,so now again we're going to go down c
Dialogue: 0,0:13:35.07,0:13:36.77,*Default,NTP,0000,0000,0000,,we've already captured that one sub expression
Dialogue: 0,0:13:36.77,0:13:38.50,*Default,NTP,0000,0000,0000,,let's capture the sub expression
Dialogue: 0,0:13:38.67,0:13:40.70,*Default,NTP,0000,0000,0000,,so now we go back to the input
Dialogue: 0,0:13:40.70,0:13:43.17,*Default,NTP,0000,0000,0000,,a is one so we just bring over a
Dialogue: 0,0:13:43.33,0:13:46.57,*Default,NTP,0000,0000,0000,,b is zero so we nod it again
Dialogue: 0,0:13:46.57,0:13:48.07,*Default,NTP,0000,0000,0000,,let's make sure we understand that
Dialogue: 0,0:13:48.20,0:13:53.47,*Default,NTP,0000,0000,0000,,when a is one and b is zero I get one and one
Dialogue: 0,0:13:53.47,0:13:55.13,*Default,NTP,0000,0000,0000,,so I get c is equal to one
Dialogue: 0,0:13:55.20,0:13:57.67,*Default,NTP,0000,0000,0000,,and notice again it's the nature of and
Dialogue: 0,0:13:58.20,0:14:01.40,*Default,NTP,0000,0000,0000,,and is going to be one if and only if
Dialogue: 0,0:14:02.10,0:14:05.20,*Default,NTP,0000,0000,0000,,a is one b is zero and this sub expression
Dialogue: 0,0:14:05.33,0:14:08.73,*Default,NTP,0000,0000,0000,,and in this sub expression a is zero and b is one
Dialogue: 0,0:14:08.77,0:14:10.67,*Default,NTP,0000,0000,0000,,and notice that's exactly what I want
Dialogue: 0,0:14:10.77,0:14:11.97,*Default,NTP,0000,0000,0000,,that's exactly what I want
Dialogue: 0,0:14:11.97,0:14:15.60,*Default,NTP,0000,0000,0000,,I want c to be one when a is zero b is one or
Dialogue: 0,0:14:16.90,0:14:19.30,*Default,NTP,0000,0000,0000,,a is one and b is zero
Dialogue: 0,0:14:19.40,0:14:22.90,*Default,NTP,0000,0000,0000,,so these two sub expressions capture those two rows
Dialogue: 0,0:14:22.90,0:14:24.70,*Default,NTP,0000,0000,0000,,of course I'm going to have to combine them
Dialogue: 0,0:14:24.80,0:14:26.07,*Default,NTP,0000,0000,0000,,I think you can sort of see what the
Dialogue: 0,0:14:26.07,0:14:26.93,*Default,NTP,0000,0000,0000,,how that's going to happen
Dialogue: 0,0:14:26.93,0:14:28.07,*Default,NTP,0000,0000,0000,,but we'll do in a minute
Dialogue: 0,0:14:28.27,0:14:31.37,*Default,NTP,0000,0000,0000,,but notice also that we're sort of getting this row
Dialogue: 0,0:14:31.47,0:14:33.10,*Default,NTP,0000,0000,0000,,and this row for free
Dialogue: 0,0:14:33.40,0:14:35.60,*Default,NTP,0000,0000,0000,,because for all other values of a
Dialogue: 0,0:14:35.87,0:14:36.67,*Default,NTP,0000,0000,0000,,so
Dialogue: 0,0:14:36.87,0:14:40.90,*Default,NTP,0000,0000,0000,,when a is 0 and b is 0 what is the sub expression zero
Dialogue: 0,0:14:40.97,0:14:42.70,*Default,NTP,0000,0000,0000,,what is the sub expression zero
Dialogue: 0,0:14:42.70,0:14:44.57,*Default,NTP,0000,0000,0000,,because that's a zero and that's a zero
Dialogue: 0,0:14:45.00,0:14:48.13,*Default,NTP,0000,0000,0000,,when a is one and b is one what's the sub expression
Dialogue: 0,0:14:48.13,0:14:49.60,*Default,NTP,0000,0000,0000,,well that goes to zero
Dialogue: 0,0:14:49.60,0:14:51.17,*Default,NTP,0000,0000,0000,,so the whole thing goes to zero
Dialogue: 0,0:14:51.27,0:14:53.97,*Default,NTP,0000,0000,0000,,and that goes to zero so the whole thing goes to zero
Dialogue: 0,0:14:54.20,0:14:57.10,*Default,NTP,0000,0000,0000,,so these two sub expressions sort of for free
Dialogue: 0,0:14:57.10,0:14:59.20,*Default,NTP,0000,0000,0000,,and because of the nature of the
Dialogue: 0,0:14:59.20,0:15:01.07,*Default,NTP,0000,0000,0000,,and give me those two
Dialogue: 0,0:15:01.07,0:15:03.37,*Default,NTP,0000,0000,0000,,zeros for the first row in the fourth row
Dialogue: 0,0:15:03.57,0:15:04.87,*Default,NTP,0000,0000,0000,,okay all right good
Dialogue: 0,0:15:04.87,0:15:08.33,*Default,NTP,0000,0000,0000,,so we've now in step two we've built sub expressions
Dialogue: 0,0:15:08.33,0:15:09.60,*Default,NTP,0000,0000,0000,,for each output column
Dialogue: 0,0:15:09.60,0:15:12.57,*Default,NTP,0000,0000,0000,,the d only needed one because there was only one here
Dialogue: 0,0:15:12.60,0:15:14.90,*Default,NTP,0000,0000,0000,,and the c needed two of them
Dialogue: 0,0:15:15.00,0:15:17.20,*Default,NTP,0000,0000,0000,,because there are two ones here
Dialogue: 0,0:15:18.10,0:15:21.70,*Default,NTP,0000,0000,0000,,now we're going to combine two at a time
Dialogue: 0,0:15:21.90,0:15:24.33,*Default,NTP,0000,0000,0000,,all the sub expressions with an ore
Dialogue: 0,0:15:24.33,0:15:24.60,*Default,NTP,0000,0000,0000,,I mean
Dialogue: 0,0:15:24.60,0:15:26.33,*Default,NTP,0000,0000,0000,,you knew the ores that were going to come into place
Dialogue: 0,0:15:26.33,0:15:28.10,*Default,NTP,0000,0000,0000,,so this is now step three
Dialogue: 0,0:15:28.20,0:15:30.37,*Default,NTP,0000,0000,0000,,step one is build the truth table
Dialogue: 0,0:15:30.40,0:15:32.37,*Default,NTP,0000,0000,0000,,step two is for each outpa column
Dialogue: 0,0:15:32.37,0:15:33.57,*Default,NTP,0000,0000,0000,,build the sub expression using
Dialogue: 0,0:15:33.57,0:15:36.93,*Default,NTP,0000,0000,0000,,and not only and step three says
Dialogue: 0,0:15:37.00,0:15:39.53,*Default,NTP,0000,0000,0000,,start to combine these things with an ore
Dialogue: 0,0:15:39.77,0:15:41.90,*Default,NTP,0000,0000,0000,,okay so what is c
Dialogue: 0,0:15:41.90,0:15:42.80,*Default,NTP,0000,0000,0000,,let's go back to this one
Dialogue: 0,0:15:42.80,0:15:44.67,*Default,NTP,0000,0000,0000,,well we have one sub expression here
Dialogue: 0,0:15:44.67,0:15:46.50,*Default,NTP,0000,0000,0000,,which was not a and b
Dialogue: 0,0:15:46.67,0:15:48.60,*Default,NTP,0000,0000,0000,,we had another sub expression here
Dialogue: 0,0:15:48.60,0:15:50.37,*Default,NTP,0000,0000,0000,,which was a and not b
Dialogue: 0,0:15:50.87,0:15:51.90,*Default,NTP,0000,0000,0000,,and what is c
Dialogue: 0,0:15:52.10,0:15:54.80,*Default,NTP,0000,0000,0000,,I want c to be one when what is true
Dialogue: 0,0:15:54.87,0:15:58.37,*Default,NTP,0000,0000,0000,,when this is one or there it is right there
Dialogue: 0,0:15:58.40,0:16:02.13,*Default,NTP,0000,0000,0000,,this is one so I simply or those two sub expressions
Dialogue: 0,0:16:02.17,0:16:02.87,*Default,NTP,0000,0000,0000,,and now
Dialogue: 0,0:16:02.87,0:16:06.00,*Default,NTP,0000,0000,0000,,this expression right here this full expression of the
Dialogue: 0,0:16:06.73,0:16:07.87,*Default,NTP,0000,0000,0000,,sub expressions
Dialogue: 0,0:16:08.00,0:16:11.60,*Default,NTP,0000,0000,0000,,and the ore of them captures that entire row for sea
Dialogue: 0,0:16:11.97,0:16:13.50,*Default,NTP,0000,0000,0000,,because we've just convinced ourselves
Dialogue: 0,0:16:13.50,0:16:15.33,*Default,NTP,0000,0000,0000,,at the only time this is one
Dialogue: 0,0:16:15.40,0:16:19.00,*Default,NTP,0000,0000,0000,,is row two the only time this is one is row three
Dialogue: 0,0:16:19.07,0:16:21.00,*Default,NTP,0000,0000,0000,,and all other times at zero
Dialogue: 0,0:16:21.00,0:16:22.80,*Default,NTP,0000,0000,0000,,so if I order those two together
Dialogue: 0,0:16:22.93,0:16:24.87,*Default,NTP,0000,0000,0000,,I get a one in these two cases
Dialogue: 0,0:16:24.87,0:16:26.20,*Default,NTP,0000,0000,0000,,and I got a zero elsewhere
Dialogue: 0,0:16:26.20,0:16:28.00,*Default,NTP,0000,0000,0000,,so now I now have a sub expression
Dialogue: 0,0:16:28.00,0:16:29.47,*Default,NTP,0000,0000,0000,,I have an expression rather
Dialogue: 0,0:16:29.60,0:16:32.17,*Default,NTP,0000,0000,0000,,that embodies the output c
Dialogue: 0,0:16:32.37,0:16:35.40,*Default,NTP,0000,0000,0000,,for all possible inputs a and b
Dialogue: 0,0:16:36.00,0:16:38.13,*Default,NTP,0000,0000,0000,,okay so what does the combination for d look like
Dialogue: 0,0:16:38.13,0:16:39.57,*Default,NTP,0000,0000,0000,,while there was only one sub expression
Dialogue: 0,0:16:39.57,0:16:41.00,*Default,NTP,0000,0000,0000,,so there's no orring to do
Dialogue: 0,0:16:41.27,0:16:42.70,*Default,NTP,0000,0000,0000,,this little sub expression
Dialogue: 0,0:16:42.70,0:16:44.47,*Default,NTP,0000,0000,0000,,now let me just call it an expression
Dialogue: 0,0:16:44.53,0:16:48.27,*Default,NTP,0000,0000,0000,,embodies the entire column for how I get d
Dialogue: 0,0:16:48.60,0:16:51.50,*Default,NTP,0000,0000,0000,,from a and b and notice it's just an end right
Dialogue: 0,0:16:51.50,0:16:53.50,*Default,NTP,0000,0000,0000,,because that's exactly what that column is
Dialogue: 0,0:16:53.90,0:16:55.13,*Default,NTP,0000,0000,0000,,okay step three
Dialogue: 0,0:16:55.20,0:16:56.50,*Default,NTP,0000,0000,0000,,now step four
Dialogue: 0,0:16:56.77,0:16:57.90,*Default,NTP,0000,0000,0000,,draw a circuit
Dialogue: 0,0:16:58.20,0:16:58.97,*Default,NTP,0000,0000,0000,,well what does that mean
Dialogue: 0,0:16:58.97,0:17:01.10,*Default,NTP,0000,0000,0000,,well what do I have at this point
Dialogue: 0,0:17:01.27,0:17:03.00,*Default,NTP,0000,0000,0000,,I have a truth table
Dialogue: 0,0:17:03.37,0:17:06.07,*Default,NTP,0000,0000,0000,,I have boolean expressions and or a knot
Dialogue: 0,0:17:06.40,0:17:10.80,*Default,NTP,0000,0000,0000,,that tell me how to transform my input to my output
Dialogue: 0,0:17:10.80,0:17:14.33,*Default,NTP,0000,0000,0000,,using what logical or logical not
Dialogue: 0,0:17:14.57,0:17:16.87,*Default,NTP,0000,0000,0000,,well if I can do things with and or not
Dialogue: 0,0:17:16.87,0:17:17.80,*Default,NTP,0000,0000,0000,,I can draw a circuit
Dialogue: 0,0:17:17.80,0:17:19.50,*Default,NTP,0000,0000,0000,,because that's exactly what a circuit is
Dialogue: 0,0:17:19.50,0:17:20.57,*Default,NTP,0000,0000,0000,,all right so let's draw the circuit
Dialogue: 0,0:17:20.57,0:17:22.20,*Default,NTP,0000,0000,0000,,this is now the fun part this is the easy part
Dialogue: 0,0:17:22.20,0:17:24.10,*Default,NTP,0000,0000,0000,,you're done so typically
Dialogue: 0,0:17:24.10,0:17:26.27,*Default,NTP,0000,0000,0000,,not always but typically we'll put the inputs on
Dialogue: 0,0:17:26.33,0:17:28.27,*Default,NTP,0000,0000,0000,,on the left sometimes we put them at the bottom
Dialogue: 0,0:17:28.27,0:17:30.67,*Default,NTP,0000,0000,0000,,running upwards when the circuits get to complicated
Dialogue: 0,0:17:30.87,0:17:32.40,*Default,NTP,0000,0000,0000,,and output is on the right
Dialogue: 0,0:17:32.47,0:17:34.73,*Default,NTP,0000,0000,0000,,so there's gonna be two inputs a and b
Dialogue: 0,0:17:34.73,0:17:36.67,*Default,NTP,0000,0000,0000,,those are the four rows that you saw on the truth table
Dialogue: 0,0:17:36.67,0:17:37.97,*Default,NTP,0000,0000,0000,,there's gonna be two outputs
Dialogue: 0,0:17:37.97,0:17:39.77,*Default,NTP,0000,0000,0000,,c is gonna come out up here of course
Dialogue: 0,0:17:39.87,0:17:40.77,*Default,NTP,0000,0000,0000,,and d is down here
Dialogue: 0,0:17:40.77,0:17:43.00,*Default,NTP,0000,0000,0000,,so let me do d first because that's the easy one
Dialogue: 0,0:17:43.50,0:17:46.17,*Default,NTP,0000,0000,0000,,so what is d it's the and of a and b
Dialogue: 0,0:17:46.33,0:17:49.47,*Default,NTP,0000,0000,0000,,so I take a I shove it into an angate
Dialogue: 0,0:17:49.53,0:17:50.57,*Default,NTP,0000,0000,0000,,don't forget the dot there
Dialogue: 0,0:17:50.57,0:17:51.97,*Default,NTP,0000,0000,0000,,to remind yourself that's an angate
Dialogue: 0,0:17:51.97,0:17:53.50,*Default,NTP,0000,0000,0000,,if your drawing is not very good
Dialogue: 0,0:17:53.77,0:17:55.50,*Default,NTP,0000,0000,0000,,I take the b and I shove it in here
Dialogue: 0,0:17:55.50,0:17:58.17,*Default,NTP,0000,0000,0000,,and I like to write the expressions here because
Dialogue: 0,0:17:58.17,0:17:59.37,*Default,NTP,0000,0000,0000,,in the early days of this cause
Dialogue: 0,0:17:59.37,0:18:01.07,*Default,NTP,0000,0000,0000,,it will remind me what I'm doing
Dialogue: 0,0:18:01.47,0:18:05.00,*Default,NTP,0000,0000,0000,,and then I drive that output to there and I get d
Dialogue: 0,0:18:05.00,0:18:07.73,*Default,NTP,0000,0000,0000,,so that's a really simple circuit with only one and
Dialogue: 0,0:18:07.73,0:18:08.53,*Default,NTP,0000,0000,0000,,gate
Dialogue: 0,0:18:08.80,0:18:11.10,*Default,NTP,0000,0000,0000,,all right so how do we do the c
Dialogue: 0,0:18:11.57,0:18:14.70,*Default,NTP,0000,0000,0000,,well the c is the result of oaring two things
Dialogue: 0,0:18:14.90,0:18:16.93,*Default,NTP,0000,0000,0000,,that little sub expression right there
Dialogue: 0,0:18:16.97,0:18:19.73,*Default,NTP,0000,0000,0000,,and that little sub expression right there not a and b
Dialogue: 0,0:18:19.97,0:18:23.27,*Default,NTP,0000,0000,0000,,a and not b and there's my c are gonna or there
Dialogue: 0,0:18:23.57,0:18:25.37,*Default,NTP,0000,0000,0000,,all right so here's my and gate
Dialogue: 0,0:18:25.37,0:18:26.77,*Default,NTP,0000,0000,0000,,and I'm going to shove in
Dialogue: 0,0:18:27.27,0:18:29.70,*Default,NTP,0000,0000,0000,,I have to bring in not a there's my not gate
Dialogue: 0,0:18:29.73,0:18:31.13,*Default,NTP,0000,0000,0000,,I have to bring in not b
Dialogue: 0,0:18:31.13,0:18:32.07,*Default,NTP,0000,0000,0000,,there's my not gate
Dialogue: 0,0:18:32.07,0:18:32.77,*Default,NTP,0000,0000,0000,,and then of course
Dialogue: 0,0:18:32.77,0:18:35.40,*Default,NTP,0000,0000,0000,,a will come into here and b will come into here
Dialogue: 0,0:18:35.47,0:18:38.07,*Default,NTP,0000,0000,0000,,so we just got to feed them in from the inputs here
Dialogue: 0,0:18:38.07,0:18:39.73,*Default,NTP,0000,0000,0000,,so let me go ahead and do that now
Dialogue: 0,0:18:40.17,0:18:41.40,*Default,NTP,0000,0000,0000,,all right let's follow the line
Dialogue: 0,0:18:41.40,0:18:43.30,*Default,NTP,0000,0000,0000,,so notice that whenever I buy
Dialogue: 0,0:18:43.30,0:18:45.10,*Default,NTP,0000,0000,0000,,for kate or split off the signal
Dialogue: 0,0:18:45.10,0:18:46.93,*Default,NTP,0000,0000,0000,,I'm going to draw a solid dot
Dialogue: 0,0:18:47.27,0:18:49.60,*Default,NTP,0000,0000,0000,,to tell myself that the signal a
Dialogue: 0,0:18:49.73,0:18:52.50,*Default,NTP,0000,0000,0000,,is going into this and gate down here
Dialogue: 0,0:18:52.57,0:18:54.97,*Default,NTP,0000,0000,0000,,and it's going to go into this knot gate
Dialogue: 0,0:18:54.97,0:18:56.30,*Default,NTP,0000,0000,0000,,and into this and gate
Dialogue: 0,0:18:56.37,0:18:59.13,*Default,NTP,0000,0000,0000,,okay so there's the a going in
Dialogue: 0,0:18:59.90,0:19:02.20,*Default,NTP,0000,0000,0000,,let's see where do I get the b from
Dialogue: 0,0:19:02.37,0:19:03.17,*Default,NTP,0000,0000,0000,,here it is right here
Dialogue: 0,0:19:03.17,0:19:04.47,*Default,NTP,0000,0000,0000,,okay so here's b
Dialogue: 0,0:19:04.87,0:19:05.97,*Default,NTP,0000,0000,0000,,I'm going to bifurcate
Dialogue: 0,0:19:05.97,0:19:08.87,*Default,NTP,0000,0000,0000,,and now notice I have an open circle here
Dialogue: 0,0:19:09.10,0:19:09.97,*Default,NTP,0000,0000,0000,,that's to tell me that
Dialogue: 0,0:19:09.97,0:19:12.53,*Default,NTP,0000,0000,0000,,two wires are just crossing on top of each other
Dialogue: 0,0:19:12.67,0:19:14.70,*Default,NTP,0000,0000,0000,,so I'm not taking the input here
Dialogue: 0,0:19:14.70,0:19:16.33,*Default,NTP,0000,0000,0000,,I'm just going to cross the wire
Dialogue: 0,0:19:16.37,0:19:17.27,*Default,NTP,0000,0000,0000,,I'm going to bring it up
Dialogue: 0,0:19:17.27,0:19:19.17,*Default,NTP,0000,0000,0000,,I'm going to bring it up I'm going to bring it over
Dialogue: 0,0:19:19.27,0:19:21.57,*Default,NTP,0000,0000,0000,,and now I have not a and b
Dialogue: 0,0:19:21.93,0:19:23.67,*Default,NTP,0000,0000,0000,,alright same thing for the next one
Dialogue: 0,0:19:23.77,0:19:24.97,*Default,NTP,0000,0000,0000,,a's gonna come in
Dialogue: 0,0:19:24.97,0:19:26.10,*Default,NTP,0000,0000,0000,,we're gonna split the signal
Dialogue: 0,0:19:26.10,0:19:28.17,*Default,NTP,0000,0000,0000,,I'm crossing there's an open circle
Dialogue: 0,0:19:28.20,0:19:29.73,*Default,NTP,0000,0000,0000,,and I go into the and gate
Dialogue: 0,0:19:29.90,0:19:31.87,*Default,NTP,0000,0000,0000,,and then of course there's the b again
Dialogue: 0,0:19:31.87,0:19:33.80,*Default,NTP,0000,0000,0000,,I'm gonna peel off the signal
Dialogue: 0,0:19:33.80,0:19:35.47,*Default,NTP,0000,0000,0000,,I'm gonna shove it into a knot gate
Dialogue: 0,0:19:35.47,0:19:37.17,*Default,NTP,0000,0000,0000,,I'm gonna shove it into the and gate
Dialogue: 0,0:19:37.30,0:19:38.17,*Default,NTP,0000,0000,0000,,and then it's gonna go
Dialogue: 0,0:19:38.17,0:19:40.53,*Default,NTP,0000,0000,0000,,those two are gonna go into the ore and there's my c
Dialogue: 0,0:19:40.97,0:19:42.47,*Default,NTP,0000,0000,0000,,so nothing complicated
Dialogue: 0,0:19:42.47,0:19:42.93,*Default,NTP,0000,0000,0000,,you can see that
Dialogue: 0,0:19:42.93,0:19:44.93,*Default,NTP,0000,0000,0000,,the wires can sometimes get a little complicated
Dialogue: 0,0:19:44.93,0:19:45.80,*Default,NTP,0000,0000,0000,,and you've got to think
Dialogue: 0,0:19:45.80,0:19:47.73,*Default,NTP,0000,0000,0000,,how you want to lay these circuits out
Dialogue: 0,0:19:48.20,0:19:51.10,*Default,NTP,0000,0000,0000,,so usually I sometimes like to start at the back
Dialogue: 0,0:19:51.50,0:19:52.77,*Default,NTP,0000,0000,0000,,then work my way this way
Dialogue: 0,0:19:52.77,0:19:54.80,*Default,NTP,0000,0000,0000,,because I know that there's going to be an orgate here
Dialogue: 0,0:19:54.80,0:19:57.33,*Default,NTP,0000,0000,0000,,and then I feed everything in moving backwards
Dialogue: 0,0:19:58.20,0:19:59.27,*Default,NTP,0000,0000,0000,,okay good
Dialogue: 0,0:19:59.50,0:20:02.33,*Default,NTP,0000,0000,0000,,so there are the four steps for designing a circuit
Dialogue: 0,0:20:02.33,0:20:04.30,*Default,NTP,0000,0000,0000,,again we haven't done anything meaningful
Dialogue: 0,0:20:04.40,0:20:05.97,*Default,NTP,0000,0000,0000,,in terms of actual computation
Dialogue: 0,0:20:05.97,0:20:07.30,*Default,NTP,0000,0000,0000,,that's going to come next
Dialogue: 0,0:20:07.33,0:20:09.77,*Default,NTP,0000,0000,0000,,but let's go ahead and just review the four steps
Dialogue: 0,0:20:09.97,0:20:11.00,*Default,NTP,0000,0000,0000,,step one
Dialogue: 0,0:20:11.37,0:20:12.97,*Default,NTP,0000,0000,0000,,first of all figure out where your input outputs are
Dialogue: 0,0:20:12.97,0:20:14.20,*Default,NTP,0000,0000,0000,,that's probably step zero
Dialogue: 0,0:20:14.20,0:20:15.50,*Default,NTP,0000,0000,0000,,tell me what you want to do
Dialogue: 0,0:20:15.53,0:20:16.93,*Default,NTP,0000,0000,0000,,input output so
Dialogue: 0,0:20:16.93,0:20:18.57,*Default,NTP,0000,0000,0000,,build a truth table for all
Dialogue: 0,0:20:18.57,0:20:20.70,*Default,NTP,0000,0000,0000,,possible input output values
Dialogue: 0,0:20:20.70,0:20:21.67,*Default,NTP,0000,0000,0000,,what does that mean
Dialogue: 0,0:20:22.00,0:20:23.40,*Default,NTP,0000,0000,0000,,if I have n inputs
Dialogue: 0,0:20:23.40,0:20:26.77,*Default,NTP,0000,0000,0000,,I have two to the n rows that enumerate every
Dialogue: 0,0:20:26.77,0:20:29.73,*Default,NTP,0000,0000,0000,,single possible set of inputs
Dialogue: 0,0:20:29.77,0:20:31.80,*Default,NTP,0000,0000,0000,,so the easiest way to do that is just start
Dialogue: 0,0:20:31.80,0:20:33.53,*Default,NTP,0000,0000,0000,,counting in binary from zero
Dialogue: 0,0:20:33.87,0:20:40.73,*Default,NTP,0000,0000,0000,,so if it's three inputs I do 0 0 0 0 1 0 1 0 0 1 1 etc
Dialogue: 0,0:20:40.73,0:20:43.07,*Default,NTP,0000,0000,0000,,so you count and you should always have two to the end
Dialogue: 0,0:20:43.73,0:20:45.57,*Default,NTP,0000,0000,0000,,basically from zero to two the end minus one
Dialogue: 0,0:20:45.57,0:20:47.07,*Default,NTP,0000,0000,0000,,if you convert everything into
Dialogue: 0,0:20:47.47,0:20:49.33,*Default,NTP,0000,0000,0000,,base 10 that's step one
Dialogue: 0,0:20:49.57,0:20:50.70,*Default,NTP,0000,0000,0000,,tell me what the output is
Dialogue: 0,0:20:50.70,0:20:52.30,*Default,NTP,0000,0000,0000,,what is the nature of your computation
Dialogue: 0,0:20:52.30,0:20:54.10,*Default,NTP,0000,0000,0000,,we'll see a bunch of examples of that in
Dialogue: 0,0:20:54.10,0:20:55.60,*Default,NTP,0000,0000,0000,,the next set of lectures
Dialogue: 0,0:20:56.10,0:20:57.60,*Default,NTP,0000,0000,0000,,two for each
Dialogue: 0,0:20:57.60,0:21:00.30,*Default,NTP,0000,0000,0000,,and notice that each output is separate from each other
Dialogue: 0,0:21:00.40,0:21:01.67,*Default,NTP,0000,0000,0000,,in that previous example
Dialogue: 0,0:21:01.67,0:21:03.50,*Default,NTP,0000,0000,0000,,d and c don't care about each other
Dialogue: 0,0:21:03.50,0:21:04.10,*Default,NTP,0000,0000,0000,,they're just separate
Dialogue: 0,0:21:04.10,0:21:05.53,*Default,NTP,0000,0000,0000,,they're completely separate in the true table
Dialogue: 0,0:21:05.53,0:21:07.53,*Default,NTP,0000,0000,0000,,so for each column
Dialogue: 0,0:21:07.73,0:21:12.00,*Default,NTP,0000,0000,0000,,build a sub expression using only and a knot
Dialogue: 0,0:21:12.00,0:21:13.47,*Default,NTP,0000,0000,0000,,no oars right now
Dialogue: 0,0:21:13.57,0:21:14.57,*Default,NTP,0000,0000,0000,,so how do you do that
Dialogue: 0,0:21:14.73,0:21:15.90,*Default,NTP,0000,0000,0000,,find the ones
Dialogue: 0,0:21:15.97,0:21:19.40,*Default,NTP,0000,0000,0000,,go back to the input and everything together
Dialogue: 0,0:21:19.47,0:21:20.87,*Default,NTP,0000,0000,0000,,and if it's a zero
Dialogue: 0,0:21:20.93,0:21:22.73,*Default,NTP,0000,0000,0000,,it's a value of one you and it together
Dialogue: 0,0:21:22.73,0:21:24.80,*Default,NTP,0000,0000,0000,,and if it's value of zero you nod it
Dialogue: 0,0:21:24.93,0:21:26.20,*Default,NTP,0000,0000,0000,,and when you do that
Dialogue: 0,0:21:26.20,0:21:28.10,*Default,NTP,0000,0000,0000,,you get something that gives you a one
Dialogue: 0,0:21:28.33,0:21:31.07,*Default,NTP,0000,0000,0000,,for only that set of inputs
Dialogue: 0,0:21:31.10,0:21:34.37,*Default,NTP,0000,0000,0000,,and then in step three by ordering all of those
Dialogue: 0,0:21:34.70,0:21:35.97,*Default,NTP,0000,0000,0000,,expressions together
Dialogue: 0,0:21:36.10,0:21:39.10,*Default,NTP,0000,0000,0000,,I then get the entire column wherever there is a one
Dialogue: 0,0:21:39.13,0:21:42.07,*Default,NTP,0000,0000,0000,,and by design there is a zero everywhere else
Dialogue: 0,0:21:42.40,0:21:46.33,*Default,NTP,0000,0000,0000,,now I have an expression for each output column
Dialogue: 0,0:21:46.40,0:21:50.17,*Default,NTP,0000,0000,0000,,how do I transform my input to my output
Dialogue: 0,0:21:50.17,0:21:52.20,*Default,NTP,0000,0000,0000,,through a series of and or or not
Dialogue: 0,0:21:52.30,0:21:54.13,*Default,NTP,0000,0000,0000,,and now I simply draw the diagram
Dialogue: 0,0:21:54.13,0:21:55.33,*Default,NTP,0000,0000,0000,,and there you have to get a little bit of
Dialogue: 0,0:21:55.33,0:21:57.07,*Default,NTP,0000,0000,0000,,practice to figure out where to draw things
Dialogue: 0,0:21:57.07,0:21:58.90,*Default,NTP,0000,0000,0000,,but we'll do a bunch of examples of that
Dialogue: 0,0:21:59.00,0:22:00.27,*Default,NTP,0000,0000,0000,,to see what that looks like
Dialogue: 0,0:22:00.57,0:22:03.70,*Default,NTP,0000,0000,0000,,good four simple steps for doing basic circuit design
Dialogue: 0,0:22:03.80,0:22:05.70,*Default,NTP,0000,0000,0000,,and now the only piece that's missing is
Dialogue: 0,0:22:05.70,0:22:07.60,*Default,NTP,0000,0000,0000,,what does meaningful computation look like
Dialogue: 0,0:22:07.60,0:22:08.80,*Default,NTP,0000,0000,0000,,and that's what we're going to do next
Dialogue: 0,0:22:08.80,0:22:10.13,*Default,NTP,0000,0000,0000,,so we'll see you in a few minutes
Dialogue: 0,0:22:12.07,0:22:14.50,*Default,NTP,0000,0000,0000,,we're not ready to do our first meaningful computation
Dialogue: 0,0:22:14.50,0:22:16.17,*Default,NTP,0000,0000,0000,,we have now all the infrastructure
Dialogue: 0,0:22:16.17,0:22:18.97,*Default,NTP,0000,0000,0000,,we know what gates are we know what circuits are
Dialogue: 0,0:22:19.00,0:22:21.13,*Default,NTP,0000,0000,0000,,we know how to go from a tooth table
Dialogue: 0,0:22:21.57,0:22:26.07,*Default,NTP,0000,0000,0000,,input output sub expressions expressions draw circuit
Dialogue: 0,0:22:26.07,0:22:27.77,*Default,NTP,0000,0000,0000,,okay so now let's actually build
Dialogue: 0,0:22:29.37,0:22:32.80,*Default,NTP,0000,0000,0000,,small but at least meaningful computation
Dialogue: 0,0:22:32.93,0:22:34.97,*Default,NTP,0000,0000,0000,,so we're going to build what's called a one
Dialogue: 0,0:22:34.97,0:22:36.67,*Default,NTP,0000,0000,0000,,bit compare for equality
Dialogue: 0,0:22:36.67,0:22:40.87,*Default,NTP,0000,0000,0000,,a ce circuit so what do I mean first of all by one bid
Dialogue: 0,0:22:40.90,0:22:42.77,*Default,NTP,0000,0000,0000,,I mean I have my inputs r
Dialogue: 0,0:22:43.07,0:22:46.93,*Default,NTP,0000,0000,0000,,a and b which are each a single bit either zero or one
Dialogue: 0,0:22:47.07,0:22:48.80,*Default,NTP,0000,0000,0000,,a four bid compare for equality
Dialogue: 0,0:22:48.80,0:22:50.10,*Default,NTP,0000,0000,0000,,which we'll do in a little bit
Dialogue: 0,0:22:50.13,0:22:52.07,*Default,NTP,0000,0000,0000,,would be that I have a is
Dialogue: 0,0:22:52.47,0:22:56.20,*Default,NTP,0000,0000,0000,,0 1 1 0 and b for examples 1 1 0 0
Dialogue: 0,0:22:56.50,0:22:58.10,*Default,NTP,0000,0000,0000,,and all I want to do is ask
Dialogue: 0,0:22:58.10,0:23:01.30,*Default,NTP,0000,0000,0000,,are these two one bit values a and b
Dialogue: 0,0:23:01.30,0:23:03.07,*Default,NTP,0000,0000,0000,,equal or not
Dialogue: 0,0:23:03.37,0:23:06.67,*Default,NTP,0000,0000,0000,,and so here's my little pseudo code for the computation
Dialogue: 0,0:23:06.80,0:23:09.80,*Default,NTP,0000,0000,0000,,if a and b are equal then return one
Dialogue: 0,0:23:09.90,0:23:11.33,*Default,NTP,0000,0000,0000,,otherwise return zero
Dialogue: 0,0:23:11.33,0:23:12.73,*Default,NTP,0000,0000,0000,,notice everything's binary
Dialogue: 0,0:23:12.77,0:23:14.53,*Default,NTP,0000,0000,0000,,a and b can either be zero or one
Dialogue: 0,0:23:14.53,0:23:16.40,*Default,NTP,0000,0000,0000,,because everything's in binary representation
Dialogue: 0,0:23:16.47,0:23:18.67,*Default,NTP,0000,0000,0000,,and my oppot is either a one or 0
Dialogue: 0,0:23:18.73,0:23:21.70,*Default,NTP,0000,0000,0000,,depending on if those two bits are equal or not
Dialogue: 0,0:23:21.80,0:23:23.07,*Default,NTP,0000,0000,0000,,so pretty straightforward
Dialogue: 0,0:23:23.20,0:23:24.80,*Default,NTP,0000,0000,0000,,so now let's start turning the crank
Dialogue: 0,0:23:24.80,0:23:27.50,*Default,NTP,0000,0000,0000,,let's figure out how to design a circuit that does this
Dialogue: 0,0:23:27.80,0:23:29.20,*Default,NTP,0000,0000,0000,,so step one is what
Dialogue: 0,0:23:29.27,0:23:30.37,*Default,NTP,0000,0000,0000,,build a truth table
Dialogue: 0,0:23:30.97,0:23:34.80,*Default,NTP,0000,0000,0000,,what are the first two columns of the two table
Dialogue: 0,0:23:34.80,0:23:36.07,*Default,NTP,0000,0000,0000,,they are my inputs
Dialogue: 0,0:23:36.07,0:23:40.33,*Default,NTP,0000,0000,0000,,I have two one bit inputs a and b
Dialogue: 0,0:23:40.53,0:23:42.70,*Default,NTP,0000,0000,0000,,and I have a single output c
Dialogue: 0,0:23:42.87,0:23:44.00,*Default,NTP,0000,0000,0000,,which is going to be equal to
Dialogue: 0,0:23:44.00,0:23:45.93,*Default,NTP,0000,0000,0000,,one when the two bits are equal
Dialogue: 0,0:23:45.93,0:23:47.07,*Default,NTP,0000,0000,0000,,and zero otherwise
Dialogue: 0,0:23:47.47,0:23:49.27,*Default,NTP,0000,0000,0000,,okay so the first part of this is easy
Dialogue: 0,0:23:49.37,0:23:52.30,*Default,NTP,0000,0000,0000,,simply enumerate all possible set of inputs
Dialogue: 0,0:23:52.30,0:23:54.20,*Default,NTP,0000,0000,0000,,0 0 1 1 0 1 1
Dialogue: 0,0:23:54.20,0:23:56.07,*Default,NTP,0000,0000,0000,,and you should do it in this order by the way
Dialogue: 0,0:23:56.13,0:23:57.87,*Default,NTP,0000,0000,0000,,because it makes sure that you don't miss anything
Dialogue: 0,0:23:57.87,0:23:58.97,*Default,NTP,0000,0000,0000,,and it's just a good discipline
Dialogue: 0,0:23:58.97,0:24:00.60,*Default,NTP,0000,0000,0000,,and it's the way everybody else does it
Dialogue: 0,0:24:00.70,0:24:01.90,*Default,NTP,0000,0000,0000,,so the inputs are trivial
Dialogue: 0,0:24:01.90,0:24:03.27,*Default,NTP,0000,0000,0000,,just count in binary
Dialogue: 0,0:24:03.33,0:24:06.13,*Default,NTP,0000,0000,0000,,from zero to two to the un minus one
Dialogue: 0,0:24:06.57,0:24:07.87,*Default,NTP,0000,0000,0000,,now you gotta tell me what the output is
Dialogue: 0,0:24:07.87,0:24:08.80,*Default,NTP,0000,0000,0000,,so this is the work
Dialogue: 0,0:24:08.80,0:24:10.73,*Default,NTP,0000,0000,0000,,tell me what you want to compute
Dialogue: 0,0:24:10.97,0:24:11.87,*Default,NTP,0000,0000,0000,,what do I want to compute
Dialogue: 0,0:24:11.87,0:24:13.47,*Default,NTP,0000,0000,0000,,let's go back to the previous slide
Dialogue: 0,0:24:13.80,0:24:14.70,*Default,NTP,0000,0000,0000,,I said
Dialogue: 0,0:24:14.80,0:24:18.17,*Default,NTP,0000,0000,0000,,I want this to be a one when these two bits are equal
Dialogue: 0,0:24:18.17,0:24:19.33,*Default,NTP,0000,0000,0000,,and zero otherwise
Dialogue: 0,0:24:19.47,0:24:23.10,*Default,NTP,0000,0000,0000,,all right so here they're equal not equal not equal
Dialogue: 0,0:24:23.13,0:24:25.80,*Default,NTP,0000,0000,0000,,not equal so now I know what my output is
Dialogue: 0,0:24:26.10,0:24:27.73,*Default,NTP,0000,0000,0000,,it's a one in the first row
Dialogue: 0,0:24:27.97,0:24:30.13,*Default,NTP,0000,0000,0000,,zero zero it's a one in the last row
Dialogue: 0,0:24:30.13,0:24:31.70,*Default,NTP,0000,0000,0000,,one one and it's a zero otherwise
Dialogue: 0,0:24:31.70,0:24:33.57,*Default,NTP,0000,0000,0000,,so this is now a meaningful computation
Dialogue: 0,0:24:33.57,0:24:35.73,*Default,NTP,0000,0000,0000,,it's talent simple but meaningful
Dialogue: 0,0:24:35.73,0:24:38.20,*Default,NTP,0000,0000,0000,,it's telling me if these two bits are equal or not
Dialogue: 0,0:24:38.50,0:24:39.57,*Default,NTP,0000,0000,0000,,okay good
Dialogue: 0,0:24:39.57,0:24:42.70,*Default,NTP,0000,0000,0000,,we've done step one of our four step circuit design
Dialogue: 0,0:24:42.70,0:24:44.07,*Default,NTP,0000,0000,0000,,let's do step two
Dialogue: 0,0:24:44.40,0:24:46.67,*Default,NTP,0000,0000,0000,,what a step two say to do is to build
Dialogue: 0,0:24:46.77,0:24:49.93,*Default,NTP,0000,0000,0000,,for each output column there's only one output now
Dialogue: 0,0:24:50.07,0:24:51.37,*Default,NTP,0000,0000,0000,,a sub expression
Dialogue: 0,0:24:51.37,0:24:53.33,*Default,NTP,0000,0000,0000,,okay so let me remind you how we do that
Dialogue: 0,0:24:53.47,0:24:55.07,*Default,NTP,0000,0000,0000,,we isolate where there's ones
Dialogue: 0,0:24:55.07,0:24:58.70,*Default,NTP,0000,0000,0000,,we go figure out what is the combination of and and not
Dialogue: 0,0:24:58.77,0:25:00.53,*Default,NTP,0000,0000,0000,,that gives rise to that one
Dialogue: 0,0:25:00.60,0:25:03.07,*Default,NTP,0000,0000,0000,,and then we move on to step three and then step four
Dialogue: 0,0:25:03.07,0:25:05.33,*Default,NTP,0000,0000,0000,,so let's just do the sub expressions for now
Dialogue: 0,0:25:05.97,0:25:08.60,*Default,NTP,0000,0000,0000,,all right so there's a one here and a one here
Dialogue: 0,0:25:08.60,0:25:10.67,*Default,NTP,0000,0000,0000,,so this is the only place I have a sub expression
Dialogue: 0,0:25:10.90,0:25:12.90,*Default,NTP,0000,0000,0000,,so what do I do I go back to the input
Dialogue: 0,0:25:12.90,0:25:15.17,*Default,NTP,0000,0000,0000,,that's a zero so I not a
Dialogue: 0,0:25:15.17,0:25:16.33,*Default,NTP,0000,0000,0000,,there it is right there
Dialogue: 0,0:25:16.40,0:25:18.67,*Default,NTP,0000,0000,0000,,that's a zero so I not b
Dialogue: 0,0:25:19.10,0:25:21.60,*Default,NTP,0000,0000,0000,,I am those two together and again
Dialogue: 0,0:25:21.80,0:25:23.80,*Default,NTP,0000,0000,0000,,remember that why this works
Dialogue: 0,0:25:23.80,0:25:26.17,*Default,NTP,0000,0000,0000,,because when a is 0 not a is one
Dialogue: 0,0:25:26.53,0:25:28.73,*Default,NTP,0000,0000,0000,,when be a zero not be as one
Dialogue: 0,0:25:28.73,0:25:31.13,*Default,NTP,0000,0000,0000,,so when I and one and one I get one
Dialogue: 0,0:25:31.33,0:25:33.33,*Default,NTP,0000,0000,0000,,and that is the only place I get one
Dialogue: 0,0:25:33.50,0:25:34.47,*Default,NTP,0000,0000,0000,,there is no other
Dialogue: 0,0:25:34.47,0:25:37.07,*Default,NTP,0000,0000,0000,,possible values of a and b that will give rise to one
Dialogue: 0,0:25:37.07,0:25:37.87,*Default,NTP,0000,0000,0000,,so this is this
Dialogue: 0,0:25:37.90,0:25:40.90,*Default,NTP,0000,0000,0000,,very surgical strike this little sub expression
Dialogue: 0,0:25:41.20,0:25:44.50,*Default,NTP,0000,0000,0000,,it's going to evaluate one here and only here
Dialogue: 0,0:25:44.67,0:25:46.50,*Default,NTP,0000,0000,0000,,this is somebody else's problem down here
Dialogue: 0,0:25:46.50,0:25:47.70,*Default,NTP,0000,0000,0000,,and this is nobody's problem
Dialogue: 0,0:25:47.70,0:25:49.70,*Default,NTP,0000,0000,0000,,because the default is going to be that everything
Dialogue: 0,0:25:49.70,0:25:50.90,*Default,NTP,0000,0000,0000,,evaluates to zero
Dialogue: 0,0:25:50.97,0:25:52.97,*Default,NTP,0000,0000,0000,,if it's not this or not this
Dialogue: 0,0:25:53.07,0:25:54.70,*Default,NTP,0000,0000,0000,,all right let's build that sub expression again
Dialogue: 0,0:25:54.70,0:25:55.77,*Default,NTP,0000,0000,0000,,go back to a and b
Dialogue: 0,0:25:55.90,0:25:57.97,*Default,NTP,0000,0000,0000,,that's a one so we bring the a over
Dialogue: 0,0:25:57.97,0:26:00.17,*Default,NTP,0000,0000,0000,,that's a one we bring the b over and again
Dialogue: 0,0:26:00.60,0:26:04.07,*Default,NTP,0000,0000,0000,,this sub expression is one if and only if
Dialogue: 0,0:26:04.17,0:26:07.97,*Default,NTP,0000,0000,0000,,a is one and b is one and it is zero everywhere else
Dialogue: 0,0:26:08.13,0:26:11.57,*Default,NTP,0000,0000,0000,,so again notice these why we like the ans here because
Dialogue: 0,0:26:11.87,0:26:14.57,*Default,NTP,0000,0000,0000,,for any value that is not zero zero
Dialogue: 0,0:26:14.57,0:26:16.87,*Default,NTP,0000,0000,0000,,and any value that is not one one
Dialogue: 0,0:26:17.47,0:26:19.37,*Default,NTP,0000,0000,0000,,these expressions are going to value to zero
Dialogue: 0,0:26:19.37,0:26:22.67,*Default,NTP,0000,0000,0000,,so here for all other values of a and b
Dialogue: 0,0:26:22.73,0:26:24.17,*Default,NTP,0000,0000,0000,,this evaluates to zero
Dialogue: 0,0:26:24.20,0:26:27.27,*Default,NTP,0000,0000,0000,,here all other values of a and b of value to zero
Dialogue: 0,0:26:27.27,0:26:28.90,*Default,NTP,0000,0000,0000,,so I get these two for free
Dialogue: 0,0:26:28.90,0:26:31.00,*Default,NTP,0000,0000,0000,,by simply these being so surgical
Dialogue: 0,0:26:31.13,0:26:33.97,*Default,NTP,0000,0000,0000,,and evaluating to one if and only if we're here
Dialogue: 0,0:26:34.17,0:26:35.13,*Default,NTP,0000,0000,0000,,or we're here
Dialogue: 0,0:26:35.57,0:26:37.87,*Default,NTP,0000,0000,0000,,good so step two is done
Dialogue: 0,0:26:38.00,0:26:40.00,*Default,NTP,0000,0000,0000,,I now have the sub expressions
Dialogue: 0,0:26:40.17,0:26:41.53,*Default,NTP,0000,0000,0000,,so let's do step three
Dialogue: 0,0:26:41.70,0:26:44.13,*Default,NTP,0000,0000,0000,,combine the sub expressions with ours
Dialogue: 0,0:26:44.30,0:26:45.40,*Default,NTP,0000,0000,0000,,for each output column
Dialogue: 0,0:26:45.40,0:26:47.80,*Default,NTP,0000,0000,0000,,of course we only have one output column so c
Dialogue: 0,0:26:48.17,0:26:53.90,*Default,NTP,0000,0000,0000,,my output is going to be equal to not a and not b
Dialogue: 0,0:26:53.90,0:26:54.87,*Default,NTP,0000,0000,0000,,there it is right there
Dialogue: 0,0:26:54.87,0:26:57.33,*Default,NTP,0000,0000,0000,,or a and b and again
Dialogue: 0,0:26:57.33,0:26:59.00,*Default,NTP,0000,0000,0000,,you have to convince yourself
Dialogue: 0,0:26:59.00,0:27:00.80,*Default,NTP,0000,0000,0000,,that this is exactly what you want
Dialogue: 0,0:27:00.80,0:27:04.50,*Default,NTP,0000,0000,0000,,okay so again this can be one and only one situation
Dialogue: 0,0:27:04.50,0:27:05.73,*Default,NTP,0000,0000,0000,,this row right here
Dialogue: 0,0:27:05.93,0:27:08.10,*Default,NTP,0000,0000,0000,,this can be one in only one situation
Dialogue: 0,0:27:08.10,0:27:09.27,*Default,NTP,0000,0000,0000,,this row right here
Dialogue: 0,0:27:09.30,0:27:13.87,*Default,NTP,0000,0000,0000,,so this entire expression will be one in this case
Dialogue: 0,0:27:13.87,0:27:14.70,*Default,NTP,0000,0000,0000,,in this case
Dialogue: 0,0:27:14.70,0:27:17.10,*Default,NTP,0000,0000,0000,,and again notice it's zero everywhere else
Dialogue: 0,0:27:17.10,0:27:18.53,*Default,NTP,0000,0000,0000,,we sort of came for free
Dialogue: 0,0:27:18.67,0:27:20.30,*Default,NTP,0000,0000,0000,,because of the nature of the ann
Dialogue: 0,0:27:20.70,0:27:23.47,*Default,NTP,0000,0000,0000,,so there it is I've got a little boolean expression
Dialogue: 0,0:27:23.50,0:27:26.57,*Default,NTP,0000,0000,0000,,that is what one bit compare for equality
Dialogue: 0,0:27:26.70,0:27:28.37,*Default,NTP,0000,0000,0000,,so at this point you're sort of done
Dialogue: 0,0:27:28.37,0:27:29.90,*Default,NTP,0000,0000,0000,,drawing the circuit is just the fun part
Dialogue: 0,0:27:29.90,0:27:30.57,*Default,NTP,0000,0000,0000,,it's just to sort of
Dialogue: 0,0:27:30.57,0:27:31.17,*Default,NTP,0000,0000,0000,,prove the point
Dialogue: 0,0:27:31.17,0:27:32.57,*Default,NTP,0000,0000,0000,,that you can actually implement this thing
Dialogue: 0,0:27:32.67,0:27:35.10,*Default,NTP,0000,0000,0000,,but I've now got a computation
Dialogue: 0,0:27:35.17,0:27:36.90,*Default,NTP,0000,0000,0000,,one bit compare for equality
Dialogue: 0,0:27:36.97,0:27:40.20,*Default,NTP,0000,0000,0000,,using logical land logical ore and not
Dialogue: 0,0:27:40.47,0:27:41.93,*Default,NTP,0000,0000,0000,,let's go ahead and just draw the circuit
Dialogue: 0,0:27:42.73,0:27:44.87,*Default,NTP,0000,0000,0000,,okay again input on the left
Dialogue: 0,0:27:45.13,0:27:46.10,*Default,NTP,0000,0000,0000,,output on the right
Dialogue: 0,0:27:46.10,0:27:48.47,*Default,NTP,0000,0000,0000,,there's two in this is a two
Dialogue: 0,0:27:48.53,0:27:50.37,*Default,NTP,0000,0000,0000,,a one bit compare for equality
Dialogue: 0,0:27:50.37,0:27:52.50,*Default,NTP,0000,0000,0000,,I'm only comparing two binary numbers
Dialogue: 0,0:27:52.53,0:27:53.37,*Default,NTP,0000,0000,0000,,and here's my output
Dialogue: 0,0:27:53.37,0:27:55.27,*Default,NTP,0000,0000,0000,,and I've brought over my expression here
Dialogue: 0,0:27:55.27,0:27:56.67,*Default,NTP,0000,0000,0000,,so we can carry it over
Dialogue: 0,0:27:57.00,0:27:57.30,*Default,NTP,0000,0000,0000,,okay
Dialogue: 0,0:27:57.30,0:27:59.90,*Default,NTP,0000,0000,0000,,so we know there's gonna be an ore somewhere over here
Dialogue: 0,0:27:59.90,0:28:01.73,*Default,NTP,0000,0000,0000,,there's gonna be two ends here
Dialogue: 0,0:28:01.73,0:28:04.40,*Default,NTP,0000,0000,0000,,and I need a couple of knot gates for the a and the b
Dialogue: 0,0:28:04.40,0:28:04.73,*Default,NTP,0000,0000,0000,,okay so
Dialogue: 0,0:28:04.73,0:28:05.27,*Default,NTP,0000,0000,0000,,let's go ahead and just
Dialogue: 0,0:28:05.27,0:28:06.80,*Default,NTP,0000,0000,0000,,start pulling these pieces together
Dialogue: 0,0:28:07.40,0:28:08.50,*Default,NTP,0000,0000,0000,,all right so let's see
Dialogue: 0,0:28:08.50,0:28:09.10,*Default,NTP,0000,0000,0000,,I'm going to take
Dialogue: 0,0:28:09.10,0:28:11.20,*Default,NTP,0000,0000,0000,,a and b and I'm going to shove them into this
Dialogue: 0,0:28:11.20,0:28:13.53,*Default,NTP,0000,0000,0000,,and gate that's the sub expression right here
Dialogue: 0,0:28:13.53,0:28:14.57,*Default,NTP,0000,0000,0000,,okay that's the easy part
Dialogue: 0,0:28:14.57,0:28:15.93,*Default,NTP,0000,0000,0000,,I don't need any knots
Dialogue: 0,0:28:16.17,0:28:18.93,*Default,NTP,0000,0000,0000,,and now I'm going to peel off a and b again
Dialogue: 0,0:28:19.30,0:28:21.67,*Default,NTP,0000,0000,0000,,filled circle when I peel the signal off
Dialogue: 0,0:28:21.67,0:28:23.70,*Default,NTP,0000,0000,0000,,open circle when I cross the wires
Dialogue: 0,0:28:23.70,0:28:26.33,*Default,NTP,0000,0000,0000,,you have to do this so you can follow the input
Dialogue: 0,0:28:26.33,0:28:27.73,*Default,NTP,0000,0000,0000,,so when you follow this line
Dialogue: 0,0:28:27.73,0:28:30.10,*Default,NTP,0000,0000,0000,,you know to keep going here you can ignore that
Dialogue: 0,0:28:30.17,0:28:31.60,*Default,NTP,0000,0000,0000,,and then it goes into a knock gate
Dialogue: 0,0:28:31.60,0:28:33.10,*Default,NTP,0000,0000,0000,,and it goes into an ann gate
Dialogue: 0,0:28:33.37,0:28:34.13,*Default,NTP,0000,0000,0000,,same thing with b
Dialogue: 0,0:28:34.13,0:28:35.40,*Default,NTP,0000,0000,0000,,I'm going to peel it over
Dialogue: 0,0:28:35.67,0:28:37.33,*Default,NTP,0000,0000,0000,,drive it into a knot gate
Dialogue: 0,0:28:37.50,0:28:38.77,*Default,NTP,0000,0000,0000,,shove that into an end gate
Dialogue: 0,0:28:38.77,0:28:40.17,*Default,NTP,0000,0000,0000,,don't forget the dot on the and gate
Dialogue: 0,0:28:40.17,0:28:41.57,*Default,NTP,0000,0000,0000,,so we can see what you're doing
Dialogue: 0,0:28:41.70,0:28:44.20,*Default,NTP,0000,0000,0000,,and this of course is not a and not b
Dialogue: 0,0:28:44.30,0:28:46.40,*Default,NTP,0000,0000,0000,,this is amb I again like drawing these
Dialogue: 0,0:28:46.90,0:28:48.30,*Default,NTP,0000,0000,0000,,the actual expressions here
Dialogue: 0,0:28:48.30,0:28:50.17,*Default,NTP,0000,0000,0000,,because it sort of reminds me that
Dialogue: 0,0:28:50.33,0:28:51.10,*Default,NTP,0000,0000,0000,,you know what I'm doing
Dialogue: 0,0:28:51.10,0:28:53.07,*Default,NTP,0000,0000,0000,,and I can go back and check my work nicely
Dialogue: 0,0:28:53.13,0:28:55.30,*Default,NTP,0000,0000,0000,,now these two of course so this
Dialogue: 0,0:28:55.87,0:28:57.70,*Default,NTP,0000,0000,0000,,sub expression corresponds to this
Dialogue: 0,0:28:57.77,0:28:59.67,*Default,NTP,0000,0000,0000,,this sub expression corresponds to this
Dialogue: 0,0:28:59.73,0:29:00.97,*Default,NTP,0000,0000,0000,,and what do I want to do with those two
Dialogue: 0,0:29:00.97,0:29:02.70,*Default,NTP,0000,0000,0000,,I want to shove them into an orgate
Dialogue: 0,0:29:02.80,0:29:04.17,*Default,NTP,0000,0000,0000,,and then I have my output
Dialogue: 0,0:29:04.30,0:29:06.13,*Default,NTP,0000,0000,0000,,all right good shovement to an orgate
Dialogue: 0,0:29:06.20,0:29:09.33,*Default,NTP,0000,0000,0000,,that's now the full expression and I have my output
Dialogue: 0,0:29:09.37,0:29:11.50,*Default,NTP,0000,0000,0000,,and now we have our first meaningful computation
Dialogue: 0,0:29:11.50,0:29:12.93,*Default,NTP,0000,0000,0000,,it's incredibly simple
Dialogue: 0,0:29:13.33,0:29:16.37,*Default,NTP,0000,0000,0000,,it is simply a one bit compare for equality
Dialogue: 0,0:29:16.37,0:29:18.40,*Default,NTP,0000,0000,0000,,but it's meaningful it actually does something
Dialogue: 0,0:29:18.57,0:29:21.20,*Default,NTP,0000,0000,0000,,okay and notice here in some ways there's something
Dialogue: 0,0:29:21.37,0:29:23.27,*Default,NTP,0000,0000,0000,,I always think magical about these
Dialogue: 0,0:29:23.97,0:29:25.80,*Default,NTP,0000,0000,0000,,designing these circuits because notice that
Dialogue: 0,0:29:26.67,0:29:28.70,*Default,NTP,0000,0000,0000,,you're not really computing one bit
Dialogue: 0,0:29:28.70,0:29:30.10,*Default,NTP,0000,0000,0000,,compare for equality
Dialogue: 0,0:29:30.47,0:29:31.33,*Default,NTP,0000,0000,0000,,what do I mean by that
Dialogue: 0,0:29:31.33,0:29:32.70,*Default,NTP,0000,0000,0000,,what I mean by that is
Dialogue: 0,0:29:32.80,0:29:36.40,*Default,NTP,0000,0000,0000,,you've sort of memorized one bit compare for equality
Dialogue: 0,0:29:36.50,0:29:38.73,*Default,NTP,0000,0000,0000,,that truth table and step one
Dialogue: 0,0:29:39.00,0:29:40.93,*Default,NTP,0000,0000,0000,,gave the computer the answer
Dialogue: 0,0:29:41.33,0:29:41.90,*Default,NTP,0000,0000,0000,,what did you say
Dialogue: 0,0:29:41.90,0:29:44.30,*Default,NTP,0000,0000,0000,,you said look here are all possible sets of inputs
Dialogue: 0,0:29:44.30,0:29:46.53,*Default,NTP,0000,0000,0000,,0 0 1 1 0 1 1
Dialogue: 0,0:29:46.60,0:29:48.97,*Default,NTP,0000,0000,0000,,and here's all the outputs associated with that
Dialogue: 0,0:29:49.00,0:29:50.53,*Default,NTP,0000,0000,0000,,so when you see zero zero
Dialogue: 0,0:29:50.70,0:29:53.07,*Default,NTP,0000,0000,0000,,output one when you see one one output one
Dialogue: 0,0:29:53.07,0:29:55.00,*Default,NTP,0000,0000,0000,,and at all the other times output zero
Dialogue: 0,0:29:55.20,0:29:56.60,*Default,NTP,0000,0000,0000,,you gave it the answer
Dialogue: 0,0:29:56.87,0:29:58.47,*Default,NTP,0000,0000,0000,,and now what it's doing is simply
Dialogue: 0,0:29:58.47,0:29:59.73,*Default,NTP,0000,0000,0000,,I mean it is computing it
Dialogue: 0,0:29:59.73,0:30:01.57,*Default,NTP,0000,0000,0000,,because it's pushing it through the circuitry
Dialogue: 0,0:30:01.87,0:30:03.60,*Default,NTP,0000,0000,0000,,but you're the one who did all the hard work
Dialogue: 0,0:30:03.73,0:30:05.93,*Default,NTP,0000,0000,0000,,you're the one who told it what the answer is
Dialogue: 0,0:30:05.97,0:30:08.67,*Default,NTP,0000,0000,0000,,and now it's simply doing that for all possible inputs
Dialogue: 0,0:30:08.67,0:30:10.47,*Default,NTP,0000,0000,0000,,using these operations
Dialogue: 0,0:30:10.57,0:30:13.50,*Default,NTP,0000,0000,0000,,so in some ways this is sort of the magic of circuitry
Dialogue: 0,0:30:13.50,0:30:15.70,*Default,NTP,0000,0000,0000,,is you're actually doing a lot of the hard work
Dialogue: 0,0:30:15.70,0:30:17.37,*Default,NTP,0000,0000,0000,,and the designing of that true table
Dialogue: 0,0:30:17.40,0:30:19.70,*Default,NTP,0000,0000,0000,,building the sub expressions building the expressions
Dialogue: 0,0:30:19.70,0:30:21.13,*Default,NTP,0000,0000,0000,,eventually we'll see how to simplify
Dialogue: 0,0:30:21.13,0:30:22.67,*Default,NTP,0000,0000,0000,,those things to make them more efficient
Dialogue: 0,0:30:22.77,0:30:25.53,*Default,NTP,0000,0000,0000,,and then this is just sort of turning the crank
Dialogue: 0,0:30:25.53,0:30:27.97,*Default,NTP,0000,0000,0000,,it's just simply implementing the machinery
Dialogue: 0,0:30:27.97,0:30:29.30,*Default,NTP,0000,0000,0000,,that you actually designed
Dialogue: 0,0:30:29.30,0:30:30.60,*Default,NTP,0000,0000,0000,,you gave it the answer
Dialogue: 0,0:30:30.77,0:30:32.30,*Default,NTP,0000,0000,0000,,okay all right good
Dialogue: 0,0:30:32.33,0:30:35.47,*Default,NTP,0000,0000,0000,,so this is the first and simplest now
Dialogue: 0,0:30:35.47,0:30:37.80,*Default,NTP,0000,0000,0000,,where we've actually done a meaningful computation
Dialogue: 0,0:30:37.80,0:30:39.17,*Default,NTP,0000,0000,0000,,using our four steps
Dialogue: 0,0:30:39.37,0:30:41.40,*Default,NTP,0000,0000,0000,,input output build the truth table
Dialogue: 0,0:30:41.47,0:30:42.27,*Default,NTP,0000,0000,0000,,sub expressions
Dialogue: 0,0:30:42.27,0:30:44.33,*Default,NTP,0000,0000,0000,,combine the expressions draw the circuitry
Dialogue: 0,0:30:44.40,0:30:45.87,*Default,NTP,0000,0000,0000,,and what we're going to do now for a little while
Dialogue: 0,0:30:45.87,0:30:47.33,*Default,NTP,0000,0000,0000,,is we're going to just do a lot of examples
Dialogue: 0,0:30:47.33,0:30:47.93,*Default,NTP,0000,0000,0000,,we're going to see
Dialogue: 0,0:30:47.93,0:30:50.50,*Default,NTP,0000,0000,0000,,how you get more and more complex computations
Dialogue: 0,0:30:50.60,0:30:52.00,*Default,NTP,0000,0000,0000,,and then near the end I'm going to show you
Dialogue: 0,0:30:52.00,0:30:52.47,*Default,NTP,0000,0000,0000,,because I'm sure
Dialogue: 0,0:30:52.47,0:30:53.80,*Default,NTP,0000,0000,0000,,some of you are already thinking about this
Dialogue: 0,0:30:53.80,0:30:55.33,*Default,NTP,0000,0000,0000,,is there's going to be
Dialogue: 0,0:30:55.40,0:30:57.37,*Default,NTP,0000,0000,0000,,at some point there's going to be a lot of these gates
Dialogue: 0,0:30:57.40,0:30:58.60,*Default,NTP,0000,0000,0000,,and how can I make them simpler
Dialogue: 0,0:30:58.60,0:31:00.40,*Default,NTP,0000,0000,0000,,is this really the best way to design circuits
Dialogue: 0,0:31:00.40,0:31:01.70,*Default,NTP,0000,0000,0000,,and the answer is absolutely not
Dialogue: 0,0:31:01.70,0:31:02.93,*Default,NTP,0000,0000,0000,,this is not the best way to design
Dialogue: 0,0:31:02.93,0:31:05.13,*Default,NTP,0000,0000,0000,,service circuit design is incredibly complex
Dialogue: 0,0:31:05.30,0:31:06.70,*Default,NTP,0000,0000,0000,,and you really want to optimize it
Dialogue: 0,0:31:06.70,0:31:08.30,*Default,NTP,0000,0000,0000,,so that you get the most amount of bang
Dialogue: 0,0:31:08.30,0:31:09.53,*Default,NTP,0000,0000,0000,,for your buck on a circuit
Dialogue: 0,0:31:09.60,0:31:10.80,*Default,NTP,0000,0000,0000,,we're going through the simplest
Dialogue: 0,0:31:10.80,0:31:11.87,*Default,NTP,0000,0000,0000,,possible circuit design
Dialogue: 0,0:31:11.87,0:31:14.17,*Default,NTP,0000,0000,0000,,I'll show you a couple of optimization techniques
Dialogue: 0,0:31:14.53,0:31:16.90,*Default,NTP,0000,0000,0000,,near the end of the class here
Dialogue: 0,0:31:17.17,0:31:18.17,*Default,NTP,0000,0000,0000,,but until then
Dialogue: 0,0:31:18.17,0:31:20.10,*Default,NTP,0000,0000,0000,,we're going to do a bunch of examples to make sure we
Dialogue: 0,0:31:20.10,0:31:21.77,*Default,NTP,0000,0000,0000,,understand this four step process
Dialogue: 0,0:31:21.77,0:31:22.73,*Default,NTP,0000,0000,0000,,all right that's it for now
Dialogue: 0,0:31:22.73,0:31:24.53,*Default,NTP,0000,0000,0000,,and we'll pick it up in a few minutes see you soon
Dialogue: 0,0:31:26.93,0:31:28.47,*Default,NTP,0000,0000,0000,,in the last lecture we
Dialogue: 0,0:31:28.70,0:31:31.50,*Default,NTP,0000,0000,0000,,built our first meaningful computation
Dialogue: 0,0:31:31.70,0:31:33.47,*Default,NTP,0000,0000,0000,,starting from a truth table
Dialogue: 0,0:31:33.53,0:31:34.93,*Default,NTP,0000,0000,0000,,through building sub expressions
Dialogue: 0,0:31:34.93,0:31:35.97,*Default,NTP,0000,0000,0000,,expressions in
Dialogue: 0,0:31:36.37,0:31:39.90,*Default,NTP,0000,0000,0000,,a circuit for one bit compare for equality
Dialogue: 0,0:31:39.90,0:31:43.77,*Default,NTP,0000,0000,0000,,so we ask if we have two one bit numbers a and b
Dialogue: 0,0:31:44.20,0:31:46.37,*Default,NTP,0000,0000,0000,,can we build a circuit that tells me if they're equal
Dialogue: 0,0:31:46.37,0:31:48.07,*Default,NTP,0000,0000,0000,,they're both zero or they're both one
Dialogue: 0,0:31:48.27,0:31:50.73,*Default,NTP,0000,0000,0000,,incredibly simple maybe not very useful
Dialogue: 0,0:31:50.87,0:31:53.10,*Default,NTP,0000,0000,0000,,so let's see a few more examples of this
Dialogue: 0,0:31:53.10,0:31:55.57,*Default,NTP,0000,0000,0000,,and the next example is going to be
Dialogue: 0,0:31:55.80,0:31:58.57,*Default,NTP,0000,0000,0000,,a four bit compare for equality
Dialogue: 0,0:31:58.57,0:32:01.30,*Default,NTP,0000,0000,0000,,so what do I mean by that so remember that when
Dialogue: 0,0:32:01.30,0:32:02.97,*Default,NTP,0000,0000,0000,,when we specify binary numbers
Dialogue: 0,0:32:02.97,0:32:04.87,*Default,NTP,0000,0000,0000,,we specify how many bits
Dialogue: 0,0:32:05.00,0:32:06.57,*Default,NTP,0000,0000,0000,,and whether they're signed or unsigned
Dialogue: 0,0:32:06.57,0:32:08.47,*Default,NTP,0000,0000,0000,,so for now let's just do unsigned
Dialogue: 0,0:32:08.47,0:32:10.20,*Default,NTP,0000,0000,0000,,forbid binary numbers
Dialogue: 0,0:32:10.87,0:32:15.27,*Default,NTP,0000,0000,0000,,I have two four bit binary numbers and I want to return
Dialogue: 0,0:32:15.90,0:32:19.33,*Default,NTP,0000,0000,0000,,true one if those two numbers are the same
Dialogue: 0,0:32:19.50,0:32:20.90,*Default,NTP,0000,0000,0000,,and zero otherwise
Dialogue: 0,0:32:21.47,0:32:24.33,*Default,NTP,0000,0000,0000,,okay so let's just start turning the crank
Dialogue: 0,0:32:24.33,0:32:24.90,*Default,NTP,0000,0000,0000,,so the first thing
Dialogue: 0,0:32:24.90,0:32:26.90,*Default,NTP,0000,0000,0000,,and this is really where all the hard work is
Dialogue: 0,0:32:26.93,0:32:28.57,*Default,NTP,0000,0000,0000,,is figuring out what does the truth table
Dialogue: 0,0:32:28.57,0:32:29.90,*Default,NTP,0000,0000,0000,,what does the truth table look like
Dialogue: 0,0:32:29.90,0:32:31.70,*Default,NTP,0000,0000,0000,,how many input columns
Dialogue: 0,0:32:31.70,0:32:32.53,*Default,NTP,0000,0000,0000,,what is the output
Dialogue: 0,0:32:32.53,0:32:34.27,*Default,NTP,0000,0000,0000,,and then populating that truth table
Dialogue: 0,0:32:34.27,0:32:36.30,*Default,NTP,0000,0000,0000,,so let's of course start there
Dialogue: 0,0:32:38.00,0:32:39.20,*Default,NTP,0000,0000,0000,,well okay so first of all
Dialogue: 0,0:32:39.20,0:32:41.60,*Default,NTP,0000,0000,0000,,what does a four bit binary number look like
Dialogue: 0,0:32:41.60,0:32:42.33,*Default,NTP,0000,0000,0000,,so here it is
Dialogue: 0,0:32:42.33,0:32:43.30,*Default,NTP,0000,0000,0000,,let me label them
Dialogue: 0,0:32:44.53,0:32:45.33,*Default,NTP,0000,0000,0000,,800
Dialogue: 0,0:32:45.67,0:32:48.93,*Default,NTP,0000,0000,0000,,a18283 significant
Dialogue: 0,0:32:49.00,0:32:50.27,*Default,NTP,0000,0000,0000,,so that's my first
Dialogue: 0,0:32:50.73,0:32:52.77,*Default,NTP,0000,0000,0000,,binary No.4 bits
Dialogue: 0,0:32:53.07,0:32:54.10,*Default,NTP,0000,0000,0000,,let's call that a
Dialogue: 0,0:32:54.10,0:32:56.50,*Default,NTP,0000,0000,0000,,but notice that there's actually four numbers there
Dialogue: 0,0:32:56.67,0:32:59.00,*Default,NTP,0000,0000,0000,,and then of course I have b which has b three
Dialogue: 0,0:32:59.00,0:33:00.10,*Default,NTP,0000,0000,0000,,b two b one b
Dialogue: 0,0:33:00.27,0:33:02.60,*Default,NTP,0000,0000,0000,,0 and I want to know are these two equal
Dialogue: 0,0:33:02.93,0:33:06.20,*Default,NTP,0000,0000,0000,,well what does it mean for those two numbers to b equal
Dialogue: 0,0:33:06.80,0:33:10.27,*Default,NTP,0000,0000,0000,,well it means that a three is equal to b three
Dialogue: 0,0:33:10.27,0:33:13.40,*Default,NTP,0000,0000,0000,,a two is equal to b two and someone and so forth
Dialogue: 0,0:33:14.40,0:33:18.50,*Default,NTP,0000,0000,0000,,okay so notice that even though I only have two numbers
Dialogue: 0,0:33:18.50,0:33:21.67,*Default,NTP,0000,0000,0000,,they're each represented in terms of four bits
Dialogue: 0,0:33:21.97,0:33:25.40,*Default,NTP,0000,0000,0000,,so I actually have eight input columns
Dialogue: 0,0:33:25.60,0:33:28.57,*Default,NTP,0000,0000,0000,,a 3 to a 0 b three do b 0
Dialogue: 0,0:33:28.97,0:33:32.27,*Default,NTP,0000,0000,0000,,so don't get confused by numbers and bits
Dialogue: 0,0:33:32.27,0:33:34.77,*Default,NTP,0000,0000,0000,,because we are living in binary world
Dialogue: 0,0:33:34.90,0:33:36.67,*Default,NTP,0000,0000,0000,,we have to always think
Dialogue: 0,0:33:36.67,0:33:39.37,*Default,NTP,0000,0000,0000,,about the underlying bit representations
Dialogue: 0,0:33:39.93,0:33:44.40,*Default,NTP,0000,0000,0000,,okay so I have let's see four here four here
Dialogue: 0,0:33:44.40,0:33:45.67,*Default,NTP,0000,0000,0000,,that's my input
Dialogue: 0,0:33:45.80,0:33:48.70,*Default,NTP,0000,0000,0000,,and I of course have one output which is c
Dialogue: 0,0:33:49.20,0:33:52.27,*Default,NTP,0000,0000,0000,,it's one when they're equal and zero everywhere else
Dialogue: 0,0:33:52.40,0:33:55.57,*Default,NTP,0000,0000,0000,,okay if I have eight input how many rows do I have
Dialogue: 0,0:33:55.87,0:33:57.73,*Default,NTP,0000,0000,0000,,remember the relationship
Dialogue: 0,0:33:58.10,0:33:59.47,*Default,NTP,0000,0000,0000,,two to the power
Dialogue: 0,0:33:59.60,0:34:00.50,*Default,NTP,0000,0000,0000,,the number of input
Dialogue: 0,0:34:00.50,0:34:02.50,*Default,NTP,0000,0000,0000,,so in this case it's two to the power eight
Dialogue: 0,0:34:02.50,0:34:03.53,*Default,NTP,0000,0000,0000,,which of course is
Dialogue: 0,0:34:03.73,0:34:04.93,*Default,NTP,0000,0000,0000,,two fifty six
Dialogue: 0,0:34:05.87,0:34:07.97,*Default,NTP,0000,0000,0000,,that's a lot of rows you have to populate
Dialogue: 0,0:34:08.20,0:34:12.30,*Default,NTP,0000,0000,0000,,so you have to go through every single of the 256
Dialogue: 0,0:34:12.77,0:34:14.10,*Default,NTP,0000,0000,0000,,temple inputs
Dialogue: 0,0:34:14.37,0:34:15.70,*Default,NTP,0000,0000,0000,,right out of row
Dialogue: 0,0:34:16.10,0:34:19.50,*Default,NTP,0000,0000,0000,,tell me what the output value is and you can do that
Dialogue: 0,0:34:19.70,0:34:21.37,*Default,NTP,0000,0000,0000,,be a little tedious but you can do it
Dialogue: 0,0:34:21.60,0:34:22.67,*Default,NTP,0000,0000,0000,,but let's think about
Dialogue: 0,0:34:22.67,0:34:24.07,*Default,NTP,0000,0000,0000,,whether we really need to go to all
Dialogue: 0,0:34:24.07,0:34:25.30,*Default,NTP,0000,0000,0000,,this trouble or not
Dialogue: 0,0:34:26.17,0:34:27.17,*Default,NTP,0000,0000,0000,,because
Dialogue: 0,0:34:27.80,0:34:29.77,*Default,NTP,0000,0000,0000,,when we think about it in this two bit
Dialogue: 0,0:34:30.00,0:34:31.87,*Default,NTP,0000,0000,0000,,and this two four bit numbers
Dialogue: 0,0:34:31.93,0:34:33.20,*Default,NTP,0000,0000,0000,,there's really
Dialogue: 0,0:34:33.20,0:34:34.60,*Default,NTP,0000,0000,0000,,I'm sort of doing
Dialogue: 0,0:34:34.67,0:34:37.10,*Default,NTP,0000,0000,0000,,a very simple computation over and over again
Dialogue: 0,0:34:37.10,0:34:38.13,*Default,NTP,0000,0000,0000,,so what is that
Dialogue: 0,0:34:38.37,0:34:39.53,*Default,NTP,0000,0000,0000,,well I sort of said it
Dialogue: 0,0:34:39.53,0:34:42.87,*Default,NTP,0000,0000,0000,,I said that this forbit number a
Dialogue: 0,0:34:43.07,0:34:46.27,*Default,NTP,0000,0000,0000,,and this forbit number b are equal if
Dialogue: 0,0:34:46.90,0:34:48.47,*Default,NTP,0000,0000,0000,,a three is equal to b three
Dialogue: 0,0:34:48.50,0:34:50.20,*Default,NTP,0000,0000,0000,,and a two is equal to b two
Dialogue: 0,0:34:50.20,0:34:53.27,*Default,NTP,0000,0000,0000,,and a one is equal to b one and a 0 is equal to b zero
Dialogue: 0,0:34:53.67,0:34:55.07,*Default,NTP,0000,0000,0000,,so really if I could just figure
Dialogue: 0,0:34:55.07,0:34:57.10,*Default,NTP,0000,0000,0000,,if I could solve this one big problem
Dialogue: 0,0:34:57.10,0:34:58.47,*Default,NTP,0000,0000,0000,,and then this one bit problem
Dialogue: 0,0:34:58.47,0:35:00.50,*Default,NTP,0000,0000,0000,,and this one big problem and this one big problem
Dialogue: 0,0:35:00.67,0:35:01.70,*Default,NTP,0000,0000,0000,,well then I could just
Dialogue: 0,0:35:01.87,0:35:04.60,*Default,NTP,0000,0000,0000,,logically combine them using an and operator
Dialogue: 0,0:35:04.60,0:35:08.00,*Default,NTP,0000,0000,0000,,so maybe we can simplify this calculation a little bit
Dialogue: 0,0:35:08.30,0:35:11.27,*Default,NTP,0000,0000,0000,,and not have to populate that full 2006
Dialogue: 0,0:35:11.80,0:35:13.80,*Default,NTP,0000,0000,0000,,row table so let's
Dialogue: 0,0:35:14.33,0:35:15.73,*Default,NTP,0000,0000,0000,,remind you what the one
Dialogue: 0,0:35:15.73,0:35:17.70,*Default,NTP,0000,0000,0000,,bit compare for a quality looks like
Dialogue: 0,0:35:17.87,0:35:20.33,*Default,NTP,0000,0000,0000,,I take two single bits so
Dialogue: 0,0:35:20.93,0:35:22.73,*Default,NTP,0000,0000,0000,,careful with the switch and notation here this
Dialogue: 0,0:35:22.73,0:35:25.30,*Default,NTP,0000,0000,0000,,you can think of this as a 0 and b 0
Dialogue: 0,0:35:25.80,0:35:28.17,*Default,NTP,0000,0000,0000,,and this is telling me whether those two bits are equal
Dialogue: 0,0:35:28.17,0:35:29.47,*Default,NTP,0000,0000,0000,,so these are just two one bit
Dialogue: 0,0:35:29.87,0:35:32.10,*Default,NTP,0000,0000,0000,,and remember that the way this circuit works
Dialogue: 0,0:35:32.10,0:35:33.97,*Default,NTP,0000,0000,0000,,it says if they're both one
Dialogue: 0,0:35:33.97,0:35:37.00,*Default,NTP,0000,0000,0000,,so if they're both one then this end will respond one
Dialogue: 0,0:35:37.67,0:35:39.17,*Default,NTP,0000,0000,0000,,if they are both zero
Dialogue: 0,0:35:39.27,0:35:42.30,*Default,NTP,0000,0000,0000,,they go into knock gates they flips to ones here
Dialogue: 0,0:35:42.30,0:35:43.80,*Default,NTP,0000,0000,0000,,this will respond to one
Dialogue: 0,0:35:43.80,0:35:46.60,*Default,NTP,0000,0000,0000,,so if this is a one or this is a one
Dialogue: 0,0:35:46.60,0:35:49.10,*Default,NTP,0000,0000,0000,,then I get a one out here otherwise I get a zero
Dialogue: 0,0:35:49.10,0:35:50.13,*Default,NTP,0000,0000,0000,,so this is the one bit
Dialogue: 0,0:35:50.13,0:35:51.93,*Default,NTP,0000,0000,0000,,compared for equality that we did before
Dialogue: 0,0:35:52.33,0:35:53.17,*Default,NTP,0000,0000,0000,,let me
Dialogue: 0,0:35:54.20,0:35:55.00,*Default,NTP,0000,0000,0000,,let me
Dialogue: 0,0:35:55.60,0:35:57.60,*Default,NTP,0000,0000,0000,,draw this with a little bit of abstraction
Dialogue: 0,0:35:57.60,0:35:58.13,*Default,NTP,0000,0000,0000,,because this is a lot
Dialogue: 0,0:35:58.13,0:35:59.93,*Default,NTP,0000,0000,0000,,I don't want to have to keep drawing this over and over
Dialogue: 0,0:35:59.93,0:36:01.80,*Default,NTP,0000,0000,0000,,again so I'm going to represent the one big
Dialogue: 0,0:36:01.80,0:36:03.10,*Default,NTP,0000,0000,0000,,compare for equality
Dialogue: 0,0:36:03.13,0:36:05.60,*Default,NTP,0000,0000,0000,,with this little box here with a one ce
Dialogue: 0,0:36:05.73,0:36:07.50,*Default,NTP,0000,0000,0000,,one big compare for equality
Dialogue: 0,0:36:07.50,0:36:08.70,*Default,NTP,0000,0000,0000,,and done
Dialogue: 0,0:36:08.77,0:36:10.50,*Default,NTP,0000,0000,0000,,now there's two levels abstraction right
Dialogue: 0,0:36:10.50,0:36:12.20,*Default,NTP,0000,0000,0000,,because here there are two transistors
Dialogue: 0,0:36:12.20,0:36:13.87,*Default,NTP,0000,0000,0000,,here there are two transistors
Dialogue: 0,0:36:14.50,0:36:16.10,*Default,NTP,0000,0000,0000,,but I don't draw that every single time
Dialogue: 0,0:36:16.10,0:36:18.30,*Default,NTP,0000,0000,0000,,I just draw this little abstraction
Dialogue: 0,0:36:18.30,0:36:20.80,*Default,NTP,0000,0000,0000,,for what a gate looks like in terms of transistors
Dialogue: 0,0:36:20.90,0:36:22.97,*Default,NTP,0000,0000,0000,,and now I can draw another abstraction
Dialogue: 0,0:36:23.07,0:36:24.77,*Default,NTP,0000,0000,0000,,for the entire circuitry
Dialogue: 0,0:36:24.77,0:36:25.80,*Default,NTP,0000,0000,0000,,and underneath it is this
Dialogue: 0,0:36:25.80,0:36:27.60,*Default,NTP,0000,0000,0000,,and underneath that is a bunch of transistor
Dialogue: 0,0:36:27.60,0:36:30.17,*Default,NTP,0000,0000,0000,,so again that power of abstraction
Dialogue: 0,0:36:31.50,0:36:32.53,*Default,NTP,0000,0000,0000,,and now let's think about
Dialogue: 0,0:36:32.53,0:36:33.50,*Default,NTP,0000,0000,0000,,how do we combine
Dialogue: 0,0:36:33.50,0:36:35.70,*Default,NTP,0000,0000,0000,,those little one bit compare for equalities
Dialogue: 0,0:36:35.73,0:36:38.57,*Default,NTP,0000,0000,0000,,to get a four bit compare for equality
Dialogue: 0,0:36:38.73,0:36:41.10,*Default,NTP,0000,0000,0000,,well again I want to compare a three and b three
Dialogue: 0,0:36:41.10,0:36:43.27,*Default,NTP,0000,0000,0000,,and I want to compare a two and b two and so on and so
Dialogue: 0,0:36:43.53,0:36:45.70,*Default,NTP,0000,0000,0000,,and of course I still want to have a single output
Dialogue: 0,0:36:45.70,0:36:47.17,*Default,NTP,0000,0000,0000,,which is if these are equal
Dialogue: 0,0:36:47.20,0:36:48.30,*Default,NTP,0000,0000,0000,,and these are equal
Dialogue: 0,0:36:48.30,0:36:50.27,*Default,NTP,0000,0000,0000,,and these are equal and these are equal
Dialogue: 0,0:36:50.27,0:36:51.57,*Default,NTP,0000,0000,0000,,then I want to say yes
Dialogue: 0,0:36:51.57,0:36:53.40,*Default,NTP,0000,0000,0000,,otherwise I want to say no
Dialogue: 0,0:36:54.00,0:36:56.27,*Default,NTP,0000,0000,0000,,all right so let's start pushing the bits
Dialogue: 0,0:36:56.30,0:36:58.30,*Default,NTP,0000,0000,0000,,through the compare for equality
Dialogue: 0,0:36:58.30,0:37:00.27,*Default,NTP,0000,0000,0000,,so a three and b three go through a one
Dialogue: 0,0:37:00.37,0:37:02.33,*Default,NTP,0000,0000,0000,,bit compare for equality and outcomes
Dialogue: 0,0:37:02.33,0:37:04.20,*Default,NTP,0000,0000,0000,,what a one or a zero
Dialogue: 0,0:37:04.27,0:37:06.40,*Default,NTP,0000,0000,0000,,if it's one if those two are
Dialogue: 0,0:37:06.50,0:37:09.00,*Default,NTP,0000,0000,0000,,zero zero or one one and it's a zero otherwise
Dialogue: 0,0:37:09.80,0:37:12.00,*Default,NTP,0000,0000,0000,,and similarly I can push a two and b two
Dialogue: 0,0:37:12.00,0:37:13.93,*Default,NTP,0000,0000,0000,,a one and b one and a zero b zero
Dialogue: 0,0:37:13.93,0:37:15.40,*Default,NTP,0000,0000,0000,,so each of the bid positions
Dialogue: 0,0:37:15.50,0:37:17.97,*Default,NTP,0000,0000,0000,,each through their own one big compare for equality
Dialogue: 0,0:37:18.20,0:37:19.93,*Default,NTP,0000,0000,0000,,notice the power of the abstract here
Dialogue: 0,0:37:19.93,0:37:21.70,*Default,NTP,0000,0000,0000,,I don't have to write an entire circuitry
Dialogue: 0,0:37:21.70,0:37:23.13,*Default,NTP,0000,0000,0000,,I can just write that little box
Dialogue: 0,0:37:23.20,0:37:25.30,*Default,NTP,0000,0000,0000,,and I know what it is from the previous slide
Dialogue: 0,0:37:26.10,0:37:28.57,*Default,NTP,0000,0000,0000,,now what do I want to do is I have four outputs here
Dialogue: 0,0:37:28.57,0:37:29.70,*Default,NTP,0000,0000,0000,,and what do I want to do
Dialogue: 0,0:37:29.70,0:37:31.17,*Default,NTP,0000,0000,0000,,well let's think about what the rule is
Dialogue: 0,0:37:31.17,0:37:33.10,*Default,NTP,0000,0000,0000,,the rule is that this should be a one
Dialogue: 0,0:37:33.10,0:37:35.33,*Default,NTP,0000,0000,0000,,the output to the entire circuit
Dialogue: 0,0:37:35.77,0:37:37.00,*Default,NTP,0000,0000,0000,,if this is a one
Dialogue: 0,0:37:37.13,0:37:41.37,*Default,NTP,0000,0000,0000,,and this is a one and this is a one and this is a one
Dialogue: 0,0:37:41.60,0:37:42.80,*Default,NTP,0000,0000,0000,,I know how to do ans
Dialogue: 0,0:37:42.80,0:37:44.13,*Default,NTP,0000,0000,0000,,I just need an ann gate now
Dialogue: 0,0:37:44.13,0:37:45.53,*Default,NTP,0000,0000,0000,,so this should be pretty easy
Dialogue: 0,0:37:45.87,0:37:48.47,*Default,NTP,0000,0000,0000,,notice by the way the ann gates only take two inputs
Dialogue: 0,0:37:48.47,0:37:50.97,*Default,NTP,0000,0000,0000,,so I can't shove all four of those into an angate
Dialogue: 0,0:37:50.97,0:37:52.60,*Default,NTP,0000,0000,0000,,so I have to do them two at a time
Dialogue: 0,0:37:52.77,0:37:54.80,*Default,NTP,0000,0000,0000,,and it doesn't matter what the order is of course
Dialogue: 0,0:37:55.57,0:37:57.40,*Default,NTP,0000,0000,0000,,so these two go into an angate
Dialogue: 0,0:37:57.40,0:37:59.60,*Default,NTP,0000,0000,0000,,and now this will tell me if they're both one
Dialogue: 0,0:37:59.87,0:38:01.67,*Default,NTP,0000,0000,0000,,and then I'll take the output of that
Dialogue: 0,0:38:01.67,0:38:02.73,*Default,NTP,0000,0000,0000,,and I'll shove it into the
Dialogue: 0,0:38:02.73,0:38:04.93,*Default,NTP,0000,0000,0000,,and gate an angate where it's
Dialogue: 0,0:38:05.40,0:38:06.60,*Default,NTP,0000,0000,0000,,the bit down here
Dialogue: 0,0:38:06.73,0:38:08.60,*Default,NTP,0000,0000,0000,,and then I'll do that one more time
Dialogue: 0,0:38:08.87,0:38:11.13,*Default,NTP,0000,0000,0000,,so let's just think through the logic here
Dialogue: 0,0:38:11.20,0:38:12.27,*Default,NTP,0000,0000,0000,,let's say that these are
Dialogue: 0,0:38:12.27,0:38:14.40,*Default,NTP,0000,0000,0000,,let's say they're all ones just to make it simple
Dialogue: 0,0:38:14.47,0:38:17.50,*Default,NTP,0000,0000,0000,,so out of here will come a one because they're equal
Dialogue: 0,0:38:17.50,0:38:20.20,*Default,NTP,0000,0000,0000,,a one goes in the antigate out of here will come a one
Dialogue: 0,0:38:20.20,0:38:20.93,*Default,NTP,0000,0000,0000,,it will go into here
Dialogue: 0,0:38:20.93,0:38:22.57,*Default,NTP,0000,0000,0000,,so this is a one coming out
Dialogue: 0,0:38:22.57,0:38:24.13,*Default,NTP,0000,0000,0000,,the first two bits are equal
Dialogue: 0,0:38:24.57,0:38:26.47,*Default,NTP,0000,0000,0000,,this is a one coming out here because they're equal
Dialogue: 0,0:38:26.47,0:38:27.80,*Default,NTP,0000,0000,0000,,out of here comes a one
Dialogue: 0,0:38:27.97,0:38:31.07,*Default,NTP,0000,0000,0000,,this will be a one here and eventually one
Dialogue: 0,0:38:31.27,0:38:34.07,*Default,NTP,0000,0000,0000,,and notice if any one of these are not equal
Dialogue: 0,0:38:34.07,0:38:35.90,*Default,NTP,0000,0000,0000,,so let's say these are not equal
Dialogue: 0,0:38:36.00,0:38:38.27,*Default,NTP,0000,0000,0000,,well then a zero comes into this angate
Dialogue: 0,0:38:38.53,0:38:40.30,*Default,NTP,0000,0000,0000,,and that means a zero comes out of here
Dialogue: 0,0:38:40.30,0:38:41.87,*Default,NTP,0000,0000,0000,,and if a zero comes out of here
Dialogue: 0,0:38:41.87,0:38:44.30,*Default,NTP,0000,0000,0000,,a zero comes out of here and a zero comes out of here
Dialogue: 0,0:38:44.30,0:38:47.97,*Default,NTP,0000,0000,0000,,so once one of these angates flips any of them
Dialogue: 0,0:38:48.57,0:38:50.57,*Default,NTP,0000,0000,0000,,because one of the bits is not zero
Dialogue: 0,0:38:50.57,0:38:51.90,*Default,NTP,0000,0000,0000,,we get zero on the output
Dialogue: 0,0:38:51.90,0:38:53.27,*Default,NTP,0000,0000,0000,,and the only way
Dialogue: 0,0:38:53.37,0:38:56.40,*Default,NTP,0000,0000,0000,,we get a one on the output here is if these are equal
Dialogue: 0,0:38:56.40,0:38:57.40,*Default,NTP,0000,0000,0000,,and these are equal
Dialogue: 0,0:38:57.40,0:38:59.27,*Default,NTP,0000,0000,0000,,and these are equal and these are equal
Dialogue: 0,0:38:59.40,0:39:01.90,*Default,NTP,0000,0000,0000,,and so now look at the power of this circuitry
Dialogue: 0,0:39:01.93,0:39:03.70,*Default,NTP,0000,0000,0000,,I've got a really simple circuitry here
Dialogue: 0,0:39:03.70,0:39:05.57,*Default,NTP,0000,0000,0000,,here and here I've got three and gates
Dialogue: 0,0:39:05.57,0:39:09.13,*Default,NTP,0000,0000,0000,,so instead of having to build a true table 256 entries
Dialogue: 0,0:39:09.33,0:39:11.07,*Default,NTP,0000,0000,0000,,build all those sub expressions
Dialogue: 0,0:39:11.07,0:39:11.80,*Default,NTP,0000,0000,0000,,build the expression
Dialogue: 0,0:39:11.80,0:39:13.97,*Default,NTP,0000,0000,0000,,then draw a fairly complex circuitry
Dialogue: 0,0:39:14.00,0:39:16.20,*Default,NTP,0000,0000,0000,,with eight inputs and one output
Dialogue: 0,0:39:16.20,0:39:18.00,*Default,NTP,0000,0000,0000,,with the power of a little bit of abstraction
Dialogue: 0,0:39:18.00,0:39:20.33,*Default,NTP,0000,0000,0000,,I was able to do something a little bit nicer
Dialogue: 0,0:39:20.90,0:39:22.57,*Default,NTP,0000,0000,0000,,so I use this example because
Dialogue: 0,0:39:22.67,0:39:24.50,*Default,NTP,0000,0000,0000,,one of the things we'll be talking about is
Dialogue: 0,0:39:24.57,0:39:27.07,*Default,NTP,0000,0000,0000,,yes we'll want to turn that crank on the circuitry
Dialogue: 0,0:39:27.13,0:39:29.00,*Default,NTP,0000,0000,0000,,true tables sub expressions expressions
Dialogue: 0,0:39:29.00,0:39:31.07,*Default,NTP,0000,0000,0000,,but sometimes it's really inconvenient
Dialogue: 0,0:39:31.07,0:39:33.40,*Default,NTP,0000,0000,0000,,sometimes we have to be a little bit more clever
Dialogue: 0,0:39:34.07,0:39:35.10,*Default,NTP,0000,0000,0000,,okay so that's it for now
Dialogue: 0,0:39:35.10,0:39:35.70,*Default,NTP,0000,0000,0000,,when we come back
Dialogue: 0,0:39:35.70,0:39:37.13,*Default,NTP,0000,0000,0000,,we're gonna design a couple more circuits
Dialogue: 0,0:39:37.13,0:39:38.27,*Default,NTP,0000,0000,0000,,and we're gonna keep sort of
Dialogue: 0,0:39:38.47,0:39:40.57,*Default,NTP,0000,0000,0000,,seeing how these things are built
Dialogue: 0,0:39:40.67,0:39:42.87,*Default,NTP,0000,0000,0000,,and how to build more and more meaningful computation
Dialogue: 0,0:39:42.87,0:39:44.37,*Default,NTP,0000,0000,0000,,so see you in your few few minutes
Dialogue: 0,0:39:46.27,0:39:48.73,*Default,NTP,0000,0000,0000,,all right so we're gonna build
Dialogue: 0,0:39:49.17,0:39:50.57,*Default,NTP,0000,0000,0000,,an adder we're gonna
Dialogue: 0,0:39:51.27,0:39:53.97,*Default,NTP,0000,0000,0000,,go from these relatively simple circuits to something
Dialogue: 0,0:39:54.10,0:39:56.33,*Default,NTP,0000,0000,0000,,that you can really imagine a computer needing to do
Dialogue: 0,0:39:56.33,0:39:58.17,*Default,NTP,0000,0000,0000,,which is to add a bunch of members together
Dialogue: 0,0:39:58.60,0:39:59.93,*Default,NTP,0000,0000,0000,,so we're going to do this in two steps
Dialogue: 0,0:39:59.93,0:40:01.50,*Default,NTP,0000,0000,0000,,I'm going to build a one bit adder
Dialogue: 0,0:40:01.70,0:40:04.27,*Default,NTP,0000,0000,0000,,and then I'm going to show you how it generalizes to a
Dialogue: 0,0:40:04.27,0:40:04.97,*Default,NTP,0000,0000,0000,,four bit adder
Dialogue: 0,0:40:04.97,0:40:06.67,*Default,NTP,0000,0000,0000,,so in the same way we went from a one bit
Dialogue: 0,0:40:06.67,0:40:08.40,*Default,NTP,0000,0000,0000,,compared for equality to a four bit
Dialogue: 0,0:40:08.40,0:40:09.40,*Default,NTP,0000,0000,0000,,compared for equality
Dialogue: 0,0:40:09.47,0:40:12.13,*Default,NTP,0000,0000,0000,,we're going to build this up a little bit slow
Dialogue: 0,0:40:12.33,0:40:13.70,*Default,NTP,0000,0000,0000,,so here's the task
Dialogue: 0,0:40:13.70,0:40:16.30,*Default,NTP,0000,0000,0000,,please build for me a circuit that adds two
Dialogue: 0,0:40:16.77,0:40:17.73,*Default,NTP,0000,0000,0000,,one bit number
Dialogue: 0,0:40:17.73,0:40:20.40,*Default,NTP,0000,0000,0000,,so again remember we have to think in terms of bits
Dialogue: 0,0:40:20.53,0:40:23.60,*Default,NTP,0000,0000,0000,,so I have two numbers each of them are one bit
Dialogue: 0,0:40:23.60,0:40:25.00,*Default,NTP,0000,0000,0000,,so either it's a zero or a one
Dialogue: 0,0:40:25.00,0:40:27.57,*Default,NTP,0000,0000,0000,,and I'm going to add that either to a zero or a one
Dialogue: 0,0:40:28.87,0:40:30.60,*Default,NTP,0000,0000,0000,,all right so we know what we have to do
Dialogue: 0,0:40:30.73,0:40:32.13,*Default,NTP,0000,0000,0000,,let's first start making sure that we
Dialogue: 0,0:40:32.13,0:40:33.70,*Default,NTP,0000,0000,0000,,let's start by understanding that we
Dialogue: 0,0:40:33.80,0:40:35.93,*Default,NTP,0000,0000,0000,,let's start by making sure that we understand
Dialogue: 0,0:40:36.20,0:40:37.77,*Default,NTP,0000,0000,0000,,how the one bit addition work
Dialogue: 0,0:40:38.33,0:40:41.17,*Default,NTP,0000,0000,0000,,so here my two bits I'm going to add bit one bit two
Dialogue: 0,0:40:41.17,0:40:42.37,*Default,NTP,0000,0000,0000,,let's call that a and b
Dialogue: 0,0:40:42.50,0:40:45.70,*Default,NTP,0000,0000,0000,,and let's just do the addition so 0+0 of course is zero
Dialogue: 0,0:40:45.70,0:40:49.00,*Default,NTP,0000,0000,0000,,zero plus one is one and one plus zero is one it's
Dialogue: 0,0:40:49.00,0:40:52.70,*Default,NTP,0000,0000,0000,,that's easy all right what's 1+1 well let's see
Dialogue: 0,0:40:52.90,0:40:56.80,*Default,NTP,0000,0000,0000,,so this is one and one in base ten one plus one is two
Dialogue: 0,0:40:56.97,0:41:02.57,*Default,NTP,0000,0000,0000,,what is two in binary it is 1 0
Dialogue: 0,0:41:02.87,0:41:05.30,*Default,NTP,0000,0000,0000,,so now we have already had a little bit of a problem
Dialogue: 0,0:41:05.47,0:41:08.17,*Default,NTP,0000,0000,0000,,because here I only have one output right
Dialogue: 0,0:41:08.17,0:41:09.33,*Default,NTP,0000,0000,0000,,there was no carry
Dialogue: 0,0:41:09.73,0:41:14.37,*Default,NTP,0000,0000,0000,,but here I have some two outputs I have the sum
Dialogue: 0,0:41:14.53,0:41:16.70,*Default,NTP,0000,0000,0000,,which is zero but then there's like that carry
Dialogue: 0,0:41:16.70,0:41:18.13,*Default,NTP,0000,0000,0000,,or I have two bits out
Dialogue: 0,0:41:18.13,0:41:20.40,*Default,NTP,0000,0000,0000,,it's 1 0 so maybe I have to
Dialogue: 0,0:41:20.40,0:41:22.07,*Default,NTP,0000,0000,0000,,think about this a little bit different
Dialogue: 0,0:41:22.07,0:41:22.87,*Default,NTP,0000,0000,0000,,so
Dialogue: 0,0:41:23.80,0:41:24.60,*Default,NTP,0000,0000,0000,,carry and
Dialogue: 0,0:41:24.67,0:41:26.10,*Default,NTP,0000,0000,0000,,here's a good place to think
Dialogue: 0,0:41:26.10,0:41:28.13,*Default,NTP,0000,0000,0000,,about what's going to come next
Dialogue: 0,0:41:28.37,0:41:31.60,*Default,NTP,0000,0000,0000,,so eventually we're going to want to build a four bit
Dialogue: 0,0:41:31.60,0:41:33.77,*Default,NTP,0000,0000,0000,,an eight bit and a 16 bit adder
Dialogue: 0,0:41:34.00,0:41:35.10,*Default,NTP,0000,0000,0000,,and to do that we're
Dialogue: 0,0:41:35.13,0:41:36.97,*Default,NTP,0000,0000,0000,,definitely going to want to be able to carry digits
Dialogue: 0,0:41:36.97,0:41:37.97,*Default,NTP,0000,0000,0000,,because when we stack
Dialogue: 0,0:41:37.97,0:41:39.80,*Default,NTP,0000,0000,0000,,two binary numbers on top of each other
Dialogue: 0,0:41:40.27,0:41:41.37,*Default,NTP,0000,0000,0000,,we need to carry
Dialogue: 0,0:41:41.80,0:41:44.20,*Default,NTP,0000,0000,0000,,information to the left as we sum
Dialogue: 0,0:41:44.87,0:41:46.37,*Default,NTP,0000,0000,0000,,so let's see
Dialogue: 0,0:41:46.37,0:41:48.27,*Default,NTP,0000,0000,0000,,so initially I was thinking I would just have
Dialogue: 0,0:41:48.33,0:41:51.67,*Default,NTP,0000,0000,0000,,two inputs a and b and one output c
Dialogue: 0,0:41:51.93,0:41:53.27,*Default,NTP,0000,0000,0000,,but maybe I should rethink that
Dialogue: 0,0:41:53.27,0:41:57.10,*Default,NTP,0000,0000,0000,,maybe the input should be two digits a and b
Dialogue: 0,0:41:57.37,0:41:59.10,*Default,NTP,0000,0000,0000,,and then possibly a carry
Dialogue: 0,0:41:59.10,0:42:00.60,*Default,NTP,0000,0000,0000,,and again this is all about
Dialogue: 0,0:42:00.67,0:42:02.07,*Default,NTP,0000,0000,0000,,thinking down the line a little bit
Dialogue: 0,0:42:02.07,0:42:04.57,*Default,NTP,0000,0000,0000,,when I go from a one bit to a two bit to a
Dialogue: 0,0:42:05.10,0:42:07.13,*Default,NTP,0000,0000,0000,,or bit I'm going to stack these down
Dialogue: 0,0:42:07.13,0:42:09.97,*Default,NTP,0000,0000,0000,,and think about how you just add normal arithmetic
Dialogue: 0,0:42:10.07,0:42:11.80,*Default,NTP,0000,0000,0000,,you add the digits in the column
Dialogue: 0,0:42:11.80,0:42:13.70,*Default,NTP,0000,0000,0000,,but you potentially bring something over
Dialogue: 0,0:42:13.70,0:42:15.33,*Default,NTP,0000,0000,0000,,from the previous column
Dialogue: 0,0:42:15.70,0:42:18.17,*Default,NTP,0000,0000,0000,,so let's think about the binary edition
Dialogue: 0,0:42:18.20,0:42:20.37,*Default,NTP,0000,0000,0000,,in terms of now having three inputs
Dialogue: 0,0:42:20.37,0:42:22.17,*Default,NTP,0000,0000,0000,,ab and a possible carry
Dialogue: 0,0:42:22.17,0:42:24.20,*Default,NTP,0000,0000,0000,,and again that's going to allow us to generalize
Dialogue: 0,0:42:24.20,0:42:25.87,*Default,NTP,0000,0000,0000,,the circuit down the line
Dialogue: 0,0:42:26.07,0:42:27.27,*Default,NTP,0000,0000,0000,,okay now
Dialogue: 0,0:42:27.27,0:42:30.97,*Default,NTP,0000,0000,0000,,of course the output has to have more than just this
Dialogue: 0,0:42:30.97,0:42:34.37,*Default,NTP,0000,0000,0000,,it has to have an output which puts down
Dialogue: 0,0:42:34.90,0:42:37.87,*Default,NTP,0000,0000,0000,,below the horizontal line but also goods carried out
Dialogue: 0,0:42:38.33,0:42:39.40,*Default,NTP,0000,0000,0000,,so now even this
Dialogue: 0,0:42:39.40,0:42:40.80,*Default,NTP,0000,0000,0000,,one bit addition has already gotten a little
Dialogue: 0,0:42:40.80,0:42:44.77,*Default,NTP,0000,0000,0000,,complicated we have two in plus a carry that's three in
Dialogue: 0,0:42:44.93,0:42:47.40,*Default,NTP,0000,0000,0000,,and then the output is what is the sum
Dialogue: 0,0:42:47.40,0:42:49.33,*Default,NTP,0000,0000,0000,,and then what is the carry over here
Dialogue: 0,0:42:49.33,0:42:51.60,*Default,NTP,0000,0000,0000,,so we're gonna have two outputs
Dialogue: 0,0:42:51.87,0:42:52.07,*Default,NTP,0000,0000,0000,,all right
Dialogue: 0,0:42:52.07,0:42:54.73,*Default,NTP,0000,0000,0000,,let's make sure we see what's all happening here
Dialogue: 0,0:42:54.77,0:42:56.33,*Default,NTP,0000,0000,0000,,so let's imagine I want to some
Dialogue: 0,0:42:56.47,0:42:56.87,*Default,NTP,0000,0000,0000,,I have a
Dialogue: 0,0:42:56.87,0:42:59.30,*Default,NTP,0000,0000,0000,,three bit representation and I want to sum them up
Dialogue: 0,0:42:59.30,0:43:01.77,*Default,NTP,0000,0000,0000,,so let's first of all make sure this makes sense
Dialogue: 0,0:43:01.77,0:43:05.53,*Default,NTP,0000,0000,0000,,a 1 0 1 remember this is two to the 0 2 to the one
Dialogue: 0,0:43:05.53,0:43:06.47,*Default,NTP,0000,0000,0000,,two to the two
Dialogue: 0,0:43:06.60,0:43:09.57,*Default,NTP,0000,0000,0000,,so this is 4+1 which is five
Dialogue: 0,0:43:10.00,0:43:13.37,*Default,NTP,0000,0000,0000,,this is two to the zero which of course is just one
Dialogue: 0,0:43:13.37,0:43:14.57,*Default,NTP,0000,0000,0000,,and that vipers one is six
Dialogue: 0,0:43:14.57,0:43:15.97,*Default,NTP,0000,0000,0000,,so I'm gonna add these two numbers up
Dialogue: 0,0:43:15.97,0:43:17.30,*Default,NTP,0000,0000,0000,,and I better get six
Dialogue: 0,0:43:17.47,0:43:18.73,*Default,NTP,0000,0000,0000,,so let's start adding them up
Dialogue: 0,0:43:18.90,0:43:23.00,*Default,NTP,0000,0000,0000,,and I want you to keep track of the these three in
Dialogue: 0,0:43:23.17,0:43:25.13,*Default,NTP,0000,0000,0000,,and two out okay
Dialogue: 0,0:43:25.87,0:43:27.93,*Default,NTP,0000,0000,0000,,all right so here I have clearly two digits
Dialogue: 0,0:43:27.93,0:43:30.17,*Default,NTP,0000,0000,0000,,what's the carry from the previous column
Dialogue: 0,0:43:30.53,0:43:31.17,*Default,NTP,0000,0000,0000,,there is none
Dialogue: 0,0:43:31.17,0:43:33.40,*Default,NTP,0000,0000,0000,,it's zero it's implicitly there's a zero up there
Dialogue: 0,0:43:33.40,0:43:34.70,*Default,NTP,0000,0000,0000,,because there's nothing there
Dialogue: 0,0:43:34.87,0:43:36.67,*Default,NTP,0000,0000,0000,,all right what's one plus one two
Dialogue: 0,0:43:36.70,0:43:40.60,*Default,NTP,0000,0000,0000,,what is two it is 1 0 so there it is
Dialogue: 0,0:43:40.97,0:43:44.13,*Default,NTP,0000,0000,0000,,I have two in plus an implicit carry of zero
Dialogue: 0,0:43:44.17,0:43:47.07,*Default,NTP,0000,0000,0000,,and my output is what do I carry to the next column
Dialogue: 0,0:43:47.07,0:43:49.53,*Default,NTP,0000,0000,0000,,that's one and what do I bring down
Dialogue: 0,0:43:49.53,0:43:51.70,*Default,NTP,0000,0000,0000,,that's zero okay good
Dialogue: 0,0:43:51.87,0:43:53.57,*Default,NTP,0000,0000,0000,,now you can see my three inputs
Dialogue: 0,0:43:53.57,0:43:56.33,*Default,NTP,0000,0000,0000,,I'm going to sum that carry from the previous column
Dialogue: 0,0:43:56.33,0:43:59.80,*Default,NTP,0000,0000,0000,,plus 0+0 what is that that's one
Dialogue: 0,0:43:59.80,0:44:01.37,*Default,NTP,0000,0000,0000,,so I bring the zero down
Dialogue: 0,0:44:01.37,0:44:02.73,*Default,NTP,0000,0000,0000,,and implicitly I'm bringing the
Dialogue: 0,0:44:02.73,0:44:04.37,*Default,NTP,0000,0000,0000,,zero over to the next one
Dialogue: 0,0:44:04.80,0:44:07.97,*Default,NTP,0000,0000,0000,,so and then I've got zero plus one plus zero
Dialogue: 0,0:44:07.97,0:44:09.93,*Default,NTP,0000,0000,0000,,and of course that is one
Dialogue: 0,0:44:09.97,0:44:10.93,*Default,NTP,0000,0000,0000,,and of course if
Dialogue: 0,0:44:11.20,0:44:13.90,*Default,NTP,0000,0000,0000,,I do the calculation here that is two to the two
Dialogue: 0,0:44:13.90,0:44:15.67,*Default,NTP,0000,0000,0000,,two to the one two to the zero
Dialogue: 0,0:44:15.67,0:44:18.20,*Default,NTP,0000,0000,0000,,so it's 4+2 which is six
Dialogue: 0,0:44:18.27,0:44:20.67,*Default,NTP,0000,0000,0000,,okay so too bit addition
Dialogue: 0,0:44:20.67,0:44:23.13,*Default,NTP,0000,0000,0000,,if we are eventually going to
Dialogue: 0,0:44:23.30,0:44:27.53,*Default,NTP,0000,0000,0000,,generalize this to 3 4 5 6 7 8 fit edition
Dialogue: 0,0:44:27.73,0:44:29.87,*Default,NTP,0000,0000,0000,,we now have three ends
Dialogue: 0,0:44:30.13,0:44:31.60,*Default,NTP,0000,0000,0000,,what are the two digits you're summing
Dialogue: 0,0:44:31.60,0:44:33.20,*Default,NTP,0000,0000,0000,,plus a possible carry
Dialogue: 0,0:44:33.40,0:44:34.80,*Default,NTP,0000,0000,0000,,and we have two outs
Dialogue: 0,0:44:34.80,0:44:37.90,*Default,NTP,0000,0000,0000,,what comes down and what carries over to the
Dialogue: 0,0:44:38.10,0:44:40.17,*Default,NTP,0000,0000,0000,,next column three and two outs
Dialogue: 0,0:44:40.17,0:44:41.87,*Default,NTP,0000,0000,0000,,good so look at how much work
Dialogue: 0,0:44:41.87,0:44:42.93,*Default,NTP,0000,0000,0000,,by the way we had to do just to
Dialogue: 0,0:44:42.93,0:44:44.70,*Default,NTP,0000,0000,0000,,establish what the input output is
Dialogue: 0,0:44:45.37,0:44:46.67,*Default,NTP,0000,0000,0000,,but this is sort of the hard part
Dialogue: 0,0:44:46.67,0:44:48.33,*Default,NTP,0000,0000,0000,,now we've established what the problem is
Dialogue: 0,0:44:48.33,0:44:49.90,*Default,NTP,0000,0000,0000,,we've established how to define it
Dialogue: 0,0:44:49.97,0:44:51.73,*Default,NTP,0000,0000,0000,,and now we just have to start
Dialogue: 0,0:44:52.07,0:44:54.47,*Default,NTP,0000,0000,0000,,billion true table sub expressions expression circuitry
Dialogue: 0,0:44:54.47,0:44:56.60,*Default,NTP,0000,0000,0000,,okay so I have three ins
Dialogue: 0,0:44:56.77,0:44:58.73,*Default,NTP,0000,0000,0000,,I should have been called this a carry in
Dialogue: 0,0:44:58.80,0:45:00.17,*Default,NTP,0000,0000,0000,,and a carry out
Dialogue: 0,0:45:00.47,0:45:03.47,*Default,NTP,0000,0000,0000,,yeah so it's what's coming in and then what's going out
Dialogue: 0,0:45:03.47,0:45:04.97,*Default,NTP,0000,0000,0000,,okay 3 in 2 out
Dialogue: 0,0:45:04.97,0:45:05.77,*Default,NTP,0000,0000,0000,,all right good
Dialogue: 0,0:45:05.97,0:45:07.27,*Default,NTP,0000,0000,0000,,let's build a true table
Dialogue: 0,0:45:07.33,0:45:09.80,*Default,NTP,0000,0000,0000,,all right true table has three columns
Dialogue: 0,0:45:09.80,0:45:12.20,*Default,NTP,0000,0000,0000,,if it has three columns that has how many rows
Dialogue: 0,0:45:12.57,0:45:14.00,*Default,NTP,0000,0000,0000,,two to the power three
Dialogue: 0,0:45:14.17,0:45:15.47,*Default,NTP,0000,0000,0000,,which is eight
Dialogue: 0,0:45:15.67,0:45:17.50,*Default,NTP,0000,0000,0000,,and the way you populated is simply by
Dialogue: 0,0:45:17.50,0:45:19.27,*Default,NTP,0000,0000,0000,,counting in binary from zero
Dialogue: 0,0:45:19.27,0:45:21.50,*Default,NTP,0000,0000,0000,,to eight minus one seven
Dialogue: 0,0:45:21.50,0:45:25.33,*Default,NTP,0000,0000,0000,,so 0 0 0 0 1 0 1 0 etc etc
Dialogue: 0,0:45:25.80,0:45:27.33,*Default,NTP,0000,0000,0000,,so here are my eight
Dialogue: 0,0:45:27.40,0:45:29.80,*Default,NTP,0000,0000,0000,,rows associated with the three input columns
Dialogue: 0,0:45:29.80,0:45:32.37,*Default,NTP,0000,0000,0000,,those have to again enumerate every
Dialogue: 0,0:45:32.40,0:45:35.17,*Default,NTP,0000,0000,0000,,single possible pair of inputs
Dialogue: 0,0:45:35.30,0:45:38.17,*Default,NTP,0000,0000,0000,,and now I have to tell you what is going to be the
Dialogue: 0,0:45:38.30,0:45:39.53,*Default,NTP,0000,0000,0000,,sum that comes down
Dialogue: 0,0:45:39.67,0:45:41.67,*Default,NTP,0000,0000,0000,,and the carry that goes over
Dialogue: 0,0:45:41.87,0:45:43.10,*Default,NTP,0000,0000,0000,,so again these are the two digits
Dialogue: 0,0:45:43.10,0:45:45.13,*Default,NTP,0000,0000,0000,,were summing plus a possible carry
Dialogue: 0,0:45:45.17,0:45:46.33,*Default,NTP,0000,0000,0000,,that's the carry in
Dialogue: 0,0:45:46.57,0:45:48.60,*Default,NTP,0000,0000,0000,,this is the sum and the carry out
Dialogue: 0,0:45:48.60,0:45:51.20,*Default,NTP,0000,0000,0000,,okay so now just got rhythmetic
Dialogue: 0,0:45:51.20,0:45:53.00,*Default,NTP,0000,0000,0000,,we're going to tell the computer what the answer is
Dialogue: 0,0:45:53.00,0:45:54.50,*Default,NTP,0000,0000,0000,,in the same way we did for the compare
Dialogue: 0,0:45:54.50,0:45:56.30,*Default,NTP,0000,0000,0000,,for equality I'm going to do
Dialogue: 0,0:45:56.47,0:45:57.47,*Default,NTP,0000,0000,0000,,the addition for you
Dialogue: 0,0:45:57.47,0:45:57.80,*Default,NTP,0000,0000,0000,,and then the
Dialogue: 0,0:45:57.80,0:46:00.20,*Default,NTP,0000,0000,0000,,circuitry is simply going to implement those rules
Dialogue: 0,0:46:00.37,0:46:01.77,*Default,NTP,0000,0000,0000,,all right let's start going through it
Dialogue: 0,0:46:02.70,0:46:05.93,*Default,NTP,0000,0000,0000,,all right zero plus zero plus zero is zero
Dialogue: 0,0:46:05.93,0:46:07.13,*Default,NTP,0000,0000,0000,,and there's zero caring
Dialogue: 0,0:46:07.13,0:46:08.30,*Default,NTP,0000,0000,0000,,okay that one's easy
Dialogue: 0,0:46:08.37,0:46:11.57,*Default,NTP,0000,0000,0000,,what is zero plus zero plus one it's one
Dialogue: 0,0:46:11.80,0:46:15.53,*Default,NTP,0000,0000,0000,,so the one comes here what's the carry out zero
Dialogue: 0,0:46:15.53,0:46:17.53,*Default,NTP,0000,0000,0000,,there's nothing to carry there's no overflow
Dialogue: 0,0:46:17.87,0:46:18.93,*Default,NTP,0000,0000,0000,,okay that's easy
Dialogue: 0,0:46:18.93,0:46:20.13,*Default,NTP,0000,0000,0000,,let's look at this one
Dialogue: 0,0:46:20.27,0:46:23.57,*Default,NTP,0000,0000,0000,,so what's zero plus one plus zero well it's still one
Dialogue: 0,0:46:23.57,0:46:25.07,*Default,NTP,0000,0000,0000,,it's actually the same as this
Dialogue: 0,0:46:25.07,0:46:27.30,*Default,NTP,0000,0000,0000,,right I don't care what the order of these bits are
Dialogue: 0,0:46:27.37,0:46:29.17,*Default,NTP,0000,0000,0000,,so no reason to do extra work here
Dialogue: 0,0:46:29.17,0:46:31.20,*Default,NTP,0000,0000,0000,,once I know there's only one one here
Dialogue: 0,0:46:31.20,0:46:32.27,*Default,NTP,0000,0000,0000,,I know what the answer is
Dialogue: 0,0:46:32.27,0:46:33.77,*Default,NTP,0000,0000,0000,,it's going to be 1 0
Dialogue: 0,0:46:34.33,0:46:35.57,*Default,NTP,0000,0000,0000,,so that one's easy now
Dialogue: 0,0:46:35.77,0:46:37.33,*Default,NTP,0000,0000,0000,,ah this one let's think about this
Dialogue: 0,0:46:37.33,0:46:39.93,*Default,NTP,0000,0000,0000,,so this is zero plus one plus one that's two
Dialogue: 0,0:46:40.20,0:46:41.90,*Default,NTP,0000,0000,0000,,so what is two in binary
Dialogue: 0,0:46:42.00,0:46:44.77,*Default,NTP,0000,0000,0000,,carry the one drop the zero
Dialogue: 0,0:46:44.87,0:46:46.70,*Default,NTP,0000,0000,0000,,so that's going to be a zero here
Dialogue: 0,0:46:46.70,0:46:47.70,*Default,NTP,0000,0000,0000,,that's what comes down
Dialogue: 0,0:46:47.70,0:46:51.20,*Default,NTP,0000,0000,0000,,and the one is what carries over to the next column
Dialogue: 0,0:46:51.50,0:46:52.20,*Default,NTP,0000,0000,0000,,this one's easy
Dialogue: 0,0:46:52.20,0:46:55.40,*Default,NTP,0000,0000,0000,,there's only one one so we know what the answer is 1 0
Dialogue: 0,0:46:55.97,0:46:58.73,*Default,NTP,0000,0000,0000,,this one's easy there's two ones here the answer is two
Dialogue: 0,0:46:58.73,0:47:00.93,*Default,NTP,0000,0000,0000,,it's the same as that zero comes down
Dialogue: 0,0:47:01.00,0:47:03.40,*Default,NTP,0000,0000,0000,,carry as one this one's easy
Dialogue: 0,0:47:03.77,0:47:04.77,*Default,NTP,0000,0000,0000,,right work smart
Dialogue: 0,0:47:04.77,0:47:05.73,*Default,NTP,0000,0000,0000,,we've already done the work
Dialogue: 0,0:47:05.73,0:47:07.27,*Default,NTP,0000,0000,0000,,no reason to do the calculation
Dialogue: 0,0:47:07.40,0:47:08.90,*Default,NTP,0000,0000,0000,,now let's do the last one
Dialogue: 0,0:47:08.90,0:47:11.57,*Default,NTP,0000,0000,0000,,one plus one plus one is of course three
Dialogue: 0,0:47:11.77,0:47:14.10,*Default,NTP,0000,0000,0000,,what is three in binary it's one
Dialogue: 0,0:47:14.20,0:47:16.93,*Default,NTP,0000,0000,0000,,one drop the one carry the one
Dialogue: 0,0:47:16.97,0:47:20.33,*Default,NTP,0000,0000,0000,,so now c is d is one and e is one
Dialogue: 0,0:47:20.80,0:47:23.47,*Default,NTP,0000,0000,0000,,good now really truly all the hard work is done
Dialogue: 0,0:47:23.47,0:47:25.20,*Default,NTP,0000,0000,0000,,now we gotta just start turning the crank on
Dialogue: 0,0:47:25.20,0:47:25.80,*Default,NTP,0000,0000,0000,,sub expressions
Dialogue: 0,0:47:25.80,0:47:27.17,*Default,NTP,0000,0000,0000,,expressions and circuitry
Dialogue: 0,0:47:27.47,0:47:29.30,*Default,NTP,0000,0000,0000,,so I have three ins two out
Dialogue: 0,0:47:29.30,0:47:32.27,*Default,NTP,0000,0000,0000,,I've established what the value of the sum
Dialogue: 0,0:47:32.27,0:47:33.60,*Default,NTP,0000,0000,0000,,and the carry out is
Dialogue: 0,0:47:33.67,0:47:35.90,*Default,NTP,0000,0000,0000,,for all possible inputs
Dialogue: 0,0:47:35.93,0:47:38.97,*Default,NTP,0000,0000,0000,,and now let's start building up the sub expressions
Dialogue: 0,0:47:38.97,0:47:41.07,*Default,NTP,0000,0000,0000,,okay remember how the sub expressions work
Dialogue: 0,0:47:41.20,0:47:43.80,*Default,NTP,0000,0000,0000,,you treat each output column separately
Dialogue: 0,0:47:43.80,0:47:44.77,*Default,NTP,0000,0000,0000,,the d and the e
Dialogue: 0,0:47:44.77,0:47:47.20,*Default,NTP,0000,0000,0000,,output column are completely independent of each other
Dialogue: 0,0:47:47.47,0:47:49.87,*Default,NTP,0000,0000,0000,,we're going to identify wherever there's a one
Dialogue: 0,0:47:50.50,0:47:52.20,*Default,NTP,0000,0000,0000,,and then here here here and here
Dialogue: 0,0:47:52.20,0:47:54.60,*Default,NTP,0000,0000,0000,,we're going to build a sub expression using only
Dialogue: 0,0:47:54.73,0:47:56.13,*Default,NTP,0000,0000,0000,,and and not
Dialogue: 0,0:47:56.53,0:47:58.93,*Default,NTP,0000,0000,0000,,and then we're going to combine those sub expressions
Dialogue: 0,0:47:58.93,0:48:01.20,*Default,NTP,0000,0000,0000,,using the or operator
Dialogue: 0,0:48:01.30,0:48:03.00,*Default,NTP,0000,0000,0000,,and then once we have the final expression
Dialogue: 0,0:48:03.00,0:48:04.90,*Default,NTP,0000,0000,0000,,of course we're going to draw some circuitry
Dialogue: 0,0:48:04.90,0:48:05.97,*Default,NTP,0000,0000,0000,,so let's get started
Dialogue: 0,0:48:06.50,0:48:07.57,*Default,NTP,0000,0000,0000,,all right let's start with d
Dialogue: 0,0:48:07.97,0:48:11.47,*Default,NTP,0000,0000,0000,,I've isolated 1 2 3 four ones here
Dialogue: 0,0:48:11.47,0:48:15.10,*Default,NTP,0000,0000,0000,,so what is the sub expression associated with this
Dialogue: 0,0:48:15.10,0:48:16.73,*Default,NTP,0000,0000,0000,,remember you go back to the input variables
Dialogue: 0,0:48:16.73,0:48:17.80,*Default,NTP,0000,0000,0000,,if it's a one you nod
Dialogue: 0,0:48:17.80,0:48:19.33,*Default,NTP,0000,0000,0000,,if it's a zero you nodded
Dialogue: 0,0:48:19.33,0:48:20.57,*Default,NTP,0000,0000,0000,,if it's a zero you nodded
Dialogue: 0,0:48:20.57,0:48:22.33,*Default,NTP,0000,0000,0000,,if it's a one you carry it over
Dialogue: 0,0:48:22.67,0:48:24.80,*Default,NTP,0000,0000,0000,,so this sub expression should be not a
Dialogue: 0,0:48:25.20,0:48:27.87,*Default,NTP,0000,0000,0000,,and not b and c
Dialogue: 0,0:48:28.40,0:48:30.57,*Default,NTP,0000,0000,0000,,easy to do but again remember what you're doing
Dialogue: 0,0:48:31.00,0:48:35.47,*Default,NTP,0000,0000,0000,,you're looking for an expression that is 1 in 1
Dialogue: 0,0:48:35.47,0:48:37.33,*Default,NTP,0000,0000,0000,,and only one situation
Dialogue: 0,0:48:37.33,0:48:39.00,*Default,NTP,0000,0000,0000,,when a is 0 b a 0
Dialogue: 0,0:48:39.20,0:48:42.47,*Default,NTP,0000,0000,0000,,and c is one so if I not these two they turn to one
Dialogue: 0,0:48:42.73,0:48:43.53,*Default,NTP,0000,0000,0000,,that one's a one
Dialogue: 0,0:48:43.53,0:48:46.27,*Default,NTP,0000,0000,0000,,the only time that little sub expression
Dialogue: 0,0:48:46.37,0:48:48.30,*Default,NTP,0000,0000,0000,,which I'll draw right here is one
Dialogue: 0,0:48:48.37,0:48:50.37,*Default,NTP,0000,0000,0000,,is in that little row right there
Dialogue: 0,0:48:50.37,0:48:52.27,*Default,NTP,0000,0000,0000,,so not a not b and c
Dialogue: 0,0:48:52.60,0:48:53.87,*Default,NTP,0000,0000,0000,,all right let's do the next one
Dialogue: 0,0:48:53.87,0:48:54.67,*Default,NTP,0000,0000,0000,,what is it
Dialogue: 0,0:48:55.57,0:48:57.30,*Default,NTP,0000,0000,0000,,not a b
Dialogue: 0,0:48:57.70,0:48:59.47,*Default,NTP,0000,0000,0000,,not c good
Dialogue: 0,0:48:59.60,0:49:00.80,*Default,NTP,0000,0000,0000,,there it is right there
Dialogue: 0,0:49:00.87,0:49:02.50,*Default,NTP,0000,0000,0000,,and then let's just do the last two
Dialogue: 0,0:49:02.50,0:49:03.90,*Default,NTP,0000,0000,0000,,so this one is a
Dialogue: 0,0:49:04.17,0:49:05.80,*Default,NTP,0000,0000,0000,,not b and not c
Dialogue: 0,0:49:06.90,0:49:08.13,*Default,NTP,0000,0000,0000,,and last one is easy
Dialogue: 0,0:49:08.17,0:49:11.27,*Default,NTP,0000,0000,0000,,a b and c good
Dialogue: 0,0:49:11.37,0:49:12.33,*Default,NTP,0000,0000,0000,,so there are my
Dialogue: 0,0:49:12.50,0:49:13.67,*Default,NTP,0000,0000,0000,,four sub expressions
Dialogue: 0,0:49:13.67,0:49:15.07,*Default,NTP,0000,0000,0000,,corresponding to wherever there's a
Dialogue: 0,0:49:15.07,0:49:16.73,*Default,NTP,0000,0000,0000,,one on the output channel
Dialogue: 0,0:49:17.37,0:49:19.40,*Default,NTP,0000,0000,0000,,I won't go through these again
Dialogue: 0,0:49:19.40,0:49:21.27,*Default,NTP,0000,0000,0000,,I think we not window what the rule is
Dialogue: 0,0:49:21.37,0:49:24.17,*Default,NTP,0000,0000,0000,,so this one for example is not a b and c
Dialogue: 0,0:49:24.17,0:49:25.57,*Default,NTP,0000,0000,0000,,and these three you can
Dialogue: 0,0:49:26.40,0:49:27.90,*Default,NTP,0000,0000,0000,,derive from this right here
Dialogue: 0,0:49:28.13,0:49:30.37,*Default,NTP,0000,0000,0000,,so I have four sub expressions for d
Dialogue: 0,0:49:30.57,0:49:32.87,*Default,NTP,0000,0000,0000,,I have four sub expressions for e
Dialogue: 0,0:49:32.90,0:49:35.20,*Default,NTP,0000,0000,0000,,and now I'm ready to put them together in
Dialogue: 0,0:49:35.30,0:49:36.13,*Default,NTP,0000,0000,0000,,an expression
Dialogue: 0,0:49:36.13,0:49:37.87,*Default,NTP,0000,0000,0000,,and then we can draw the circuit
Dialogue: 0,0:49:38.20,0:49:39.67,*Default,NTP,0000,0000,0000,,alright so what's the expression
Dialogue: 0,0:49:40.70,0:49:44.20,*Default,NTP,0000,0000,0000,,this sub expression is one on this row only
Dialogue: 0,0:49:44.20,0:49:46.27,*Default,NTP,0000,0000,0000,,the sub expression is one on this row only
Dialogue: 0,0:49:46.27,0:49:47.57,*Default,NTP,0000,0000,0000,,and so on and so forth
Dialogue: 0,0:49:47.77,0:49:52.00,*Default,NTP,0000,0000,0000,,I want my output d to be a one if this is true
Dialogue: 0,0:49:52.13,0:49:55.47,*Default,NTP,0000,0000,0000,,or this is true or this is true or this is true
Dialogue: 0,0:49:55.53,0:49:58.30,*Default,NTP,0000,0000,0000,,so I simply or all the sub expressions together
Dialogue: 0,0:49:58.70,0:50:01.20,*Default,NTP,0000,0000,0000,,okay there's the expression right there super easy
Dialogue: 0,0:50:01.70,0:50:02.77,*Default,NTP,0000,0000,0000,,this same thing
Dialogue: 0,0:50:02.77,0:50:05.10,*Default,NTP,0000,0000,0000,,it's a one on this this this this
Dialogue: 0,0:50:05.10,0:50:06.53,*Default,NTP,0000,0000,0000,,I want the ore of them
Dialogue: 0,0:50:06.53,0:50:09.33,*Default,NTP,0000,0000,0000,,so I'm going to combine them with three oregates
Dialogue: 0,0:50:09.33,0:50:12.17,*Default,NTP,0000,0000,0000,,so now I have full on expressions for d
Dialogue: 0,0:50:12.70,0:50:15.87,*Default,NTP,0000,0000,0000,,and e and now I'm ready to build my one bit add
Dialogue: 0,0:50:18.00,0:50:21.07,*Default,NTP,0000,0000,0000,,okay so here is the one bit adder
Dialogue: 0,0:50:21.67,0:50:22.77,*Default,NTP,0000,0000,0000,,now in the past
Dialogue: 0,0:50:22.77,0:50:23.80,*Default,NTP,0000,0000,0000,,what we have done is
Dialogue: 0,0:50:23.80,0:50:26.13,*Default,NTP,0000,0000,0000,,we've brought in the input from the far left
Dialogue: 0,0:50:26.13,0:50:27.33,*Default,NTP,0000,0000,0000,,and the output is on the right
Dialogue: 0,0:50:27.33,0:50:29.10,*Default,NTP,0000,0000,0000,,I've done things a little bit differently
Dialogue: 0,0:50:29.17,0:50:30.07,*Default,NTP,0000,0000,0000,,you can see down here
Dialogue: 0,0:50:30.07,0:50:32.37,*Default,NTP,0000,0000,0000,,the inputs are coming from the bottom up
Dialogue: 0,0:50:32.67,0:50:34.00,*Default,NTP,0000,0000,0000,,and then the outputs are here
Dialogue: 0,0:50:34.00,0:50:37.90,*Default,NTP,0000,0000,0000,,so again a and b are the two inputs c is the carry in
Dialogue: 0,0:50:38.20,0:50:42.27,*Default,NTP,0000,0000,0000,,d is the sum and e is the carry out
Dialogue: 0,0:50:42.50,0:50:43.97,*Default,NTP,0000,0000,0000,,okay so
Dialogue: 0,0:50:44.13,0:50:45.93,*Default,NTP,0000,0000,0000,,the reason I've done it this way
Dialogue: 0,0:50:45.93,0:50:47.77,*Default,NTP,0000,0000,0000,,is I'm going to take these three inputs here
Dialogue: 0,0:50:47.77,0:50:50.50,*Default,NTP,0000,0000,0000,,and I'm going to drive them all the way to the top
Dialogue: 0,0:50:50.80,0:50:53.87,*Default,NTP,0000,0000,0000,,and then notice the three knot gates here
Dialogue: 0,0:50:54.17,0:50:56.70,*Default,NTP,0000,0000,0000,,I'm peeling off the signal to the knotgate
Dialogue: 0,0:50:56.70,0:50:58.93,*Default,NTP,0000,0000,0000,,I'm going to drive those all the way up
Dialogue: 0,0:50:59.00,0:51:00.87,*Default,NTP,0000,0000,0000,,and then I just feed the signal
Dialogue: 0,0:51:01.27,0:51:04.40,*Default,NTP,0000,0000,0000,,and the not of the signal
Dialogue: 0,0:51:04.80,0:51:06.97,*Default,NTP,0000,0000,0000,,into the angates
Dialogue: 0,0:51:07.10,0:51:09.47,*Default,NTP,0000,0000,0000,,into the angates down here and then into the oregates
Dialogue: 0,0:51:09.47,0:51:11.27,*Default,NTP,0000,0000,0000,,and the color coding here of course is
Dialogue: 0,0:51:11.33,0:51:14.67,*Default,NTP,0000,0000,0000,,the red corresponds to the d output
Dialogue: 0,0:51:14.73,0:51:18.27,*Default,NTP,0000,0000,0000,,and the blue corresponds to the e output
Dialogue: 0,0:51:18.47,0:51:19.50,*Default,NTP,0000,0000,0000,,the angates here
Dialogue: 0,0:51:19.50,0:51:21.80,*Default,NTP,0000,0000,0000,,of course from the original sub expression
Dialogue: 0,0:51:21.90,0:51:22.87,*Default,NTP,0000,0000,0000,,and then the ores
Dialogue: 0,0:51:22.87,0:51:24.70,*Default,NTP,0000,0000,0000,,those three ores are summing them up
Dialogue: 0,0:51:24.70,0:51:26.13,*Default,NTP,0000,0000,0000,,to get the final output
Dialogue: 0,0:51:26.50,0:51:27.77,*Default,NTP,0000,0000,0000,,and notice here that
Dialogue: 0,0:51:27.77,0:51:29.60,*Default,NTP,0000,0000,0000,,there's a fair amount of circuitry here
Dialogue: 0,0:51:29.60,0:51:33.10,*Default,NTP,0000,0000,0000,,even for this really simple one bid adder
Dialogue: 0,0:51:33.47,0:51:35.37,*Default,NTP,0000,0000,0000,,you need a fair amount of circuitry
Dialogue: 0,0:51:35.37,0:51:37.37,*Default,NTP,0000,0000,0000,,and so what we're going to talk about next
Dialogue: 0,0:51:37.53,0:51:40.17,*Default,NTP,0000,0000,0000,,is you know what can we do to reduce that circuitry
Dialogue: 0,0:51:40.17,0:51:41.50,*Default,NTP,0000,0000,0000,,and what happens as these things
Dialogue: 0,0:51:41.50,0:51:42.93,*Default,NTP,0000,0000,0000,,start to get more complicated
Dialogue: 0,0:51:43.07,0:51:45.13,*Default,NTP,0000,0000,0000,,and also what happens when I try to build
Dialogue: 0,0:51:45.13,0:51:46.37,*Default,NTP,0000,0000,0000,,for example a four bit adder
Dialogue: 0,0:51:46.37,0:51:47.50,*Default,NTP,0000,0000,0000,,and suddenly I have to draw
Dialogue: 0,0:51:47.50,0:51:48.73,*Default,NTP,0000,0000,0000,,lots of these different gates
Dialogue: 0,0:51:48.73,0:51:50.27,*Default,NTP,0000,0000,0000,,and things get complicated very fast
Dialogue: 0,0:51:50.27,0:51:52.80,*Default,NTP,0000,0000,0000,,we're gonna see how we can think about these larger
Dialogue: 0,0:51:52.90,0:51:53.97,*Default,NTP,0000,0000,0000,,more complex circuits
Dialogue: 0,0:51:53.97,0:51:55.97,*Default,NTP,0000,0000,0000,,so we'll pick it up in a little bit see you soon
Dialogue: 0,0:51:59.07,0:52:01.20,*Default,NTP,0000,0000,0000,,as promise we're now going to build
Dialogue: 0,0:52:01.87,0:52:04.73,*Default,NTP,0000,0000,0000,,circuitry for doing four bit edition
Dialogue: 0,0:52:04.73,0:52:07.17,*Default,NTP,0000,0000,0000,,so we're going to take two four bit numbers
Dialogue: 0,0:52:07.20,0:52:08.40,*Default,NTP,0000,0000,0000,,and we are going to add them
Dialogue: 0,0:52:08.40,0:52:10.13,*Default,NTP,0000,0000,0000,,in the same way that we did in the previous lecture
Dialogue: 0,0:52:10.13,0:52:11.73,*Default,NTP,0000,0000,0000,,we just stack them on top of each other
Dialogue: 0,0:52:12.07,0:52:12.60,*Default,NTP,0000,0000,0000,,we sum
Dialogue: 0,0:52:12.60,0:52:15.17,*Default,NTP,0000,0000,0000,,we carry we sum we carry we sum and we keep going
Dialogue: 0,0:52:15.17,0:52:16.57,*Default,NTP,0000,0000,0000,,and we do binary
Dialogue: 0,0:52:16.80,0:52:18.27,*Default,NTP,0000,0000,0000,,arithmetic or edition
Dialogue: 0,0:52:18.33,0:52:21.37,*Default,NTP,0000,0000,0000,,and obviously we're going to use the one bit
Dialogue: 0,0:52:21.70,0:52:24.53,*Default,NTP,0000,0000,0000,,adder that we just built because we know that
Dialogue: 0,0:52:24.67,0:52:26.73,*Default,NTP,0000,0000,0000,,end bit addition is just a series of these
Dialogue: 0,0:52:26.73,0:52:27.47,*Default,NTP,0000,0000,0000,,one bit addition
Dialogue: 0,0:52:27.47,0:52:30.07,*Default,NTP,0000,0000,0000,,so we're going to build this in a smart way
Dialogue: 0,0:52:30.10,0:52:33.10,*Default,NTP,0000,0000,0000,,all right so please build for me a circuit that adds
Dialogue: 0,0:52:33.10,0:52:34.10,*Default,NTP,0000,0000,0000,,two four bit numbers
Dialogue: 0,0:52:34.10,0:52:35.67,*Default,NTP,0000,0000,0000,,and again I want to emphasize
Dialogue: 0,0:52:35.93,0:52:37.73,*Default,NTP,0000,0000,0000,,pay attention to the bits
Dialogue: 0,0:52:37.93,0:52:39.80,*Default,NTP,0000,0000,0000,,because the inputs is not two
Dialogue: 0,0:52:40.13,0:52:43.10,*Default,NTP,0000,0000,0000,,it's now well at least eight
Dialogue: 0,0:52:43.10,0:52:45.60,*Default,NTP,0000,0000,0000,,but we know we have all those carries two right
Dialogue: 0,0:52:45.60,0:52:46.37,*Default,NTP,0000,0000,0000,,so we always
Dialogue: 0,0:52:46.37,0:52:49.00,*Default,NTP,0000,0000,0000,,have to be thinking in terms of bit representations
Dialogue: 0,0:52:49.00,0:52:52.00,*Default,NTP,0000,0000,0000,,because everything we do operates on bits
Dialogue: 0,0:52:52.47,0:52:54.90,*Default,NTP,0000,0000,0000,,all right well we know how to do one bit addition
Dialogue: 0,0:52:54.90,0:52:56.33,*Default,NTP,0000,0000,0000,,so notice here I've done something
Dialogue: 0,0:52:56.33,0:52:57.73,*Default,NTP,0000,0000,0000,,very similar to what I did
Dialogue: 0,0:52:57.93,0:52:59.90,*Default,NTP,0000,0000,0000,,with the one bit compare for equality
Dialogue: 0,0:52:59.90,0:53:00.57,*Default,NTP,0000,0000,0000,,I've taken that
Dialogue: 0,0:53:00.57,0:53:02.80,*Default,NTP,0000,0000,0000,,full circuitry that I showed you in the previous
Dialogue: 0,0:53:02.80,0:53:04.37,*Default,NTP,0000,0000,0000,,lecture I've got
Dialogue: 0,0:53:06.77,0:53:08.40,*Default,NTP,0000,0000,0000,,I have the carry in
Dialogue: 0,0:53:08.47,0:53:10.60,*Default,NTP,0000,0000,0000,,that's what's coming in from the previous column
Dialogue: 0,0:53:10.70,0:53:11.93,*Default,NTP,0000,0000,0000,,and I have two outputs
Dialogue: 0,0:53:11.93,0:53:13.73,*Default,NTP,0000,0000,0000,,the sum what drops down below
Dialogue: 0,0:53:13.73,0:53:15.80,*Default,NTP,0000,0000,0000,,and the carry out what carries over
Dialogue: 0,0:53:15.93,0:53:18.57,*Default,NTP,0000,0000,0000,,okay so 3 in 2 out
Dialogue: 0,0:53:18.60,0:53:20.17,*Default,NTP,0000,0000,0000,,and now I've simply drawn a little box
Dialogue: 0,0:53:20.17,0:53:21.47,*Default,NTP,0000,0000,0000,,and I've written one add
Dialogue: 0,0:53:21.47,0:53:22.93,*Default,NTP,0000,0000,0000,,which is a one bit edition
Dialogue: 0,0:53:23.00,0:53:24.57,*Default,NTP,0000,0000,0000,,and that is that full circuitry
Dialogue: 0,0:53:24.57,0:53:26.37,*Default,NTP,0000,0000,0000,,and again this is the power of abstraction
Dialogue: 0,0:53:26.67,0:53:27.97,*Default,NTP,0000,0000,0000,,once I know what's in here
Dialogue: 0,0:53:27.97,0:53:29.90,*Default,NTP,0000,0000,0000,,the same way that I know what's inside of a gate
Dialogue: 0,0:53:29.93,0:53:31.90,*Default,NTP,0000,0000,0000,,I simply can draw it in this abstract way
Dialogue: 0,0:53:31.90,0:53:33.27,*Default,NTP,0000,0000,0000,,and I don't have to worry about it anymore
Dialogue: 0,0:53:33.27,0:53:35.30,*Default,NTP,0000,0000,0000,,I built it I've tested it I know it works
Dialogue: 0,0:53:35.33,0:53:36.97,*Default,NTP,0000,0000,0000,,and now I can simply use it
Dialogue: 0,0:53:37.27,0:53:38.57,*Default,NTP,0000,0000,0000,,and so now what we want to do is
Dialogue: 0,0:53:38.57,0:53:40.70,*Default,NTP,0000,0000,0000,,wire up a bunch of these things
Dialogue: 0,0:53:40.73,0:53:42.33,*Default,NTP,0000,0000,0000,,in order to do forbid edition
Dialogue: 0,0:53:42.33,0:53:44.17,*Default,NTP,0000,0000,0000,,and of course we could do six eight
Dialogue: 0,0:53:44.17,0:53:45.17,*Default,NTP,0000,0000,0000,,et cetera et cetera
Dialogue: 0,0:53:45.17,0:53:47.13,*Default,NTP,0000,0000,0000,,we'll stop it for except I think you'll get the point
Dialogue: 0,0:53:47.50,0:53:50.27,*Default,NTP,0000,0000,0000,,so let's start thinking about how we want that to work
Dialogue: 0,0:53:50.27,0:53:53.87,*Default,NTP,0000,0000,0000,,and you just got to think about what happens and work
Dialogue: 0,0:53:53.97,0:53:55.40,*Default,NTP,0000,0000,0000,,I take these two things
Dialogue: 0,0:53:56.87,0:53:59.30,*Default,NTP,0000,0000,0000,,and then I'm going to
Dialogue: 0,0:53:59.40,0:54:01.37,*Default,NTP,0000,0000,0000,,shove that next carry to the next one
Dialogue: 0,0:54:01.37,0:54:03.40,*Default,NTP,0000,0000,0000,,which should be the input to the next one
Dialogue: 0,0:54:03.40,0:54:03.97,*Default,NTP,0000,0000,0000,,bid adder
Dialogue: 0,0:54:03.97,0:54:06.53,*Default,NTP,0000,0000,0000,,and we keep repeating that over and over again
Dialogue: 0,0:54:06.53,0:54:07.90,*Default,NTP,0000,0000,0000,,so let's see how that works
Dialogue: 0,0:54:08.00,0:54:09.53,*Default,NTP,0000,0000,0000,,all right so first of all
Dialogue: 0,0:54:09.70,0:54:14.57,*Default,NTP,0000,0000,0000,,here are my four bits for a and my four bits for b
Dialogue: 0,0:54:15.53,0:54:17.13,*Default,NTP,0000,0000,0000,,so that's what I want to sum up
Dialogue: 0,0:54:17.53,0:54:19.17,*Default,NTP,0000,0000,0000,,at those carries that we got to bring in
Dialogue: 0,0:54:19.17,0:54:20.70,*Default,NTP,0000,0000,0000,,that's fine we'll do that in a minute
Dialogue: 0,0:54:20.80,0:54:23.07,*Default,NTP,0000,0000,0000,,here's my one bit addition right here
Dialogue: 0,0:54:23.13,0:54:24.37,*Default,NTP,0000,0000,0000,,here are my two outputs
Dialogue: 0,0:54:24.37,0:54:27.17,*Default,NTP,0000,0000,0000,,there's a carry and then there's the
Dialogue: 0,0:54:27.53,0:54:28.53,*Default,NTP,0000,0000,0000,,digit the sum
Dialogue: 0,0:54:28.77,0:54:29.60,*Default,NTP,0000,0000,0000,,notice by the way
Dialogue: 0,0:54:29.60,0:54:31.27,*Default,NTP,0000,0000,0000,,that this is the thing that's coming out
Dialogue: 0,0:54:31.27,0:54:33.80,*Default,NTP,0000,0000,0000,,this carry is for internal purposes
Dialogue: 0,0:54:33.80,0:54:35.97,*Default,NTP,0000,0000,0000,,I don't report that to the summation
Dialogue: 0,0:54:36.10,0:54:39.47,*Default,NTP,0000,0000,0000,,I just need that to propagate the bits down
Dialogue: 0,0:54:39.53,0:54:42.47,*Default,NTP,0000,0000,0000,,so the output outside the circuitry is here
Dialogue: 0,0:54:42.87,0:54:45.53,*Default,NTP,0000,0000,0000,,now okay so here's a zero here's b zero
Dialogue: 0,0:54:45.53,0:54:48.97,*Default,NTP,0000,0000,0000,,those are the two ends but I also need a carry in
Dialogue: 0,0:54:49.37,0:54:52.50,*Default,NTP,0000,0000,0000,,so what's the carry in for the right most bit
Dialogue: 0,0:54:52.53,0:54:53.47,*Default,NTP,0000,0000,0000,,well it's zero
Dialogue: 0,0:54:53.47,0:54:56.13,*Default,NTP,0000,0000,0000,,okay good so we just shove a zero in there that's fine
Dialogue: 0,0:54:56.13,0:54:57.13,*Default,NTP,0000,0000,0000,,that's easy to do
Dialogue: 0,0:54:57.20,0:54:58.73,*Default,NTP,0000,0000,0000,,so now I've got three in
Dialogue: 0,0:54:59.00,0:55:00.40,*Default,NTP,0000,0000,0000,,I'm going to get a carry which
Dialogue: 0,0:55:00.40,0:55:03.33,*Default,NTP,0000,0000,0000,,again internal purposes is going to be used for the
Dialogue: 0,0:55:03.40,0:55:05.10,*Default,NTP,0000,0000,0000,,next bit a one and b one
Dialogue: 0,0:55:05.13,0:55:06.87,*Default,NTP,0000,0000,0000,,and the output is really just d zero
Dialogue: 0,0:55:06.87,0:55:08.10,*Default,NTP,0000,0000,0000,,that's the only thing I care about
Dialogue: 0,0:55:08.10,0:55:09.33,*Default,NTP,0000,0000,0000,,that will actually come out
Dialogue: 0,0:55:09.90,0:55:12.00,*Default,NTP,0000,0000,0000,,all right so how do we add the next one
Dialogue: 0,0:55:12.07,0:55:14.50,*Default,NTP,0000,0000,0000,,while I want to take a one and b one
Dialogue: 0,0:55:14.50,0:55:16.13,*Default,NTP,0000,0000,0000,,and what is the carry in
Dialogue: 0,0:55:16.37,0:55:19.47,*Default,NTP,0000,0000,0000,,it was the carry out from the previous bit
Dialogue: 0,0:55:19.60,0:55:22.73,*Default,NTP,0000,0000,0000,,so that's simply going to go into the one bit adder
Dialogue: 0,0:55:22.90,0:55:25.27,*Default,NTP,0000,0000,0000,,good so I've got a one here again
Dialogue: 0,0:55:25.27,0:55:27.13,*Default,NTP,0000,0000,0000,,cross wires open circle
Dialogue: 0,0:55:27.17,0:55:28.97,*Default,NTP,0000,0000,0000,,here comes b one right here
Dialogue: 0,0:55:29.00,0:55:31.87,*Default,NTP,0000,0000,0000,,the carry came in from above this adder
Dialogue: 0,0:55:31.97,0:55:33.77,*Default,NTP,0000,0000,0000,,the output is the same d one
Dialogue: 0,0:55:33.80,0:55:35.30,*Default,NTP,0000,0000,0000,,and now I've got the next carry
Dialogue: 0,0:55:35.37,0:55:36.93,*Default,NTP,0000,0000,0000,,good now we see the pattern
Dialogue: 0,0:55:37.30,0:55:39.33,*Default,NTP,0000,0000,0000,,all right started with a carry of zero
Dialogue: 0,0:55:39.33,0:55:40.87,*Default,NTP,0000,0000,0000,,and we keep dropping it down
Dialogue: 0,0:55:40.90,0:55:42.70,*Default,NTP,0000,0000,0000,,shoving it into the adder
Dialogue: 0,0:55:42.73,0:55:45.90,*Default,NTP,0000,0000,0000,,associated with the column that is to our left
Dialogue: 0,0:55:46.30,0:55:47.10,*Default,NTP,0000,0000,0000,,all right good
Dialogue: 0,0:55:47.10,0:55:48.53,*Default,NTP,0000,0000,0000,,a two here it is
Dialogue: 0,0:55:48.53,0:55:50.80,*Default,NTP,0000,0000,0000,,crosswire crosswire into the adder
Dialogue: 0,0:55:50.80,0:55:53.10,*Default,NTP,0000,0000,0000,,here is b2 into the adder
Dialogue: 0,0:55:53.13,0:55:54.60,*Default,NTP,0000,0000,0000,,carry in carry out
Dialogue: 0,0:55:54.60,0:55:56.40,*Default,NTP,0000,0000,0000,,my next sum is right there
Dialogue: 0,0:55:56.53,0:55:58.10,*Default,NTP,0000,0000,0000,,and now we're almost home
Dialogue: 0,0:55:58.13,0:56:00.97,*Default,NTP,0000,0000,0000,,we got the last one right here and we got the last
Dialogue: 0,0:56:01.93,0:56:04.30,*Default,NTP,0000,0000,0000,,sum what do I do with the carry out
Dialogue: 0,0:56:04.57,0:56:07.17,*Default,NTP,0000,0000,0000,,well I can only have four outputs
Dialogue: 0,0:56:07.17,0:56:08.77,*Default,NTP,0000,0000,0000,,that's how I've designed it
Dialogue: 0,0:56:08.77,0:56:10.40,*Default,NTP,0000,0000,0000,,so I have four in and four out
Dialogue: 0,0:56:10.40,0:56:12.80,*Default,NTP,0000,0000,0000,,so if these two things sum up to something
Dialogue: 0,0:56:12.93,0:56:14.70,*Default,NTP,0000,0000,0000,,that is bigger than four bits
Dialogue: 0,0:56:14.70,0:56:16.33,*Default,NTP,0000,0000,0000,,I'm gonna have what's called an overflow
Dialogue: 0,0:56:16.33,0:56:17.73,*Default,NTP,0000,0000,0000,,and for now I'm going to ignore it
Dialogue: 0,0:56:17.73,0:56:18.97,*Default,NTP,0000,0000,0000,,there's other ways of dealing with this
Dialogue: 0,0:56:18.97,0:56:20.17,*Default,NTP,0000,0000,0000,,which we won't get into
Dialogue: 0,0:56:21.13,0:56:22.73,*Default,NTP,0000,0000,0000,,5th output and summed and said
Dialogue: 0,0:56:22.73,0:56:25.07,*Default,NTP,0000,0000,0000,,I have 4 in 24 bit numbers
Dialogue: 0,0:56:25.07,0:56:26.37,*Default,NTP,0000,0000,0000,,and please allow me to have
Dialogue: 0,0:56:26.90,0:56:29.17,*Default,NTP,0000,0000,0000,,an overflow but I'm going to ignore that
Dialogue: 0,0:56:29.17,0:56:31.90,*Default,NTP,0000,0000,0000,,so that carry just goes into junk and gets ignored
Dialogue: 0,0:56:32.93,0:56:35.50,*Default,NTP,0000,0000,0000,,so notice again the power of abstraction
Dialogue: 0,0:56:35.57,0:56:36.33,*Default,NTP,0000,0000,0000,,notice how much
Dialogue: 0,0:56:36.33,0:56:37.70,*Default,NTP,0000,0000,0000,,easier this was to do
Dialogue: 0,0:56:37.70,0:56:39.80,*Default,NTP,0000,0000,0000,,once we understood we had this building block here
Dialogue: 0,0:56:39.80,0:56:41.27,*Default,NTP,0000,0000,0000,,it's a lot like functions
Dialogue: 0,0:56:41.40,0:56:42.40,*Default,NTP,0000,0000,0000,,once you build these
Dialogue: 0,0:56:42.50,0:56:44.50,*Default,NTP,0000,0000,0000,,simple functions that have functionality
Dialogue: 0,0:56:44.50,0:56:46.33,*Default,NTP,0000,0000,0000,,you can use them over and over again to build
Dialogue: 0,0:56:46.33,0:56:48.40,*Default,NTP,0000,0000,0000,,more and more and more complex things
Dialogue: 0,0:56:48.57,0:56:50.00,*Default,NTP,0000,0000,0000,,okay and of course I can take
Dialogue: 0,0:56:50.13,0:56:52.47,*Default,NTP,0000,0000,0000,,two four bit adders now and make an eight
Dialogue: 0,0:56:52.47,0:56:54.50,*Default,NTP,0000,0000,0000,,bit adder and then I can take two eight bit adders
Dialogue: 0,0:56:54.50,0:56:56.53,*Default,NTP,0000,0000,0000,,make a 16 bit adder in each time
Dialogue: 0,0:56:56.60,0:56:59.67,*Default,NTP,0000,0000,0000,,I can keep it distracting out the complexity of what
Dialogue: 0,0:57:00.60,0:57:01.53,*Default,NTP,0000,0000,0000,,underneath it
Dialogue: 0,0:57:01.93,0:57:02.87,*Default,NTP,0000,0000,0000,,alright so
Dialogue: 0,0:57:03.33,0:57:05.50,*Default,NTP,0000,0000,0000,,this again is the circuitry for a one bit adder
Dialogue: 0,0:57:05.50,0:57:06.67,*Default,NTP,0000,0000,0000,,and if you remember in the last doctor
Dialogue: 0,0:57:06.67,0:57:07.73,*Default,NTP,0000,0000,0000,,I said that's a lot of
Dialogue: 0,0:57:07.73,0:57:10.30,*Default,NTP,0000,0000,0000,,gates to do something as simple as a one bit adder
Dialogue: 0,0:57:10.67,0:57:12.20,*Default,NTP,0000,0000,0000,,I just want to sort of run through a little
Dialogue: 0,0:57:12.20,0:57:14.13,*Default,NTP,0000,0000,0000,,back of the interval calculation with you here
Dialogue: 0,0:57:14.13,0:57:16.20,*Default,NTP,0000,0000,0000,,imagine I'm trying to build a 32 bid adder
Dialogue: 0,0:57:16.20,0:57:17.30,*Default,NTP,0000,0000,0000,,that's how reasonably
Dialogue: 0,0:57:17.67,0:57:20.07,*Default,NTP,0000,0000,0000,,allows you to represent reasonably large numbers
Dialogue: 0,0:57:20.20,0:57:21.53,*Default,NTP,0000,0000,0000,,well then what I would need
Dialogue: 0,0:57:21.80,0:57:27.77,*Default,NTP,0000,0000,0000,,are 96 knot gates 512 ant gates and 192
Dialogue: 0,0:57:28.17,0:57:29.97,*Default,NTP,0000,0000,0000,,oregates how did I get to that
Dialogue: 0,0:57:30.07,0:57:30.40,*Default,NTP,0000,0000,0000,,well
Dialogue: 0,0:57:30.40,0:57:33.10,*Default,NTP,0000,0000,0000,,this thing over here for the one bit has six oregates
Dialogue: 0,0:57:33.10,0:57:35.53,*Default,NTP,0000,0000,0000,,16 and gates and three knot gates
Dialogue: 0,0:57:35.67,0:57:38.57,*Default,NTP,0000,0000,0000,,okay and so I just multiplied that by 32 each
Dialogue: 0,0:57:38.57,0:57:42.17,*Default,NTP,0000,0000,0000,,I have 800 gates to do only
Dialogue: 0,0:57:42.17,0:57:44.80,*Default,NTP,0000,0000,0000,,only only addition right
Dialogue: 0,0:57:45.60,0:57:48.33,*Default,NTP,0000,0000,0000,,multiplication division all those things can't be done
Dialogue: 0,0:57:48.33,0:57:51.10,*Default,NTP,0000,0000,0000,,so is that a lot is 800 gates a lot
Dialogue: 0,0:57:51.30,0:57:52.10,*Default,NTP,0000,0000,0000,,well
Dialogue: 0,0:57:52.33,0:57:56.90,*Default,NTP,0000,0000,0000,,that 800 gates corresponds to about 1500 transistors
Dialogue: 0,0:57:56.90,0:57:59.30,*Default,NTP,0000,0000,0000,,because when you're building circuitry
Dialogue: 0,0:57:59.50,0:58:00.33,*Default,NTP,0000,0000,0000,,you're building gates
Dialogue: 0,0:58:00.33,0:58:02.17,*Default,NTP,0000,0000,0000,,but really underneath its transistors
Dialogue: 0,0:58:02.17,0:58:03.70,*Default,NTP,0000,0000,0000,,right so now look at what I'm doing
Dialogue: 0,0:58:03.70,0:58:06.27,*Default,NTP,0000,0000,0000,,I'm popping out the levels of abstraction
Dialogue: 0,0:58:06.73,0:58:08.50,*Default,NTP,0000,0000,0000,,I'm pushing through the one bits
Dialogue: 0,0:58:08.50,0:58:10.20,*Default,NTP,0000,0000,0000,,I've got the circuitry for the
Dialogue: 0,0:58:10.20,0:58:11.20,*Default,NTP,0000,0000,0000,,for the 32 bit adders
Dialogue: 0,0:58:11.20,0:58:13.13,*Default,NTP,0000,0000,0000,,that's made up of a bunch of one bit adders
Dialogue: 0,0:58:13.13,0:58:14.50,*Default,NTP,0000,0000,0000,,that's made up of a bunch of gates
Dialogue: 0,0:58:14.50,0:58:16.67,*Default,NTP,0000,0000,0000,,and that's made up of a bunch of transistors
Dialogue: 0,0:58:16.67,0:58:19.27,*Default,NTP,0000,0000,0000,,I need 1500 transistors
Dialogue: 0,0:58:19.30,0:58:22.00,*Default,NTP,0000,0000,0000,,to do one single mathematical operation
Dialogue: 0,0:58:22.00,0:58:23.73,*Default,NTP,0000,0000,0000,,which is 32 bit addition
Dialogue: 0,0:58:24.00,0:58:25.87,*Default,NTP,0000,0000,0000,,now if we were in 1945
Dialogue: 0,0:58:26.30,0:58:30.07,*Default,NTP,0000,0000,0000,,I would need roughly a refrigerator size computer
Dialogue: 0,0:58:30.10,0:58:32.20,*Default,NTP,0000,0000,0000,,to do that single calculation
Dialogue: 0,0:58:32.57,0:58:33.57,*Default,NTP,0000,0000,0000,,that's insane
Dialogue: 0,0:58:33.57,0:58:35.47,*Default,NTP,0000,0000,0000,,and that's because transistors were not these
Dialogue: 0,0:58:35.47,0:58:37.67,*Default,NTP,0000,0000,0000,,tiny minuscule things we have today
Dialogue: 0,0:58:37.67,0:58:39.50,*Default,NTP,0000,0000,0000,,they were big physical things
Dialogue: 0,0:58:39.77,0:58:41.07,*Default,NTP,0000,0000,0000,,that occupied a lot of space
Dialogue: 0,0:58:41.07,0:58:42.70,*Default,NTP,0000,0000,0000,,so the magic in
Dialogue: 0,0:58:43.10,0:58:46.93,*Default,NTP,0000,0000,0000,,today's computers that if I have for 1500 transistors
Dialogue: 0,0:58:47.10,0:58:48.97,*Default,NTP,0000,0000,0000,,I can put that on something that is much
Dialogue: 0,0:58:48.97,0:58:50.57,*Default,NTP,0000,0000,0000,,much much smaller
Dialogue: 0,0:58:50.67,0:58:52.77,*Default,NTP,0000,0000,0000,,than a printed period on a
Dialogue: 0,0:58:53.00,0:58:53.97,*Default,NTP,0000,0000,0000,,piece of paper
Dialogue: 0,0:58:54.40,0:58:56.60,*Default,NTP,0000,0000,0000,,this is the magic of modern day computers
Dialogue: 0,0:58:56.60,0:58:58.27,*Default,NTP,0000,0000,0000,,that these transistors
Dialogue: 0,0:58:58.97,0:59:02.27,*Default,NTP,0000,0000,0000,,can now be made incredibly small
Dialogue: 0,0:59:02.40,0:59:03.73,*Default,NTP,0000,0000,0000,,and so you can pack more
Dialogue: 0,0:59:03.73,0:59:05.33,*Default,NTP,0000,0000,0000,,more transistors onto a circuit board
Dialogue: 0,0:59:05.33,0:59:06.67,*Default,NTP,0000,0000,0000,,which means you can pack more gates
Dialogue: 0,0:59:06.67,0:59:08.50,*Default,NTP,0000,0000,0000,,which means you can pack more circuitry
Dialogue: 0,0:59:08.53,0:59:10.30,*Default,NTP,0000,0000,0000,,which means you can have now in
Dialogue: 0,0:59:10.87,0:59:12.47,*Default,NTP,0000,0000,0000,,your jacket pocket
Dialogue: 0,0:59:12.67,0:59:13.47,*Default,NTP,0000,0000,0000,,a cell phone
Dialogue: 0,0:59:13.47,0:59:15.97,*Default,NTP,0000,0000,0000,,that is the equivalent of a supercomputer from
Dialogue: 0,0:59:16.53,0:59:19.07,*Default,NTP,0000,0000,0000,,60 years ago and so this is
Dialogue: 0,0:59:19.17,0:59:20.60,*Default,NTP,0000,0000,0000,,what's sort of amazing about this
Dialogue: 0,0:59:20.60,0:59:21.87,*Default,NTP,0000,0000,0000,,to know when you do these calculations
Dialogue: 0,0:59:21.87,0:59:24.93,*Default,NTP,0000,0000,0000,,is you see the complexity of a modern computer
Dialogue: 0,0:59:25.17,0:59:28.13,*Default,NTP,0000,0000,0000,,all we've done is built edition not even a calculator
Dialogue: 0,0:59:28.20,0:59:30.07,*Default,NTP,0000,0000,0000,,and look at how much work we've had done
Dialogue: 0,0:59:30.10,0:59:33.30,*Default,NTP,0000,0000,0000,,but look at the power of these tiny transistors
Dialogue: 0,0:59:34.20,0:59:34.90,*Default,NTP,0000,0000,0000,,all right
Dialogue: 0,0:59:34.90,0:59:37.13,*Default,NTP,0000,0000,0000,,so in the next two lectures these are the last two
Dialogue: 0,0:59:37.13,0:59:38.87,*Default,NTP,0000,0000,0000,,we're gonna talk a little bit more about circuitry
Dialogue: 0,0:59:38.87,0:59:40.27,*Default,NTP,0000,0000,0000,,we're gonna talk about optimization
Dialogue: 0,0:59:40.27,0:59:41.73,*Default,NTP,0000,0000,0000,,how do you make these things
Dialogue: 0,0:59:42.17,0:59:44.33,*Default,NTP,0000,0000,0000,,because of how big they can get
Dialogue: 0,0:59:44.33,0:59:47.30,*Default,NTP,0000,0000,0000,,if you do this sort of very simple design
Dialogue: 0,0:59:47.30,0:59:49.40,*Default,NTP,0000,0000,0000,,you may end up with prohibitively large circuitry
Dialogue: 0,0:59:49.40,0:59:51.20,*Default,NTP,0000,0000,0000,,and there's some smart things that you can do
Dialogue: 0,0:59:51.30,0:59:53.17,*Default,NTP,0000,0000,0000,,and I'm going to give you a couple of examples of that
Dialogue: 0,0:59:53.17,0:59:55.47,*Default,NTP,0000,0000,0000,,just to round out the circuit design here
Dialogue: 0,0:59:55.47,0:59:56.70,*Default,NTP,0000,0000,0000,,alright see you in a few minutes
Dialogue: 0,0:59:59.33,1:00:00.57,*Default,NTP,0000,0000,0000,,in this well
Dialogue: 0,1:00:00.57,1:00:02.30,*Default,NTP,0000,0000,0000,,I'm going to ask you to build a
Dialogue: 0,1:00:02.30,1:00:04.00,*Default,NTP,0000,0000,0000,,circuit that determines if an
Dialogue: 0,1:00:04.00,1:00:05.10,*Default,NTP,0000,0000,0000,,eight bit number
Dialogue: 0,1:00:05.20,1:00:06.67,*Default,NTP,0000,0000,0000,,is identically zero
Dialogue: 0,1:00:06.87,1:00:07.97,*Default,NTP,0000,0000,0000,,so why would I do this
Dialogue: 0,1:00:07.97,1:00:10.00,*Default,NTP,0000,0000,0000,,why this kind of specialize thing
Dialogue: 0,1:00:10.40,1:00:13.47,*Default,NTP,0000,0000,0000,,well it turns out that you often design circuitry
Dialogue: 0,1:00:13.47,1:00:16.27,*Default,NTP,0000,0000,0000,,depending on what the computer is being asked to do
Dialogue: 0,1:00:16.70,1:00:18.87,*Default,NTP,0000,0000,0000,,and I don't think it'll surprise you to learn that you
Dialogue: 0,1:00:18.87,1:00:21.80,*Default,NTP,0000,0000,0000,,often will check to see if a number is zero
Dialogue: 0,1:00:21.80,1:00:23.87,*Default,NTP,0000,0000,0000,,so imagine you're counting down
Dialogue: 0,1:00:23.93,1:00:25.07,*Default,NTP,0000,0000,0000,,imagine if you want to know
Dialogue: 0,1:00:25.07,1:00:27.57,*Default,NTP,0000,0000,0000,,should I divide by this thing as it zero or not
Dialogue: 0,1:00:27.77,1:00:28.87,*Default,NTP,0000,0000,0000,,and I'm willing to bet
Dialogue: 0,1:00:28.87,1:00:29.40,*Default,NTP,0000,0000,0000,,if you go back
Dialogue: 0,1:00:29.40,1:00:30.70,*Default,NTP,0000,0000,0000,,and look at all the codes you've written
Dialogue: 0,1:00:30.70,1:00:31.47,*Default,NTP,0000,0000,0000,,at some point
Dialogue: 0,1:00:31.47,1:00:33.97,*Default,NTP,0000,0000,0000,,you've checked if some variable is equal to zero
Dialogue: 0,1:00:34.33,1:00:35.37,*Default,NTP,0000,0000,0000,,and sometimes
Dialogue: 0,1:00:35.37,1:00:36.77,*Default,NTP,0000,0000,0000,,it's useful to have
Dialogue: 0,1:00:36.77,1:00:39.50,*Default,NTP,0000,0000,0000,,highly specialized circuitry that does just one thing
Dialogue: 0,1:00:39.50,1:00:40.30,*Default,NTP,0000,0000,0000,,very specific
Dialogue: 0,1:00:40.30,1:00:41.70,*Default,NTP,0000,0000,0000,,that is very common
Dialogue: 0,1:00:41.90,1:00:43.17,*Default,NTP,0000,0000,0000,,because you can put that
Dialogue: 0,1:00:43.37,1:00:44.50,*Default,NTP,0000,0000,0000,,in the overall
Dialogue: 0,1:00:44.50,1:00:46.40,*Default,NTP,0000,0000,0000,,circuit board in a place that's very efficient
Dialogue: 0,1:00:46.50,1:00:47.07,*Default,NTP,0000,0000,0000,,and you can
Dialogue: 0,1:00:47.07,1:00:49.17,*Default,NTP,0000,0000,0000,,design it in a way that's as efficient as possible
Dialogue: 0,1:00:49.17,1:00:51.47,*Default,NTP,0000,0000,0000,,so always having general purpose circuitry
Dialogue: 0,1:00:51.67,1:00:52.93,*Default,NTP,0000,0000,0000,,so let's do this one
Dialogue: 0,1:00:53.17,1:00:55.53,*Default,NTP,0000,0000,0000,,very specialized circuit and it's just a good exercise
Dialogue: 0,1:00:55.53,1:00:56.97,*Default,NTP,0000,0000,0000,,also turning the crank
Dialogue: 0,1:00:57.07,1:00:59.30,*Default,NTP,0000,0000,0000,,of working through our four step process
Dialogue: 0,1:00:59.30,1:01:00.57,*Default,NTP,0000,0000,0000,,so first things first
Dialogue: 0,1:01:00.90,1:01:03.30,*Default,NTP,0000,0000,0000,,what is our input output that's always the case
Dialogue: 0,1:01:03.30,1:01:06.30,*Default,NTP,0000,0000,0000,,I have a single eight bit binary number
Dialogue: 0,1:01:06.40,1:01:09.40,*Default,NTP,0000,0000,0000,,which means I have eight inputs corresponding to a 0
Dialogue: 0,1:01:09.67,1:01:11.80,*Default,NTP,0000,0000,0000,,to a seven the bit positions
Dialogue: 0,1:01:11.93,1:01:15.77,*Default,NTP,0000,0000,0000,,and I wanna know if this number is equal to that number
Dialogue: 0,1:01:15.77,1:01:18.00,*Default,NTP,0000,0000,0000,,that is all of the numbers are zero
Dialogue: 0,1:01:18.00,1:01:19.73,*Default,NTP,0000,0000,0000,,a zero zero a100
Dialogue: 0,1:01:20.13,1:01:21.47,*Default,NTP,0000,0000,0000,,and so on and so forth
Dialogue: 0,1:01:21.47,1:01:23.90,*Default,NTP,0000,0000,0000,,okay so I could write a one way to do this
Dialogue: 0,1:01:23.90,1:01:25.80,*Default,NTP,0000,0000,0000,,as I could say okay let's write a one bit
Dialogue: 0,1:01:25.90,1:01:27.37,*Default,NTP,0000,0000,0000,,compare for zero
Dialogue: 0,1:01:27.50,1:01:29.73,*Default,NTP,0000,0000,0000,,build that circuit and then wire everything together
Dialogue: 0,1:01:29.73,1:01:31.10,*Default,NTP,0000,0000,0000,,because it seems like maybe
Dialogue: 0,1:01:31.17,1:01:32.07,*Default,NTP,0000,0000,0000,,well that's been the trend
Dialogue: 0,1:01:32.07,1:01:33.80,*Default,NTP,0000,0000,0000,,we went from a one bit compare for equality
Dialogue: 0,1:01:33.80,1:01:35.20,*Default,NTP,0000,0000,0000,,to a four bit compare for equality
Dialogue: 0,1:01:35.20,1:01:37.57,*Default,NTP,0000,0000,0000,,went from a one bit adder to a four bit adder
Dialogue: 0,1:01:38.10,1:01:39.70,*Default,NTP,0000,0000,0000,,and this seems like a lot of inputs
Dialogue: 0,1:01:39.70,1:01:41.67,*Default,NTP,0000,0000,0000,,because if I have eight inputs
Dialogue: 0,1:01:41.70,1:01:44.20,*Default,NTP,0000,0000,0000,,how many rows am I going to have in my table
Dialogue: 0,1:01:44.60,1:01:46.73,*Default,NTP,0000,0000,0000,,two to the power eight to 56
Dialogue: 0,1:01:46.80,1:01:48.97,*Default,NTP,0000,0000,0000,,I'm not writing a true table 2 in 56 centuries
Dialogue: 0,1:01:48.97,1:01:50.37,*Default,NTP,0000,0000,0000,,and I don't think you should either
Dialogue: 0,1:01:50.97,1:01:52.10,*Default,NTP,0000,0000,0000,,but before we
Dialogue: 0,1:01:52.30,1:01:54.73,*Default,NTP,0000,0000,0000,,try to design the one bit compare for zero
Dialogue: 0,1:01:54.73,1:01:55.67,*Default,NTP,0000,0000,0000,,and then generalize it
Dialogue: 0,1:01:55.67,1:01:58.10,*Default,NTP,0000,0000,0000,,let's think through this truth table for a second
Dialogue: 0,1:01:59.30,1:02:01.40,*Default,NTP,0000,0000,0000,,so I know that I have to enumerate every
Dialogue: 0,1:02:01.40,1:02:02.37,*Default,NTP,0000,0000,0000,,single possible row
Dialogue: 0,1:02:02.37,1:02:03.53,*Default,NTP,0000,0000,0000,,for all possible
Dialogue: 0,1:02:03.87,1:02:06.67,*Default,NTP,0000,0000,0000,,inputs and I know that there are 256 of those
Dialogue: 0,1:02:07.07,1:02:08.37,*Default,NTP,0000,0000,0000,,but what do I also know
Dialogue: 0,1:02:08.37,1:02:10.10,*Default,NTP,0000,0000,0000,,that's going to happen in step two
Dialogue: 0,1:02:10.67,1:02:12.67,*Default,NTP,0000,0000,0000,,I'm going to go through this output column
Dialogue: 0,1:02:12.67,1:02:13.40,*Default,NTP,0000,0000,0000,,and what am I going to do
Dialogue: 0,1:02:13.40,1:02:16.10,*Default,NTP,0000,0000,0000,,I'm going to find all the places where there's a one
Dialogue: 0,1:02:16.20,1:02:17.97,*Default,NTP,0000,0000,0000,,and I'm going to build a sub expression
Dialogue: 0,1:02:18.00,1:02:18.97,*Default,NTP,0000,0000,0000,,using and a knot
Dialogue: 0,1:02:18.97,1:02:19.97,*Default,NTP,0000,0000,0000,,and then I'm going to combine
Dialogue: 0,1:02:19.97,1:02:21.77,*Default,NTP,0000,0000,0000,,those sub expressions using ores
Dialogue: 0,1:02:22.20,1:02:23.53,*Default,NTP,0000,0000,0000,,all right but let's think through that
Dialogue: 0,1:02:23.53,1:02:25.53,*Default,NTP,0000,0000,0000,,think through any row here
Dialogue: 0,1:02:26.10,1:02:28.47,*Default,NTP,0000,0000,0000,,that is not 0 0 0 0
Dialogue: 0,1:02:28.47,1:02:30.93,*Default,NTP,0000,0000,0000,,to that what is the value of I going to be
Dialogue: 0,1:02:31.73,1:02:33.33,*Default,NTP,0000,0000,0000,,zero it's not zero
Dialogue: 0,1:02:33.53,1:02:36.13,*Default,NTP,0000,0000,0000,,there is one row and one row only
Dialogue: 0,1:02:36.40,1:02:41.57,*Default,NTP,0000,0000,0000,,0 0 0 0 0 0 0 0 where there's a one
Dialogue: 0,1:02:41.97,1:02:45.00,*Default,NTP,0000,0000,0000,,so in fact this isn't nearly as bad as it seems
Dialogue: 0,1:02:45.00,1:02:47.73,*Default,NTP,0000,0000,0000,,because every row and it's the first row by the way
Dialogue: 0,1:02:47.73,1:02:48.37,*Default,NTP,0000,0000,0000,,on top of that
Dialogue: 0,1:02:48.37,1:02:51.10,*Default,NTP,0000,0000,0000,,every row after that will have a zero in the eye
Dialogue: 0,1:02:51.33,1:02:53.07,*Default,NTP,0000,0000,0000,,I don't have to worry about those rows
Dialogue: 0,1:02:53.07,1:02:53.47,*Default,NTP,0000,0000,0000,,because
Dialogue: 0,1:02:53.47,1:02:55.57,*Default,NTP,0000,0000,0000,,I'm not going to build a sub expression for them
Dialogue: 0,1:02:56.07,1:02:58.53,*Default,NTP,0000,0000,0000,,so in fact this truth table is incredibly simple
Dialogue: 0,1:02:58.53,1:03:01.27,*Default,NTP,0000,0000,0000,,there's only one row that is relevant to us
Dialogue: 0,1:03:01.40,1:03:03.80,*Default,NTP,0000,0000,0000,,because all the other rows will come for free
Dialogue: 0,1:03:03.90,1:03:06.30,*Default,NTP,0000,0000,0000,,because there is a zero and the eye column
Dialogue: 0,1:03:06.33,1:03:07.80,*Default,NTP,0000,0000,0000,,well once I have this
Dialogue: 0,1:03:08.20,1:03:09.80,*Default,NTP,0000,0000,0000,,I've got a pretty easy expression
Dialogue: 0,1:03:09.80,1:03:10.87,*Default,NTP,0000,0000,0000,,let's write it out
Dialogue: 0,1:03:11.33,1:03:13.93,*Default,NTP,0000,0000,0000,,so what is the sub expression for this
Dialogue: 0,1:03:14.13,1:03:14.57,*Default,NTP,0000,0000,0000,,well again
Dialogue: 0,1:03:14.57,1:03:15.37,*Default,NTP,0000,0000,0000,,we're going to combine
Dialogue: 0,1:03:15.37,1:03:17.80,*Default,NTP,0000,0000,0000,,all the inputs with a combination of
Dialogue: 0,1:03:17.80,1:03:19.20,*Default,NTP,0000,0000,0000,,and a knot
Dialogue: 0,1:03:19.90,1:03:22.67,*Default,NTP,0000,0000,0000,,all right how do I get a one when I have eight zeros
Dialogue: 0,1:03:22.67,1:03:27.77,*Default,NTP,0000,0000,0000,,it's not a and not b and not c up to not h
Dialogue: 0,1:03:28.10,1:03:29.53,*Default,NTP,0000,0000,0000,,I take the knot of everything
Dialogue: 0,1:03:29.70,1:03:32.77,*Default,NTP,0000,0000,0000,,if they're all zero all of those will be one
Dialogue: 0,1:03:32.77,1:03:34.40,*Default,NTP,0000,0000,0000,,and if they're all one
Dialogue: 0,1:03:34.53,1:03:34.77,*Default,NTP,0000,0000,0000,,well
Dialogue: 0,1:03:34.77,1:03:37.07,*Default,NTP,0000,0000,0000,,then the whole express sub expression will be a one
Dialogue: 0,1:03:37.07,1:03:39.80,*Default,NTP,0000,0000,0000,,and if any one of these is a one to begin with
Dialogue: 0,1:03:40.10,1:03:41.80,*Default,NTP,0000,0000,0000,,when I nodded it flips to a zero
Dialogue: 0,1:03:41.80,1:03:43.07,*Default,NTP,0000,0000,0000,,and they have veto power
Dialogue: 0,1:03:43.07,1:03:45.37,*Default,NTP,0000,0000,0000,,the whole thing will evaluate to zero
Dialogue: 0,1:03:45.37,1:03:48.73,*Default,NTP,0000,0000,0000,,and that's 255 rows below this
Dialogue: 0,1:03:48.93,1:03:50.90,*Default,NTP,0000,0000,0000,,all right so this turns out to be pretty easy
Dialogue: 0,1:03:51.17,1:03:52.13,*Default,NTP,0000,0000,0000,,the sub expression
Dialogue: 0,1:03:52.13,1:03:52.80,*Default,NTP,0000,0000,0000,,which is also
Dialogue: 0,1:03:52.80,1:03:54.50,*Default,NTP,0000,0000,0000,,the expression because there's only one of them
Dialogue: 0,1:03:54.50,1:03:55.37,*Default,NTP,0000,0000,0000,,is just not a
Dialogue: 0,1:03:55.37,1:03:58.60,*Default,NTP,0000,0000,0000,,not and not b and not c up to not h
Dialogue: 0,1:03:59.17,1:04:01.00,*Default,NTP,0000,0000,0000,,all right now we can draw the circuit
Dialogue: 0,1:04:01.37,1:04:03.37,*Default,NTP,0000,0000,0000,,I've got my eight inputs here
Dialogue: 0,1:04:03.37,1:04:05.53,*Default,NTP,0000,0000,0000,,corresponding to each of the bits of my
Dialogue: 0,1:04:05.70,1:04:07.60,*Default,NTP,0000,0000,0000,,a bit number I'm going to shove
Dialogue: 0,1:04:08.10,1:04:09.30,*Default,NTP,0000,0000,0000,,them into a knot gate
Dialogue: 0,1:04:09.30,1:04:11.20,*Default,NTP,0000,0000,0000,,you see them lined up right here
Dialogue: 0,1:04:11.27,1:04:13.10,*Default,NTP,0000,0000,0000,,and now I've just got to start ending them
Dialogue: 0,1:04:13.10,1:04:16.37,*Default,NTP,0000,0000,0000,,now be careful here and can only take two inputs right
Dialogue: 0,1:04:16.37,1:04:18.37,*Default,NTP,0000,0000,0000,,you can't shove all of these things into some big
Dialogue: 0,1:04:18.37,1:04:19.20,*Default,NTP,0000,0000,0000,,fat and gate
Dialogue: 0,1:04:19.20,1:04:21.07,*Default,NTP,0000,0000,0000,,so you gotta start pairing them off a little bit
Dialogue: 0,1:04:21.07,1:04:23.27,*Default,NTP,0000,0000,0000,,and there's you can do it in any different way
Dialogue: 0,1:04:23.27,1:04:25.53,*Default,NTP,0000,0000,0000,,you can pair these two these two these two these two
Dialogue: 0,1:04:25.53,1:04:26.57,*Default,NTP,0000,0000,0000,,and then combine them
Dialogue: 0,1:04:26.90,1:04:28.53,*Default,NTP,0000,0000,0000,,it doesn't matter because as long as
Dialogue: 0,1:04:28.70,1:04:30.67,*Default,NTP,0000,0000,0000,,they're all coming into the same and gates
Dialogue: 0,1:04:30.67,1:04:31.00,*Default,NTP,0000,0000,0000,,eventually
Dialogue: 0,1:04:31.00,1:04:33.00,*Default,NTP,0000,0000,0000,,it doesn't matter the order in which they do them
Dialogue: 0,1:04:33.57,1:04:35.87,*Default,NTP,0000,0000,0000,,so let me pair them off two at a time
Dialogue: 0,1:04:35.93,1:04:38.70,*Default,NTP,0000,0000,0000,,so a and b go through their knots they go into the end
Dialogue: 0,1:04:38.70,1:04:41.57,*Default,NTP,0000,0000,0000,,so at this point I've pair wised and everything
Dialogue: 0,1:04:41.73,1:04:42.90,*Default,NTP,0000,0000,0000,,and now I'm gonna do the same thing
Dialogue: 0,1:04:42.90,1:04:45.60,*Default,NTP,0000,0000,0000,,I'm gonna pair wise and pair wise and
Dialogue: 0,1:04:46.17,1:04:46.50,*Default,NTP,0000,0000,0000,,and then
Dialogue: 0,1:04:46.50,1:04:49.13,*Default,NTP,0000,0000,0000,,of course I just need one more at the very end here
Dialogue: 0,1:04:49.13,1:04:50.17,*Default,NTP,0000,0000,0000,,and then I'm done
Dialogue: 0,1:04:50.57,1:04:51.50,*Default,NTP,0000,0000,0000,,and notice
Dialogue: 0,1:04:51.53,1:04:54.27,*Default,NTP,0000,0000,0000,,follow through make sure that this logic works for you
Dialogue: 0,1:04:54.53,1:04:57.70,*Default,NTP,0000,0000,0000,,let's say they're all zero except for this one
Dialogue: 0,1:04:57.73,1:04:59.40,*Default,NTP,0000,0000,0000,,okay so that g is a one
Dialogue: 0,1:04:59.40,1:05:01.17,*Default,NTP,0000,0000,0000,,let's walk through the circuitry
Dialogue: 0,1:05:01.40,1:05:02.40,*Default,NTP,0000,0000,0000,,that's a one coming through
Dialogue: 0,1:05:02.40,1:05:03.53,*Default,NTP,0000,0000,0000,,it gets nodded
Dialogue: 0,1:05:03.77,1:05:04.87,*Default,NTP,0000,0000,0000,,it gets nodded
Dialogue: 0,1:05:04.90,1:05:08.17,*Default,NTP,0000,0000,0000,,so this is a zero now so into this angle comes to zero
Dialogue: 0,1:05:08.17,1:05:08.97,*Default,NTP,0000,0000,0000,,what comes out
Dialogue: 0,1:05:08.97,1:05:11.10,*Default,NTP,0000,0000,0000,,I don't even care what h is if this is a zero
Dialogue: 0,1:05:11.10,1:05:12.20,*Default,NTP,0000,0000,0000,,zero comes out
Dialogue: 0,1:05:12.40,1:05:13.87,*Default,NTP,0000,0000,0000,,all right zero comes out
Dialogue: 0,1:05:15.53,1:05:16.70,*Default,NTP,0000,0000,0000,,the whole thing is zero
Dialogue: 0,1:05:16.93,1:05:19.93,*Default,NTP,0000,0000,0000,,notice how any one of these flips to one
Dialogue: 0,1:05:20.10,1:05:22.53,*Default,NTP,0000,0000,0000,,it propagate through the entire circuitry
Dialogue: 0,1:05:22.53,1:05:23.67,*Default,NTP,0000,0000,0000,,and I get a zero out
Dialogue: 0,1:05:23.67,1:05:25.77,*Default,NTP,0000,0000,0000,,and the only way I get a one there
Dialogue: 0,1:05:25.90,1:05:27.57,*Default,NTP,0000,0000,0000,,is if these are all zero
Dialogue: 0,1:05:27.60,1:05:29.10,*Default,NTP,0000,0000,0000,,they all flip to one
Dialogue: 0,1:05:29.10,1:05:32.77,*Default,NTP,0000,0000,0000,,and then I propagate only ones through the series of
Dialogue: 0,1:05:33.77,1:05:35.97,*Default,NTP,0000,0000,0000,,okay so simple little trick is that
Dialogue: 0,1:05:35.97,1:05:37.93,*Default,NTP,0000,0000,0000,,because the sub expressions
Dialogue: 0,1:05:38.07,1:05:40.57,*Default,NTP,0000,0000,0000,,we only care about the one in the output column
Dialogue: 0,1:05:40.57,1:05:43.07,*Default,NTP,0000,0000,0000,,if you have a really spar set of ones
Dialogue: 0,1:05:43.07,1:05:45.17,*Default,NTP,0000,0000,0000,,you in fact don't have to enumerate
Dialogue: 0,1:05:45.17,1:05:46.47,*Default,NTP,0000,0000,0000,,the entire truth table
Dialogue: 0,1:05:46.47,1:05:48.90,*Default,NTP,0000,0000,0000,,those zeros are eventually going to get kicked out
Dialogue: 0,1:05:49.07,1:05:50.30,*Default,NTP,0000,0000,0000,,it's nice to have them there
Dialogue: 0,1:05:50.30,1:05:51.77,*Default,NTP,0000,0000,0000,,when you have a small number of inputs
Dialogue: 0,1:05:51.77,1:05:53.10,*Default,NTP,0000,0000,0000,,just so you can see everything
Dialogue: 0,1:05:53.33,1:05:55.13,*Default,NTP,0000,0000,0000,,but as your inputs get bigger and bigger
Dialogue: 0,1:05:55.13,1:05:58.10,*Default,NTP,0000,0000,0000,,you can be fairly strategic on how you build those
Dialogue: 0,1:05:58.33,1:06:00.97,*Default,NTP,0000,0000,0000,,truth tables good so that's a simple step
Dialogue: 0,1:06:01.30,1:06:01.93,*Default,NTP,0000,0000,0000,,in the last such
Dialogue: 0,1:06:01.93,1:06:03.87,*Default,NTP,0000,0000,0000,,I'm going to talk about what it called carnoff maps
Dialogue: 0,1:06:03.87,1:06:06.50,*Default,NTP,0000,0000,0000,,and these are now a slightly different design
Dialogue: 0,1:06:06.67,1:06:10.17,*Default,NTP,0000,0000,0000,,that allows us to try to reduce the number of gates
Dialogue: 0,1:06:10.17,1:06:11.87,*Default,NTP,0000,0000,0000,,why do I want to reduce the number of gates
Dialogue: 0,1:06:11.87,1:06:14.07,*Default,NTP,0000,0000,0000,,because that reduces the number of transistors
Dialogue: 0,1:06:14.07,1:06:16.13,*Default,NTP,0000,0000,0000,,which means I can pack more and more power
Dialogue: 0,1:06:16.30,1:06:18.13,*Default,NTP,0000,0000,0000,,and so there's lots of different optimizations
Dialogue: 0,1:06:18.13,1:06:19.13,*Default,NTP,0000,0000,0000,,we can talk for
Dialogue: 0,1:06:19.60,1:06:20.47,*Default,NTP,0000,0000,0000,,months about that
Dialogue: 0,1:06:20.47,1:06:22.37,*Default,NTP,0000,0000,0000,,I'm going to just show you one very simple idea
Dialogue: 0,1:06:22.53,1:06:23.70,*Default,NTP,0000,0000,0000,,to give you some intuition on
Dialogue: 0,1:06:23.70,1:06:24.80,*Default,NTP,0000,0000,0000,,how some of this circuitry
Dialogue: 0,1:06:24.80,1:06:26.07,*Default,NTP,0000,0000,0000,,optimization works
Dialogue: 0,1:06:26.07,1:06:27.67,*Default,NTP,0000,0000,0000,,all right we'll pick it up in a few minutes
Dialogue: 0,1:06:29.97,1:06:31.13,*Default,NTP,0000,0000,0000,,all right in this last step
Dialogue: 0,1:06:31.13,1:06:32.60,*Default,NTP,0000,0000,0000,,you're going to talk about as I promise
Dialogue: 0,1:06:32.60,1:06:33.50,*Default,NTP,0000,0000,0000,,karnoff maps
Dialogue: 0,1:06:33.50,1:06:37.13,*Default,NTP,0000,0000,0000,,which are a very simple technique for optimizing
Dialogue: 0,1:06:37.53,1:06:38.47,*Default,NTP,0000,0000,0000,,your circuit design
Dialogue: 0,1:06:38.47,1:06:40.67,*Default,NTP,0000,0000,0000,,that is by minimizing the number of gates
Dialogue: 0,1:06:40.67,1:06:41.97,*Default,NTP,0000,0000,0000,,not to true minimum
Dialogue: 0,1:06:41.97,1:06:44.47,*Default,NTP,0000,0000,0000,,but reducing I should say the number of gates
Dialogue: 0,1:06:44.60,1:06:45.80,*Default,NTP,0000,0000,0000,,that you are going
Dialogue: 0,1:06:45.80,1:06:48.70,*Default,NTP,0000,0000,0000,,to have to use to implement a particular
Dialogue: 0,1:06:49.33,1:06:50.60,*Default,NTP,0000,0000,0000,,truth table and expression
Dialogue: 0,1:06:50.60,1:06:52.47,*Default,NTP,0000,0000,0000,,so let's imagine this very simple
Dialogue: 0,1:06:52.47,1:06:53.77,*Default,NTP,0000,0000,0000,,it doesn't matter what the output here
Dialogue: 0,1:06:53.77,1:06:56.13,*Default,NTP,0000,0000,0000,,but imagine I have four in
Dialogue: 0,1:06:56.20,1:06:59.40,*Default,NTP,0000,0000,0000,,so how many rows do I have with 4 in 2 to the four
Dialogue: 0,1:06:59.40,1:07:03.30,*Default,NTP,0000,0000,0000,,which is 16 and I have one output which is e here
Dialogue: 0,1:07:03.30,1:07:05.57,*Default,NTP,0000,0000,0000,,and I've just color coded it slightly different
Dialogue: 0,1:07:05.70,1:07:08.73,*Default,NTP,0000,0000,0000,,okay so we could do what we've been doing up until now
Dialogue: 0,1:07:08.77,1:07:11.53,*Default,NTP,0000,0000,0000,,we could identify all of the ones here
Dialogue: 0,1:07:11.53,1:07:13.97,*Default,NTP,0000,0000,0000,,there's one there there's one there etc etc
Dialogue: 0,1:07:14.37,1:07:16.70,*Default,NTP,0000,0000,0000,,build the sub expressions from these four inputs using
Dialogue: 0,1:07:16.70,1:07:19.77,*Default,NTP,0000,0000,0000,,and a knot combine them with or draw the circuitry
Dialogue: 0,1:07:19.77,1:07:20.97,*Default,NTP,0000,0000,0000,,but you can see this is going to get
Dialogue: 0,1:07:20.97,1:07:22.27,*Default,NTP,0000,0000,0000,,to be a fairly large circuit
Dialogue: 0,1:07:22.27,1:07:23.17,*Default,NTP,0000,0000,0000,,but let's just go ahead and
Dialogue: 0,1:07:23.33,1:07:25.10,*Default,NTP,0000,0000,0000,,pump through that as a good reminder
Dialogue: 0,1:07:25.10,1:07:26.07,*Default,NTP,0000,0000,0000,,then we're going to see
Dialogue: 0,1:07:26.17,1:07:27.77,*Default,NTP,0000,0000,0000,,how we can do a little bit better
Dialogue: 0,1:07:28.00,1:07:29.57,*Default,NTP,0000,0000,0000,,all right so what are we going to do
Dialogue: 0,1:07:29.57,1:07:31.27,*Default,NTP,0000,0000,0000,,we're going to go down through the output and
Dialogue: 0,1:07:31.27,1:07:32.37,*Default,NTP,0000,0000,0000,,isolate the ones there
Dialogue: 0,1:07:32.37,1:07:33.73,*Default,NTP,0000,0000,0000,,there there there there there
Dialogue: 0,1:07:33.90,1:07:35.80,*Default,NTP,0000,0000,0000,,okay and we're going to build the sub expression
Dialogue: 0,1:07:35.80,1:07:37.20,*Default,NTP,0000,0000,0000,,so let's build the first one
Dialogue: 0,1:07:37.53,1:07:38.67,*Default,NTP,0000,0000,0000,,you go back to the input
Dialogue: 0,1:07:38.67,1:07:41.53,*Default,NTP,0000,0000,0000,,not ABC not d
Dialogue: 0,1:07:41.67,1:07:42.87,*Default,NTP,0000,0000,0000,,there it is right there
Dialogue: 0,1:07:43.07,1:07:44.13,*Default,NTP,0000,0000,0000,,let's go to the next one
Dialogue: 0,1:07:44.13,1:07:45.60,*Default,NTP,0000,0000,0000,,what's this sub expression
Dialogue: 0,1:07:46.07,1:07:49.17,*Default,NTP,0000,0000,0000,,a not b not c not d
Dialogue: 0,1:07:49.50,1:07:51.67,*Default,NTP,0000,0000,0000,,good that one of there it is right there
Dialogue: 0,1:07:51.67,1:07:52.87,*Default,NTP,0000,0000,0000,,and let's do a couple more
Dialogue: 0,1:07:52.87,1:07:55.30,*Default,NTP,0000,0000,0000,,just as for practice I've got what a
Dialogue: 0,1:07:55.57,1:07:58.10,*Default,NTP,0000,0000,0000,,not b not CD
Dialogue: 0,1:07:58.60,1:08:00.33,*Default,NTP,0000,0000,0000,,all right that's pretty easy
Dialogue: 0,1:08:00.33,1:08:01.53,*Default,NTP,0000,0000,0000,,let's do another one
Dialogue: 0,1:08:01.67,1:08:03.80,*Default,NTP,0000,0000,0000,,a not b c
Dialogue: 0,1:08:04.17,1:08:04.97,*Default,NTP,0000,0000,0000,,not d
Dialogue: 0,1:08:05.73,1:08:07.67,*Default,NTP,0000,0000,0000,,and now I think we can probably just
Dialogue: 0,1:08:07.67,1:08:08.70,*Default,NTP,0000,0000,0000,,go ahead and do the rest
Dialogue: 0,1:08:08.70,1:08:11.30,*Default,NTP,0000,0000,0000,,okay so just convince yourself that those all map back
Dialogue: 0,1:08:11.30,1:08:13.30,*Default,NTP,0000,0000,0000,,to those sub expressions
Dialogue: 0,1:08:13.47,1:08:13.93,*Default,NTP,0000,0000,0000,,so okay
Dialogue: 0,1:08:13.93,1:08:15.53,*Default,NTP,0000,0000,0000,,so we've got a bunch of noddings
Dialogue: 0,1:08:15.53,1:08:16.77,*Default,NTP,0000,0000,0000,,we've got a whole bunch of angates
Dialogue: 0,1:08:16.77,1:08:19.60,*Default,NTP,0000,0000,0000,,and of course I can combine those with an orgate
Dialogue: 0,1:08:19.70,1:08:21.80,*Default,NTP,0000,0000,0000,,and we can keep through that process
Dialogue: 0,1:08:21.80,1:08:22.70,*Default,NTP,0000,0000,0000,,okay and you can see that
Dialogue: 0,1:08:22.70,1:08:23.93,*Default,NTP,0000,0000,0000,,there's a fair amount of circuitry
Dialogue: 0,1:08:23.93,1:08:24.73,*Default,NTP,0000,0000,0000,,at all those
Dialogue: 0,1:08:24.73,1:08:26.33,*Default,NTP,0000,0000,0000,,and gates all those little dots
Dialogue: 0,1:08:26.57,1:08:27.47,*Default,NTP,0000,0000,0000,,corresponds to a gate
Dialogue: 0,1:08:27.47,1:08:29.27,*Default,NTP,0000,0000,0000,,which corresponds to two transistors
Dialogue: 0,1:08:29.27,1:08:31.50,*Default,NTP,0000,0000,0000,,I'm going to have ores to combine all of these
Dialogue: 0,1:08:31.50,1:08:33.60,*Default,NTP,0000,0000,0000,,those correspond to two transistors
Dialogue: 0,1:08:34.00,1:08:35.27,*Default,NTP,0000,0000,0000,,and as I said earlier
Dialogue: 0,1:08:35.27,1:08:37.47,*Default,NTP,0000,0000,0000,,it'd be nice if we could try to reduce
Dialogue: 0,1:08:37.53,1:08:39.17,*Default,NTP,0000,0000,0000,,the amount of gates and therefore
Dialogue: 0,1:08:39.17,1:08:40.47,*Default,NTP,0000,0000,0000,,transistors and therefore
Dialogue: 0,1:08:40.47,1:08:43.07,*Default,NTP,0000,0000,0000,,the amount of space on the underlying circuitry
Dialogue: 0,1:08:43.40,1:08:44.37,*Default,NTP,0000,0000,0000,,so what I'm going to do is
Dialogue: 0,1:08:44.50,1:08:46.27,*Default,NTP,0000,0000,0000,,the way these karnoff maps work
Dialogue: 0,1:08:46.27,1:08:47.30,*Default,NTP,0000,0000,0000,,there it is right there
Dialogue: 0,1:08:47.30,1:08:48.70,*Default,NTP,0000,0000,0000,,karnoff that's how you spell it
Dialogue: 0,1:08:48.90,1:08:51.57,*Default,NTP,0000,0000,0000,,is they reimagine the truth table
Dialogue: 0,1:08:51.80,1:08:54.13,*Default,NTP,0000,0000,0000,,and the way we're going to draw this truth table
Dialogue: 0,1:08:54.20,1:08:55.50,*Default,NTP,0000,0000,0000,,is instead of having
Dialogue: 0,1:08:56.13,1:08:59.53,*Default,NTP,0000,0000,0000,,each entry for the four inputs take a single row
Dialogue: 0,1:08:59.73,1:09:01.90,*Default,NTP,0000,0000,0000,,we're going to have them occupy this little
Dialogue: 0,1:09:01.90,1:09:03.30,*Default,NTP,0000,0000,0000,,four by four matrix
Dialogue: 0,1:09:03.50,1:09:04.93,*Default,NTP,0000,0000,0000,,so notice what I have appear
Dialogue: 0,1:09:04.93,1:09:07.90,*Default,NTP,0000,0000,0000,,up top I have the input pair ab
Dialogue: 0,1:09:08.47,1:09:11.60,*Default,NTP,0000,0000,0000,,and on the side I have the input pair CD
Dialogue: 0,1:09:12.10,1:09:15.47,*Default,NTP,0000,0000,0000,,so this entry corresponds to when a is 0 and b a 0
Dialogue: 0,1:09:16.10,1:09:19.53,*Default,NTP,0000,0000,0000,,a is 0 b is one a is one b is one and
Dialogue: 0,1:09:20.07,1:09:21.17,*Default,NTP,0000,0000,0000,,a is one b is 0
Dialogue: 0,1:09:21.33,1:09:22.33,*Default,NTP,0000,0000,0000,,okay so
Dialogue: 0,1:09:22.33,1:09:25.10,*Default,NTP,0000,0000,0000,,and then this of course corresponds to what's c in
Dialogue: 0,1:09:25.10,1:09:26.47,*Default,NTP,0000,0000,0000,,d is c is 0
Dialogue: 0,1:09:26.70,1:09:29.57,*Default,NTP,0000,0000,0000,,d is 0 down to c is one and d is 0
Dialogue: 0,1:09:30.00,1:09:31.10,*Default,NTP,0000,0000,0000,,and notice by the way
Dialogue: 0,1:09:31.10,1:09:32.87,*Default,NTP,0000,0000,0000,,that there's no loss of information
Dialogue: 0,1:09:32.87,1:09:35.30,*Default,NTP,0000,0000,0000,,this is four by four which is 16
Dialogue: 0,1:09:35.30,1:09:36.57,*Default,NTP,0000,0000,0000,,which is how many rows I have
Dialogue: 0,1:09:36.57,1:09:40.17,*Default,NTP,0000,0000,0000,,so each cell here corresponds to a row
Dialogue: 0,1:09:40.30,1:09:42.87,*Default,NTP,0000,0000,0000,,so it's simply a different visualization
Dialogue: 0,1:09:42.93,1:09:45.30,*Default,NTP,0000,0000,0000,,of the standard truth table
Dialogue: 0,1:09:45.87,1:09:47.00,*Default,NTP,0000,0000,0000,,and so how do I
Dialogue: 0,1:09:47.53,1:09:48.73,*Default,NTP,0000,0000,0000,,populate it well
Dialogue: 0,1:09:48.90,1:09:50.60,*Default,NTP,0000,0000,0000,,for any cell here
Dialogue: 0,1:09:50.77,1:09:52.67,*Default,NTP,0000,0000,0000,,I know what rowa corresponds to
Dialogue: 0,1:09:52.67,1:09:54.57,*Default,NTP,0000,0000,0000,,so for example let's do the cell
Dialogue: 0,1:09:54.67,1:09:57.07,*Default,NTP,0000,0000,0000,,this cell is a as zero b a 0
Dialogue: 0,1:09:57.20,1:10:00.40,*Default,NTP,0000,0000,0000,,c a 0 d a 0 that's that row right there
Dialogue: 0,1:10:00.87,1:10:05.20,*Default,NTP,0000,0000,0000,,this cell is 1 0 0 0
Dialogue: 0,1:10:05.27,1:10:07.60,*Default,NTP,0000,0000,0000,,so that must be this one right here
Dialogue: 0,1:10:07.80,1:10:11.27,*Default,NTP,0000,0000,0000,,so there is a direct translation every row here
Dialogue: 0,1:10:11.40,1:10:14.17,*Default,NTP,0000,0000,0000,,in particular those outputs get shoved into here
Dialogue: 0,1:10:14.17,1:10:16.07,*Default,NTP,0000,0000,0000,,now obviously I need a different one of these
Dialogue: 0,1:10:16.40,1:10:17.73,*Default,NTP,0000,0000,0000,,for each of the outputs
Dialogue: 0,1:10:17.73,1:10:19.20,*Default,NTP,0000,0000,0000,,this is only for one output
Dialogue: 0,1:10:19.73,1:10:19.93,*Default,NTP,0000,0000,0000,,all right
Dialogue: 0,1:10:19.93,1:10:21.70,*Default,NTP,0000,0000,0000,,so let's go ahead and just start populating it
Dialogue: 0,1:10:21.80,1:10:23.53,*Default,NTP,0000,0000,0000,,all right there are 00 00
Dialogue: 0,1:10:23.77,1:10:26.33,*Default,NTP,0000,0000,0000,,I know what the output is zero so I put a zero in this
Dialogue: 0,1:10:26.33,1:10:29.40,*Default,NTP,0000,0000,0000,,now it's called a two dimensional tooth table
Dialogue: 0,1:10:30.53,1:10:33.93,*Default,NTP,0000,0000,0000,,let's do this 1 1 0 0 0
Dialogue: 0,1:10:33.97,1:10:36.40,*Default,NTP,0000,0000,0000,,that's this row right there there's a one
Dialogue: 0,1:10:36.47,1:10:37.97,*Default,NTP,0000,0000,0000,,so I put a one right there
Dialogue: 0,1:10:38.20,1:10:39.20,*Default,NTP,0000,0000,0000,,let's do a few more
Dialogue: 0,1:10:39.37,1:10:42.67,*Default,NTP,0000,0000,0000,,so this corresponds to 1 1 1 1
Dialogue: 0,1:10:43.00,1:10:44.67,*Default,NTP,0000,0000,0000,,let's see there it is right there
Dialogue: 0,1:10:44.77,1:10:45.97,*Default,NTP,0000,0000,0000,,and I put a zero here
Dialogue: 0,1:10:45.97,1:10:48.10,*Default,NTP,0000,0000,0000,,by the way notice the ordering here
Dialogue: 0,1:10:49.50,1:10:54.27,*Default,NTP,0000,0000,0000,,I've got 0 0 0 1 and then I've got one one and one zero
Dialogue: 0,1:10:54.27,1:10:55.47,*Default,NTP,0000,0000,0000,,that ordering matters
Dialogue: 0,1:10:55.47,1:10:56.70,*Default,NTP,0000,0000,0000,,you have to do it in this order
Dialogue: 0,1:10:56.70,1:10:58.33,*Default,NTP,0000,0000,0000,,and I'm going to explain it a little bit
Dialogue: 0,1:10:58.50,1:11:00.60,*Default,NTP,0000,0000,0000,,why this ordering matters okay
Dialogue: 0,1:11:00.67,1:11:02.40,*Default,NTP,0000,0000,0000,,but until I do that notice that
Dialogue: 0,1:11:02.57,1:11:03.87,*Default,NTP,0000,0000,0000,,this bit right here
Dialogue: 0,1:11:03.87,1:11:06.27,*Default,NTP,0000,0000,0000,,the second zero and the first zero are the same
Dialogue: 0,1:11:06.50,1:11:08.33,*Default,NTP,0000,0000,0000,,the ['one']millisecond and the first one of the same
Dialogue: 0,1:11:08.47,1:11:09.90,*Default,NTP,0000,0000,0000,,the second one and the first one of the same
Dialogue: 0,1:11:09.90,1:11:11.07,*Default,NTP,0000,0000,0000,,that's not an accident
Dialogue: 0,1:11:11.07,1:11:12.17,*Default,NTP,0000,0000,0000,,the same of course is true here
Dialogue: 0,1:11:12.17,1:11:13.77,*Default,NTP,0000,0000,0000,,we're going to take advantage of that
Dialogue: 0,1:11:13.80,1:11:15.07,*Default,NTP,0000,0000,0000,,structure in a minute
Dialogue: 0,1:11:16.10,1:11:17.10,*Default,NTP,0000,0000,0000,,all right let's do one more
Dialogue: 0,1:11:17.60,1:11:24.53,*Default,NTP,0000,0000,0000,,0 1 1 0 that corresponds to let's see 0 1 0 1
Dialogue: 0,1:11:24.53,1:11:29.07,*Default,NTP,0000,0000,0000,,that oopsari 0 1 1 0 0 1 1 0 that's a one
Dialogue: 0,1:11:29.10,1:11:30.73,*Default,NTP,0000,0000,0000,,so I'm gonna put a one right there
Dialogue: 0,1:11:30.77,1:11:32.93,*Default,NTP,0000,0000,0000,,okay good so
Dialogue: 0,1:11:33.50,1:11:35.80,*Default,NTP,0000,0000,0000,,I can go there's a direct mapping from this
Dialogue: 0,1:11:36.00,1:11:37.97,*Default,NTP,0000,0000,0000,,one dimensional tooth table to this
Dialogue: 0,1:11:37.97,1:11:39.67,*Default,NTP,0000,0000,0000,,two dimensional tooth table
Dialogue: 0,1:11:39.80,1:11:41.07,*Default,NTP,0000,0000,0000,,and all this information is here
Dialogue: 0,1:11:41.07,1:11:42.30,*Default,NTP,0000,0000,0000,,this is exactly what I want
Dialogue: 0,1:11:42.30,1:11:44.10,*Default,NTP,0000,0000,0000,,I want the circuitry to be one
Dialogue: 0,1:11:44.17,1:11:46.57,*Default,NTP,0000,0000,0000,,for these inputs here here here and here
Dialogue: 0,1:11:46.57,1:11:48.13,*Default,NTP,0000,0000,0000,,and at zero everywhere else
Dialogue: 0,1:11:48.13,1:11:49.93,*Default,NTP,0000,0000,0000,,okay so how does this help me
Dialogue: 0,1:11:50.10,1:11:52.27,*Default,NTP,0000,0000,0000,,all right well let's look at a few things here
Dialogue: 0,1:11:52.47,1:11:54.97,*Default,NTP,0000,0000,0000,,let's look at this string of ones right here
Dialogue: 0,1:11:54.97,1:11:55.93,*Default,NTP,0000,0000,0000,,okay so remember
Dialogue: 0,1:11:56.20,1:11:57.57,*Default,NTP,0000,0000,0000,,again conceptually what do I want
Dialogue: 0,1:11:57.57,1:12:01.13,*Default,NTP,0000,0000,0000,,I want to build some expressions that evaluate to one
Dialogue: 0,1:12:01.27,1:12:04.13,*Default,NTP,0000,0000,0000,,here here and here
Dialogue: 0,1:12:04.47,1:12:06.57,*Default,NTP,0000,0000,0000,,and if I can do that I'm home
Dialogue: 0,1:12:06.57,1:12:08.93,*Default,NTP,0000,0000,0000,,that I've implemented this computation
Dialogue: 0,1:12:08.93,1:12:10.67,*Default,NTP,0000,0000,0000,,that I've specified in the truth table
Dialogue: 0,1:12:11.57,1:12:13.50,*Default,NTP,0000,0000,0000,,look at this expression right here
Dialogue: 0,1:12:14.70,1:12:15.80,*Default,NTP,0000,0000,0000,,well let's see
Dialogue: 0,1:12:17.87,1:12:19.77,*Default,NTP,0000,0000,0000,,for a one to be here
Dialogue: 0,1:12:19.90,1:12:23.13,*Default,NTP,0000,0000,0000,,do I care with the value of crds
Dialogue: 0,1:12:24.17,1:12:28.47,*Default,NTP,0000,0000,0000,,no because notice no matter what pairs of value crd are
Dialogue: 0,1:12:29.47,1:12:30.53,*Default,NTP,0000,0000,0000,,this thing is a one
Dialogue: 0,1:12:30.97,1:12:35.20,*Default,NTP,0000,0000,0000,,right and in fact it's a one when a is one in b a zero
Dialogue: 0,1:12:35.30,1:12:37.67,*Default,NTP,0000,0000,0000,,no matter what the value of c and d r
Dialogue: 0,1:12:38.00,1:12:39.07,*Default,NTP,0000,0000,0000,,that's interesting
Dialogue: 0,1:12:39.30,1:12:41.17,*Default,NTP,0000,0000,0000,,okay so what that means
Dialogue: 0,1:12:41.17,1:12:43.80,*Default,NTP,0000,0000,0000,,is if I have this little expression right here
Dialogue: 0,1:12:43.80,1:12:45.73,*Default,NTP,0000,0000,0000,,a not b
Dialogue: 0,1:12:45.77,1:12:48.33,*Default,NTP,0000,0000,0000,,how did I get that a not b
Dialogue: 0,1:12:48.33,1:12:51.13,*Default,NTP,0000,0000,0000,,so when a is one and b is zero
Dialogue: 0,1:12:51.17,1:12:52.97,*Default,NTP,0000,0000,0000,,which means that and is one
Dialogue: 0,1:12:53.27,1:12:55.30,*Default,NTP,0000,0000,0000,,I want a one on my output
Dialogue: 0,1:12:55.53,1:12:56.87,*Default,NTP,0000,0000,0000,,I don't care what c is
Dialogue: 0,1:12:57.13,1:12:58.40,*Default,NTP,0000,0000,0000,,completely irrelevant to me
Dialogue: 0,1:12:58.53,1:13:00.93,*Default,NTP,0000,0000,0000,,yeah so notice when I just did
Dialogue: 0,1:13:00.93,1:13:04.17,*Default,NTP,0000,0000,0000,,a single sub expression with one end and one knot
Dialogue: 0,1:13:04.20,1:13:07.90,*Default,NTP,0000,0000,0000,,gave me four rows of my truth table
Dialogue: 0,1:13:07.93,1:13:10.40,*Default,NTP,0000,0000,0000,,that's incredible that's incredibly efficient
Dialogue: 0,1:13:10.73,1:13:13.93,*Default,NTP,0000,0000,0000,,right and I did it because I've noticed this pattern
Dialogue: 0,1:13:14.07,1:13:14.77,*Default,NTP,0000,0000,0000,,and of course
Dialogue: 0,1:13:14.77,1:13:16.77,*Default,NTP,0000,0000,0000,,that's because I've put this in this nice little
Dialogue: 0,1:13:16.77,1:13:17.80,*Default,NTP,0000,0000,0000,,two dimensional
Dialogue: 0,1:13:19.47,1:13:24.60,*Default,NTP,0000,0000,0000,,tooth table is that these four ones don't depend on cnd
Dialogue: 0,1:13:24.87,1:13:28.33,*Default,NTP,0000,0000,0000,,and all I care about is then that value right there
Dialogue: 0,1:13:28.33,1:13:30.13,*Default,NTP,0000,0000,0000,,so there's a big bang for your buck
Dialogue: 0,1:13:30.13,1:13:32.10,*Default,NTP,0000,0000,0000,,I've gotten four ones out
Dialogue: 0,1:13:32.20,1:13:34.90,*Default,NTP,0000,0000,0000,,from a single sub expression with one and and one knot
Dialogue: 0,1:13:34.90,1:13:37.70,*Default,NTP,0000,0000,0000,,very nice all right so now what do I have to do
Dialogue: 0,1:13:37.73,1:13:39.27,*Default,NTP,0000,0000,0000,,I still need remember
Dialogue: 0,1:13:39.27,1:13:40.33,*Default,NTP,0000,0000,0000,,all I've got to do is build an
Dialogue: 0,1:13:40.33,1:13:42.20,*Default,NTP,0000,0000,0000,,expression that evaluates to one
Dialogue: 0,1:13:42.33,1:13:45.67,*Default,NTP,0000,0000,0000,,that occupies all of these cells right here
Dialogue: 0,1:13:45.87,1:13:47.70,*Default,NTP,0000,0000,0000,,so once I get those covered
Dialogue: 0,1:13:48.00,1:13:48.80,*Default,NTP,0000,0000,0000,,I've got
Dialogue: 0,1:13:49.57,1:13:51.30,*Default,NTP,0000,0000,0000,,and then I can start building my circuitry
Dialogue: 0,1:13:51.30,1:13:52.37,*Default,NTP,0000,0000,0000,,all right so let's do the
Dialogue: 0,1:13:52.60,1:13:54.07,*Default,NTP,0000,0000,0000,,let's look at this one right here
Dialogue: 0,1:13:54.20,1:13:56.37,*Default,NTP,0000,0000,0000,,so there's two ones next to each other
Dialogue: 0,1:13:56.77,1:13:59.87,*Default,NTP,0000,0000,0000,,and let's see so it's not quite as clean as here
Dialogue: 0,1:13:59.87,1:14:02.17,*Default,NTP,0000,0000,0000,,I can't just ignore ab or CD
Dialogue: 0,1:14:02.17,1:14:04.00,*Default,NTP,0000,0000,0000,,it still depends on both of them
Dialogue: 0,1:14:04.53,1:14:07.30,*Default,NTP,0000,0000,0000,,but what do I know here what doesn't matter
Dialogue: 0,1:14:07.30,1:14:08.47,*Default,NTP,0000,0000,0000,,let's put it this way
Dialogue: 0,1:14:08.60,1:14:11.53,*Default,NTP,0000,0000,0000,,well there's a one here and here when what is true
Dialogue: 0,1:14:11.73,1:14:14.53,*Default,NTP,0000,0000,0000,,well when c is one and d is zero
Dialogue: 0,1:14:14.53,1:14:15.33,*Default,NTP,0000,0000,0000,,so that's clear
Dialogue: 0,1:14:15.33,1:14:16.90,*Default,NTP,0000,0000,0000,,right where you have to be in this row of the
Dialogue: 0,1:14:17.70,1:14:19.13,*Default,NTP,0000,0000,0000,,two dimensional trues table
Dialogue: 0,1:14:19.73,1:14:23.07,*Default,NTP,0000,0000,0000,,now do I care what the value of a and br
Dialogue: 0,1:14:23.07,1:14:25.40,*Default,NTP,0000,0000,0000,,yes because it's not a one across the whole thing
Dialogue: 0,1:14:25.40,1:14:27.20,*Default,NTP,0000,0000,0000,,it almost is because I had a one here
Dialogue: 0,1:14:27.30,1:14:28.53,*Default,NTP,0000,0000,0000,,but I don't have a one there
Dialogue: 0,1:14:28.53,1:14:31.20,*Default,NTP,0000,0000,0000,,so if I had a one here then I'd have that same win
Dialogue: 0,1:14:31.20,1:14:32.10,*Default,NTP,0000,0000,0000,,I'd get them all
Dialogue: 0,1:14:32.20,1:14:35.87,*Default,NTP,0000,0000,0000,,yep but what don't I care about well let's see
Dialogue: 0,1:14:36.17,1:14:38.37,*Default,NTP,0000,0000,0000,,a is zero here and a is one here
Dialogue: 0,1:14:38.37,1:14:40.73,*Default,NTP,0000,0000,0000,,those are the only two possible values so in fact
Dialogue: 0,1:14:41.10,1:14:43.60,*Default,NTP,0000,0000,0000,,these two ones right here don't depend on a
Dialogue: 0,1:14:44.20,1:14:46.80,*Default,NTP,0000,0000,0000,,and they only depend on b equal to one
Dialogue: 0,1:14:47.07,1:14:52.57,*Default,NTP,0000,0000,0000,,so let's see what it is when c is one and d is zero and
Dialogue: 0,1:14:53.00,1:14:58.00,*Default,NTP,0000,0000,0000,,b is one then I get those two ones right there nice
Dialogue: 0,1:14:58.30,1:15:00.27,*Default,NTP,0000,0000,0000,,it's not quite as much of a big as a bang for
Dialogue: 0,1:15:00.27,1:15:01.53,*Default,NTP,0000,0000,0000,,as you got here
Dialogue: 0,1:15:01.60,1:15:03.57,*Default,NTP,0000,0000,0000,,but it's certainly saving something
Dialogue: 0,1:15:03.57,1:15:05.73,*Default,NTP,0000,0000,0000,,so when b is one
Dialogue: 0,1:15:06.27,1:15:08.33,*Default,NTP,0000,0000,0000,,and when c is zero
Dialogue: 0,1:15:08.57,1:15:10.77,*Default,NTP,0000,0000,0000,,and b is one
Dialogue: 0,1:15:11.10,1:15:12.67,*Default,NTP,0000,0000,0000,,c is zero and d is
Dialogue: 0,1:15:12.93,1:15:16.50,*Default,NTP,0000,0000,0000,,sorry d c is one and d is zero so b c
Dialogue: 0,1:15:16.93,1:15:18.67,*Default,NTP,0000,0000,0000,,not d I
Dialogue: 0,1:15:18.73,1:15:21.33,*Default,NTP,0000,0000,0000,,that little sub expression availage to one
Dialogue: 0,1:15:21.40,1:15:23.67,*Default,NTP,0000,0000,0000,,in these two situations
Dialogue: 0,1:15:23.73,1:15:25.70,*Default,NTP,0000,0000,0000,,so again one sub expression
Dialogue: 0,1:15:26.10,1:15:27.30,*Default,NTP,0000,0000,0000,,with only three variables
Dialogue: 0,1:15:27.30,1:15:29.17,*Default,NTP,0000,0000,0000,,by the way because a is irrelevant here
Dialogue: 0,1:15:29.17,1:15:31.50,*Default,NTP,0000,0000,0000,,gives me two ones nice
Dialogue: 0,1:15:31.80,1:15:33.00,*Default,NTP,0000,0000,0000,,all right so we're almost home
Dialogue: 0,1:15:33.00,1:15:34.77,*Default,NTP,0000,0000,0000,,we've just got to cover those two
Dialogue: 0,1:15:34.80,1:15:36.90,*Default,NTP,0000,0000,0000,,okay so I could do the same trick
Dialogue: 0,1:15:36.97,1:15:39.27,*Default,NTP,0000,0000,0000,,I could draw a little colored box right here
Dialogue: 0,1:15:39.27,1:15:40.37,*Default,NTP,0000,0000,0000,,and what would be true
Dialogue: 0,1:15:41.47,1:15:43.70,*Default,NTP,0000,0000,0000,,a would have to be one and b would have to be one
Dialogue: 0,1:15:43.70,1:15:47.00,*Default,NTP,0000,0000,0000,,and what else is true I don't care about d
Dialogue: 0,1:15:47.27,1:15:49.50,*Default,NTP,0000,0000,0000,,because d can flip between zero and one
Dialogue: 0,1:15:49.77,1:15:54.17,*Default,NTP,0000,0000,0000,,so I could have written another expression that was a b
Dialogue: 0,1:15:54.47,1:15:58.27,*Default,NTP,0000,0000,0000,,and not c and I would have gotten those two right there
Dialogue: 0,1:15:58.73,1:16:01.10,*Default,NTP,0000,0000,0000,,but it turns out we can do a little bit better
Dialogue: 0,1:16:01.47,1:16:05.77,*Default,NTP,0000,0000,0000,,so let's think about not just those two but these four
Dialogue: 0,1:16:05.93,1:16:06.73,*Default,NTP,0000,0000,0000,,okay so
Dialogue: 0,1:16:06.73,1:16:08.80,*Default,NTP,0000,0000,0000,,notice that they're overlapping with the previous one
Dialogue: 0,1:16:08.80,1:16:10.33,*Default,NTP,0000,0000,0000,,we'll get back to that in a little bit
Dialogue: 0,1:16:10.67,1:16:13.10,*Default,NTP,0000,0000,0000,,all right what doesn't matter here
Dialogue: 0,1:16:13.40,1:16:14.60,*Default,NTP,0000,0000,0000,,all right but what do I know
Dialogue: 0,1:16:14.60,1:16:17.33,*Default,NTP,0000,0000,0000,,I know that in order to get these ones here
Dialogue: 0,1:16:17.33,1:16:18.67,*Default,NTP,0000,0000,0000,,c must be zero
Dialogue: 0,1:16:18.77,1:16:20.40,*Default,NTP,0000,0000,0000,,right c can't be one
Dialogue: 0,1:16:20.97,1:16:24.77,*Default,NTP,0000,0000,0000,,and I also know that a must be a one
Dialogue: 0,1:16:25.37,1:16:26.73,*Default,NTP,0000,0000,0000,,so think about that thing
Dialogue: 0,1:16:27.13,1:16:29.90,*Default,NTP,0000,0000,0000,,c equals zero carves out rows
Dialogue: 0,1:16:30.10,1:16:32.10,*Default,NTP,0000,0000,0000,,a equals one carves out these two columns
Dialogue: 0,1:16:32.10,1:16:34.17,*Default,NTP,0000,0000,0000,,the intersection is that little square
Dialogue: 0,1:16:34.73,1:16:37.70,*Default,NTP,0000,0000,0000,,so these four ones right here don't depend on b
Dialogue: 0,1:16:37.70,1:16:39.17,*Default,NTP,0000,0000,0000,,because b can be one or zero
Dialogue: 0,1:16:39.27,1:16:40.57,*Default,NTP,0000,0000,0000,,they don't depend on d
Dialogue: 0,1:16:40.57,1:16:42.00,*Default,NTP,0000,0000,0000,,because that could be zero or one
Dialogue: 0,1:16:42.07,1:16:44.90,*Default,NTP,0000,0000,0000,,and the only thing I care about is when is a one
Dialogue: 0,1:16:44.93,1:16:46.60,*Default,NTP,0000,0000,0000,,and when is c zero
Dialogue: 0,1:16:46.60,1:16:49.97,*Default,NTP,0000,0000,0000,,and what's that as sub expression a not c
Dialogue: 0,1:16:50.80,1:16:53.67,*Default,NTP,0000,0000,0000,,now notice that this sub expression
Dialogue: 0,1:16:53.67,1:16:55.10,*Default,NTP,0000,0000,0000,,let me put them all up here
Dialogue: 0,1:16:55.33,1:16:57.57,*Default,NTP,0000,0000,0000,,this little sub expression a and not c
Dialogue: 0,1:16:57.57,1:17:00.10,*Default,NTP,0000,0000,0000,,will value to one in these four instances
Dialogue: 0,1:17:00.80,1:17:02.40,*Default,NTP,0000,0000,0000,,this little sub expression here
Dialogue: 0,1:17:02.40,1:17:04.53,*Default,NTP,0000,0000,0000,,a not b will availate to one
Dialogue: 0,1:17:04.67,1:17:07.17,*Default,NTP,0000,0000,0000,,in these for instances there's an overlap
Dialogue: 0,1:17:07.40,1:17:08.27,*Default,NTP,0000,0000,0000,,do I care
Dialogue: 0,1:17:09.07,1:17:10.10,*Default,NTP,0000,0000,0000,,no what do I care
Dialogue: 0,1:17:10.33,1:17:12.73,*Default,NTP,0000,0000,0000,,so let's think about this situation right here
Dialogue: 0,1:17:12.73,1:17:13.70,*Default,NTP,0000,0000,0000,,where a is one
Dialogue: 0,1:17:13.70,1:17:15.93,*Default,NTP,0000,0000,0000,,b is zero and c is 0
Dialogue: 0,1:17:16.30,1:17:17.07,*Default,NTP,0000,0000,0000,,and d is zero
Dialogue: 0,1:17:17.07,1:17:19.27,*Default,NTP,0000,0000,0000,,so what's going to happen in our expression here
Dialogue: 0,1:17:19.40,1:17:21.00,*Default,NTP,0000,0000,0000,,this will evaluate to one
Dialogue: 0,1:17:21.13,1:17:22.73,*Default,NTP,0000,0000,0000,,this will evaluate to zero
Dialogue: 0,1:17:22.80,1:17:24.30,*Default,NTP,0000,0000,0000,,and this will evaluate to one
Dialogue: 0,1:17:24.77,1:17:27.00,*Default,NTP,0000,0000,0000,,great two of them one I only need one of them
Dialogue: 0,1:17:27.00,1:17:29.27,*Default,NTP,0000,0000,0000,,but what do I care I'm going to get one at the output
Dialogue: 0,1:17:29.30,1:17:30.20,*Default,NTP,0000,0000,0000,,and it doesn't matter
Dialogue: 0,1:17:30.20,1:17:33.70,*Default,NTP,0000,0000,0000,,that these two sub expressions both said yes I'm here
Dialogue: 0,1:17:33.80,1:17:35.70,*Default,NTP,0000,0000,0000,,because it's irrelevant to us when we
Dialogue: 0,1:17:35.70,1:17:38.13,*Default,NTP,0000,0000,0000,,or as long as one or more of them is one
Dialogue: 0,1:17:38.17,1:17:39.67,*Default,NTP,0000,0000,0000,,we're still going to get the same answer
Dialogue: 0,1:17:39.67,1:17:41.60,*Default,NTP,0000,0000,0000,,so you're allowed to overlap these things
Dialogue: 0,1:17:41.87,1:17:43.27,*Default,NTP,0000,0000,0000,,and what's the benefit of overlapping
Dialogue: 0,1:17:43.27,1:17:44.27,*Default,NTP,0000,0000,0000,,why did I overlap is
Dialogue: 0,1:17:44.27,1:17:45.93,*Default,NTP,0000,0000,0000,,well the sub expression was easier
Dialogue: 0,1:17:46.13,1:17:47.47,*Default,NTP,0000,0000,0000,,I only hit simpler shorter
Dialogue: 0,1:17:47.47,1:17:49.13,*Default,NTP,0000,0000,0000,,I only have two variables
Dialogue: 0,1:17:49.17,1:17:50.50,*Default,NTP,0000,0000,0000,,instead of three variables
Dialogue: 0,1:17:50.50,1:17:52.90,*Default,NTP,0000,0000,0000,,the way I did over here with this one right here
Dialogue: 0,1:17:53.37,1:17:55.00,*Default,NTP,0000,0000,0000,,so notice what happened now
Dialogue: 0,1:17:55.17,1:17:57.50,*Default,NTP,0000,0000,0000,,by simply drawing this kernoff map
Dialogue: 0,1:17:57.50,1:17:59.37,*Default,NTP,0000,0000,0000,,this two dimensional truth table
Dialogue: 0,1:17:59.57,1:18:00.93,*Default,NTP,0000,0000,0000,,I was able to take
Dialogue: 0,1:18:00.93,1:18:02.70,*Default,NTP,0000,0000,0000,,let's go ahead and look at the comparison
Dialogue: 0,1:18:03.00,1:18:05.80,*Default,NTP,0000,0000,0000,,these sub expressions here right
Dialogue: 0,1:18:05.80,1:18:08.00,*Default,NTP,0000,0000,0000,,and then of course I have to combine them with ore
Dialogue: 0,1:18:08.00,1:18:09.97,*Default,NTP,0000,0000,0000,,and I could reduce them to those three
Dialogue: 0,1:18:09.97,1:18:12.07,*Default,NTP,0000,0000,0000,,little tiny sub expressions
Dialogue: 0,1:18:12.20,1:18:13.53,*Default,NTP,0000,0000,0000,,and so the amount of circuitry
Dialogue: 0,1:18:13.53,1:18:15.90,*Default,NTP,0000,0000,0000,,the amount of gates is greatly reduced
Dialogue: 0,1:18:16.10,1:18:19.27,*Default,NTP,0000,0000,0000,,now the karnoffs map are really just one of many
Dialogue: 0,1:18:19.27,1:18:21.37,*Default,NTP,0000,0000,0000,,many different techniques for doing optimizations
Dialogue: 0,1:18:21.37,1:18:23.30,*Default,NTP,0000,0000,0000,,and in fact reducing
Dialogue: 0,1:18:23.33,1:18:23.57,*Default,NTP,0000,0000,0000,,the
Dialogue: 0,1:18:23.57,1:18:25.80,*Default,NTP,0000,0000,0000,,number of gates and transitions is only one of many
Dialogue: 0,1:18:25.80,1:18:26.97,*Default,NTP,0000,0000,0000,,optimizations you have to do
Dialogue: 0,1:18:26.97,1:18:27.93,*Default,NTP,0000,0000,0000,,you also have to think about
Dialogue: 0,1:18:27.93,1:18:29.87,*Default,NTP,0000,0000,0000,,where are things positioned in how much power
Dialogue: 0,1:18:29.87,1:18:32.67,*Default,NTP,0000,0000,0000,,and lots of complexities in designing circuitry
Dialogue: 0,1:18:32.67,1:18:34.70,*Default,NTP,0000,0000,0000,,but what I hope that you got out of this
Dialogue: 0,1:18:34.80,1:18:35.87,*Default,NTP,0000,0000,0000,,from the very beginning of
Dialogue: 0,1:18:35.87,1:18:37.60,*Default,NTP,0000,0000,0000,,when we started with binary numbers
Dialogue: 0,1:18:37.60,1:18:38.90,*Default,NTP,0000,0000,0000,,through boolean logic
Dialogue: 0,1:18:38.93,1:18:40.70,*Default,NTP,0000,0000,0000,,through gates through transistors
Dialogue: 0,1:18:40.70,1:18:42.10,*Default,NTP,0000,0000,0000,,an eventual circuit design
Dialogue: 0,1:18:42.20,1:18:44.97,*Default,NTP,0000,0000,0000,,is an appreciation for the nature of computation
Dialogue: 0,1:18:45.20,1:18:46.00,*Default,NTP,0000,0000,0000,,you now know
Dialogue: 0,1:18:46.00,1:18:48.27,*Default,NTP,0000,0000,0000,,the building blocks of a modern day computer
Dialogue: 0,1:18:48.37,1:18:50.53,*Default,NTP,0000,0000,0000,,and how we can do actual computations
Dialogue: 0,1:18:50.53,1:18:53.37,*Default,NTP,0000,0000,0000,,and there's a certain simplicity and beauty to it
Dialogue: 0,1:18:53.47,1:18:56.17,*Default,NTP,0000,0000,0000,,and a remarkable complexity to actually get it working
Dialogue: 0,1:18:56.17,1:18:57.70,*Default,NTP,0000,0000,0000,,and I hope someday you'll be able to take a computer
Dialogue: 0,1:18:57.70,1:18:58.47,*Default,NTP,0000,0000,0000,,architecture course
Dialogue: 0,1:18:58.47,1:18:59.70,*Default,NTP,0000,0000,0000,,and learn some more about it
Dialogue: 0,1:19:00.00,1:19:02.67,*Default,NTP,0000,0000,0000,,all right that's it for now and that's it
Dialogue: 0,1:19:02.93,1:19:04.17,*Default,NTP,0000,0000,0000,,this is the last lecture
Dialogue: 0,1:19:04.27,1:19:05.70,*Default,NTP,0000,0000,0000,,we'll see you live in a little bit
Dialogue: 0,1:19:05.70,1:19:07.60,*Default,NTP,0000,0000,0000,,and we'll talk some more before the class ends though
Dialogue: 0,1:19:07.60,1:19:08.40,*Default,NTP,0000,0000,0000,,talk to you soon