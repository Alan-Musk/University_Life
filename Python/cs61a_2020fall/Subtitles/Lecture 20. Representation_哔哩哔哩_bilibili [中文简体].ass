[Script Info]
Title: Lecture 20. Representation_哔哩哔哩_bilibili
ScriptType: v4.00+
Collisions: Reverse
PlayResX: 1280
PlayResY: 720
WrapStyle: 3
ScaledBorderAndShadow: yes
; ----------------------
; 本字幕由CC字幕助手自动转换
; 字幕来源https://www.bilibili.com/video/BV1s3411G7yM?p=49&vd_source=6ffca0aa1006734a4fba52f389036611
; 脚本地址https://greasyfork.org/scripts/378513
; 设置了字幕过长自动换行，但若字幕中没有空格换行将无效
; 字体大小依据720p 48号字体等比缩放
; 如显示不正常请尝试使用SRT格式

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Segoe UI,48,&H00FFFFFF,&HF0000000,&H00000000,&HF0000000,1,0,0,0,100,100,0,0.00,1,1,3,2,30,30,20,1

[Events]
Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.57,0:00:03.70,*Default,NTP,0000,0000,0000,,61一讲第20期公告
Dialogue: 0,0:00:04.10,0:00:06.57,*Default,NTP,0000,0000,0000,,公告与周一相同
Dialogue: 0,0:00:06.97,0:00:08.53,*Default,NTP,0000,0000,0000,,今天你的实验室到期了
Dialogue: 0,0:00:08.70,0:00:10.17,*Default,NTP,0000,0000,0000,,周四交作业
Dialogue: 0,0:00:10.37,0:00:11.97,*Default,NTP,0000,0000,0000,,蚂蚁项目结束了
Dialogue: 0,0:00:12.07,0:00:13.97,*Default,NTP,0000,0000,0000,,下周五到期
Dialogue: 0,0:00:13.97,0:00:16.00,*Default,NTP,0000,0000,0000,,但下周二有一个检查站
Dialogue: 0,0:00:16.00,0:00:17.00,*Default,NTP,0000,0000,0000,,以及提前提交
Dialogue: 0,0:00:17.00,0:00:19.50,*Default,NTP,0000,0000,0000,,周四之前提交的奖励积分
Dialogue: 0,0:00:20.17,0:00:23.37,*Default,NTP,0000,0000,0000,,该项目还存在额外的信用问题
Dialogue: 0,0:00:23.60,0:00:25.93,*Default,NTP,0000,0000,0000,,如果你想从这个问题中获得额外的分数
Dialogue: 0,0:00:25.93,0:00:28.53,*Default,NTP,0000,0000,0000,,并且您希望通过提前提交获得额外的学分
Dialogue: 0,0:00:28.53,0:00:30.77,*Default,NTP,0000,0000,0000,,那么你必须完成额外的学分问题
Dialogue: 0,0:00:30.77,0:00:31.97,*Default,NTP,0000,0000,0000,,下周四之前
Dialogue: 0,0:00:32.73,0:00:34.50,*Default,NTP,0000,0000,0000,,这比平常短一点
Dialogue: 0,0:00:34.50,0:00:35.97,*Default,NTP,0000,0000,0000,,但还是很长
Dialogue: 0,0:00:36.07,0:00:37.80,*Default,NTP,0000,0000,0000,,所以给自己留出充足的时间
Dialogue: 0,0:00:37.80,0:00:40.80,*Default,NTP,0000,0000,0000,,早点开始，每天进步
Dialogue: 0,0:00:41.73,0:00:43.33,*Default,NTP,0000,0000,0000,,我们将有一个咨询小组
Dialogue: 0,0:00:43.33,0:00:45.60,*Default,NTP,0000,0000,0000,,11 至 12 名工作人员
Dialogue: 0,0:00:45.70,0:00:47.97,*Default,NTP,0000,0000,0000,,周四你可以询问核心
Dialogue: 0,0:00:47.97,0:00:50.10,*Default,NTP,0000,0000,0000,,工作人员询问您想要的任何东西
Dialogue: 0,0:00:50.30,0:00:51.50,*Default,NTP,0000,0000,0000,,并聆听其他学生的发言
Dialogue: 0,0:00:51.50,0:00:53.70,*Default,NTP,0000,0000,0000,,问题和工作人员的答复
Dialogue: 0,0:00:54.70,0:00:56.00,*Default,NTP,0000,0000,0000,,这不会是全体员工
Dialogue: 0,0:00:56.17,0:00:57.67,*Default,NTP,0000,0000,0000,,只是一些人的选择
Dialogue: 0,0:00:57.67,0:01:00.07,*Default,NTP,0000,0000,0000,,有兴趣帮助指导您
Dialogue: 0,0:01:00.07,0:01:01.53,*Default,NTP,0000,0000,0000,,以及你的伯克利经历
Dialogue: 0,0:01:02.57,0:01:04.60,*Default,NTP,0000,0000,0000,,建议办公时间为周五
Dialogue: 0,0:01:04.60,0:01:07.13,*Default,NTP,0000,0000,0000,,如果您需要有关其中任何一项的一对一帮助
Dialogue: 0,0:01:07.37,0:01:09.53,*Default,NTP,0000,0000,0000,,与课程无关的主题
Dialogue: 0,0:01:10.53,0:01:13.20,*Default,NTP,0000,0000,0000,,我们希望您能参与一项匿名调查
Dialogue: 0,0:01:13.40,0:01:15.37,*Default,NTP,0000,0000,0000,,关于课程到目前为止进展如何
Dialogue: 0,0:01:15.40,0:01:16.67,*Default,NTP,0000,0000,0000,,它很短
Dialogue: 0,0:01:16.67,0:01:17.93,*Default,NTP,0000,0000,0000,,这不是必需的
Dialogue: 0,0:01:17.93,0:01:20.60,*Default,NTP,0000,0000,0000,,但我希望你能在下周一之前完成
Dialogue: 0,0:01:20.60,0:01:22.87,*Default,NTP,0000,0000,0000,,这样我们就可以了解事情的进展
Dialogue: 0,0:01:23.57,0:01:24.67,*Default,NTP,0000,0000,0000,,并作为提醒
Dialogue: 0,0:01:24.67,0:01:28.33,*Default,NTP,0000,0000,0000,,期中考试第二期为 28 日星期三晚上 7:00
Dialogue: 0,0:01:28.57,0:01:31.33,*Default,NTP,0000,0000,0000,,它的格式和风格与期中考试相似
Dialogue: 0,0:01:31.40,0:01:34.50,*Default,NTP,0000,0000,0000,,并将涵盖截至周五的内容
Dialogue: 0,0:01:34.50,0:01:35.30,*Default,NTP,0000,0000,0000,,演讲
Dialogue: 0,0:01:35.40,0:01:38.50,*Default,NTP,0000,0000,0000,,所以这个讲座将在期中考试中进行
Dialogue: 0,0:01:38.60,0:01:39.80,*Default,NTP,0000,0000,0000,,尤其
Dialogue: 0,0:01:39.97,0:01:42.30,*Default,NTP,0000,0000,0000,,开头有一个视频
Dialogue: 0,0:01:42.30,0:01:44.40,*Default,NTP,0000,0000,0000,,关于字符串表示
Dialogue: 0,0:01:44.40,0:01:46.93,*Default,NTP,0000,0000,0000,,这是本次讲座最重要的部分
Dialogue: 0,0:01:47.00,0:01:48.57,*Default,NTP,0000,0000,0000,,就理解而言
Dialogue: 0,0:01:48.57,0:01:50.80,*Default,NTP,0000,0000,0000,,Python 的机制及其工作原理
Dialogue: 0,0:01:51.07,0:01:54.10,*Default,NTP,0000,0000,0000,,这也以多种方式体现在考试中
Dialogue: 0,0:01:54.13,0:01:55.93,*Default,NTP,0000,0000,0000,,因为如果你无法打印出一些东西
Dialogue: 0,0:01:55.97,0:01:57.67,*Default,NTP,0000,0000,0000,,那么就很难知道发生了什么
Dialogue: 0,0:02:00.17,0:02:01.90,*Default,NTP,0000,0000,0000,,字符串表示
Dialogue: 0,0:02:04.20,0:02:07.10,*Default,NTP,0000,0000,0000,,以及面向对象编程的隐喻
Dialogue: 0,0:02:07.80,0:02:08.97,*Default,NTP,0000,0000,0000,,我们说一个物体
Dialogue: 0,0:02:08.97,0:02:10.70,*Default,NTP,0000,0000,0000,,应该表现得像数据类型
Dialogue: 0,0:02:10.70,0:02:12.07,*Default,NTP,0000,0000,0000,,它的意思是代表
Dialogue: 0,0:02:13.47,0:02:14.93,*Default,NTP,0000,0000,0000,,其中一方面
Dialogue: 0,0:02:15.20,0:02:16.93,*Default,NTP,0000,0000,0000,,是一个对象应该知道如何
Dialogue: 0,0:02:17.00,0:02:18.77,*Default,NTP,0000,0000,0000,,向世界展示自己
Dialogue: 0,0:02:18.90,0:02:19.90,*Default,NTP,0000,0000,0000,,作为字符串
Dialogue: 0,0:02:20.13,0:02:22.93,*Default,NTP,0000,0000,0000,,或生成其自身的字符串表示形式
Dialogue: 0,0:02:24.37,0:02:25.77,*Default,NTP,0000,0000,0000,,字符串很重要
Dialogue: 0,0:02:26.47,0:02:27.47,*Default,NTP,0000,0000,0000,,他们的描述
Dialogue: 0,0:02:27.47,0:02:29.20,*Default,NTP,0000,0000,0000,,不仅在自然语言中
Dialogue: 0,0:02:29.20,0:02:31.37,*Default,NTP,0000,0000,0000,,人类用来相互交流的
Dialogue: 0,0:02:31.87,0:02:33.93,*Default,NTP,0000,0000,0000,,而且也适用于编程语言
Dialogue: 0,0:02:35.20,0:02:37.60,*Default,NTP,0000,0000,0000,,您可以将表达式放入字符串中
Dialogue: 0,0:02:39.13,0:02:40.33,*Default,NTP,0000,0000,0000,,所以在Python中
Dialogue: 0,0:02:40.33,0:02:42.93,*Default,NTP,0000,0000,0000,,这种区别是内置于语言中的
Dialogue: 0,0:02:43.33,0:02:46.87,*Default,NTP,0000,0000,0000,,所有对象都会产生两个字符串表示形式
Dialogue: 0,0:02:47.50,0:02:49.40,*Default,NTP,0000,0000,0000,,一个叫做搅拌弦
Dialogue: 0,0:02:49.60,0:02:52.13,*Default,NTP,0000,0000,0000,,它被设计为人类可读
Dialogue: 0,0:02:53.10,0:02:55.60,*Default,NTP,0000,0000,0000,,相比之下，代表字符串
Dialogue: 0,0:02:55.70,0:02:58.40,*Default,NTP,0000,0000,0000,,被设计为对于Python解释器来说是可读的
Dialogue: 0,0:02:59.20,0:03:01.40,*Default,NTP,0000,0000,0000,,这应该是一个表达式
Dialogue: 0,0:03:01.90,0:03:03.77,*Default,NTP,0000,0000,0000,,python 语言中的表达式
Dialogue: 0,0:03:05.30,0:03:05.53,*Default,NTP,0000,0000,0000,,现在
Dialogue: 0,0:03:05.53,0:03:08.50,*Default,NTP,0000,0000,0000,,很多时候搅拌和重复弦是相同的
Dialogue: 0,0:03:09.40,0:03:10.50,*Default,NTP,0000,0000,0000,,因为蟒蛇是
Dialogue: 0,0:03:10.50,0:03:12.57,*Default,NTP,0000,0000,0000,,被设计成一种人们可以阅读的语言
Dialogue: 0,0:03:14.13,0:03:14.93,*Default,NTP,0000,0000,0000,,所以
Dialogue: 0,0:03:15.00,0:03:17.80,*Default,NTP,0000,0000,0000,,许多表达式具有完全相同的形式
Dialogue: 0,0:03:18.00,0:03:19.67,*Default,NTP,0000,0000,0000,,作为一个人我的权利
Dialogue: 0,0:03:19.80,0:03:21.93,*Default,NTP,0000,0000,0000,,当他们试图传达相同的想法时
Dialogue: 0,0:03:22.53,0:03:25.17,*Default,NTP,0000,0000,0000,,无论哪种情况，你都会读第一名
Dialogue: 0,0:03:25.87,0:03:27.40,*Default,NTP,0000,0000,0000,,但有时这些不同
Dialogue: 0,0:03:27.50,0:03:28.90,*Default,NTP,0000,0000,0000,,让我们看一个例子
Dialogue: 0,0:03:30.33,0:03:33.00,*Default,NTP,0000,0000,0000,,第一个将考虑对象的代表字符串
Dialogue: 0,0:03:33.90,0:03:35.97,*Default,NTP,0000,0000,0000,,有一个内置函数叫repper
Dialogue: 0,0:03:36.60,0:03:39.93,*Default,NTP,0000,0000,0000,,它返回一个 python 表达式作为字符串
Dialogue: 0,0:03:40.53,0:03:42.90,*Default,NTP,0000,0000,0000,,计算结果为一个相等的对象
Dialogue: 0,0:03:43.80,0:03:45.50,*Default,NTP,0000,0000,0000,,如果我向reper寻求帮助
Dialogue: 0,0:03:45.90,0:03:48.30,*Default,NTP,0000,0000,0000,,这就是我所看到的语言内置的内容
Dialogue: 0,0:03:48.57,0:03:51.77,*Default,NTP,0000,0000,0000,,可以在它生成字符串的任何对象上调用repper
Dialogue: 0,0:03:52.13,0:03:53.13,*Default,NTP,0000,0000,0000,,它应该返回
Dialogue: 0,0:03:53.13,0:03:56.50,*Default,NTP,0000,0000,0000,,对象的规范字符串表示形式
Dialogue: 0,0:03:57.70,0:04:00.97,*Default,NTP,0000,0000,0000,,对于大多数对象类型，文档站说
Dialogue: 0,0:04:01.53,0:04:04.10,*Default,NTP,0000,0000,0000,,在对象的代表上调用 eval
Dialogue: 0,0:04:04.13,0:04:04.93,*Default,NTP,0000,0000,0000,,给你
Dialogue: 0,0:04:04.97,0:04:07.30,*Default,NTP,0000,0000,0000,,一些与原始对象等效的对象
Dialogue: 0,0:04:10.77,0:04:13.17,*Default,NTP,0000,0000,0000,,对某个值调用 reper 的结果
Dialogue: 0,0:04:13.30,0:04:16.57,*Default,NTP,0000,0000,0000,,正是您在交互式会话中看到的内容
Dialogue: 0,0:04:16.80,0:04:18.27,*Default,NTP,0000,0000,0000,,这就是蟒蛇王子出来的
Dialogue: 0,0:04:18.27,0:04:20.53,*Default,NTP,0000,0000,0000,,就在您计算的表达式下方
Dialogue: 0,0:04:21.87,0:04:23.93,*Default,NTP,0000,0000,0000,,所以如果我评估这个表达式
Dialogue: 0,0:04:24.50,0:04:28.00,*Default,NTP,0000,0000,0000,,代表12次方趋于12次方
Dialogue: 0,0:04:29.40,0:04:32.90,*Default,NTP,0000,0000,0000,,规范的字符串表示形式是一然后是二
Dialogue: 0,0:04:32.90,0:04:35.27,*Default,NTP,0000,0000,0000,,然后是十二个零，然后是一个小数点
Dialogue: 0,0:04:35.27,0:04:36.20,*Default,NTP,0000,0000,0000,,然后是一个零
Dialogue: 0,0:04:36.67,0:04:38.27,*Default,NTP,0000,0000,0000,,这就是显示的内容
Dialogue: 0,0:04:39.10,0:04:42.37,*Default,NTP,0000,0000,0000,,如果您调用 print 则会显示完全相同的内容
Dialogue: 0,0:04:42.50,0:04:44.77,*Default,NTP,0000,0000,0000,,关于调用reper的结果
Dialogue: 0,0:04:44.93,0:04:47.27,*Default,NTP,0000,0000,0000,,12 乘 10 到 12
Dialogue: 0,0:04:51.17,0:04:53.30,*Default,NTP,0000,0000,0000,,现在有些对象没有简单的
Dialogue: 0,0:04:53.30,0:04:54.80,*Default,NTP,0000,0000,0000,,python可读字符串
Dialogue: 0,0:04:55.17,0:04:57.30,*Default,NTP,0000,0000,0000,,没有办法写下表达式
Dialogue: 0,0:04:58.00,0:05:00.57,*Default,NTP,0000,0000,0000,,很容易捕捉到一切
Dialogue: 0,0:05:00.70,0:05:02.30,*Default,NTP,0000,0000,0000,,某个物体是
Dialogue: 0,0:05:02.80,0:05:03.40,*Default,NTP,0000,0000,0000,,或者
Dialogue: 0,0:05:03.40,0:05:06.07,*Default,NTP,0000,0000,0000,,表达如何创建相等的东西
Dialogue: 0,0:05:06.07,0:05:07.47,*Default,NTP,0000,0000,0000,,到原始对象
Dialogue: 0,0:05:08.30,0:05:10.60,*Default,NTP,0000,0000,0000,,这对于复合事物来说通常是正确的
Dialogue: 0,0:05:10.60,0:05:12.67,*Default,NTP,0000,0000,0000,,例如函数或类
Dialogue: 0,0:05:13.33,0:05:15.17,*Default,NTP,0000,0000,0000,,内置的 min 函数
Dialogue: 0,0:05:15.60,0:05:17.90,*Default,NTP,0000,0000,0000,,只是不能写成单个表达式
Dialogue: 0,0:05:18.30,0:05:21.17,*Default,NTP,0000,0000,0000,,所以当你在 min 上调用 reper 时你会看到什么
Dialogue: 0,0:05:21.47,0:05:23.27,*Default,NTP,0000,0000,0000,,这是代理吗
Dialogue: 0,0:05:23.87,0:05:26.70,*Default,NTP,0000,0000,0000,,它使用尖括号来表示
Dialogue: 0,0:05:26.77,0:05:28.47,*Default,NTP,0000,0000,0000,,这实际上不是
Dialogue: 0,0:05:28.53,0:05:30.13,*Default,NTP,0000,0000,0000,,根本就是一个Python表达式
Dialogue: 0,0:05:30.47,0:05:31.80,*Default,NTP,0000,0000,0000,,这只是一些标准
Dialogue: 0,0:05:32.40,0:05:34.30,*Default,NTP,0000,0000,0000,,人类可读的描述
Dialogue: 0,0:05:34.40,0:05:36.70,*Default,NTP,0000,0000,0000,,因为生成一个python表达式
Dialogue: 0,0:05:36.77,0:05:37.93,*Default,NTP,0000,0000,0000,,只是没有成功
Dialogue: 0,0:05:42.27,0:05:44.60,*Default,NTP,0000,0000,0000,,物体的搅拌弦可以不同
Dialogue: 0,0:05:45.50,0:05:47.87,*Default,NTP,0000,0000,0000,,人类解释字符串也很有用
Dialogue: 0,0:05:47.87,0:05:48.87,*Default,NTP,0000,0000,0000,,所以我们想要
Dialogue: 0,0:05:48.87,0:05:50.73,*Default,NTP,0000,0000,0000,,我们的程序能够生成它们
Dialogue: 0,0:05:51.07,0:05:51.57,*Default,NTP,0000,0000,0000,,因为
Dialogue: 0,0:05:51.57,0:05:53.90,*Default,NTP,0000,0000,0000,,很多时候一个程序想要传达一些东西
Dialogue: 0,0:05:53.90,0:05:54.73,*Default,NTP,0000,0000,0000,,与用户
Dialogue: 0,0:05:56.00,0:05:57.27,*Default,NTP,0000,0000,0000,,这是一个例子
Dialogue: 0,0:05:58.00,0:06:00.10,*Default,NTP,0000,0000,0000,,有一个分数模块
Dialogue: 0,0:06:00.53,0:06:02.27,*Default,NTP,0000,0000,0000,,标准库的一部分
Dialogue: 0,0:06:03.00,0:06:05.13,*Default,NTP,0000,0000,0000,,它有一个分数类
Dialogue: 0,0:06:06.57,0:06:09.93,*Default,NTP,0000,0000,0000,,分数由分子和分母构成
Dialogue: 0,0:06:11.50,0:06:13.33,*Default,NTP,0000,0000,0000,,分数的开膛手
Dialogue: 0,0:06:13.87,0:06:16.00,*Default,NTP,0000,0000,0000,,只是一个电话
Dialogue: 0,0:06:16.33,0:06:18.93,*Default,NTP,0000,0000,0000,,类本身就是你构建的方式
Dialogue: 0,0:06:19.40,0:06:21.07,*Default,NTP,0000,0000,0000,,第一位的分数
Dialogue: 0,0:06:21.97,0:06:24.17,*Default,NTP,0000,0000,0000,,人类的右分数不是这样的
Dialogue: 0,0:06:24.37,0:06:26.13,*Default,NTP,0000,0000,0000,,像这样的人类权利分数
Dialogue: 0,0:06:27.53,0:06:30.87,*Default,NTP,0000,0000,0000,,所以 Stir 是一个内置函数，可以接受任何对象
Dialogue: 0,0:06:30.93,0:06:32.37,*Default,NTP,0000,0000,0000,,返回一个字符串
Dialogue: 0,0:06:32.90,0:06:35.50,*Default,NTP,0000,0000,0000,,或者这个字符串是人类可以解释的
Dialogue: 0,0:06:35.80,0:06:38.30,*Default,NTP,0000,0000,0000,,原始对象的表示
Dialogue: 0,0:06:40.00,0:06:41.60,*Default,NTP,0000,0000,0000,,调用搅拌的结果
Dialogue: 0,0:06:41.90,0:06:43.77,*Default,NTP,0000,0000,0000,,关于表达式的值
Dialogue: 0,0:06:45.17,0:06:47.70,*Default,NTP,0000,0000,0000,,是 python 打印出来的内容
Dialogue: 0,0:06:48.00,0:06:50.40,*Default,NTP,0000,0000,0000,,当你实际调用打印函数时
Dialogue: 0,0:06:52.07,0:06:55.33,*Default,NTP,0000,0000,0000,,所以如果我打印一半我会看到一除以二
Dialogue: 0,0:06:56.07,0:06:58.87,*Default,NTP,0000,0000,0000,,现在请注意，它周围有引号，因为这是一个
Dialogue: 0,0:06:59.00,0:06:59.80,*Default,NTP,0000,0000,0000,,细绳
Dialogue: 0,0:07:00.57,0:07:00.93,*Default,NTP,0000,0000,0000,,或作为
Dialogue: 0,0:07:00.93,0:07:03.13,*Default,NTP,0000,0000,0000,,这正是打印字符串时发生的情况
Dialogue: 0,0:07:03.17,0:07:04.67,*Default,NTP,0000,0000,0000,,字符串的内容
Dialogue: 0,0:07:07.77,0:07:09.00,*Default,NTP,0000,0000,0000,,好吧，让我们尝试一下
Dialogue: 0,0:07:11.93,0:07:13.00,*Default,NTP,0000,0000,0000,,从分数
Dialogue: 0,0:07:13.00,0:07:16.50,*Default,NTP,0000,0000,0000,,导入分数使我可以访问此类
Dialogue: 0,0:07:16.60,0:07:18.10,*Default,NTP,0000,0000,0000,,我结合了
Dialogue: 0,0:07:18.73,0:07:21.07,*Default,NTP,0000,0000,0000,,半个名字的实例
Dialogue: 0,0:07:22.60,0:07:24.30,*Default,NTP,0000,0000,0000,,现在一半是分数
Dialogue: 0,0:07:25.67,0:07:28.40,*Default,NTP,0000,0000,0000,,一半的代表字符串就是这样
Dialogue: 0,0:07:29.57,0:07:30.80,*Default,NTP,0000,0000,0000,,如果我打印一半
Dialogue: 0,0:07:31.07,0:07:32.77,*Default,NTP,0000,0000,0000,,我看到一除以二
Dialogue: 0,0:07:33.40,0:07:36.97,*Default,NTP,0000,0000,0000,,一半的搅拌串是一除以二
Dialogue: 0,0:07:38.87,0:07:42.87,*Default,NTP,0000,0000,0000,,现在如果我评估一半的代表字符串
Dialogue: 0,0:07:43.53,0:07:45.30,*Default,NTP,0000,0000,0000,,我得到了分数
Dialogue: 0,0:07:46.30,0:07:49.10,*Default,NTP,0000,0000,0000,,这是一个不同的对象，但它是这个狡辩的权利
Dialogue: 0,0:07:50.27,0:07:54.47,*Default,NTP,0000,0000,0000,,如果我在这种情况下评估一半的搅拌弦
Dialogue: 0,0:07:54.60,0:07:57.37,*Default,NTP,0000,0000,0000,,事实证明这是一个有效的 python 表达式
Dialogue: 0,0:07:57.37,0:07:59.07,*Default,NTP,0000,0000,0000,,但这只是巧合
Dialogue: 0,0:07:59.17,0:08:01.00,*Default,NTP,0000,0000,0000,,你得到的不是零头
Dialogue: 0,0:08:01.10,0:08:02.07,*Default,NTP,0000,0000,0000,,这是一个失败
Dialogue: 0,0:08:02.87,0:08:04.73,*Default,NTP,0000,0000,0000,,一除以二确实就在那里
Dialogue: 0,0:08:04.73,0:08:06.53,*Default,NTP,0000,0000,0000,,可以被人类解释
Dialogue: 0,0:08:09.13,0:08:11.07,*Default,NTP,0000,0000,0000,,我们可以多了解一点
Dialogue: 0,0:08:11.07,0:08:13.60,*Default,NTP,0000,0000,0000,,重复和搅拌功能
Dialogue: 0,0:08:13.60,0:08:16.40,*Default,NTP,0000,0000,0000,,只需在弦上尝试一下
Dialogue: 0,0:08:17.07,0:08:18.30,*Default,NTP,0000,0000,0000,,所以这是一个字符串
Dialogue: 0,0:08:19.13,0:08:20.53,*Default,NTP,0000,0000,0000,,你好世界
Dialogue: 0,0:08:23.80,0:08:25.97,*Default,NTP,0000,0000,0000,,当我评估 s 时会发生什么
Dialogue: 0,0:08:26.10,0:08:27.37,*Default,NTP,0000,0000,0000,,我看到那根绳子
Dialogue: 0,0:08:29.33,0:08:33.50,*Default,NTP,0000,0000,0000,,这就是当我打印出 s 的代表时发生的情况
Dialogue: 0,0:08:33.77,0:08:34.67,*Default,NTP,0000,0000,0000,,一样
Dialogue: 0,0:08:36.90,0:08:39.07,*Default,NTP,0000,0000,0000,,现在如果我打印出 s 会发生什么
Dialogue: 0,0:08:39.07,0:08:40.37,*Default,NTP,0000,0000,0000,,引号消失了
Dialogue: 0,0:08:41.87,0:08:44.90,*Default,NTP,0000,0000,0000,,这正是我在 s 的骚动中所看到的
Dialogue: 0,0:08:44.90,0:08:47.37,*Default,NTP,0000,0000,0000,,因为 s 的搅拌只是 s
Dialogue: 0,0:08:50.00,0:08:53.17,*Default,NTP,0000,0000,0000,,现在如果我打电话给 s 的 reper 会发生什么
Dialogue: 0,0:08:53.70,0:08:55.57,*Default,NTP,0000,0000,0000,,我看到引号内有引号
Dialogue: 0,0:08:55.73,0:08:57.00,*Default,NTP,0000,0000,0000,,那里发生了什么事
Dialogue: 0,0:08:57.73,0:09:01.13,*Default,NTP,0000,0000,0000,,那么reper给我的是一个字符串
Dialogue: 0,0:09:01.20,0:09:04.73,*Default,NTP,0000,0000,0000,,或者如果我评估它我会削减原始字符串
Dialogue: 0,0:09:08.60,0:09:10.20,*Default,NTP,0000,0000,0000,,如果我打电话给代表怎么办
Dialogue: 0,0:09:10.27,0:09:13.33,*Default,NTP,0000,0000,0000,,s 的代表的代表
Dialogue: 0,0:09:15.50,0:09:16.73,*Default,NTP,0000,0000,0000,,我会弄得一团糟
Dialogue: 0,0:09:17.40,0:09:18.77,*Default,NTP,0000,0000,0000,,那里发生了什么事
Dialogue: 0,0:09:19.40,0:09:21.93,*Default,NTP,0000,0000,0000,,好吧，这不仅仅是引号内的引号
Dialogue: 0,0:09:21.97,0:09:24.80,*Default,NTP,0000,0000,0000,,但引号内引号内引号内引号内
Dialogue: 0,0:09:25.33,0:09:28.57,*Default,NTP,0000,0000,0000,,python 必须使用反斜杠来表示
Dialogue: 0,0:09:29.00,0:09:31.50,*Default,NTP,0000,0000,0000,,什么引用了真正的工业，什么没有引用
Dialogue: 0,0:09:32.57,0:09:34.53,*Default,NTP,0000,0000,0000,,细节并不重要
Dialogue: 0,0:09:35.07,0:09:36.10,*Default,NTP,0000,0000,0000,,什么是重要的
Dialogue: 0,0:09:36.10,0:09:37.40,*Default,NTP,0000,0000,0000,,是如果我评估
Dialogue: 0,0:09:37.40,0:09:40.50,*Default,NTP,0000,0000,0000,,评估结果 评估结果
Dialogue: 0,0:09:40.57,0:09:42.93,*Default,NTP,0000,0000,0000,,s 的代表者的代表者
Dialogue: 0,0:09:43.07,0:09:44.40,*Default,NTP,0000,0000,0000,,我回来了
Dialogue: 0,0:09:46.07,0:09:48.90,*Default,NTP,0000,0000,0000,,现在如果我一开始就评估 s 会怎样
Dialogue: 0,0:09:49.33,0:09:50.53,*Default,NTP,0000,0000,0000,,我会收到一个错误
Dialogue: 0,0:09:51.50,0:09:56.10,*Default,NTP,0000,0000,0000,,hello comma world 不是有效的 python 表达式
Dialogue: 0,0:09:57.77,0:09:59.80,*Default,NTP,0000,0000,0000,,当我引用它时，它是
Dialogue: 0,0:10:00.10,0:10:03.17,*Default,NTP,0000,0000,0000,,所以如果我评估 s 的代表一切都很好
Dialogue: 0,0:10:03.60,0:10:07.00,*Default,NTP,0000,0000,0000,,但我无法评价 s 或 s 的骚动
Dialogue: 0,0:10:07.13,0:10:10.60,*Default,NTP,0000,0000,0000,,因为我这里的不是有效的 python
Dialogue: 0,0:10:13.37,0:10:15.17,*Default,NTP,0000,0000,0000,,多态函数
Dialogue: 0,0:10:16.40,0:10:18.93,*Default,NTP,0000,0000,0000,,多态函数是一个适用于
Dialogue: 0,0:10:18.93,0:10:20.00,*Default,NTP,0000,0000,0000,,对许多不同的
Dialogue: 0,0:10:20.53,0:10:21.73,*Default,NTP,0000,0000,0000,,数据类型
Dialogue: 0,0:10:23.20,0:10:25.73,*Default,NTP,0000,0000,0000,,Stir 和 Reper 就是很好的例子
Dialogue: 0,0:10:25.90,0:10:26.77,*Default,NTP,0000,0000,0000,,因为你真的可以
Dialogue: 0,0:10:26.77,0:10:28.53,*Default,NTP,0000,0000,0000,,传递任何你想要的对象
Dialogue: 0,0:10:28.53,0:10:31.47,*Default,NTP,0000,0000,0000,,这是内置的搅拌和重复功能
Dialogue: 0,0:10:31.77,0:10:33.70,*Default,NTP,0000,0000,0000,,他们总是应该做正确的事
Dialogue: 0,0:10:34.33,0:10:35.53,*Default,NTP,0000,0000,0000,,这怎么可能
Dialogue: 0,0:10:36.93,0:10:38.33,*Default,NTP,0000,0000,0000,,基本思想是这样的
Dialogue: 0,0:10:38.93,0:10:43.20,*Default,NTP,0000,0000,0000,,是那个repper只是要求它的参数显示自己
Dialogue: 0,0:10:44.20,0:10:45.57,*Default,NTP,0000,0000,0000,,在Python中
Dialogue: 0,0:10:46.13,0:10:48.87,*Default,NTP,0000,0000,0000,,这是使用特殊方法名称完成的
Dialogue: 0,0:10:49.87,0:10:51.10,*Default,NTP,0000,0000,0000,,现在它是一个特殊的名字
Dialogue: 0,0:10:51.10,0:10:53.77,*Default,NTP,0000,0000,0000,,因为它对应于一个内置函数
Dialogue: 0,0:10:54.60,0:10:56.20,*Default,NTP,0000,0000,0000,,但这个总体想法
Dialogue: 0,0:10:56.80,0:10:58.87,*Default,NTP,0000,0000,0000,,你可以有一个函数
Dialogue: 0,0:10:59.07,0:11:02.17,*Default,NTP,0000,0000,0000,,询问论证者要做什么
Dialogue: 0,0:11:02.80,0:11:05.13,*Default,NTP,0000,0000,0000,,当然也适用于 python 语言之外
Dialogue: 0,0:11:06.40,0:11:09.10,*Default,NTP,0000,0000,0000,,好的，特别是代表
Dialogue: 0,0:11:09.50,0:11:11.90,*Default,NTP,0000,0000,0000,,仅调用零参数方法
Dialogue: 0,0:11:12.13,0:11:13.77,*Default,NTP,0000,0000,0000,,称为下划线 下划线
Dialogue: 0,0:11:13.77,0:11:15.67,*Default,NTP,0000,0000,0000,,代表 下划线 下划线
Dialogue: 0,0:11:15.97,0:11:17.17,*Default,NTP,0000,0000,0000,,论其论点
Dialogue: 0,0:11:17.20,0:11:19.90,*Default,NTP,0000,0000,0000,,为了得到它返回的reper字符串
Dialogue: 0,0:11:22.10,0:11:24.50,*Default,NTP,0000,0000,0000,,这样我就可以打电话给一半的代表
Dialogue: 0,0:11:24.53,0:11:26.27,*Default,NTP,0000,0000,0000,,这是分数一二
Dialogue: 0,0:11:26.77,0:11:28.73,*Default,NTP,0000,0000,0000,,或者我可以调用它的方法
Dialogue: 0,0:11:29.47,0:11:30.73,*Default,NTP,0000,0000,0000,,调用该方法
Dialogue: 0,0:11:31.87,0:11:33.53,*Default,NTP,0000,0000,0000,,在课堂上受到关注
Dialogue: 0,0:11:34.30,0:11:35.87,*Default,NTP,0000,0000,0000,,所以这实际上是分数课
Dialogue: 0,0:11:35.87,0:11:37.53,*Default,NTP,0000,0000,0000,,知道如何生成reper字符串
Dialogue: 0,0:11:37.53,0:11:38.50,*Default,NTP,0000,0000,0000,,对于一小部分
Dialogue: 0,0:11:38.97,0:11:40.50,*Default,NTP,0000,0000,0000,,这不是reper函数
Dialogue: 0,0:11:42.00,0:11:45.53,*Default,NTP,0000,0000,0000,,同样，stir 调用零参数方法
Dialogue: 0,0:11:45.93,0:11:49.37,*Default,NTP,0000,0000,0000,,相应地称为下划线 下划线
Dialogue: 0,0:11:49.37,0:11:50.90,*Default,NTP,0000,0000,0000,,搅拌 下划线 下划线
Dialogue: 0,0:11:51.10,0:11:52.57,*Default,NTP,0000,0000,0000,,另一个特殊方法名称
Dialogue: 0,0:11:54.47,0:11:57.53,*Default,NTP,0000,0000,0000,,所以如果我愿意的话我可以直接调用这个方法
Dialogue: 0,0:11:58.00,0:12:01.50,*Default,NTP,0000,0000,0000,,这会产生一小部分的搅拌弦
Dialogue: 0,0:12:02.70,0:12:04.90,*Default,NTP,0000,0000,0000,,所以这里有一个非常重要的想法
Dialogue: 0,0:12:05.40,0:12:06.87,*Default,NTP,0000,0000,0000,,你可以写一个函数
Dialogue: 0,0:12:07.47,0:12:09.00,*Default,NTP,0000,0000,0000,,就像搅动开膛手
Dialogue: 0,0:12:09.77,0:12:12.07,*Default,NTP,0000,0000,0000,,实际上根本没有太多逻辑
Dialogue: 0,0:12:12.70,0:12:14.20,*Default,NTP,0000,0000,0000,,它只是遵循
Dialogue: 0,0:12:14.30,0:12:17.60,*Default,NTP,0000,0000,0000,,决定做什么的争论
Dialogue: 0,0:12:17.97,0:12:21.17,*Default,NTP,0000,0000,0000,,通过使用特定名称调用其方法
Dialogue: 0,0:12:23.80,0:12:25.27,*Default,NTP,0000,0000,0000,,那么我们来谈谈如何
Dialogue: 0,0:12:25.27,0:12:27.67,*Default,NTP,0000,0000,0000,,reper inster实际实现了
Dialogue: 0,0:12:28.30,0:12:29.80,*Default,NTP,0000,0000,0000,,事实证明稍微多了一点
Dialogue: 0,0:12:29.80,0:12:31.70,*Default,NTP,0000,0000,0000,,比我描述的复杂
Dialogue: 0,0:12:32.97,0:12:35.33,*Default,NTP,0000,0000,0000,,而不是仅仅调用repper方法
Dialogue: 0,0:12:35.33,0:12:36.57,*Default,NTP,0000,0000,0000,,论其论点
Dialogue: 0,0:12:38.70,0:12:42.17,*Default,NTP,0000,0000,0000,,名为repper的实例属性被忽略
Dialogue: 0,0:12:43.00,0:12:45.50,*Default,NTP,0000,0000,0000,,只有一个名为repper的类属性
Dialogue: 0,0:12:45.77,0:12:50.30,*Default,NTP,0000,0000,0000,,由内置的repper函数调用
Dialogue: 0,0:12:51.80,0:12:53.20,*Default,NTP,0000,0000,0000,,我将如何实施
Dialogue: 0,0:12:53.77,0:12:56.50,*Default,NTP,0000,0000,0000,,那么下面哪个函数定义
Dialogue: 0,0:12:56.57,0:12:59.27,*Default,NTP,0000,0000,0000,,对应于一个函数reper
Dialogue: 0,0:12:59.53,0:13:01.20,*Default,NTP,0000,0000,0000,,需要一些论证
Dialogue: 0,0:13:01.57,0:13:03.47,*Default,NTP,0000,0000,0000,,查找类属性
Dialogue: 0,0:13:03.67,0:13:05.60,*Default,NTP,0000,0000,0000,,称为下划线下划线代表
Dialogue: 0,0:13:06.27,0:13:07.40,*Default,NTP,0000,0000,0000,,并调用它
Dialogue: 0,0:13:08.50,0:13:09.90,*Default,NTP,0000,0000,0000,,这里有五个选项
Dialogue: 0,0:13:10.13,0:13:12.80,*Default,NTP,0000,0000,0000,,只有一个人做我所描述的事情
Dialogue: 0,0:13:13.27,0:13:14.37,*Default,NTP,0000,0000,0000,,想一想
Dialogue: 0,0:13:14.37,0:13:17.20,*Default,NTP,0000,0000,0000,,我在321告诉你答案
Dialogue: 0,0:13:18.33,0:13:19.20,*Default,NTP,0000,0000,0000,,这个
Dialogue: 0,0:13:20.50,0:13:24.47,*Default,NTP,0000,0000,0000,,设法跳过实例属性或忽略它们
Dialogue: 0,0:13:24.90,0:13:27.30,*Default,NTP,0000,0000,0000,,通过查找参数的类型
Dialogue: 0,0:13:27.53,0:13:29.20,*Default,NTP,0000,0000,0000,,这会让你上课
Dialogue: 0,0:13:29.60,0:13:30.73,*Default,NTP,0000,0000,0000,,因此
Dialogue: 0,0:13:30.90,0:13:34.70,*Default,NTP,0000,0000,0000,,询问该类的repper属性
Dialogue: 0,0:13:34.70,0:13:37.27,*Default,NTP,0000,0000,0000,,保证给你一个类属性
Dialogue: 0,0:13:38.47,0:13:40.87,*Default,NTP,0000,0000,0000,,现在它是一个类属性，它是一个函数
Dialogue: 0,0:13:41.33,0:13:43.67,*Default,NTP,0000,0000,0000,,并且该函数不是绑定方法
Dialogue: 0,0:13:43.67,0:13:46.30,*Default,NTP,0000,0000,0000,,因为它在班级中受到关注
Dialogue: 0,0:13:46.50,0:13:49.87,*Default,NTP,0000,0000,0000,,所以你必须显式传入 x
Dialogue: 0,0:13:50.20,0:13:54.77,*Default,NTP,0000,0000,0000,,为了调用这个类属性
Dialogue: 0,0:13:54.80,0:13:57.73,*Default,NTP,0000,0000,0000,,关于感兴趣的特定论点 x
Dialogue: 0,0:13:58.60,0:14:00.73,*Default,NTP,0000,0000,0000,,我们稍后会看一个例子
Dialogue: 0,0:14:02.87,0:14:04.80,*Default,NTP,0000,0000,0000,,搅拌也很复杂
Dialogue: 0,0:14:04.80,0:14:06.73,*Default,NTP,0000,0000,0000,,甚至比reper还复杂
Dialogue: 0,0:14:07.27,0:14:09.87,*Default,NTP,0000,0000,0000,,名为搅拌的实例属性被忽略
Dialogue: 0,0:14:10.60,0:14:13.37,*Default,NTP,0000,0000,0000,,如果类上根本没有搅拌属性
Dialogue: 0,0:14:13.67,0:14:17.60,*Default,NTP,0000,0000,0000,,然后调用 Stir 只会返回 reper 返回的内容
Dialogue: 0,0:14:17.87,0:14:19.47,*Default,NTP,0000,0000,0000,,所以默认情况下它们是相同的
Dialogue: 0,0:14:19.53,0:14:21.77,*Default,NTP,0000,0000,0000,,只有当你明确地让它们不同时
Dialogue: 0,0:14:21.77,0:14:22.73,*Default,NTP,0000,0000,0000,,他们不同
Dialogue: 0,0:14:23.53,0:14:24.90,*Default,NTP,0000,0000,0000,,我们将如何实施
Dialogue: 0,0:14:24.97,0:14:25.90,*Default,NTP,0000,0000,0000,,好吧，让我们尝试一下
Dialogue: 0,0:14:27.60,0:14:30.57,*Default,NTP,0000,0000,0000,,顺便说一句，搅拌是一个类而不是一个函数
Dialogue: 0,0:14:31.37,0:14:32.93,*Default,NTP,0000,0000,0000,,所以当你打电话搅拌时
Dialogue: 0,0:14:33.17,0:14:34.97,*Default,NTP,0000,0000,0000,,你真的在调用构造函数
Dialogue: 0,0:14:34.97,0:14:37.40,*Default,NTP,0000,0000,0000,,对于称为搅拌的内置字符串类型
Dialogue: 0,0:14:39.37,0:14:41.47,*Default,NTP,0000,0000,0000,,所以去探索所有这些不同的
Dialogue: 0,0:14:41.67,0:14:44.20,*Default,NTP,0000,0000,0000,,字符串生成的细微差别
Dialogue: 0,0:14:44.30,0:14:46.70,*Default,NTP,0000,0000,0000,,让我们创建一个名为 bear 的类
Dialogue: 0,0:14:47.00,0:14:48.20,*Default,NTP,0000,0000,0000,,这是一只熊
Dialogue: 0,0:14:52.90,0:14:55.90,*Default,NTP,0000,0000,0000,,它将有一个 reper 方法
Dialogue: 0,0:14:56.80,0:14:59.80,*Default,NTP,0000,0000,0000,,它只返回字符串 bear
Dialogue: 0,0:15:02.40,0:15:03.57,*Default,NTP,0000,0000,0000,,现在我要尝试
Dialogue: 0,0:15:03.57,0:15:06.27,*Default,NTP,0000,0000,0000,,以各种不同的方式调用它
Dialogue: 0,0:15:07.07,0:15:09.70,*Default,NTP,0000,0000,0000,,我要创造一只叫 oski 的熊
Dialogue: 0,0:15:11.00,0:15:12.70,*Default,NTP,0000,0000,0000,,我要打印 oski
Dialogue: 0,0:15:13.10,0:15:16.10,*Default,NTP,0000,0000,0000,,我要打印 oski 的搅拌字符串
Dialogue: 0,0:15:16.50,0:15:19.37,*Default,NTP,0000,0000,0000,,我要打印 oski 的 reper 字符串
Dialogue: 0,0:15:19.87,0:15:23.70,*Default,NTP,0000,0000,0000,,我将打印在 oski 上调用时得到的内容
Dialogue: 0,0:15:23.93,0:15:25.70,*Default,NTP,0000,0000,0000,,搅拌法
Dialogue: 0,0:15:25.90,0:15:30.80,*Default,NTP,0000,0000,0000,,我将在 oski 上调用 reper 方法进行打印
Dialogue: 0,0:15:37.70,0:15:40.00,*Default,NTP,0000,0000,0000,,所以现在他们所有人
Dialogue: 0,0:15:40.40,0:15:41.90,*Default,NTP,0000,0000,0000,,打印出小熊
Dialogue: 0,0:15:42.33,0:15:44.27,*Default,NTP,0000,0000,0000,,这里有五种不同的打印语句
Dialogue: 0,0:15:44.37,0:15:45.50,*Default,NTP,0000,0000,0000,,他们都是一样的
Dialogue: 0,0:15:46.60,0:15:50.53,*Default,NTP,0000,0000,0000,,如果我也定义搅拌方法会发生什么
Dialogue: 0,0:15:51.40,0:15:53.00,*Default,NTP,0000,0000,0000,,好吧，既然现在有骚动
Dialogue: 0,0:15:53.00,0:15:55.73,*Default,NTP,0000,0000,0000,,每当我们使用搅拌字符串时都会调用它
Dialogue: 0,0:15:56.60,0:15:59.57,*Default,NTP,0000,0000,0000,,这是这里这里和这里
Dialogue: 0,0:16:00.33,0:16:03.57,*Default,NTP,0000,0000,0000,,所以在这种情况下我们要返回一只熊
Dialogue: 0,0:16:05.33,0:16:07.37,*Default,NTP,0000,0000,0000,,我们可以观察不同的行为
Dialogue: 0,0:16:07.37,0:16:08.67,*Default,NTP,0000,0000,0000,,比我们以前拥有的
Dialogue: 0,0:16:09.70,0:16:12.13,*Default,NTP,0000,0000,0000,,打印 oski 给了我搅拌弦
Dialogue: 0,0:16:12.40,0:16:14.80,*Default,NTP,0000,0000,0000,,以及明确要求搅拌
Dialogue: 0,0:16:14.80,0:16:16.93,*Default,NTP,0000,0000,0000,,使用内置搅拌功能
Dialogue: 0,0:16:17.30,0:16:21.00,*Default,NTP,0000,0000,0000,,或者查找搅动特殊方法名称
Dialogue: 0,0:16:23.20,0:16:25.80,*Default,NTP,0000,0000,0000,,现在为了获得更多的多样性
Dialogue: 0,0:16:25.87,0:16:28.00,*Default,NTP,0000,0000,0000,,我们需要在其中引入 和
Dialogue: 0,0:16:30.17,0:16:32.77,*Default,NTP,0000,0000,0000,,这将设置实例属性
Dialogue: 0,0:16:33.37,0:16:36.40,*Default,NTP,0000,0000,0000,,让我们有一个名为repper的兴趣实例属性
Dialogue: 0,0:16:36.90,0:16:38.20,*Default,NTP,0000,0000,0000,,这是一个函数
Dialogue: 0,0:16:38.57,0:16:40.33,*Default,NTP,0000,0000,0000,,不需要任何参数
Dialogue: 0,0:16:40.33,0:16:42.93,*Default,NTP,0000,0000,0000,,因为在这里我们看到我们不带参数调用它
Dialogue: 0,0:16:43.37,0:16:45.10,*Default,NTP,0000,0000,0000,,它将返回 oski
Dialogue: 0,0:16:46.30,0:16:47.87,*Default,NTP,0000,0000,0000,,和自点搅拌
Dialogue: 0,0:16:49.00,0:16:50.10,*Default,NTP,0000,0000,0000,,将返回
Dialogue: 0,0:16:50.90,0:16:52.07,*Default,NTP,0000,0000,0000,,这只熊
Dialogue: 0,0:16:54.77,0:16:56.57,*Default,NTP,0000,0000,0000,,执行我的五个打印语句
Dialogue: 0,0:16:56.57,0:16:57.20,*Default,NTP,0000,0000,0000,,我们看到
Dialogue: 0,0:16:57.20,0:16:59.90,*Default,NTP,0000,0000,0000,,打印 oski 并打印 oski 的搅拌字符串
Dialogue: 0,0:16:59.90,0:17:01.13,*Default,NTP,0000,0000,0000,,总是一样的
Dialogue: 0,0:17:01.37,0:17:03.17,*Default,NTP,0000,0000,0000,,没有真正的方法让它们与众不同
Dialogue: 0,0:17:04.30,0:17:08.10,*Default,NTP,0000,0000,0000,,reper 字符串忽略此实例属性
Dialogue: 0,0:17:08.10,0:17:09.57,*Default,NTP,0000,0000,0000,,只是使用该方法
Dialogue: 0,0:17:09.67,0:17:12.37,*Default,NTP,0000,0000,0000,,这是一个类属性，也是一个函数
Dialogue: 0,0:17:12.67,0:17:15.40,*Default,NTP,0000,0000,0000,,所以我们看到 bear 被返回
Dialogue: 0,0:17:16.17,0:17:17.80,*Default,NTP,0000,0000,0000,,同样搅拌绳
Dialogue: 0,0:17:17.93,0:17:18.90,*Default,NTP,0000,0000,0000,,跳过实例
Dialogue: 0,0:17:18.90,0:17:21.30,*Default,NTP,0000,0000,0000,,属性并直接进入类
Dialogue: 0,0:17:21.87,0:17:24.87,*Default,NTP,0000,0000,0000,,但是属性以传统方式查找
Dialogue: 0,0:17:25.13,0:17:27.60,*Default,NTP,0000,0000,0000,,给我们这些函数，当我们调用它们时
Dialogue: 0,0:17:27.80,0:17:29.93,*Default,NTP,0000,0000,0000,,返回奥斯基和这只熊
Dialogue: 0,0:17:30.87,0:17:31.33,*Default,NTP,0000,0000,0000,,所以我们看到
Dialogue: 0,0:17:31.33,0:17:33.53,*Default,NTP,0000,0000,0000,,我们可以获得四种不同的东西
Dialogue: 0,0:17:33.77,0:17:35.50,*Default,NTP,0000,0000,0000,,根据我们的打印方式
Dialogue: 0,0:17:36.57,0:17:39.10,*Default,NTP,0000,0000,0000,,作为证明我们理解的最后一步
Dialogue: 0,0:17:39.10,0:17:41.77,*Default,NTP,0000,0000,0000,,让我们看看是否可以自己编写一个 repro 函数
Dialogue: 0,0:17:42.13,0:17:45.07,*Default,NTP,0000,0000,0000,,所以这将取代内置的重现功能
Dialogue: 0,0:17:46.40,0:17:50.17,*Default,NTP,0000,0000,0000,,我们在这里要做的只是返回 x 的类型
Dialogue: 0,0:17:50.40,0:17:52.73,*Default,NTP,0000,0000,0000,,调用橡胶方法
Dialogue: 0,0:17:52.73,0:17:55.20,*Default,NTP,0000,0000,0000,,然后像我之前说的那样传入 x
Dialogue: 0,0:17:56.20,0:17:58.10,*Default,NTP,0000,0000,0000,,搅拌 x 怎么样？
Dialogue: 0,0:17:58.97,0:18:01.10,*Default,NTP,0000,0000,0000,,现在我们当然需要获取 x 的类型
Dialogue: 0,0:18:01.13,0:18:03.70,*Default,NTP,0000,0000,0000,,因为我们将忽略实例属性
Dialogue: 0,0:18:05.33,0:18:06.60,*Default,NTP,0000,0000,0000,,如果是这样的话
Dialogue: 0,0:18:07.33,0:18:11.50,*Default,NTP,0000,0000,0000,,该类型有一个名为搅拌的属性
Dialogue: 0,0:18:11.57,0:18:13.57,*Default,NTP,0000,0000,0000,,周围有下划线
Dialogue: 0,0:18:13.93,0:18:17.37,*Default,NTP,0000,0000,0000,,然后我们将使用那个 t 点搅拌
Dialogue: 0,0:18:17.67,0:18:21.67,*Default,NTP,0000,0000,0000,,并传入原始实例作为其参数
Dialogue: 0,0:18:22.60,0:18:23.30,*Default,NTP,0000,0000,0000,,否则
Dialogue: 0,0:18:23.30,0:18:26.80,*Default,NTP,0000,0000,0000,,我们可以返回在 x 上调用repper的结果
Dialogue: 0,0:18:27.73,0:18:29.50,*Default,NTP,0000,0000,0000,,在这里我们将运行相同的程序
Dialogue: 0,0:18:29.57,0:18:31.20,*Default,NTP,0000,0000,0000,,它应该以同样的方式表现
Dialogue: 0,0:18:31.20,0:18:34.07,*Default,NTP,0000,0000,0000,,如果我们成功实施了reper和stir
Dialogue: 0,0:18:34.20,0:18:38.13,*Default,NTP,0000,0000,0000,,就像它们在内置方法中的行为一样
Dialogue: 0,0:18:38.40,0:18:40.93,*Default,NTP,0000,0000,0000,,在这里我们看到完全相同的输出
Dialogue: 0,0:18:41.20,0:18:43.40,*Default,NTP,0000,0000,0000,,因为我们实现了相同的逻辑
Dialogue: 0,0:18:43.47,0:18:45.00,*Default,NTP,0000,0000,0000,,重印者适用
Dialogue: 0,0:18:45.70,0:18:46.93,*Default,NTP,0000,0000,0000,,所以现在你知道他们做了什么
Dialogue: 0,0:18:48.40,0:18:50.37,*Default,NTP,0000,0000,0000,,我们在这里使用一个重要的想法
Dialogue: 0,0:18:50.37,0:18:51.97,*Default,NTP,0000,0000,0000,,它被称为接口
Dialogue: 0,0:18:52.97,0:18:55.17,*Default,NTP,0000,0000,0000,,所以当我谈论面向对象时
Dialogue: 0,0:18:55.17,0:18:56.67,*Default,NTP,0000,0000,0000,,首先编程
Dialogue: 0,0:18:56.97,0:18:59.70,*Default,NTP,0000,0000,0000,,我说这个比喻的核心
Dialogue: 0,0:18:59.70,0:19:02.40,*Default,NTP,0000,0000,0000,,对象会互相传递消息
Dialogue: 0,0:19:02.53,0:19:04.13,*Default,NTP,0000,0000,0000,,这就是他们互动的方式
Dialogue: 0,0:19:04.70,0:19:06.80,*Default,NTP,0000,0000,0000,,现在该语言的机制是它们只是
Dialogue: 0,0:19:06.80,0:19:08.67,*Default,NTP,0000,0000,0000,,查找属性或方法
Dialogue: 0,0:19:08.77,0:19:10.30,*Default,NTP,0000,0000,0000,,这就是他们沟通的方式
Dialogue: 0,0:19:10.60,0:19:13.27,*Default,NTP,0000,0000,0000,,这就是传递消息的想法
Dialogue: 0,0:19:13.50,0:19:15.47,*Default,NTP,0000,0000,0000,,传递消息是隐喻
Dialogue: 0,0:19:15.53,0:19:17.90,*Default,NTP,0000,0000,0000,,查找属性是我们实际做的
Dialogue: 0,0:19:18.17,0:19:20.57,*Default,NTP,0000,0000,0000,,为了传递消息
Dialogue: 0,0:19:21.57,0:19:23.37,*Default,NTP,0000,0000,0000,,现在属性查找规则是
Dialogue: 0,0:19:23.37,0:19:24.77,*Default,NTP,0000,0000,0000,,以特殊方式设计
Dialogue: 0,0:19:25.20,0:19:25.87,*Default,NTP,0000,0000,0000,,他们允许
Dialogue: 0,0:19:25.87,0:19:28.50,*Default,NTP,0000,0000,0000,,不同的数据类型来响应相同的消息
Dialogue: 0,0:19:28.57,0:19:30.67,*Default,NTP,0000,0000,0000,,只需具有相同的属性名称
Dialogue: 0,0:19:31.77,0:19:33.00,*Default,NTP,0000,0000,0000,,以及一条共享消息
Dialogue: 0,0:19:33.00,0:19:36.17,*Default,NTP,0000,0000,0000,,存在于许多不同类中的属性名称
Dialogue: 0,0:19:36.57,0:19:38.87,*Default,NTP,0000,0000,0000,,并引发相同的行为
Dialogue: 0,0:19:38.93,0:19:40.77,*Default,NTP,0000,0000,0000,,来自那些不同的班级
Dialogue: 0,0:19:40.77,0:19:43.17,*Default,NTP,0000,0000,0000,,是一种强大的抽象方法
Dialogue: 0,0:19:44.00,0:19:46.07,*Default,NTP,0000,0000,0000,,这就是我们所说的接口
Dialogue: 0,0:19:46.53,0:19:49.10,*Default,NTP,0000,0000,0000,,接口是一组共享消息
Dialogue: 0,0:19:49.27,0:19:51.13,*Default,NTP,0000,0000,0000,,和一些规范告诉你
Dialogue: 0,0:19:51.13,0:19:52.27,*Default,NTP,0000,0000,0000,,他们应该做什么
Dialogue: 0,0:19:52.27,0:19:53.17,*Default,NTP,0000,0000,0000,,他们遇到了什么
Dialogue: 0,0:19:54.00,0:19:55.20,*Default,NTP,0000,0000,0000,,举个例子
Dialogue: 0,0:19:55.67,0:19:58.80,*Default,NTP,0000,0000,0000,,实现reper和stir方法的类
Dialogue: 0,0:19:59.13,0:20:02.50,*Default,NTP,0000,0000,0000,,并让这些方法返回 python 可解释的
Dialogue: 0,0:20:02.60,0:20:04.97,*Default,NTP,0000,0000,0000,,和人类可读的字符串分别
Dialogue: 0,0:20:06.10,0:20:08.57,*Default,NTP,0000,0000,0000,,接口不必内置到语言中
Dialogue: 0,0:20:08.57,0:20:09.90,*Default,NTP,0000,0000,0000,,虽然这个是
Dialogue: 0,0:20:10.70,0:20:12.30,*Default,NTP,0000,0000,0000,,如果你只是定义
Dialogue: 0,0:20:12.47,0:20:12.80,*Default,NTP,0000,0000,0000,,那
Dialogue: 0,0:20:12.80,0:20:14.87,*Default,NTP,0000,0000,0000,,有很多类都有相同的
Dialogue: 0,0:20:14.87,0:20:18.47,*Default,NTP,0000,0000,0000,,方法和所有这些方法都做类似的事情
Dialogue: 0,0:20:18.50,0:20:20.33,*Default,NTP,0000,0000,0000,,然后你就创建了一个界面
Dialogue: 0,0:20:21.53,0:20:24.13,*Default,NTP,0000,0000,0000,,所以让我们看看是否可以建立一个类
Dialogue: 0,0:20:24.30,0:20:26.53,*Default,NTP,0000,0000,0000,,显示此界面的
Dialogue: 0,0:20:28.33,0:20:31.37,*Default,NTP,0000,0000,0000,,我们已经看到有一个内置的分数类
Dialogue: 0,0:20:31.60,0:20:33.17,*Default,NTP,0000,0000,0000,,让我们构建类似的东西
Dialogue: 0,0:20:33.30,0:20:35.93,*Default,NTP,0000,0000,0000,,我将其称为比率，这样我们就可以告诉他们一个公园
Dialogue: 0,0:20:36.93,0:20:38.53,*Default,NTP,0000,0000,0000,,创建比率的方式
Dialogue: 0,0:20:38.60,0:20:41.70,*Default,NTP,0000,0000,0000,,只是传入一个分子和一个分母
Dialogue: 0,0:20:49.50,0:20:52.47,*Default,NTP,0000,0000,0000,,如果我们想要比率类的实例
Dialogue: 0,0:20:52.47,0:20:54.53,*Default,NTP,0000,0000,0000,,能够展示自己
Dialogue: 0,0:20:54.67,0:20:57.17,*Default,NTP,0000,0000,0000,,我们需要定义我们的reper方法
Dialogue: 0,0:20:59.17,0:21:00.73,*Default,NTP,0000,0000,0000,,它将返回一个字符串
Dialogue: 0,0:21:01.10,0:21:02.50,*Default,NTP,0000,0000,0000,,弦比
Dialogue: 0,0:21:04.87,0:21:06.67,*Default,NTP,0000,0000,0000,,后面跟着括号
Dialogue: 0,0:21:07.90,0:21:11.53,*Default,NTP,0000,0000,0000,,这里我们的字符串中有两个不同的间隙
Dialogue: 0,0:21:11.60,0:21:12.70,*Default,NTP,0000,0000,0000,,我们填写的
Dialogue: 0,0:21:12.90,0:21:15.33,*Default,NTP,0000,0000,0000,,对字符串使用 format 方法
Dialogue: 0,0:21:15.53,0:21:18.10,*Default,NTP,0000,0000,0000,,自我编号填入第一个
Dialogue: 0,0:21:18.10,0:21:21.93,*Default,NTP,0000,0000,0000,,或者是零指数差距和二号自我需求
Dialogue: 0,0:21:25.93,0:21:28.53,*Default,NTP,0000,0000,0000,,现在如果我们也想要一个人类可读的字符串
Dialogue: 0,0:21:28.67,0:21:31.00,*Default,NTP,0000,0000,0000,,以分数为例
Dialogue: 0,0:21:32.00,0:21:34.57,*Default,NTP,0000,0000,0000,,我们只写零除以一
Dialogue: 0,0:21:34.67,0:21:35.70,*Default,NTP,0000,0000,0000,,或再次
Dialogue: 0,0:21:36.70,0:21:38.33,*Default,NTP,0000,0000,0000,,零是分子
Dialogue: 0,0:21:38.73,0:21:41.37,*Default,NTP,0000,0000,0000,,1 是分母
Dialogue: 0,0:21:45.87,0:21:48.30,*Default,NTP,0000,0000,0000,,现在我们可以创建一个比例一半
Dialogue: 0,0:21:50.30,0:21:53.10,*Default,NTP,0000,0000,0000,,打印出一半，我们将得到人类可读的版本
Dialogue: 0,0:21:53.60,0:21:55.97,*Default,NTP,0000,0000,0000,,直接显示一半就可以得到
Dialogue: 0,0:21:55.97,0:21:57.30,*Default,NTP,0000,0000,0000,,python 表达式
Dialogue: 0,0:22:00.73,0:22:03.37,*Default,NTP,0000,0000,0000,,特殊方法名称是一个主题
Dialogue: 0,0:22:03.53,0:22:05.57,*Default,NTP,0000,0000,0000,,python 语言特有的
Dialogue: 0,0:22:07.80,0:22:09.77,*Default,NTP,0000,0000,0000,,python中的某些名称是特殊的
Dialogue: 0,0:22:10.10,0:22:12.97,*Default,NTP,0000,0000,0000,,因为他们已经内置了某种行为
Dialogue: 0,0:22:13.80,0:22:15.33,*Default,NTP,0000,0000,0000,,他们看起来总是一样
Dialogue: 0,0:22:15.40,0:22:18.13,*Default,NTP,0000,0000,0000,,他们总是以两个下划线开始结束
Dialogue: 0,0:22:18.90,0:22:21.40,*Default,NTP,0000,0000,0000,,所以当你看到一个名字周围有两个下划线时
Dialogue: 0,0:22:21.77,0:22:23.33,*Default,NTP,0000,0000,0000,,这只是一个指示
Dialogue: 0,0:22:23.50,0:22:25.57,*Default,NTP,0000,0000,0000,,它有一些特殊的行为
Dialogue: 0,0:22:25.80,0:22:27.47,*Default,NTP,0000,0000,0000,,它与内置交互
Dialogue: 0,0:22:27.67,0:22:29.17,*Default,NTP,0000,0000,0000,,对象系统以某种方式
Dialogue: 0,0:22:30.53,0:22:33.13,*Default,NTP,0000,0000,0000,,例如我们看到的第一个是在里面
Dialogue: 0,0:22:34.17,0:22:34.50,*Default,NTP,0000,0000,0000,,这
Dialogue: 0,0:22:34.50,0:22:37.10,*Default,NTP,0000,0000,0000,,该方法很特殊，因为它是自动调用的
Dialogue: 0,0:22:37.30,0:22:39.33,*Default,NTP,0000,0000,0000,,每当构造一个对象时
Dialogue: 0,0:22:39.90,0:22:42.20,*Default,NTP,0000,0000,0000,,除此之外这只是一个常规方法
Dialogue: 0,0:22:44.07,0:22:47.00,*Default,NTP,0000,0000,0000,,在之前的视频中讨论了reper
Dialogue: 0,0:22:47.57,0:22:50.80,*Default,NTP,0000,0000,0000,,这是为了生成而被调用的方法
Dialogue: 0,0:22:50.97,0:22:54.00,*Default,NTP,0000,0000,0000,,代表一个对象的字符串
Dialogue: 0,0:22:54.30,0:22:56.73,*Default,NTP,0000,0000,0000,,这是在互动中使用的
Dialogue: 0,0:22:56.73,0:22:57.77,*Default,NTP,0000,0000,0000,,蟒蛇会话
Dialogue: 0,0:22:57.97,0:22:59.70,*Default,NTP,0000,0000,0000,,显示值
Dialogue: 0,0:23:01.93,0:23:03.13,*Default,NTP,0000,0000,0000,,添加怎么样
Dialogue: 0,0:23:03.47,0:23:04.50,*Default,NTP,0000,0000,0000,,好吧，这是一个新的
Dialogue: 0,0:23:05.07,0:23:06.80,*Default,NTP,0000,0000,0000,,这是一个有两个参数的方法
Dialogue: 0,0:23:06.80,0:23:09.27,*Default,NTP,0000,0000,0000,,调用它来将一个对象添加到另一个对象
Dialogue: 0,0:23:10.90,0:23:13.10,*Default,NTP,0000,0000,0000,,有一种称为 bull 的单参数方法
Dialogue: 0,0:23:13.80,0:23:15.47,*Default,NTP,0000,0000,0000,,另一个称为浮动
Dialogue: 0,0:23:16.17,0:23:16.97,*Default,NTP,0000,0000,0000,,这个
Dialogue: 0,0:23:17.07,0:23:20.07,*Default,NTP,0000,0000,0000,,被调用以将对象转换为 true 或 false
Dialogue: 0,0:23:20.30,0:23:22.13,*Default,NTP,0000,0000,0000,,告诉你这是布尔值
Dialogue: 0,0:23:23.10,0:23:26.50,*Default,NTP,0000,0000,0000,,float 尝试将对象转换为实数
Dialogue: 0,0:23:28.10,0:23:29.40,*Default,NTP,0000,0000,0000,,例如
Dialogue: 0,0:23:29.50,0:23:32.07,*Default,NTP,0000,0000,0000,,如果我将零一和二设置为零一和二
Dialogue: 0,0:23:32.07,0:23:33.27,*Default,NTP,0000,0000,0000,,然后我添加一和二
Dialogue: 0,0:23:33.27,0:23:34.13,*Default,NTP,0000,0000,0000,,我要三个
Dialogue: 0,0:23:34.37,0:23:37.27,*Default,NTP,0000,0000,0000,,如果我调用 bull 这是一个内置函数
Dialogue: 0,0:23:37.27,0:23:40.30,*Default,NTP,0000,0000,0000,,0 时我会得到错误，1 时我会得到真实
Dialogue: 0,0:23:41.00,0:23:42.33,*Default,NTP,0000,0000,0000,,和这个公牛函数
Dialogue: 0,0:23:42.90,0:23:45.00,*Default,NTP,0000,0000,0000,,为您提供准确的行为
Dialogue: 0,0:23:45.07,0:23:48.13,*Default,NTP,0000,0000,0000,,如果将这些对象放在布尔上下文中
Dialogue: 0,0:23:48.13,0:23:49.73,*Default,NTP,0000,0000,0000,,例如条件语句
Dialogue: 0,0:23:50.80,0:23:52.73,*Default,NTP,0000,0000,0000,,现在可以重写
Dialogue: 0,0:23:52.90,0:23:56.27,*Default,NTP,0000,0000,0000,,这整个语句序列
Dialogue: 0,0:23:57.17,0:23:59.60,*Default,NTP,0000,0000,0000,,我可以说零一和二或者零一和二
Dialogue: 0,0:23:59.77,0:24:01.60,*Default,NTP,0000,0000,0000,,然后将一和二相加
Dialogue: 0,0:24:01.60,0:24:03.30,*Default,NTP,0000,0000,0000,,使用特殊的方法名称
Dialogue: 0,0:24:03.80,0:24:06.53,*Default,NTP,0000,0000,0000,,或将零和一转换为布尔值
Dialogue: 0,0:24:06.53,0:24:08.27,*Default,NTP,0000,0000,0000,,使用特殊的方法名称
Dialogue: 0,0:24:08.97,0:24:10.50,*Default,NTP,0000,0000,0000,,所以有一个对应关系
Dialogue: 0,0:24:10.77,0:24:13.47,*Default,NTP,0000,0000,0000,,内置语法片段之间
Dialogue: 0,0:24:13.57,0:24:15.20,*Default,NTP,0000,0000,0000,,和内置函数
Dialogue: 0,0:24:15.27,0:24:17.00,*Default,NTP,0000,0000,0000,,以及这些特殊的方法名称
Dialogue: 0,0:24:17.00,0:24:18.37,*Default,NTP,0000,0000,0000,,真正完成工作
Dialogue: 0,0:24:18.77,0:24:20.30,*Default,NTP,0000,0000,0000,,这是另一个例子
Dialogue: 0,0:24:21.13,0:24:23.97,*Default,NTP,0000,0000,0000,,使用接口以允许
Dialogue: 0,0:24:24.20,0:24:26.73,*Default,NTP,0000,0000,0000,,用户定义的对象
Dialogue: 0,0:24:26.93,0:24:30.50,*Default,NTP,0000,0000,0000,,与 python 中的内置系统交互
Dialogue: 0,0:24:30.60,0:24:32.47,*Default,NTP,0000,0000,0000,,所以Python的可扩展性非常好
Dialogue: 0,0:24:32.50,0:24:35.50,*Default,NTP,0000,0000,0000,,您可以创建一个新类并能够添加
Dialogue: 0,0:24:36.17,0:24:38.90,*Default,NTP,0000,0000,0000,,使用加号将该类的实例放在一起
Dialogue: 0,0:24:39.07,0:24:43.20,*Default,NTP,0000,0000,0000,,只需覆盖特殊方法名称 add
Dialogue: 0,0:24:44.67,0:24:45.07,*Default,NTP,0000,0000,0000,,所以呢
Dialogue: 0,0:24:45.07,0:24:47.90,*Default,NTP,0000,0000,0000,,当您有两个用户定义的实例时会发生
Dialogue: 0,0:24:47.90,0:24:49.80,*Default,NTP,0000,0000,0000,,类加在一起
Dialogue: 0,0:24:50.70,0:24:52.87,*Default,NTP,0000,0000,0000,,好吧，会发生什么
Dialogue: 0,0:24:53.13,0:24:55.37,*Default,NTP,0000,0000,0000,,是您调用任一广告
Dialogue: 0,0:24:55.40,0:24:57.60,*Default,NTP,0000,0000,0000,,或者还有另一种方法叫做 r ad
Dialogue: 0,0:24:57.60,0:24:59.47,*Default,NTP,0000,0000,0000,,我稍后会告诉你这件事
Dialogue: 0,0:25:00.33,0:25:02.37,*Default,NTP,0000,0000,0000,,这实际上执行了加法
Dialogue: 0,0:25:03.17,0:25:05.27,*Default,NTP,0000,0000,0000,,我们再次只是询问对象
Dialogue: 0,0:25:05.27,0:25:06.80,*Default,NTP,0000,0000,0000,,你们如何将自己加在一起
Dialogue: 0,0:25:08.20,0:25:11.00,*Default,NTP,0000,0000,0000,,所以如果我们想扩展我们的比率等级
Dialogue: 0,0:25:11.20,0:25:13.27,*Default,NTP,0000,0000,0000,,这样我们就可以添加比率
Dialogue: 0,0:25:13.53,0:25:15.20,*Default,NTP,0000,0000,0000,,这当然是可能的
Dialogue: 0,0:25:16.10,0:25:18.40,*Default,NTP,0000,0000,0000,,我可以加上三分之一和六来得到一半
Dialogue: 0,0:25:19.37,0:25:20.97,*Default,NTP,0000,0000,0000,,使用 plus 网站
Dialogue: 0,0:25:21.13,0:25:22.53,*Default,NTP,0000,0000,0000,,或通过使用
Dialogue: 0,0:25:22.70,0:25:25.17,*Default,NTP,0000,0000,0000,,实际执行加法的方法
Dialogue: 0,0:25:26.10,0:25:28.93,*Default,NTP,0000,0000,0000,,这两个表达式在 python 中是等效的
Dialogue: 0,0:25:29.70,0:25:31.27,*Default,NTP,0000,0000,0000,,现在人们几乎总是使用这个
Dialogue: 0,0:25:31.27,0:25:32.90,*Default,NTP,0000,0000,0000,,因为它更容易阅读
Dialogue: 0,0:25:33.13,0:25:36.13,*Default,NTP,0000,0000,0000,,这样做的目的只是为了让我们自己
Dialogue: 0,0:25:36.17,0:25:39.57,*Default,NTP,0000,0000,0000,,使用方法定义语法
Dialogue: 0,0:25:39.73,0:25:42.13,*Default,NTP,0000,0000,0000,,为了覆盖发生的事情
Dialogue: 0,0:25:42.13,0:25:43.87,*Default,NTP,0000,0000,0000,,当你使用加号时
Dialogue: 0,0:25:44.17,0:25:45.57,*Default,NTP,0000,0000,0000,,两个物体之间
Dialogue: 0,0:25:46.00,0:25:47.57,*Default,NTP,0000,0000,0000,,您还可以使用 r 广告
Dialogue: 0,0:25:47.87,0:25:50.57,*Default,NTP,0000,0000,0000,,r ad 和 ad 之间的区别
Dialogue: 0,0:25:50.93,0:25:52.33,*Default,NTP,0000,0000,0000,,就是这里吗
Dialogue: 0,0:25:52.33,0:25:55.13,*Default,NTP,0000,0000,0000,,是加号右侧的参数
Dialogue: 0,0:25:55.40,0:25:57.40,*Default,NTP,0000,0000,0000,,这是左边的论点
Dialogue: 0,0:25:58.10,0:26:00.30,*Default,NTP,0000,0000,0000,,现在对于数字来说加法是可交换的
Dialogue: 0,0:26:00.53,0:26:03.17,*Default,NTP,0000,0000,0000,,所以它们的顺序无关紧要
Dialogue: 0,0:26:03.27,0:26:05.27,*Default,NTP,0000,0000,0000,,这两个函数是等价的
Dialogue: 0,0:26:06.10,0:26:08.20,*Default,NTP,0000,0000,0000,,但你可以想象一些情况
Dialogue: 0,0:26:08.20,0:26:10.40,*Default,NTP,0000,0000,0000,,你想发明加法
Dialogue: 0,0:26:10.40,0:26:11.67,*Default,NTP,0000,0000,0000,,没有换算的
Dialogue: 0,0:26:11.87,0:26:14.50,*Default,NTP,0000,0000,0000,,所以可以使用射频
Dialogue: 0,0:26:16.00,0:26:18.90,*Default,NTP,0000,0000,0000,,我不会逐一列举每个特殊的名字
Dialogue: 0,0:26:19.20,0:26:22.37,*Default,NTP,0000,0000,0000,,它如何对应于 python 的一些内置功能
Dialogue: 0,0:26:22.37,0:26:24.10,*Default,NTP,0000,0000,0000,,但这在你之前已经完成了
Dialogue: 0,0:26:24.27,0:26:26.80,*Default,NTP,0000,0000,0000,,在 python 码头和这个
Dialogue: 0,0:26:26.97,0:26:30.30,*Default,NTP,0000,0000,0000,,在线教科书调用《深入Python 3》
Dialogue: 0,0:26:31.40,0:26:34.57,*Default,NTP,0000,0000,0000,,但让我们看看是否可以在比率类中添加加法
Dialogue: 0,0:26:37.20,0:26:39.10,*Default,NTP,0000,0000,0000,,我们定义一个广告方法
Dialogue: 0,0:26:40.37,0:26:42.40,*Default,NTP,0000,0000,0000,,这把自己变成了另一个
Dialogue: 0,0:26:43.93,0:26:45.00,*Default,NTP,0000,0000,0000,,以及它的作用
Dialogue: 0,0:26:45.20,0:26:46.30,*Default,NTP,0000,0000,0000,,只是计算
Dialogue: 0,0:26:46.30,0:26:49.33,*Default,NTP,0000,0000,0000,,结果的分子和分母
Dialogue: 0,0:26:50.30,0:26:52.80,*Default,NTP,0000,0000,0000,,所以两个相加比率的分子
Dialogue: 0,0:26:54.30,0:26:55.90,*Default,NTP,0000,0000,0000,,是第一个的分子
Dialogue: 0,0:26:56.27,0:26:58.77,*Default,NTP,0000,0000,0000,,乘以第二个的分母
Dialogue: 0,0:26:59.80,0:27:02.77,*Default,NTP,0000,0000,0000,,加上第一个的分母
Dialogue: 0,0:27:03.00,0:27:05.13,*Default,NTP,0000,0000,0000,,乘以第二个的分子
Dialogue: 0,0:27:06.73,0:27:09.53,*Default,NTP,0000,0000,0000,,分母是分母的乘积
Dialogue: 0,0:27:11.30,0:27:12.50,*Default,NTP,0000,0000,0000,,如果我们想减少
Dialogue: 0,0:27:12.53,0:27:15.77,*Default,NTP,0000,0000,0000,,这个比率与两个相对质数的整数
Dialogue: 0,0:27:16.07,0:27:19.37,*Default,NTP,0000,0000,0000,,然后我们必须计算最大公约数
Dialogue: 0,0:27:19.37,0:27:20.20,*Default,NTP,0000,0000,0000,,n 和 d
Dialogue: 0,0:27:22.10,0:27:23.80,*Default,NTP,0000,0000,0000,,然后我们可以返回比率
Dialogue: 0,0:27:25.10,0:27:28.33,*Default,NTP,0000,0000,0000,,n 除以 g 和 d 除以 g
Dialogue: 0,0:27:31.17,0:27:33.17,*Default,NTP,0000,0000,0000,,最大公约数是多少
Dialogue: 0,0:27:33.33,0:27:35.77,*Default,NTP,0000,0000,0000,,我们在课程的早些时候确实讨论过这个
Dialogue: 0,0:27:36.57,0:27:39.00,*Default,NTP,0000,0000,0000,,计算它的一种方法是说
Dialogue: 0,0:27:39.60,0:27:41.30,*Default,NTP,0000,0000,0000,,好且不等于 d
Dialogue: 0,0:27:42.70,0:27:44.07,*Default,NTP,0000,0000,0000,,重新绑定 n 和 d
Dialogue: 0,0:27:44.60,0:27:47.13,*Default,NTP,0000,0000,0000,,排名不分先后
Dialogue: 0,0:27:47.37,0:27:48.97,*Default,NTP,0000,0000,0000,,n 和 d 的最小值
Dialogue: 0,0:27:49.37,0:27:52.17,*Default,NTP,0000,0000,0000,,以及 n 减去 d 的绝对值
Dialogue: 0,0:27:56.20,0:27:59.67,*Default,NTP,0000,0000,0000,,所以现在我们可以取 12 和 8 的 gcd 得到 4
Dialogue: 0,0:28:00.33,0:28:04.30,*Default,NTP,0000,0000,0000,,我们还可以将三分之一和一的比率加在一起
Dialogue: 0,0:28:04.30,0:28:05.10,*Default,NTP,0000,0000,0000,,六
Dialogue: 0,0:28:08.90,0:28:10.30,*Default,NTP,0000,0000,0000,,现在也许我们还没有完成
Dialogue: 0,0:28:10.47,0:28:13.17,*Default,NTP,0000,0000,0000,,如果我将三分之一的比率加在一起会发生什么
Dialogue: 0,0:28:13.17,0:28:15.47,*Default,NTP,0000,0000,0000,,我应该得到三分之四
Dialogue: 0,0:28:15.47,0:28:18.50,*Default,NTP,0000,0000,0000,,但我假设我将其添加到的东西
Dialogue: 0,0:28:18.67,0:28:22.53,*Default,NTP,0000,0000,0000,,实际上是另一个与整数相反的比率
Dialogue: 0,0:28:23.90,0:28:25.00,*Default,NTP,0000,0000,0000,,我能做的一件事
Dialogue: 0,0:28:25.07,0:28:28.40,*Default,NTP,0000,0000,0000,,是检查 other 的类型以找出
Dialogue: 0,0:28:28.47,0:28:30.33,*Default,NTP,0000,0000,0000,,采取什么行动
Dialogue: 0,0:28:30.93,0:28:32.97,*Default,NTP,0000,0000,0000,,所以我可以说如果是这样的话
Dialogue: 0,0:28:34.57,0:28:38.67,*Default,NTP,0000,0000,0000,,另一个是英寸类的实例
Dialogue: 0,0:28:39.57,0:28:41.97,*Default,NTP,0000,0000,0000,,然后我有一个分子
Dialogue: 0,0:28:42.13,0:28:44.20,*Default,NTP,0000,0000,0000,,这是自点分子
Dialogue: 0,0:28:45.90,0:28:48.60,*Default,NTP,0000,0000,0000,,倍，而其他分母只有一个
Dialogue: 0,0:28:48.80,0:28:51.57,*Default,NTP,0000,0000,0000,,然后我添加自我点 d nom
Dialogue: 0,0:28:51.77,0:28:54.90,*Default,NTP,0000,0000,0000,,乘以另一个（即分子）
Dialogue: 0,0:28:55.77,0:28:56.60,*Default,NTP,0000,0000,0000,,另一个的
Dialogue: 0,0:28:57.93,0:29:00.87,*Default,NTP,0000,0000,0000,,在这里我只是将 other 视为 other 的分子
Dialogue: 0,0:29:01.17,0:29:02.90,*Default,NTP,0000,0000,0000,,和一的分母
Dialogue: 0,0:29:05.53,0:29:08.30,*Default,NTP,0000,0000,0000,,d 是 self 的分母
Dialogue: 0,0:29:09.27,0:29:12.60,*Default,NTP,0000,0000,0000,,否则如果是其他情况
Dialogue: 0,0:29:12.93,0:29:16.10,*Default,NTP,0000,0000,0000,,是比率类的一个实例
Dialogue: 0,0:29:16.20,0:29:18.90,*Default,NTP,0000,0000,0000,,然后我使用之前的公式
Dialogue: 0,0:29:21.90,0:29:23.50,*Default,NTP,0000,0000,0000,,我还能拿gcd
Dialogue: 0,0:29:24.27,0:29:25.97,*Default,NTP,0000,0000,0000,,我想我又开始做生意了
Dialogue: 0,0:29:26.20,0:29:27.77,*Default,NTP,0000,0000,0000,,我可以将比率加在一起
Dialogue: 0,0:29:27.77,0:29:29.60,*Default,NTP,0000,0000,0000,,或者我可以在比率上加一
Dialogue: 0,0:29:30.17,0:29:31.80,*Default,NTP,0000,0000,0000,,现在我可以添加一个比率吗
Dialogue: 0,0:29:32.93,0:29:34.90,*Default,NTP,0000,0000,0000,,按此顺序从第 3 到第 1
Dialogue: 0,0:29:35.30,0:29:39.10,*Default,NTP,0000,0000,0000,,还没有，因为我没有找到右侧版本
Dialogue: 0,0:29:39.57,0:29:41.07,*Default,NTP,0000,0000,0000,,但我只能说
Dialogue: 0,0:29:41.07,0:29:44.80,*Default,NTP,0000,0000,0000,,右侧版本与版本相同
Dialogue: 0,0:29:45.57,0:29:46.73,*Default,NTP,0000,0000,0000,,对于这门课
Dialogue: 0,0:29:47.70,0:29:50.20,*Default,NTP,0000,0000,0000,,此时我可以添加比率
Dialogue: 0,0:29:50.20,0:29:53.33,*Default,NTP,0000,0000,0000,,我可以将整数添加到任一方向的比率
Dialogue: 0,0:29:53.50,0:29:55.37,*Default,NTP,0000,0000,0000,,我已经完成了
Dialogue: 0,0:29:56.07,0:29:57.07,*Default,NTP,0000,0000,0000,,界面
Dialogue: 0,0:29:57.13,0:29:59.67,*Default,NTP,0000,0000,0000,,用于向用户定义的类添加附加项
Dialogue: 0,0:29:59.67,0:30:00.90,*Default,NTP,0000,0000,0000,,在Python语言中
Dialogue: 0,0:30:02.00,0:30:05.13,*Default,NTP,0000,0000,0000,,现在如果我们添加一个浮点值会发生什么
Dialogue: 0,0:30:05.90,0:30:07.60,*Default,NTP,0000,0000,0000,,0.345
Dialogue: 0,0:30:08.67,0:30:11.90,*Default,NTP,0000,0000,0000,,那么这个结果将不是一个整数
Dialogue: 0,0:30:12.40,0:30:13.50,*Default,NTP,0000,0000,0000,,所以看起来不太可能
Dialogue: 0,0:30:13.50,0:30:14.97,*Default,NTP,0000,0000,0000,,应该建立一个比率
Dialogue: 0,0:30:14.97,0:30:15.97,*Default,NTP,0000,0000,0000,,在那时候
Dialogue: 0,0:30:17.40,0:30:18.60,*Default,NTP,0000,0000,0000,,还有另一种选择
Dialogue: 0,0:30:19.53,0:30:21.67,*Default,NTP,0000,0000,0000,,相反我们可以转换
Dialogue: 0,0:30:21.67,0:30:25.33,*Default,NTP,0000,0000,0000,,我们现有的比率也转换为浮点值
Dialogue: 0,0:30:26.07,0:30:28.17,*Default,NTP,0000,0000,0000,,我的意思是我只是攻击
Dialogue: 0,0:30:28.33,0:30:30.37,*Default,NTP,0000,0000,0000,,如果 other 是 float 的实例
Dialogue: 0,0:30:31.33,0:30:34.93,*Default,NTP,0000,0000,0000,,如果是这样，我根本不返回比例
Dialogue: 0,0:30:35.17,0:30:36.27,*Default,NTP,0000,0000,0000,,但反而
Dialogue: 0,0:30:37.17,0:30:38.80,*Default,NTP,0000,0000,0000,,转换时我得到什么
Dialogue: 0,0:30:38.87,0:30:41.27,*Default,NTP,0000,0000,0000,,self 放入 float 并将其添加到 other
Dialogue: 0,0:30:43.13,0:30:45.93,*Default,NTP,0000,0000,0000,,现在把自己变成笛子意味着什么
Dialogue: 0,0:30:46.53,0:30:48.10,*Default,NTP,0000,0000,0000,,好吧，我必须定义它
Dialogue: 0,0:30:48.77,0:30:51.13,*Default,NTP,0000,0000,0000,,我定义使用这个特殊的方法名称
Dialogue: 0,0:30:51.87,0:30:54.57,*Default,NTP,0000,0000,0000,,或者在这种情况下我只会退还你得到的东西
Dialogue: 0,0:30:54.73,0:30:57.53,*Default,NTP,0000,0000,0000,,当你用分子除以分母时
Dialogue: 0,0:31:02.13,0:31:04.37,*Default,NTP,0000,0000,0000,,所以我进一步扩展了系统
Dialogue: 0,0:31:04.50,0:31:06.97,*Default,NTP,0000,0000,0000,,现在我可以在哪里添加 0.2
Dialogue: 0,0:31:08.27,0:31:10.47,*Default,NTP,0000,0000,0000,,到三分之一的比例
Dialogue: 0,0:31:10.77,0:31:12.93,*Default,NTP,0000,0000,0000,,我会得到一些合理的结果
Dialogue: 0,0:31:14.60,0:31:16.70,*Default,NTP,0000,0000,0000,,我实际上在这里使用了两个重要的想法
Dialogue: 0,0:31:16.70,0:31:17.73,*Default,NTP,0000,0000,0000,,在一个例子中
Dialogue: 0,0:31:18.67,0:31:20.77,*Default,NTP,0000,0000,0000,,这称为类型调度
Dialogue: 0,0:31:20.90,0:31:23.10,*Default,NTP,0000,0000,0000,,检查参数类型的地方
Dialogue: 0,0:31:23.10,0:31:24.37,*Default,NTP,0000,0000,0000,,决定做什么
Dialogue: 0,0:31:25.37,0:31:28.00,*Default,NTP,0000,0000,0000,,这里这称为类型强制
Dialogue: 0,0:31:28.67,0:31:30.90,*Default,NTP,0000,0000,0000,,这是当你获取一种类型的对象时
Dialogue: 0,0:31:30.93,0:31:32.77,*Default,NTP,0000,0000,0000,,将其转换为另一种类型
Dialogue: 0,0:31:32.87,0:31:34.60,*Default,NTP,0000,0000,0000,,为了能够将它结合起来
Dialogue: 0,0:31:34.73,0:31:36.13,*Default,NTP,0000,0000,0000,,具有其他一些价值
Dialogue: 0,0:31:37.40,0:31:39.60,*Default,NTP,0000,0000,0000,,这是人们使用的两种策略
Dialogue: 0,0:31:39.60,0:31:42.20,*Default,NTP,0000,0000,0000,,为了让不同的班级互动
Dialogue: 0,0:31:42.53,0:31:44.53,*Default,NTP,0000,0000,0000,,你知道 add 是一个有两个参数的方法
Dialogue: 0,0:31:44.67,0:31:46.40,*Default,NTP,0000,0000,0000,,现在我们有一个 add 版本
Dialogue: 0,0:31:46.40,0:31:49.60,*Default,NTP,0000,0000,0000,,对两个不同类型的值进行操作
Dialogue: 0,0:31:50.90,0:31:52.40,*Default,NTP,0000,0000,0000,,所以让我们做最后一次练习
Dialogue: 0,0:31:53.00,0:31:56.07,*Default,NTP,0000,0000,0000,,我希望你创建一个名为 kangaroo 的类
Dialogue: 0,0:31:56.70,0:31:59.37,*Default,NTP,0000,0000,0000,,它当然有一个构造函数
Dialogue: 0,0:31:59.53,0:32:03.37,*Default,NTP,0000,0000,0000,,并且构造函数初始化一个实例变量
Dialogue: 0,0:32:03.40,0:32:05.40,*Default,NTP,0000,0000,0000,,称为袋内容物
Dialogue: 0,0:32:05.97,0:32:08.00,*Default,NTP,0000,0000,0000,,成为一个空列表
Dialogue: 0,0:32:08.30,0:32:10.27,*Default,NTP,0000,0000,0000,,所以现在与相关的数据
Dialogue: 0,0:32:10.27,0:32:11.87,*Default,NTP,0000,0000,0000,,袋鼠将成为一个列表
Dialogue: 0,0:32:11.97,0:32:14.70,*Default,NTP,0000,0000,0000,,并首先调整一个空列表
Dialogue: 0,0:32:14.80,0:32:17.40,*Default,NTP,0000,0000,0000,,就是这样，现在您要创建一个函数
Dialogue: 0,0:32:17.57,0:32:19.10,*Default,NTP,0000,0000,0000,,称为放入袋中
Dialogue: 0,0:32:19.17,0:32:21.53,*Default,NTP,0000,0000,0000,,然后你将创建一个打印函数
Dialogue: 0,0:32:21.67,0:32:24.67,*Default,NTP,0000,0000,0000,,所以放在袋子里需要一个字符串作为输入
Dialogue: 0,0:32:24.73,0:32:26.93,*Default,NTP,0000,0000,0000,,并将其添加到袋鼠育儿袋中
Dialogue: 0,0:32:27.17,0:32:28.73,*Default,NTP,0000,0000,0000,,这当然是列表
Dialogue: 0,0:32:28.73,0:32:29.53,*Default,NTP,0000,0000,0000,,好的
Dialogue: 0,0:32:29.53,0:32:31.97,*Default,NTP,0000,0000,0000,,如果该对象不存在该字符串
Dialogue: 0,0:32:31.97,0:32:33.73,*Default,NTP,0000,0000,0000,,所以如果字符串已经在那里
Dialogue: 0,0:32:34.73,0:32:36.33,*Default,NTP,0000,0000,0000,,然后打印已经存在的对象
Dialogue: 0,0:32:36.57,0:32:38.00,*Default,NTP,0000,0000,0000,,袋子并且不做任何事情
Dialogue: 0,0:32:38.37,0:32:40.33,*Default,NTP,0000,0000,0000,,所以如果我在袋子里添加一些东西
Dialogue: 0,0:32:40.33,0:32:41.27,*Default,NTP,0000,0000,0000,,像保龄球一样
Dialogue: 0,0:32:41.27,0:32:43.00,*Default,NTP,0000,0000,0000,,然后我尝试再次添加保龄球
Dialogue: 0,0:32:43.00,0:32:44.50,*Default,NTP,0000,0000,0000,,你不应该把两个保龄球放进去
Dialogue: 0,0:32:44.50,0:32:45.60,*Default,NTP,0000,0000,0000,,一次只有一个
Dialogue: 0,0:32:46.57,0:32:48.97,*Default,NTP,0000,0000,0000,,但如果不是，那么您应该将其添加到袋子中
Dialogue: 0,0:32:48.97,0:32:50.90,*Default,NTP,0000,0000,0000,,它在列表中的位置并不重要
Dialogue: 0,0:32:51.40,0:32:52.50,*Default,NTP,0000,0000,0000,,打印功能
Dialogue: 0,0:32:52.60,0:32:55.53,*Default,NTP,0000,0000,0000,,应该打印袋鼠育儿袋包含的内容
Dialogue: 0,0:32:55.53,0:32:57.13,*Default,NTP,0000,0000,0000,,然后打印出来
Dialogue: 0,0:32:57.67,0:33:00.67,*Default,NTP,0000,0000,0000,,列表中的所有内容
Dialogue: 0,0:33:02.20,0:33:05.20,*Default,NTP,0000,0000,0000,,一如既往地好，写一个小驱动程序
Dialogue: 0,0:33:05.20,0:33:06.50,*Default,NTP,0000,0000,0000,,所以创建一个袋子
Dialogue: 0,0:33:06.67,0:33:09.67,*Default,NTP,0000,0000,0000,,打印其内容 添加一些内容 打印其内容
Dialogue: 0,0:33:09.67,0:33:10.47,*Default,NTP,0000,0000,0000,,添加一些东西
Dialogue: 0,0:33:10.50,0:33:11.57,*Default,NTP,0000,0000,0000,,确保它已添加
Dialogue: 0,0:33:11.80,0:33:13.87,*Default,NTP,0000,0000,0000,,打印其内容尝试添加两次
Dialogue: 0,0:33:13.90,0:33:15.67,*Default,NTP,0000,0000,0000,,确保您收到消息说
Dialogue: 0,0:33:16.53,0:33:17.90,*Default,NTP,0000,0000,0000,,这已经在这里了
Dialogue: 0,0:33:18.13,0:33:20.57,*Default,NTP,0000,0000,0000,,好吧，再花一些时间完整的课程
Dialogue: 0,0:33:21.00,0:33:23.60,*Default,NTP,0000,0000,0000,,放入袋中的构造函数和打印功能
Dialogue: 0,0:33:23.70,0:33:25.90,*Default,NTP,0000,0000,0000,,以及与该特定对象关联的数据
Dialogue: 0,0:33:25.90,0:33:26.90,*Default,NTP,0000,0000,0000,,将是一个列表
Dialogue: 0,0:33:26.90,0:33:29.00,*Default,NTP,0000,0000,0000,,我们将添加到使用
Dialogue: 0,0:33:29.10,0:33:29.60,*Default,NTP,0000,0000,0000,,放入袋中
Dialogue: 0,0:33:29.60,0:33:31.10,*Default,NTP,0000,0000,0000,,当你回来时我会告诉你
Dialogue: 0,0:33:31.13,0:33:32.13,*Default,NTP,0000,0000,0000,,我的解决方案
Dialogue: 0,0:33:35.17,0:33:36.53,*Default,NTP,0000,0000,0000,,好吧，这又是我的解决方案
Dialogue: 0,0:33:36.53,0:33:38.53,*Default,NTP,0000,0000,0000,,我要把班级和司机分开
Dialogue: 0,0:33:38.53,0:33:40.13,*Default,NTP,0000,0000,0000,,所以我们先上课吧
Dialogue: 0,0:33:40.73,0:33:42.13,*Default,NTP,0000,0000,0000,,我有袋鼠课
Dialogue: 0,0:33:42.13,0:33:43.53,*Default,NTP,0000,0000,0000,,我有我的构造函数
Dialogue: 0,0:33:43.53,0:33:46.30,*Default,NTP,0000,0000,0000,,我的普京袋和我的打印功能
Dialogue: 0,0:33:46.53,0:33:48.50,*Default,NTP,0000,0000,0000,,所以构造函数很简单
Dialogue: 0,0:33:48.50,0:33:51.13,*Default,NTP,0000,0000,0000,,事实上它不需要任何输入，它只是向南
Dialogue: 0,0:33:51.47,0:33:54.87,*Default,NTP,0000,0000,0000,,为什么我说初始化是一个空字符串
Dialogue: 0,0:33:54.87,0:33:56.10,*Default,NTP,0000,0000,0000,,那么南
Dialogue: 0,0:33:56.10,0:33:59.80,*Default,NTP,0000,0000,0000,,袋内容等于开括号 quos 括号完成
Dialogue: 0,0:33:59.87,0:34:00.77,*Default,NTP,0000,0000,0000,,没事做
Dialogue: 0,0:34:00.77,0:34:02.27,*Default,NTP,0000,0000,0000,,构造函数不接受输入
Dialogue: 0,0:34:02.27,0:34:03.77,*Default,NTP,0000,0000,0000,,很好 非常好
Dialogue: 0,0:34:04.33,0:34:07.30,*Default,NTP,0000,0000,0000,,放入袋子中，它需要单个参数的输入 x
Dialogue: 0,0:34:07.70,0:34:10.53,*Default,NTP,0000,0000,0000,,您现在要做的就是将其添加到袋子中
Dialogue: 0,0:34:11.73,0:34:13.00,*Default,NTP,0000,0000,0000,,如果袋子里还没有
Dialogue: 0,0:34:13.00,0:34:14.37,*Default,NTP,0000,0000,0000,,现在你需要做一些工作
Dialogue: 0,0:34:14.87,0:34:16.87,*Default,NTP,0000,0000,0000,,所以我必须经历
Dialogue: 0,0:34:17.37,0:34:21.57,*Default,NTP,0000,0000,0000,,袋子并检查该元素是否在里面
Dialogue: 0,0:34:21.77,0:34:23.07,*Default,NTP,0000,0000,0000,,好吧，让我们继续吧
Dialogue: 0,0:34:23.27,0:34:26.90,*Default,NTP,0000,0000,0000,,对于 I 在南边长度范围内
Dialogue: 0,0:34:27.33,0:34:28.87,*Default,NTP,0000,0000,0000,,下划线内容
Dialogue: 0,0:34:28.87,0:34:30.10,*Default,NTP,0000,0000,0000,,所以南边是对象
Dialogue: 0,0:34:30.10,0:34:31.93,*Default,NTP,0000,0000,0000,,我要去拿袋子里的东西
Dialogue: 0,0:34:31.93,0:34:32.93,*Default,NTP,0000,0000,0000,,这是列表
Dialogue: 0,0:34:33.40,0:34:35.90,*Default,NTP,0000,0000,0000,,我会承担每一个
Dialogue: 0,0:34:35.97,0:34:39.77,*Default,NTP,0000,0000,0000,,索引从零到列表长度减一
Dialogue: 0,0:34:40.00,0:34:43.20,*Default,NTP,0000,0000,0000,,我只想问如果南边
Dialogue: 0,0:34:43.73,0:34:47.53,*Default,NTP,0000,0000,0000,,袋内容物 sub I 等于 x
Dialogue: 0,0:34:47.60,0:34:49.80,*Default,NTP,0000,0000,0000,,这就是我想要插入列表的内容
Dialogue: 0,0:34:49.97,0:34:53.33,*Default,NTP,0000,0000,0000,,然后打印已经在袋子里了，我现在该怎么办
Dialogue: 0,0:34:53.47,0:34:55.07,*Default,NTP,0000,0000,0000,,我说完了回家
Dialogue: 0,0:34:55.17,0:34:55.97,*Default,NTP,0000,0000,0000,,返回
Dialogue: 0,0:34:56.37,0:34:59.20,*Default,NTP,0000,0000,0000,,从函数中返回，这里没有什么可做的
Dialogue: 0,0:34:59.20,0:35:00.97,*Default,NTP,0000,0000,0000,,是的，没有什么可添加到列表中的
Dialogue: 0,0:35:01.00,0:35:02.53,*Default,NTP,0000,0000,0000,,你不必再检查任何元素
Dialogue: 0,0:35:02.53,0:35:04.00,*Default,NTP,0000,0000,0000,,你找到了，就完成了
Dialogue: 0,0:35:04.50,0:35:06.17,*Default,NTP,0000,0000,0000,,所以对于列表中的每个元素
Dialogue: 0,0:35:06.20,0:35:07.93,*Default,NTP,0000,0000,0000,,检查对象是否存在
Dialogue: 0,0:35:07.93,0:35:11.50,*Default,NTP,0000,0000,0000,,如果存在则打印一条消息并启动
Dialogue: 0,0:35:11.67,0:35:13.87,*Default,NTP,0000,0000,0000,,如果我在代码中到达这一点
Dialogue: 0,0:35:13.87,0:35:15.90,*Default,NTP,0000,0000,0000,,整个for循环执行完毕后
Dialogue: 0,0:35:15.90,0:35:16.80,*Default,NTP,0000,0000,0000,,我知道什么
Dialogue: 0,0:35:17.53,0:35:18.70,*Default,NTP,0000,0000,0000,,对象不在列表中
Dialogue: 0,0:35:18.80,0:35:19.77,*Default,NTP,0000,0000,0000,,对，显然不是
Dialogue: 0,0:35:19.77,0:35:21.60,*Default,NTP,0000,0000,0000,,否则我会击中这个声明
Dialogue: 0,0:35:21.60,0:35:23.50,*Default,NTP,0000,0000,0000,,我会打印这个并返回
Dialogue: 0,0:35:23.50,0:35:24.80,*Default,NTP,0000,0000,0000,,所以此时
Dialogue: 0,0:35:24.87,0:35:28.10,*Default,NTP,0000,0000,0000,,我可以简单地将对象附加到列表中
Dialogue: 0,0:35:28.13,0:35:29.73,*Default,NTP,0000,0000,0000,,所以让我们跟随南方
Dialogue: 0,0:35:29.73,0:35:30.67,*Default,NTP,0000,0000,0000,,那是什么
Dialogue: 0,0:35:30.87,0:35:34.50,*Default,NTP,0000,0000,0000,,物体的地址 袋子的内容是什么
Dialogue: 0,0:35:34.50,0:35:37.00,*Default,NTP,0000,0000,0000,,与该对象关联的列表
Dialogue: 0,0:35:37.10,0:35:38.50,*Default,NTP,0000,0000,0000,,这是一个列表
Dialogue: 0,0:35:38.53,0:35:40.70,*Default,NTP,0000,0000,0000,,所以我可以调用追加函数
Dialogue: 0,0:35:40.87,0:35:42.20,*Default,NTP,0000,0000,0000,,与我想要的元素
Dialogue: 0,0:35:42.20,0:35:45.30,*Default,NTP,0000,0000,0000,,所以看看方向对象的三个层次
Dialogue: 0,0:35:46.33,0:35:48.07,*Default,NTP,0000,0000,0000,,数据与对象关联
Dialogue: 0,0:35:48.50,0:35:51.07,*Default,NTP,0000,0000,0000,,该列表的成员函数
Dialogue: 0,0:35:51.53,0:35:53.00,*Default,NTP,0000,0000,0000,,就在那里，很好
Dialogue: 0,0:35:53.87,0:35:54.70,*Default,NTP,0000,0000,0000,,让我们看一下打印语句
Dialogue: 0,0:35:54.70,0:35:55.73,*Default,NTP,0000,0000,0000,,这很容易
Dialogue: 0,0:35:56.73,0:35:59.07,*Default,NTP,0000,0000,0000,,如果自身的长度
Dialogue: 0,0:35:59.17,0:36:01.47,*Default,NTP,0000,0000,0000,,袋内容物为零的列表
Dialogue: 0,0:36:01.47,0:36:03.73,*Default,NTP,0000,0000,0000,,然后就说袋鼠育儿袋是空的
Dialogue: 0,0:36:03.73,0:36:05.97,*Default,NTP,0000,0000,0000,,除此之外，里面什么也没有
Dialogue: 0,0:36:06.20,0:36:08.80,*Default,NTP,0000,0000,0000,,说袋鼠育儿袋里有
Dialogue: 0,0:36:08.80,0:36:10.10,*Default,NTP,0000,0000,0000,,然后我会把清单录下来
Dialogue: 0,0:36:10.10,0:36:11.87,*Default,NTP,0000,0000,0000,,然后将其转换为字符串
Dialogue: 0,0:36:11.87,0:36:12.90,*Default,NTP,0000,0000,0000,,你当然可以这样做
Dialogue: 0,0:36:12.90,0:36:14.30,*Default,NTP,0000,0000,0000,,或者你可以将其放入 for 循环中
Dialogue: 0,0:36:14.30,0:36:15.33,*Default,NTP,0000,0000,0000,,打印出来
Dialogue: 0,0:36:15.40,0:36:18.53,*Default,NTP,0000,0000,0000,,然后将打印内容
Dialogue: 0,0:36:19.53,0:36:22.13,*Default,NTP,0000,0000,0000,,袋子的清单当然只是这里的清单
Dialogue: 0,0:36:22.30,0:36:24.10,*Default,NTP,0000,0000,0000,,好吧，让我们现在看看司机
Dialogue: 0,0:36:24.40,0:36:25.93,*Default,NTP,0000,0000,0000,,所以我要创建一个袋鼠对象
Dialogue: 0,0:36:25.93,0:36:27.33,*Default,NTP,0000,0000,0000,,称其为大写 k
Dialogue: 0,0:36:27.50,0:36:28.87,*Default,NTP,0000,0000,0000,,我要继续打印它
Dialogue: 0,0:36:28.87,0:36:30.73,*Default,NTP,0000,0000,0000,,让我们确保第一件事有效
Dialogue: 0,0:36:30.73,0:36:32.70,*Default,NTP,0000,0000,0000,,它会说袋鼠的育儿袋是空的
Dialogue: 0,0:36:32.87,0:36:34.87,*Default,NTP,0000,0000,0000,,很好，这告诉我
Dialogue: 0,0:36:35.33,0:36:37.33,*Default,NTP,0000,0000,0000,,构造函数工作，我有一个空列表
Dialogue: 0,0:36:37.57,0:36:40.13,*Default,NTP,0000,0000,0000,,让我们在袋子里添加一些东西
Dialogue: 0,0:36:40.30,0:36:43.27,*Default,NTP,0000,0000,0000,,k 点放在袋子里一个球还有一根绳子
Dialogue: 0,0:36:43.30,0:36:44.40,*Default,NTP,0000,0000,0000,,然后打印 k
Dialogue: 0,0:36:44.60,0:36:46.87,*Default,NTP,0000,0000,0000,,袋鼠育儿袋包含
Dialogue: 0,0:36:46.87,0:36:49.27,*Default,NTP,0000,0000,0000,,然后它向我展示了一个对象
Dialogue: 0,0:36:49.30,0:36:50.67,*Default,NTP,0000,0000,0000,,让我们在里面放点别的东西
Dialogue: 0,0:36:50.67,0:36:52.70,*Default,NTP,0000,0000,0000,,确保我可以在那里得到很多东西
Dialogue: 0,0:36:52.90,0:36:54.77,*Default,NTP,0000,0000,0000,,很好，现在它有了
Dialogue: 0,0:36:54.77,0:36:56.60,*Default,NTP,0000,0000,0000,,告诉我当我把锤子放进去时
Dialogue: 0,0:36:56.60,0:36:58.93,*Default,NTP,0000,0000,0000,,我打印 k 我在锤子里得到一个球
Dialogue: 0,0:36:58.97,0:37:01.70,*Default,NTP,0000,0000,0000,,还有一个测试让我们确保它可以处理
Dialogue: 0,0:37:02.33,0:37:04.30,*Default,NTP,0000,0000,0000,,试图放入多个对象
Dialogue: 0,0:37:04.30,0:37:05.90,*Default,NTP,0000,0000,0000,,所以如果我尝试把球放进去
Dialogue: 0,0:37:06.13,0:37:08.47,*Default,NTP,0000,0000,0000,,它会说已经在袋子里了
Dialogue: 0,0:37:08.47,0:37:09.40,*Default,NTP,0000,0000,0000,,我要打印它
Dialogue: 0,0:37:09.40,0:37:10.07,*Default,NTP,0000,0000,0000,,并确保我没有
Dialogue: 0,0:37:10.07,0:37:11.00,*Default,NTP,0000,0000,0000,,把一切搞砸
Dialogue: 0,0:37:11.00,0:37:12.47,*Default,NTP,0000,0000,0000,,所以你必须要小心
Dialogue: 0,0:37:12.47,0:37:14.87,*Default,NTP,0000,0000,0000,,也许我收到的消息是正确的，但我仍然添加了它
Dialogue: 0,0:37:14.87,0:37:17.57,*Default,NTP,0000,0000,0000,,所以当我打印时应该只写球锤
Dialogue: 0,0:37:17.60,0:37:19.33,*Default,NTP,0000,0000,0000,,真的很可能我应该在这里做什么
Dialogue: 0,0:37:19.33,0:37:20.50,*Default,NTP,0000,0000,0000,,因为这是测试
Dialogue: 0,0:37:20.73,0:37:23.73,*Default,NTP,0000,0000,0000,,袋子里的第一个物体是一个物体
Dialogue: 0,0:37:23.73,0:37:26.00,*Default,NTP,0000,0000,0000,,我可能还应该测试一下锤子以确保
Dialogue: 0,0:37:26.00,0:37:28.53,*Default,NTP,0000,0000,0000,,以某种方式确保我正在迭代整个列表
Dialogue: 0,0:37:28.53,0:37:29.33,*Default,NTP,0000,0000,0000,,所以你可能想要
Dialogue: 0,0:37:29.33,0:37:31.30,*Default,NTP,0000,0000,0000,,再多推动一点
Dialogue: 0,0:37:31.30,0:37:33.67,*Default,NTP,0000,0000,0000,,测试用例以确保您可以找到对象
Dialogue: 0,0:37:33.67,0:37:35.53,*Default,NTP,0000,0000,0000,,无论它位于列表中的哪个位置
Dialogue: 0,0:37:36.60,0:37:39.97,*Default,NTP,0000,0000,0000,,但同样，只有你知道基本的功能测试
Dialogue: 0,0:37:39.97,0:37:42.87,*Default,NTP,0000,0000,0000,,确保您的功能按照您的想法行事
Dialogue: 0,0:37:42.87,0:37:44.53,*Default,NTP,0000,0000,0000,,因为困难的事情之一
Dialogue: 0,0:37:44.60,0:37:45.60,*Default,NTP,0000,0000,0000,,好吧，任何代码
Dialogue: 0,0:37:45.60,0:37:47.30,*Default,NTP,0000,0000,0000,,但特别是这些成员函数是
Dialogue: 0,0:37:47.40,0:37:49.40,*Default,NTP,0000,0000,0000,,你必须驾驶它们 你必须运行它们
Dialogue: 0,0:37:49.40,0:37:51.20,*Default,NTP,0000,0000,0000,,你必须测试所有这些
Dialogue: 0,0:37:51.37,0:37:53.40,*Default,NTP,0000,0000,0000,,即使你不知道你知道什么时候
Dialogue: 0,0:37:53.40,0:37:55.17,*Default,NTP,0000,0000,0000,,或者如何使用它们
Dialogue: 0,0:37:55.33,0:37:58.13,*Default,NTP,0000,0000,0000,,这样测试代码就可以了，我们会看到越来越多的
Dialogue: 0,0:37:58.27,0:37:59.17,*Default,NTP,0000,0000,0000,,在未来几周内
Dialogue: 0,0:37:59.17,0:38:01.10,*Default,NTP,0000,0000,0000,,确保我们知道如何验证
Dialogue: 0,0:38:01.10,0:38:02.60,*Default,NTP,0000,0000,0000,,我们的代码正在按照我们的想法行事
Dialogue: 0,0:38:03.13,0:38:04.13,*Default,NTP,0000,0000,0000,,好吧，现在就这样
Dialogue: 0,0:38:04.13,0:38:05.47,*Default,NTP,0000,0000,0000,,当我们回来时我们将会有
Dialogue: 0,0:38:05.47,0:38:05.73,*Default,NTP,0000,0000,0000,,你知道
Dialogue: 0,0:38:05.73,0:38:08.17,*Default,NTP,0000,0000,0000,,多谈谈对象和类
Dialogue: 0,0:38:08.17,0:38:09.77,*Default,NTP,0000,0000,0000,,并开始完善我们的一些想法
Dialogue: 0,0:38:09.77,0:38:10.30,*Default,NTP,0000,0000,0000,,关于这些事情
Dialogue: 0,0:38:10.30,0:38:11.30,*Default,NTP,0000,0000,0000,,所以我们稍后再见
