[Script Info]
; Script generated by Bilibili Evolved Danmaku Converter
; https://github.com/the1812/Bilibili-Evolved/
Title: Lecture 10. Containers - Lecture 10. Containers
ScriptType: v4.00+
PlayResX: 1280
PlayResY: 720
Timer: 10.0000
WrapStyle: 0
ScaledBorderAndShadow: no

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: TopLeft,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,7,32,32,32,0
Style: TopCenter,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,8,32,32,32,0
Style: TopRight,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,9,32,32,32,0
Style: BottomLeft,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,1,32,32,32,0
Style: BottomCenter,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,2,32,32,32,0
Style: BottomRight,微软雅黑,48,&H00FFFFFF,&H00FFFFFF,&H99000000,&H99000000,0,0,0,0,100,100,0,0,3,1,0,3,32,32,32,0

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:01.53,0:00:04.73,BottomCenter,,0,0,0,,61 a lecture No.10 announcements
Dialogue: 0,0:00:06.37,0:00:08.90,BottomCenter,,0,0,0,,midterm one regrade requests are due Monday
Dialogue: 0,0:00:09.40,0:00:10.10,BottomCenter,,0,0,0,,please make sure
Dialogue: 0,0:00:10.10,0:00:12.17,BottomCenter,,0,0,0,,that the links to your midterm one recordings
Dialogue: 0,0:00:12.17,0:00:13.07,BottomCenter,,0,0,0,,continue to work
Dialogue: 0,0:00:13.07,0:00:14.00,BottomCenter,,0,0,0,,through Monday
Dialogue: 0,0:00:14.97,0:00:15.27,BottomCenter,,0,0,0,,you will
Dialogue: 0,0:00:15.27,0:00:17.50,BottomCenter,,0,0,0,,be contacted if you need to keep them even longer
Dialogue: 0,0:00:17.50,0:00:20.13,BottomCenter,,0,0,0,,but if you don't hear from us you can just remove them
Dialogue: 0,0:00:20.33,0:00:21.77,BottomCenter,,0,0,0,,or not it's really up to you
Dialogue: 0,0:00:21.77,0:00:21.93,BottomCenter,,0,0,0,,but
Dialogue: 0,0:00:21.93,0:00:23.90,BottomCenter,,0,0,0,,if you want to free up some space on your google drive
Dialogue: 0,0:00:23.90,0:00:27.33,BottomCenter,,0,0,0,,or whatever you could remove them on Tuesday
Dialogue: 0,0:00:27.80,0:00:29.33,BottomCenter,,0,0,0,,homework two is due Thursday
Dialogue: 0,0:00:29.93,0:00:32.13,BottomCenter,,0,0,0,,the completely optional hog strategy contest
Dialogue: 0,0:00:32.17,0:00:34.00,BottomCenter,,0,0,0,,will end on Monday
Dialogue: 0,0:00:34.47,0:00:37.33,BottomCenter,,0,0,0,,and let's see how many people have submitted so far
Dialogue: 0,0:00:38.97,0:00:39.87,BottomCenter,,0,0,0,,a lot
Dialogue: 0,0:00:40.73,0:00:43.07,BottomCenter,,0,0,0,,we have 112 submissions
Dialogue: 0,0:00:43.50,0:00:45.20,BottomCenter,,0,0,0,,stanford's still there at the bottom
Dialogue: 0,0:00:45.90,0:00:48.73,BottomCenter,,0,0,0,,we have a four way tie for first place
Dialogue: 0,0:00:49.67,0:00:51.80,BottomCenter,,0,0,0,,that doesn't happen in many many years
Dialogue: 0,0:00:52.73,0:00:54.27,BottomCenter,,0,0,0,,but just because you're winning now
Dialogue: 0,0:00:54.27,0:00:56.60,BottomCenter,,0,0,0,,doesn't mean you'll win the whole contest
Dialogue: 0,0:00:56.80,0:00:57.87,BottomCenter,,0,0,0,,it's not unusual
Dialogue: 0,0:00:57.87,0:01:00.92,BottomCenter,,0,0,0,,that somebody will save their very best entry
Dialogue: 0,0:01:01.00,0:01:02.27,BottomCenter,,0,0,0,,until the last minute
Dialogue: 0,0:01:02.70,0:01:04.50,BottomCenter,,0,0,0,,so we'll see what happens this year
Dialogue: 0,0:01:05.93,0:01:08.53,BottomCenter,,0,0,0,,I'm delighted to see some many people participating
Dialogue: 0,0:01:10.29,0:01:11.93,BottomCenter,,0,0,0,,we will have a lab this week
Dialogue: 0,0:01:12.12,0:01:13.56,BottomCenter,,0,0,0,,lab is due on Tuesday
Dialogue: 0,0:01:13.76,0:01:15.59,BottomCenter,,0,0,0,,come to orientations on Monday
Dialogue: 0,0:01:15.59,0:01:17.50,BottomCenter,,0,0,0,,and just finish the lab on Monday
Dialogue: 0,0:01:17.59,0:01:19.06,BottomCenter,,0,0,0,,it's really only do on Tuesday
Dialogue: 0,0:01:19.06,0:01:21.79,BottomCenter,,0,0,0,,in case for some reason you can't finish it on Monday
Dialogue: 0,0:01:22.87,0:01:26.20,BottomCenter,,0,0,0,,we'll have discussion in tutorials on Wednesday
Dialogue: 0,0:01:26.40,0:01:28.59,BottomCenter,,0,0,0,,an exam prep section on Friday
Dialogue: 0,0:01:29.33,0:01:31.53,BottomCenter,,0,0,0,,and election q amp a with the instructors Monday
Dialogue: 0,0:01:31.53,0:01:33.37,BottomCenter,,0,0,0,,Wednesday and Fridays in the morning
Dialogue: 0,0:01:34.76,0:01:36.50,BottomCenter,,0,0,0,,today's lecture is not all about recursion
Dialogue: 0,0:01:36.50,0:01:39.26,BottomCenter,,0,0,0,,but there are some recursion examples sprinkled in
Dialogue: 0,0:01:39.90,0:01:42.40,BottomCenter,,0,0,0,,instead today we talk about how to give names to
Dialogue: 0,0:01:42.40,0:01:43.40,BottomCenter,,0,0,0,,multiple values
Dialogue: 0,0:01:43.40,0:01:45.56,BottomCenter,,0,0,0,,bundle together using a container
Dialogue: 0,0:01:46.37,0:01:48.37,BottomCenter,,0,0,0,,and we'll also talk a little bit about strings
Dialogue: 0,0:01:48.37,0:01:49.70,BottomCenter,,0,0,0,,because those are related
Dialogue: 0,0:01:49.97,0:01:52.26,BottomCenter,,0,0,0,,they're kind of like containers full of letters
Dialogue: 0,0:01:53.17,0:01:54.20,BottomCenter,,0,0,0,,okay here we go
Dialogue: 0,0:01:55.70,0:01:59.40,BottomCenter,,0,0,0,,lists are a built in data type in python
Dialogue: 0,0:01:59.40,0:02:01.59,BottomCenter,,0,0,0,,that are used everywhere
Dialogue: 0,0:02:03.93,0:02:06.29,BottomCenter,,0,0,0,,to create a list we write a list literal
Dialogue: 0,0:02:10.16,0:02:13.09,BottomCenter,,0,0,0,,to bind that list value to a name
Dialogue: 0,0:02:13.12,0:02:15.06,BottomCenter,,0,0,0,,we just use an assignment statement
Dialogue: 0,0:02:15.06,0:02:16.80,BottomCenter,,0,0,0,,so here are some odd numbers
Dialogue: 0,0:02:16.87,0:02:18.33,BottomCenter,,0,0,0,,I can get the
Dialogue: 0,0:02:18.56,0:02:23.53,BottomCenter,,0,0,0,,element at index zero or one or two or three
Dialogue: 0,0:02:24.53,0:02:27.50,BottomCenter,,0,0,0,,I can also get the number of elements
Dialogue: 0,0:02:29.66,0:02:30.50,BottomCenter,,0,0,0,,now notice that the
Dialogue: 0,0:02:30.50,0:02:32.00,BottomCenter,,0,0,0,,index of the last element is
Dialogue: 0,0:02:32.00,0:02:34.19,BottomCenter,,0,0,0,,one less than the length of the elements
Dialogue: 0,0:02:34.27,0:02:36.09,BottomCenter,,0,0,0,,so the right way to think about this index
Dialogue: 0,0:02:36.09,0:02:38.40,BottomCenter,,0,0,0,,is the offset from the beginning
Dialogue: 0,0:02:39.87,0:02:42.90,BottomCenter,,0,0,0,,offset of zero from the beginning is just the beginning
Dialogue: 0,0:02:43.53,0:02:46.72,BottomCenter,,0,0,0,,and then this is one after that and two after that
Dialogue: 0,0:02:46.72,0:02:47.77,BottomCenter,,0,0,0,,and three after that
Dialogue: 0,0:02:49.53,0:02:51.50,BottomCenter,,0,0,0,,now this is just a call expression
Dialogue: 0,0:02:51.50,0:02:53.69,BottomCenter,,0,0,0,,this is an element selection expression
Dialogue: 0,0:02:53.69,0:02:55.90,BottomCenter,,0,0,0,,where you have some expression that gets evaluated
Dialogue: 0,0:02:55.90,0:02:57.16,BottomCenter,,0,0,0,,that gives you a list
Dialogue: 0,0:02:57.19,0:02:59.97,BottomCenter,,0,0,0,,and then you have to evaluate the index
Dialogue: 0,0:03:00.72,0:03:03.40,BottomCenter,,0,0,0,,so it is possible to put arbitrary expressions in
Dialogue: 0,0:03:03.40,0:03:04.90,BottomCenter,,0,0,0,,either of these places
Dialogue: 0,0:03:04.90,0:03:07.80,BottomCenter,,0,0,0,,and also to combine the results in any way that I want
Dialogue: 0,0:03:08.00,0:03:11.96,BottomCenter,,0,0,0,,so I could say odds 3 odds two
Dialogue: 0,0:03:12.56,0:03:14.19,BottomCenter,,0,0,0,,and that gives me the No.2
Dialogue: 0,0:03:14.27,0:03:16.97,BottomCenter,,0,0,0,,I could then use that as an index into odds
Dialogue: 0,0:03:18.47,0:03:20.97,BottomCenter,,0,0,0,,so that means you can put an arbitrary expression here
Dialogue: 0,0:03:20.97,0:03:22.50,BottomCenter,,0,0,0,,which gets evaluated first
Dialogue: 0,0:03:22.50,0:03:23.97,BottomCenter,,0,0,0,,an arbitrary expression there
Dialogue: 0,0:03:24.00,0:03:25.09,BottomCenter,,0,0,0,,which gets evaluated
Dialogue: 0,0:03:25.09,0:03:27.33,BottomCenter,,0,0,0,,2nd and then once you have the value here
Dialogue: 0,0:03:27.33,0:03:28.33,BottomCenter,,0,0,0,,which is a list
Dialogue: 0,0:03:28.33,0:03:30.40,BottomCenter,,0,0,0,,and the value here which is an integer
Dialogue: 0,0:03:30.47,0:03:33.33,BottomCenter,,0,0,0,,you can look up the particular element in the list
Dialogue: 0,0:03:35.19,0:03:37.80,BottomCenter,,0,0,0,,so when working with lists we use list literals
Dialogue: 0,0:03:37.80,0:03:40.30,BottomCenter,,0,0,0,,we can also write expressions to describe
Dialogue: 0,0:03:40.30,0:03:41.90,BottomCenter,,0,0,0,,each element in the list
Dialogue: 0,0:03:42.12,0:03:43.27,BottomCenter,,0,0,0,,and in this case
Dialogue: 0,0:03:43.27,0:03:46.19,BottomCenter,,0,0,0,,digits would be bound to the lists that were equal
Dialogue: 0,0:03:46.87,0:03:49.09,BottomCenter,,0,0,0,,regardless of whether we wrote down the numbers
Dialogue: 0,0:03:49.09,0:03:51.72,BottomCenter,,0,0,0,,or expressions that evaluate to those numbers
Dialogue: 0,0:03:52.77,0:03:55.33,BottomCenter,,0,0,0,,to get the number of elements we ask for the len
Dialogue: 0,0:03:55.97,0:03:58.40,BottomCenter,,0,0,0,,of the list len is a built in function
Dialogue: 0,0:03:59.27,0:04:02.56,BottomCenter,,0,0,0,,if I want to find an element selected by its index
Dialogue: 0,0:04:02.80,0:04:06.53,BottomCenter,,0,0,0,,I can use element selection syntax or I can use the
Dialogue: 0,0:04:06.87,0:04:10.00,BottomCenter,,0,0,0,,get item function in the operator module
Dialogue: 0,0:04:10.30,0:04:11.77,BottomCenter,,0,0,0,,which has the same effect
Dialogue: 0,0:04:14.16,0:04:15.50,BottomCenter,,0,0,0,,in order to combine
Dialogue: 0,0:04:15.56,0:04:19.17,BottomCenter,,0,0,0,,two lists together or form repetitions of lists
Dialogue: 0,0:04:19.17,0:04:21.52,BottomCenter,,0,0,0,,I actually just add and multiply
Dialogue: 0,0:04:21.97,0:04:24.26,BottomCenter,,0,0,0,,so if I say the list to seven
Dialogue: 0,0:04:25.00,0:04:27.39,BottomCenter,,0,0,0,,plus the digits list times two
Dialogue: 0,0:04:27.97,0:04:29.10,BottomCenter,,0,0,0,,multiplying the digits
Dialogue: 0,0:04:29.10,0:04:31.93,BottomCenter,,0,0,0,,list times two just replicates its elements twice
Dialogue: 0,0:04:32.06,0:04:33.52,BottomCenter,,0,0,0,,and then adding those
Dialogue: 0,0:04:33.52,0:04:36.87,BottomCenter,,0,0,0,,to the end of lists to seven gives me one long list
Dialogue: 0,0:04:36.87,0:04:38.32,BottomCenter,,0,0,0,,with 10 elements
Dialogue: 0,0:04:39.19,0:04:40.56,BottomCenter,,0,0,0,,I could also use
Dialogue: 0,0:04:40.56,0:04:44.12,BottomCenter,,0,0,0,,the add and mull functions from the operator module
Dialogue: 0,0:04:46.17,0:04:50.10,BottomCenter,,0,0,0,,finally the elements of a list need not be integers
Dialogue: 0,0:04:50.12,0:04:53.00,BottomCenter,,0,0,0,,they could be anything including other lists
Dialogue: 0,0:04:53.26,0:04:55.26,BottomCenter,,0,0,0,,so here I have a list literal
Dialogue: 0,0:04:56.97,0:04:59.37,BottomCenter,,0,0,0,,with two other nested list literals
Dialogue: 0,0:05:00.06,0:05:03.19,BottomCenter,,0,0,0,,what I create is a list with two elements
Dialogue: 0,0:05:03.30,0:05:05.69,BottomCenter,,0,0,0,,each of which are lists with two elements
Dialogue: 0,0:05:05.69,0:05:06.80,BottomCenter,,0,0,0,,which are integers
Dialogue: 0,0:05:07.52,0:05:13.10,BottomCenter,,0,0,0,,and so asking for element No.1 of pairs gives me
Dialogue: 0,0:05:13.19,0:05:17.00,BottomCenter,,0,0,0,,this element which is a list with 30 and 40
Dialogue: 0,0:05:17.87,0:05:21.30,BottomCenter,,0,0,0,,so here you see that there is an combined expression
Dialogue: 0,0:05:21.37,0:05:23.73,BottomCenter,,0,0,0,,in this case an element selection expression
Dialogue: 0,0:05:24.00,0:05:25.12,BottomCenter,,0,0,0,,giving me a list
Dialogue: 0,0:05:25.17,0:05:26.89,BottomCenter,,0,0,0,,which I then select an element from
Dialogue: 0,0:05:26.89,0:05:28.37,BottomCenter,,0,0,0,,in order to get the No.30
Dialogue: 0,0:05:32.52,0:05:34.87,BottomCenter,,0,0,0,,lists contain other values
Dialogue: 0,0:05:35.37,0:05:38.80,BottomCenter,,0,0,0,,their values that represent collections of other values
Dialogue: 0,0:05:39.80,0:05:43.19,BottomCenter,,0,0,0,,and when you have one value that contains another
Dialogue: 0,0:05:44.00,0:05:45.67,BottomCenter,,0,0,0,,you might ask the question
Dialogue: 0,0:05:45.89,0:05:49.30,BottomCenter,,0,0,0,,does an element appear in a list
Dialogue: 0,0:05:50.12,0:05:52.06,BottomCenter,,0,0,0,,there are actually built in operators
Dialogue: 0,0:05:52.06,0:05:54.17,BottomCenter,,0,0,0,,for testing whether an element appears
Dialogue: 0,0:05:54.26,0:05:56.87,BottomCenter,,0,0,0,,in a compound value such as a container
Dialogue: 0,0:05:57.87,0:05:59.60,BottomCenter,,0,0,0,,so let's say I have digits
Dialogue: 0,0:05:59.69,0:06:01.52,BottomCenter,,0,0,0,,which is one eight two and eight
Dialogue: 0,0:06:02.17,0:06:04.47,BottomCenter,,0,0,0,,I can ask is one in digits
Dialogue: 0,0:06:05.32,0:06:06.87,BottomCenter,,0,0,0,,python will return true
Dialogue: 0,0:06:07.10,0:06:08.69,BottomCenter,,0,0,0,,so in is an operator
Dialogue: 0,0:06:10.69,0:06:11.97,BottomCenter,,0,0,0,,that evaluates
Dialogue: 0,0:06:12.19,0:06:14.10,BottomCenter,,0,0,0,,both one and digits
Dialogue: 0,0:06:14.10,0:06:17.32,BottomCenter,,0,0,0,,and then determines whether one appears in digits
Dialogue: 0,0:06:18.19,0:06:19.30,BottomCenter,,0,0,0,,eight is in digits
Dialogue: 0,0:06:19.30,0:06:21.47,BottomCenter,,0,0,0,,the fact that it's in there twice doesn't matter
Dialogue: 0,0:06:21.47,0:06:22.32,BottomCenter,,0,0,0,,it's in there
Dialogue: 0,0:06:22.67,0:06:24.47,BottomCenter,,0,0,0,,five is not in digits
Dialogue: 0,0:06:24.80,0:06:27.37,BottomCenter,,0,0,0,,so if I said five in digits I'd get false
Dialogue: 0,0:06:27.37,0:06:29.50,BottomCenter,,0,0,0,,but since I said five not in digits
Dialogue: 0,0:06:29.50,0:06:30.93,BottomCenter,,0,0,0,,this is another operator
Dialogue: 0,0:06:30.97,0:06:33.87,BottomCenter,,0,0,0,,that's equivalent to saying not five in digits
Dialogue: 0,0:06:34.89,0:06:36.80,BottomCenter,,0,0,0,,let's look at a few other examples
Dialogue: 0,0:06:38.80,0:06:40.06,BottomCenter,,0,0,0,,so here's digits
Dialogue: 0,0:06:40.73,0:06:42.93,BottomCenter,,0,0,0,,one in digits is true
Dialogue: 0,0:06:43.17,0:06:45.73,BottomCenter,,0,0,0,,five in digits is false
Dialogue: 0,0:06:46.37,0:06:51.50,BottomCenter,,0,0,0,,now it has to be the value since one doesn't equal one
Dialogue: 0,0:06:51.50,0:06:53.73,BottomCenter,,0,0,0,,if I say one in digits
Dialogue: 0,0:06:53.87,0:06:56.80,BottomCenter,,0,0,0,,the string one is not there only the integer
Dialogue: 0,0:06:58.56,0:07:01.73,BottomCenter,,0,0,0,,also we're looking for an individual element
Dialogue: 0,0:07:01.97,0:07:05.80,BottomCenter,,0,0,0,,if I say is the sequence one eight in digits
Dialogue: 0,0:07:06.89,0:07:08.10,BottomCenter,,0,0,0,,it says false
Dialogue: 0,0:07:08.39,0:07:10.26,BottomCenter,,0,0,0,,but there it is one and eight
Dialogue: 0,0:07:10.60,0:07:13.17,BottomCenter,,0,0,0,,that's not what the inn operator does
Dialogue: 0,0:07:13.17,0:07:15.37,BottomCenter,,0,0,0,,it doesn't look for subsequences
Dialogue: 0,0:07:15.39,0:07:18.06,BottomCenter,,0,0,0,,instead it looks for individual elements
Dialogue: 0,0:07:18.87,0:07:22.37,BottomCenter,,0,0,0,,if I had said is one two in
Dialogue: 0,0:07:22.67,0:07:26.80,BottomCenter,,0,0,0,,the nested list that contains one and two
Dialogue: 0,0:07:27.87,0:07:28.87,BottomCenter,,0,0,0,,that would be true
Dialogue: 0,0:07:28.87,0:07:31.26,BottomCenter,,0,0,0,,because there it is right there as an element
Dialogue: 0,0:07:31.32,0:07:32.52,BottomCenter,,0,0,0,,of this list
Dialogue: 0,0:07:33.47,0:07:35.30,BottomCenter,,0,0,0,,but if it's nested too deeply
Dialogue: 0,0:07:37.10,0:07:38.60,BottomCenter,,0,0,0,,then it's not there anymore
Dialogue: 0,0:07:39.32,0:07:42.00,BottomCenter,,0,0,0,,so this is a simple operator that doesn't search
Dialogue: 0,0:07:42.12,0:07:42.93,BottomCenter,,0,0,0,,through a structure
Dialogue: 0,0:07:42.93,0:07:44.76,BottomCenter,,0,0,0,,trying to find anything that matches
Dialogue: 0,0:07:44.76,0:07:46.93,BottomCenter,,0,0,0,,and said it just goes element by element
Dialogue: 0,0:07:46.93,0:07:48.47,BottomCenter,,0,0,0,,and sees whether it's equal
Dialogue: 0,0:07:48.47,0:07:50.06,BottomCenter,,0,0,0,,to the element that you're looking for
Dialogue: 0,0:07:53.67,0:07:56.26,BottomCenter,,0,0,0,,since sequences are fundamental to computing
Dialogue: 0,0:07:57.06,0:08:00.50,BottomCenter,,0,0,0,,people have developed new kinds of statements
Dialogue: 0,0:08:00.60,0:08:04.69,BottomCenter,,0,0,0,,that help us manipulate or iterate over sequences
Dialogue: 0,0:08:04.97,0:08:06.93,BottomCenter,,0,0,0,,and one of them is the four statement
Dialogue: 0,0:08:07.26,0:08:07.87,BottomCenter,,0,0,0,,so the four
Dialogue: 0,0:08:07.87,0:08:10.26,BottomCenter,,0,0,0,,statement is a way of iterating over sequences
Dialogue: 0,0:08:10.26,0:08:11.60,BottomCenter,,0,0,0,,I'll show you an example
Dialogue: 0,0:08:11.69,0:08:13.93,BottomCenter,,0,0,0,,and then I'll tell you exactly how it works
Dialogue: 0,0:08:16.69,0:08:17.89,BottomCenter,,0,0,0,,I'll write a function
Dialogue: 0,0:08:17.97,0:08:19.39,BottomCenter,,0,0,0,,that computes the count
Dialogue: 0,0:08:19.39,0:08:21.80,BottomCenter,,0,0,0,,of the number of times in a sequence s
Dialogue: 0,0:08:21.87,0:08:23.67,BottomCenter,,0,0,0,,that some value appears
Dialogue: 0,0:08:26.97,0:08:28.69,BottomCenter,,0,0,0,,count the number
Dialogue: 0,0:08:29.89,0:08:34.10,BottomCenter,,0,0,0,,of times that value occurs
Dialogue: 0,0:08:35.29,0:08:38.07,BottomCenter,,0,0,0,,in sequence s
Dialogue: 0,0:08:41.60,0:08:42.97,BottomCenter,,0,0,0,,and using a while statement
Dialogue: 0,0:08:42.97,0:08:46.87,BottomCenter,,0,0,0,,I might write something like total index equals zero
Dialogue: 0,0:08:46.87,0:08:47.66,BottomCenter,,0,0,0,,zero
Dialogue: 0,0:08:48.79,0:08:50.60,BottomCenter,,0,0,0,,while it's the case
Dialogue: 0,0:08:50.73,0:08:54.39,BottomCenter,,0,0,0,,that index is less than the length of the sequence
Dialogue: 0,0:08:54.70,0:08:57.10,BottomCenter,,0,0,0,,I'm going to look at the element
Dialogue: 0,0:08:57.52,0:08:58.33,BottomCenter,,0,0,0,,at
Dialogue: 0,0:08:59.26,0:09:00.12,BottomCenter,,0,0,0,,index
Dialogue: 0,0:09:01.26,0:09:02.37,BottomCenter,,0,0,0,,of s
Dialogue: 0,0:09:02.66,0:09:03.07,BottomCenter,,0,0,0,,so now
Dialogue: 0,0:09:03.07,0:09:05.97,BottomCenter,,0,0,0,,I've selected one particular element of the index
Dialogue: 0,0:09:06.26,0:09:08.73,BottomCenter,,0,0,0,,and if I start out with index zero
Dialogue: 0,0:09:08.73,0:09:10.60,BottomCenter,,0,0,0,,I'll pick the zero element
Dialogue: 0,0:09:10.60,0:09:12.26,BottomCenter,,0,0,0,,and if I change index later
Dialogue: 0,0:09:12.37,0:09:14.57,BottomCenter,,0,0,0,,then I'll get another element later on
Dialogue: 0,0:09:14.57,0:09:16.20,BottomCenter,,0,0,0,,so at some point down the line
Dialogue: 0,0:09:16.26,0:09:19.10,BottomCenter,,0,0,0,,I will rebind index to index plus one
Dialogue: 0,0:09:19.10,0:09:21.26,BottomCenter,,0,0,0,,and in this way I'll March through the
Dialogue: 0,0:09:21.37,0:09:23.10,BottomCenter,,0,0,0,,all of the elements of the list
Dialogue: 0,0:09:24.16,0:09:25.47,BottomCenter,,0,0,0,,and what do I do with this element
Dialogue: 0,0:09:25.47,0:09:27.73,BottomCenter,,0,0,0,,well I want to figure out if
Dialogue: 0,0:09:28.26,0:09:31.89,BottomCenter,,0,0,0,,element is equal to this value that I'm looking for
Dialogue: 0,0:09:31.97,0:09:35.20,BottomCenter,,0,0,0,,and if so then I'll change total to be total plus one
Dialogue: 0,0:09:38.39,0:09:40.50,BottomCenter,,0,0,0,,and at the end I can return total
Dialogue: 0,0:09:42.60,0:09:44.10,BottomCenter,,0,0,0,,so what have I done so far
Dialogue: 0,0:09:44.20,0:09:46.26,BottomCenter,,0,0,0,,I have to find a function called count
Dialogue: 0,0:09:46.37,0:09:48.16,BottomCenter,,0,0,0,,that takes in some sequence
Dialogue: 0,0:09:48.87,0:09:51.26,BottomCenter,,0,0,0,,and counts the number of times that say
Dialogue: 0,0:09:51.47,0:09:53.60,BottomCenter,,0,0,0,,one appears in that sequence
Dialogue: 0,0:09:53.60,0:09:56.33,BottomCenter,,0,0,0,,oh there it is three times 1 2 3
Dialogue: 0,0:09:57.37,0:09:59.60,BottomCenter,,0,0,0,,okay so that's a useful dock test
Dialogue: 0,0:09:59.60,0:10:01.66,BottomCenter,,0,0,0,,let's just paste that in right there
Dialogue: 0,0:10:03.60,0:10:06.12,BottomCenter,,0,0,0,,and then we'll talk about this implementation
Dialogue: 0,0:10:07.00,0:10:09.00,BottomCenter,,0,0,0,,well let's try to make it shorter
Dialogue: 0,0:10:09.73,0:10:10.87,BottomCenter,,0,0,0,,one thing we see here
Dialogue: 0,0:10:10.87,0:10:13.29,BottomCenter,,0,0,0,,is that total is rebound the total plus one
Dialogue: 0,0:10:13.37,0:10:15.92,BottomCenter,,0,0,0,,there's actually shorthand in python for doing that
Dialogue: 0,0:10:15.92,0:10:18.47,BottomCenter,,0,0,0,,I can just say total plus equals one
Dialogue: 0,0:10:18.70,0:10:21.07,BottomCenter,,0,0,0,,and this is a different assignment operator
Dialogue: 0,0:10:21.16,0:10:24.10,BottomCenter,,0,0,0,,that a science total to be whatever total was before
Dialogue: 0,0:10:24.16,0:10:25.33,BottomCenter,,0,0,0,,and then one more
Dialogue: 0,0:10:25.73,0:10:28.52,BottomCenter,,0,0,0,,and I can do the same thing here and simplify that
Dialogue: 0,0:10:29.20,0:10:31.29,BottomCenter,,0,0,0,,okay so we've made some progress
Dialogue: 0,0:10:31.29,0:10:32.76,BottomCenter,,0,0,0,,but I think we can do better
Dialogue: 0,0:10:34.47,0:10:37.70,BottomCenter,,0,0,0,,the meat of this implementation is here
Dialogue: 0,0:10:38.16,0:10:40.26,BottomCenter,,0,0,0,,and the rest of this is just doing the work
Dialogue: 0,0:10:40.26,0:10:41.37,BottomCenter,,0,0,0,,of iterating over
Dialogue: 0,0:10:41.37,0:10:43.16,BottomCenter,,0,0,0,,all the elements in a sequence
Dialogue: 0,0:10:43.39,0:10:44.97,BottomCenter,,0,0,0,,which is such a common thing
Dialogue: 0,0:10:45.00,0:10:46.97,BottomCenter,,0,0,0,,that we have a special statement for it
Dialogue: 0,0:10:47.07,0:10:48.37,BottomCenter,,0,0,0,,called the four statement
Dialogue: 0,0:10:49.20,0:10:51.66,BottomCenter,,0,0,0,,and a four statement allows us to just forget
Dialogue: 0,0:10:51.66,0:10:53.70,BottomCenter,,0,0,0,,about the index entirely
Dialogue: 0,0:10:54.00,0:10:57.52,BottomCenter,,0,0,0,,and instead of saying while index less than len s
Dialogue: 0,0:10:57.52,0:11:00.79,BottomCenter,,0,0,0,,I just say for every element in s
Dialogue: 0,0:11:02.52,0:11:04.73,BottomCenter,,0,0,0,,and that replaces both of these lines
Dialogue: 0,0:11:04.76,0:11:08.20,BottomCenter,,0,0,0,,and allows me to get rid of the index increment
Dialogue: 0,0:11:08.29,0:11:09.26,BottomCenter,,0,0,0,,at the bottom
Dialogue: 0,0:11:09.76,0:11:12.70,BottomCenter,,0,0,0,,so now if I read out what this implementation says
Dialogue: 0,0:11:12.70,0:11:13.79,BottomCenter,,0,0,0,,it says I'm going to keep
Dialogue: 0,0:11:13.79,0:11:15.73,BottomCenter,,0,0,0,,track of the total number of times
Dialogue: 0,0:11:15.89,0:11:17.60,BottomCenter,,0,0,0,,I've seen value in s
Dialogue: 0,0:11:17.60,0:11:20.66,BottomCenter,,0,0,0,,and for every element in s if element is that value
Dialogue: 0,0:11:20.66,0:11:22.89,BottomCenter,,0,0,0,,then I'll increase the total by one
Dialogue: 0,0:11:28.79,0:11:31.92,BottomCenter,,0,0,0,,if I run the dock test I'll see that it tried to count
Dialogue: 0,0:11:32.16,0:11:33.60,BottomCenter,,0,0,0,,one in this sequence
Dialogue: 0,0:11:33.60,0:11:34.89,BottomCenter,,0,0,0,,it was expecting three
Dialogue: 0,0:11:34.97,0:11:37.00,BottomCenter,,0,0,0,,and that's exactly what it got back
Dialogue: 0,0:11:37.20,0:11:38.73,BottomCenter,,0,0,0,,one test passed
Dialogue: 0,0:11:41.33,0:11:44.16,BottomCenter,,0,0,0,,okay so that was an example of sequence iteration
Dialogue: 0,0:11:45.39,0:11:47.20,BottomCenter,,0,0,0,,where we used a four statement
Dialogue: 0,0:11:47.97,0:11:49.20,BottomCenter,,0,0,0,,and how does it work
Dialogue: 0,0:11:49.47,0:11:51.70,BottomCenter,,0,0,0,,well what happens is that
Dialogue: 0,0:11:51.70,0:11:53.29,BottomCenter,,0,0,0,,the name element is bound
Dialogue: 0,0:11:53.29,0:11:55.50,BottomCenter,,0,0,0,,in the first frame of the current environment
Dialogue: 0,0:11:55.89,0:11:57.26,BottomCenter,,0,0,0,,not the new frame by the way
Dialogue: 0,0:11:57.26,0:11:59.79,BottomCenter,,0,0,0,,no new frames are introduced with a four statement
Dialogue: 0,0:12:00.89,0:12:02.47,BottomCenter,,0,0,0,,but the name element is bound
Dialogue: 0,0:12:02.50,0:12:05.10,BottomCenter,,0,0,0,,and then the suite of the four statement is executed
Dialogue: 0,0:12:05.52,0:12:06.16,BottomCenter,,0,0,0,,and then the name
Dialogue: 0,0:12:06.16,0:12:07.79,BottomCenter,,0,0,0,,element is bound of the next thing it is
Dialogue: 0,0:12:08.20,0:12:09.60,BottomCenter,,0,0,0,,and we execute this again
Dialogue: 0,0:12:10.66,0:12:12.66,BottomCenter,,0,0,0,,so when you have a four statement
Dialogue: 0,0:12:12.66,0:12:15.60,BottomCenter,,0,0,0,,it's going to execute the suite of the statement
Dialogue: 0,0:12:15.60,0:12:16.66,BottomCenter,,0,0,0,,a number of times
Dialogue: 0,0:12:16.66,0:12:18.66,BottomCenter,,0,0,0,,which is the number of elements in s
Dialogue: 0,0:12:18.79,0:12:20.50,BottomCenter,,0,0,0,,an element will be bound to the different
Dialogue: 0,0:12:20.50,0:12:22.07,BottomCenter,,0,0,0,,element of s each time
Dialogue: 0,0:12:24.57,0:12:27.07,BottomCenter,,0,0,0,,so here's the execution procedures belled out
Dialogue: 0,0:12:27.52,0:12:30.73,BottomCenter,,0,0,0,,the syntax of the statement looks like this
Dialogue: 0,0:12:30.73,0:12:31.52,BottomCenter,,0,0,0,,you need a name
Dialogue: 0,0:12:31.52,0:12:33.79,BottomCenter,,0,0,0,,you need an expression and you need a sweet
Dialogue: 0,0:12:35.07,0:12:37.47,BottomCenter,,0,0,0,,the first thing that happens as you evaluate the header
Dialogue: 0,0:12:37.47,0:12:41.70,BottomCenter,,0,0,0,,expression which must yield an iterable value
Dialogue: 0,0:12:42.16,0:12:44.07,BottomCenter,,0,0,0,,now I said we're doing iteration
Dialogue: 0,0:12:44.10,0:12:46.66,BottomCenter,,0,0,0,,and iterable values are related to that
Dialogue: 0,0:12:46.97,0:12:49.73,BottomCenter,,0,0,0,,but this is a term that I won't define precisely
Dialogue: 0,0:12:49.73,0:12:51.07,BottomCenter,,0,0,0,,for several weeks
Dialogue: 0,0:12:51.92,0:12:53.70,BottomCenter,,0,0,0,,but for now just think
Dialogue: 0,0:12:53.89,0:12:57.26,BottomCenter,,0,0,0,,this expression needs to evaluate to a sequence
Dialogue: 0,0:12:57.89,0:12:59.52,BottomCenter,,0,0,0,,later on we'll see that there are other
Dialogue: 0,0:12:59.52,0:13:02.29,BottomCenter,,0,0,0,,things that we can put in there besides sequences
Dialogue: 0,0:13:02.33,0:13:04.10,BottomCenter,,0,0,0,,and iterate over those as well
Dialogue: 0,0:13:04.89,0:13:06.57,BottomCenter,,0,0,0,,but for now just think
Dialogue: 0,0:13:06.57,0:13:08.79,BottomCenter,,0,0,0,,I need an expression that gives me a sequence
Dialogue: 0,0:13:08.92,0:13:11.87,BottomCenter,,0,0,0,,I need a name to give to each element in that sequence
Dialogue: 0,0:13:12.29,0:13:14.20,BottomCenter,,0,0,0,,and then for each element in the sequence
Dialogue: 0,0:13:14.26,0:13:16.07,BottomCenter,,0,0,0,,we'll bind that name to the element
Dialogue: 0,0:13:16.07,0:13:17.29,BottomCenter,,0,0,0,,in the current frame
Dialogue: 0,0:13:17.37,0:13:18.79,BottomCenter,,0,0,0,,and then execute the suite
Dialogue: 0,0:13:22.29,0:13:23.73,BottomCenter,,0,0,0,,one more cool feature
Dialogue: 0,0:13:23.73,0:13:26.00,BottomCenter,,0,0,0,,about four statements is that you can actually
Dialogue: 0,0:13:26.00,0:13:27.73,BottomCenter,,0,0,0,,do sequence unpacking
Dialogue: 0,0:13:27.89,0:13:30.79,BottomCenter,,0,0,0,,right inside the header of the four statement
Dialogue: 0,0:13:31.50,0:13:33.92,BottomCenter,,0,0,0,,so let's say I had a list of lists
Dialogue: 0,0:13:34.33,0:13:36.10,BottomCenter,,0,0,0,,I call it pairs here
Dialogue: 0,0:13:36.76,0:13:39.33,BottomCenter,,0,0,0,,and I want to count the number of pairs
Dialogue: 0,0:13:39.37,0:13:41.57,BottomCenter,,0,0,0,,that are just the same element twice
Dialogue: 0,0:13:42.29,0:13:44.20,BottomCenter,,0,0,0,,so I'm going to go through each pair
Dialogue: 0,0:13:45.33,0:13:48.37,BottomCenter,,0,0,0,,and I'm going to say is one the same as two no
Dialogue: 0,0:13:48.50,0:13:50.52,BottomCenter,,0,0,0,,is two the same as two yes
Dialogue: 0,0:13:50.52,0:13:53.10,BottomCenter,,0,0,0,,so same count will be one more than it was before
Dialogue: 0,0:13:53.50,0:13:54.92,BottomCenter,,0,0,0,,three or two are different
Dialogue: 0,0:13:54.97,0:13:56.87,BottomCenter,,0,0,0,,but four and four are the same
Dialogue: 0,0:13:56.87,0:13:59.00,BottomCenter,,0,0,0,,so we'll increment same count again
Dialogue: 0,0:13:59.70,0:14:01.50,BottomCenter,,0,0,0,,now what does the four statement look like
Dialogue: 0,0:14:01.50,0:14:02.39,BottomCenter,,0,0,0,,that can do that
Dialogue: 0,0:14:05.00,0:14:06.12,BottomCenter,,0,0,0,,this is something that only
Dialogue: 0,0:14:06.12,0:14:07.76,BottomCenter,,0,0,0,,works for a sequence of fixed
Dialogue: 0,0:14:07.76,0:14:09.07,BottomCenter,,0,0,0,,length sequences
Dialogue: 0,0:14:09.12,0:14:11.12,BottomCenter,,0,0,0,,such as a sequence of pairs
Dialogue: 0,0:14:11.66,0:14:13.07,BottomCenter,,0,0,0,,but in that case
Dialogue: 0,0:14:13.12,0:14:16.73,BottomCenter,,0,0,0,,then you can unpack each pair into separate names
Dialogue: 0,0:14:16.73,0:14:20.33,BottomCenter,,0,0,0,,so you can say for x comma y in pairs
Dialogue: 0,0:14:20.60,0:14:22.52,BottomCenter,,0,0,0,,pairs as a sequence of pairs
Dialogue: 0,0:14:22.73,0:14:23.60,BottomCenter,,0,0,0,,x and y
Dialogue: 0,0:14:23.60,0:14:26.89,BottomCenter,,0,0,0,,are actually now bound to the elements in each pair
Dialogue: 0,0:14:27.07,0:14:28.89,BottomCenter,,0,0,0,,as opposed to the pair itself
Dialogue: 0,0:14:29.26,0:14:31.66,BottomCenter,,0,0,0,,at which point you can check if x equals y
Dialogue: 0,0:14:31.97,0:14:34.26,BottomCenter,,0,0,0,,and if that's true then change same count to b
Dialogue: 0,0:14:34.26,0:14:35.47,BottomCenter,,0,0,0,,same count plus one
Dialogue: 0,0:14:36.66,0:14:38.07,BottomCenter,,0,0,0,,so you're giving a name for each
Dialogue: 0,0:14:38.07,0:14:40.29,BottomCenter,,0,0,0,,element in a fixed length sequence here
Dialogue: 0,0:14:40.70,0:14:43.16,BottomCenter,,0,0,0,,and that's called sequence unpacking
Dialogue: 0,0:14:44.29,0:14:47.16,BottomCenter,,0,0,0,,and this looks just like multiple assignment
Dialogue: 0,0:14:47.16,0:14:51.26,BottomCenter,,0,0,0,,when you say x kama y equals some pair
Dialogue: 0,0:14:51.70,0:14:53.39,BottomCenter,,0,0,0,,each name here x and y
Dialogue: 0,0:14:53.79,0:14:57.70,BottomCenter,,0,0,0,,is bound to some particular value in a pair
Dialogue: 0,0:15:00.52,0:15:02.97,BottomCenter,,0,0,0,,ranges are another sequence type
Dialogue: 0,0:15:03.57,0:15:07.16,BottomCenter,,0,0,0,,that means they're sequences but they're not lists
Dialogue: 0,0:15:08.89,0:15:10.87,BottomCenter,,0,0,0,,ranges are there to represent
Dialogue: 0,0:15:11.12,0:15:14.00,BottomCenter,,0,0,0,,sequences of consecutive integers
Dialogue: 0,0:15:15.10,0:15:15.52,BottomCenter,,0,0,0,,actually
Dialogue: 0,0:15:15.52,0:15:17.97,BottomCenter,,0,0,0,,they can represent all kinds of integer sequences
Dialogue: 0,0:15:17.97,0:15:20.12,BottomCenter,,0,0,0,,but we're just going to focus on the ones that
Dialogue: 0,0:15:20.12,0:15:21.60,BottomCenter,,0,0,0,,have consecutive integers
Dialogue: 0,0:15:21.60,0:15:23.10,BottomCenter,,0,0,0,,so counting upwards
Dialogue: 0,0:15:24.37,0:15:27.97,BottomCenter,,0,0,0,,imagine an infinite number line full of integers
Dialogue: 0,0:15:28.26,0:15:29.89,BottomCenter,,0,0,0,,here's a small slice
Dialogue: 0,0:15:30.52,0:15:33.66,BottomCenter,,0,0,0,,what arrange does is it picks out a
Dialogue: 0,0:15:34.10,0:15:37.52,BottomCenter,,0,0,0,,finite length within this long number line
Dialogue: 0,0:15:38.20,0:15:41.92,BottomCenter,,0,0,0,,by giving a starting value and an ending value
Dialogue: 0,0:15:43.57,0:15:46.66,BottomCenter,,0,0,0,,and selecting all of the integers in between
Dialogue: 0,0:15:46.66,0:15:48.20,BottomCenter,,0,0,0,,an increasing order
Dialogue: 0,0:15:49.52,0:15:51.73,BottomCenter,,0,0,0,,now the way that I've drawn this is important
Dialogue: 0,0:15:52.66,0:15:57.20,BottomCenter,,0,0,0,,both of these 0.2 just before the number indicated
Dialogue: 0,0:15:57.57,0:15:59.37,BottomCenter,,0,0,0,,in the number line
Dialogue: 0,0:15:59.97,0:16:05.37,BottomCenter,,0,0,0,,so that means that -2 is actually included in the range
Dialogue: 0,0:16:05.73,0:16:07.33,BottomCenter,,0,0,0,,from -2 to two
Dialogue: 0,0:16:07.87,0:16:10.29,BottomCenter,,0,0,0,,but the No.2 is outside of the range
Dialogue: 0,0:16:11.00,0:16:13.89,BottomCenter,,0,0,0,,so it's including this starting value
Dialogue: 0,0:16:14.00,0:16:16.87,BottomCenter,,0,0,0,,but excluding the ending value
Dialogue: 0,0:16:17.92,0:16:19.37,BottomCenter,,0,0,0,,now what a quirky thing
Dialogue: 0,0:16:19.73,0:16:22.07,BottomCenter,,0,0,0,,well it actually makes a lot of things simpler
Dialogue: 0,0:16:22.07,0:16:22.97,BottomCenter,,0,0,0,,to do it exactly
Dialogue: 0,0:16:22.97,0:16:23.76,BottomCenter,,0,0,0,,that way
Dialogue: 0,0:16:24.52,0:16:26.57,BottomCenter,,0,0,0,,you can compute the length of a range
Dialogue: 0,0:16:26.57,0:16:27.92,BottomCenter,,0,0,0,,just by subtracting the
Dialogue: 0,0:16:27.92,0:16:29.97,BottomCenter,,0,0,0,,starting value from the ending value
Dialogue: 0,0:16:30.16,0:16:32.97,BottomCenter,,0,0,0,,so two minus negative two is four
Dialogue: 0,0:16:33.16,0:16:34.89,BottomCenter,,0,0,0,,and there are four elements here
Dialogue: 0,0:16:34.89,0:16:35.97,BottomCenter,,0,0,0,,as you can see
Dialogue: 0,0:16:37.50,0:16:39.37,BottomCenter,,0,0,0,,element selection is also easy
Dialogue: 0,0:16:39.52,0:16:42.52,BottomCenter,,0,0,0,,you just take the starting value and add the index
Dialogue: 0,0:16:42.60,0:16:44.12,BottomCenter,,0,0,0,,index is started zero
Dialogue: 0,0:16:44.33,0:16:46.97,BottomCenter,,0,0,0,,so the elemented index zero is -2
Dialogue: 0,0:16:47.16,0:16:48.73,BottomCenter,,0,0,0,,and the elemented index 3
Dialogue: 0,0:16:49.07,0:16:51.60,BottomCenter,,0,0,0,,is negative 2 plus three is one
Dialogue: 0,0:16:53.66,0:16:55.87,BottomCenter,,0,0,0,,okay so it has length an element selection
Dialogue: 0,0:16:55.87,0:16:57.47,BottomCenter,,0,0,0,,so it must be a sequence
Dialogue: 0,0:16:57.57,0:16:59.10,BottomCenter,,0,0,0,,even though it's not a list
Dialogue: 0,0:16:59.52,0:17:00.57,BottomCenter,,0,0,0,,now how do you convert
Dialogue: 0,0:17:00.57,0:17:02.79,BottomCenter,,0,0,0,,to a list if you want to see the elements
Dialogue: 0,0:17:03.12,0:17:03.92,BottomCenter,,0,0,0,,well
Dialogue: 0,0:17:04.40,0:17:06.56,BottomCenter,,0,0,0,,you can use what's called the list constructor
Dialogue: 0,0:17:06.56,0:17:08.26,BottomCenter,,0,0,0,,which is a built in function
Dialogue: 0,0:17:08.70,0:17:10.20,BottomCenter,,0,0,0,,cost just called list
Dialogue: 0,0:17:10.36,0:17:12.59,BottomCenter,,0,0,0,,and when you call it on any other sequence
Dialogue: 0,0:17:12.76,0:17:14.40,BottomCenter,,0,0,0,,it gives you back a list
Dialogue: 0,0:17:14.52,0:17:17.36,BottomCenter,,0,0,0,,full of the elements of that sequence
Dialogue: 0,0:17:18.56,0:17:20.47,BottomCenter,,0,0,0,,so a range isn't a list itself
Dialogue: 0,0:17:20.47,0:17:22.79,BottomCenter,,0,0,0,,but calling list on it does give you a list
Dialogue: 0,0:17:22.79,0:17:24.17,BottomCenter,,0,0,0,,of all those elements
Dialogue: 0,0:17:24.90,0:17:26.47,BottomCenter,,0,0,0,,that's the list constructor
Dialogue: 0,0:17:27.32,0:17:30.09,BottomCenter,,0,0,0,,now one special feature of ranges is that if you
Dialogue: 0,0:17:30.09,0:17:31.59,BottomCenter,,0,0,0,,leave out one of the numbers
Dialogue: 0,0:17:31.59,0:17:33.36,BottomCenter,,0,0,0,,so you only specify one number
Dialogue: 0,0:17:33.67,0:17:35.79,BottomCenter,,0,0,0,,that's treated as the ending value
Dialogue: 0,0:17:36.06,0:17:38.76,BottomCenter,,0,0,0,,with an implicit starting value of zero
Dialogue: 0,0:17:39.06,0:17:42.93,BottomCenter,,0,0,0,,so listing the range four is 0 1 2 3
Dialogue: 0,0:17:42.93,0:17:45.36,BottomCenter,,0,0,0,,including zero but excluding four
Dialogue: 0,0:17:49.09,0:17:49.76,BottomCenter,,0,0,0,,okay
Dialogue: 0,0:17:49.76,0:17:53.59,BottomCenter,,0,0,0,,so if I create a range from five to eight let's say
Dialogue: 0,0:17:53.97,0:17:56.17,BottomCenter,,0,0,0,,it's not a list it's a range
Dialogue: 0,0:17:56.90,0:18:01.06,BottomCenter,,0,0,0,,if I wanted a list I'd have to call list on that value
Dialogue: 0,0:18:01.26,0:18:01.90,BottomCenter,,0,0,0,,at which point
Dialogue: 0,0:18:01.90,0:18:04.13,BottomCenter,,0,0,0,,I'd see exactly what elements are in there
Dialogue: 0,0:18:04.40,0:18:06.06,BottomCenter,,0,0,0,,now if I know what a range is
Dialogue: 0,0:18:06.13,0:18:08.36,BottomCenter,,0,0,0,,I already knew that it was five six and seven
Dialogue: 0,0:18:08.79,0:18:10.90,BottomCenter,,0,0,0,,but if I ever wanted a check
Dialogue: 0,0:18:10.97,0:18:13.56,BottomCenter,,0,0,0,,and make sure that it included the starting
Dialogue: 0,0:18:13.56,0:18:16.40,BottomCenter,,0,0,0,,value but did not include the ending value
Dialogue: 0,0:18:16.40,0:18:18.00,BottomCenter,,0,0,0,,I could call list and
Dialogue: 0,0:18:18.26,0:18:19.93,BottomCenter,,0,0,0,,find out that for sure
Dialogue: 0,0:18:21.29,0:18:23.36,BottomCenter,,0,0,0,,now a range up to four
Dialogue: 0,0:18:24.06,0:18:26.79,BottomCenter,,0,0,0,,is a range starting at zero and going up to four
Dialogue: 0,0:18:27.00,0:18:28.79,BottomCenter,,0,0,0,,and if I list out those values
Dialogue: 0,0:18:28.79,0:18:31.97,BottomCenter,,0,0,0,,I'll see that it's zero one two and three
Dialogue: 0,0:18:33.20,0:18:35.73,BottomCenter,,0,0,0,,so what might we do with the range
Dialogue: 0,0:18:36.56,0:18:38.26,BottomCenter,,0,0,0,,well there are lots of cases when
Dialogue: 0,0:18:38.29,0:18:39.50,BottomCenter,,0,0,0,,the sequence you want
Dialogue: 0,0:18:39.50,0:18:43.13,BottomCenter,,0,0,0,,is exactly a sequence of increasing integers
Dialogue: 0,0:18:45.20,0:18:47.70,BottomCenter,,0,0,0,,so if I wanted to some all the integers below
Dialogue: 0,0:18:47.70,0:18:48.76,BottomCenter,,0,0,0,,some number n
Dialogue: 0,0:18:49.40,0:18:53.09,BottomCenter,,0,0,0,,I could do that by keeping track of the total
Dialogue: 0,0:18:54.29,0:18:56.59,BottomCenter,,0,0,0,,grabbing each element I
Dialogue: 0,0:18:57.00,0:19:00.93,BottomCenter,,0,0,0,,in the range up to but not including n
Dialogue: 0,0:19:01.56,0:19:04.09,BottomCenter,,0,0,0,,and changing total to be total plus I
Dialogue: 0,0:19:05.09,0:19:06.73,BottomCenter,,0,0,0,,and then returning the total
Dialogue: 0,0:19:11.56,0:19:15.09,BottomCenter,,0,0,0,,at which point if I some below five
Dialogue: 0,0:19:15.73,0:19:18.86,BottomCenter,,0,0,0,,I'll be adding one and two and three and four and zero
Dialogue: 0,0:19:19.09,0:19:20.20,BottomCenter,,0,0,0,,and that will give me tab
Dialogue: 0,0:19:24.13,0:19:28.52,BottomCenter,,0,0,0,,now there are cases when you actually don't care
Dialogue: 0,0:19:29.00,0:19:30.90,BottomCenter,,0,0,0,,about the integers themselves
Dialogue: 0,0:19:30.90,0:19:34.20,BottomCenter,,0,0,0,,you just want to do something a fixed number of times
Dialogue: 0,0:19:34.79,0:19:37.20,BottomCenter,,0,0,0,,so if for instance I wanted to
Dialogue: 0,0:19:38.86,0:19:39.67,BottomCenter,,0,0,0,,say
Dialogue: 0,0:19:40.50,0:19:41.86,BottomCenter,,0,0,0,,go bears
Dialogue: 0,0:19:44.26,0:19:47.90,BottomCenter,,0,0,0,,three times a typical way to write that
Dialogue: 0,0:19:47.93,0:19:50.40,BottomCenter,,0,0,0,,is a four statement like this
Dialogue: 0,0:19:52.06,0:19:54.93,BottomCenter,,0,0,0,,or if I now cheer it will say go bears go bears
Dialogue: 0,0:19:54.93,0:19:56.47,BottomCenter,,0,0,0,,go bears now
Dialogue: 0,0:19:56.47,0:19:56.90,BottomCenter,,0,0,0,,range
Dialogue: 0,0:19:56.90,0:19:59.59,BottomCenter,,0,0,0,,three means that there are three elements in range
Dialogue: 0,0:20:01.79,0:20:04.76,BottomCenter,,0,0,0,,and we are giving a name to each element but
Dialogue: 0,0:20:05.06,0:20:06.90,BottomCenter,,0,0,0,,we don't actually care what that name is
Dialogue: 0,0:20:06.90,0:20:08.76,BottomCenter,,0,0,0,,because we're not using it anywhere
Dialogue: 0,0:20:09.47,0:20:12.73,BottomCenter,,0,0,0,,so one convention is that you use a single underscore
Dialogue: 0,0:20:12.73,0:20:14.73,BottomCenter,,0,0,0,,character or a blank
Dialogue: 0,0:20:14.97,0:20:15.73,BottomCenter,,0,0,0,,just just
Dialogue: 0,0:20:15.73,0:20:17.97,BottomCenter,,0,0,0,,let other programmers know that you're not actually
Dialogue: 0,0:20:17.97,0:20:19.70,BottomCenter,,0,0,0,,going to use this name anywhere
Dialogue: 0,0:20:20.50,0:20:22.79,BottomCenter,,0,0,0,,it's okay if I put x there instead
Dialogue: 0,0:20:22.93,0:20:24.40,BottomCenter,,0,0,0,,but I'd never use that x
Dialogue: 0,0:20:24.40,0:20:26.67,BottomCenter,,0,0,0,,so it really doesn't matter what I put there at all
Dialogue: 0,0:20:27.00,0:20:29.90,BottomCenter,,0,0,0,,this is an indication that you just don't care
Dialogue: 0,0:20:31.36,0:20:33.32,BottomCenter,,0,0,0,,and we're going to do a one more example
Dialogue: 0,0:20:33.32,0:20:34.73,BottomCenter,,0,0,0,,and I'm going to have you do a couple of drills
Dialogue: 0,0:20:34.73,0:20:35.56,BottomCenter,,0,0,0,,I'm going to have you write
Dialogue: 0,0:20:35.56,0:20:37.00,BottomCenter,,0,0,0,,both an iterative and recursive
Dialogue: 0,0:20:37.00,0:20:37.90,BottomCenter,,0,0,0,,so you can see
Dialogue: 0,0:20:38.06,0:20:41.00,BottomCenter,,0,0,0,,how to think about these two things simultaneously
Dialogue: 0,0:20:41.73,0:20:43.97,BottomCenter,,0,0,0,,all right here's the first one I wanted us to work on
Dialogue: 0,0:20:44.79,0:20:48.09,BottomCenter,,0,0,0,,I would like us to write a recursive function my sum
Dialogue: 0,0:20:48.26,0:20:51.20,BottomCenter,,0,0,0,,that takes us input a list of numbers
Dialogue: 0,0:20:51.36,0:20:53.73,BottomCenter,,0,0,0,,and sums them all up and gives me the sum
Dialogue: 0,0:20:54.17,0:20:54.90,BottomCenter,,0,0,0,,ok
Dialogue: 0,0:20:54.90,0:20:55.52,BottomCenter,,0,0,0,,here's a nice drill
Dialogue: 0,0:20:55.52,0:20:57.70,BottomCenter,,0,0,0,,if you want to do one just do this iteratively
Dialogue: 0,0:20:57.97,0:20:58.86,BottomCenter,,0,0,0,,almost everything
Dialogue: 0,0:20:58.86,0:21:01.13,BottomCenter,,0,0,0,,we do recursively will have an iterative component
Dialogue: 0,0:21:01.13,0:21:02.13,BottomCenter,,0,0,0,,and vice versa
Dialogue: 0,0:21:02.26,0:21:03.36,BottomCenter,,0,0,0,,they may be a little bit easier
Dialogue: 0,0:21:03.36,0:21:04.52,BottomCenter,,0,0,0,,they may be a little bit harder
Dialogue: 0,0:21:04.52,0:21:05.79,BottomCenter,,0,0,0,,or they may be the same
Dialogue: 0,0:21:06.36,0:21:07.29,BottomCenter,,0,0,0,,so if you want to take a break
Dialogue: 0,0:21:07.29,0:21:08.59,BottomCenter,,0,0,0,,go ahead and do that and write this interview
Dialogue: 0,0:21:08.59,0:21:09.73,BottomCenter,,0,0,0,,it's a good exercise
Dialogue: 0,0:21:10.20,0:21:12.17,BottomCenter,,0,0,0,,okay so the first thing first
Dialogue: 0,0:21:12.17,0:21:12.73,BottomCenter,,0,0,0,,and look
Dialogue: 0,0:21:12.73,0:21:14.76,BottomCenter,,0,0,0,,this is always true no matter when you're writing code
Dialogue: 0,0:21:14.76,0:21:16.52,BottomCenter,,0,0,0,,but more so when you're writing or cursor code
Dialogue: 0,0:21:16.52,0:21:18.29,BottomCenter,,0,0,0,,you got to really think about
Dialogue: 0,0:21:18.47,0:21:20.00,BottomCenter,,0,0,0,,what is it that you want to do
Dialogue: 0,0:21:20.29,0:21:22.70,BottomCenter,,0,0,0,,so think about the recursive definition
Dialogue: 0,0:21:22.93,0:21:26.67,BottomCenter,,0,0,0,,two parts base case and then the recursive case
Dialogue: 0,0:21:26.67,0:21:27.59,BottomCenter,,0,0,0,,so what's the base case here
Dialogue: 0,0:21:27.59,0:21:29.13,BottomCenter,,0,0,0,,I can think of two possible
Dialogue: 0,0:21:29.26,0:21:29.59,BottomCenter,,0,0,0,,one is
Dialogue: 0,0:21:29.59,0:21:32.13,BottomCenter,,0,0,0,,I give you a list with only a single element in it
Dialogue: 0,0:21:32.17,0:21:35.17,BottomCenter,,0,0,0,,what is the sum of all the elements of that list
Dialogue: 0,0:21:35.36,0:21:36.47,BottomCenter,,0,0,0,,just that one element
Dialogue: 0,0:21:36.70,0:21:37.97,BottomCenter,,0,0,0,,what's the other base case
Dialogue: 0,0:21:38.13,0:21:41.86,BottomCenter,,0,0,0,,yeah just like before if the list is empty
Dialogue: 0,0:21:41.93,0:21:42.86,BottomCenter,,0,0,0,,let's do that one
Dialogue: 0,0:21:42.86,0:21:44.09,BottomCenter,,0,0,0,,that way we'll just go ahead and deal
Dialogue: 0,0:21:44.09,0:21:45.26,BottomCenter,,0,0,0,,with the empty list
Dialogue: 0,0:21:45.36,0:21:47.59,BottomCenter,,0,0,0,,well now you got to ask the question is what is
Dialogue: 0,0:21:47.70,0:21:49.06,BottomCenter,,0,0,0,,my sum of the empty list
Dialogue: 0,0:21:49.06,0:21:50.93,BottomCenter,,0,0,0,,I think it's reasonable to return zero
Dialogue: 0,0:21:50.93,0:21:53.67,BottomCenter,,0,0,0,,we can say the some of all of those elements is zero
Dialogue: 0,0:21:53.67,0:21:55.26,BottomCenter,,0,0,0,,so let's just go ahead and write the base case
Dialogue: 0,0:21:55.52,0:21:58.13,BottomCenter,,0,0,0,,if the list is equal to the empty list so
Dialogue: 0,0:21:58.70,0:21:59.67,BottomCenter,,0,0,0,,score back it score back it
Dialogue: 0,0:21:59.67,0:22:00.29,BottomCenter,,0,0,0,,I could have also said
Dialogue: 0,0:22:00.29,0:22:02.59,BottomCenter,,0,0,0,,if the length of the list is equal to zero
Dialogue: 0,0:22:02.79,0:22:03.59,BottomCenter,,0,0,0,,that would have
Dialogue: 0,0:22:04.06,0:22:05.67,BottomCenter,,0,0,0,,tested for the empty list as well
Dialogue: 0,0:22:05.76,0:22:07.47,BottomCenter,,0,0,0,,return do not
Dialogue: 0,0:22:07.47,0:22:10.86,BottomCenter,,0,0,0,,do not do not forget that you are returning values
Dialogue: 0,0:22:10.90,0:22:14.52,BottomCenter,,0,0,0,,because recursively you are building up an expression
Dialogue: 0,0:22:15.17,0:22:18.06,BottomCenter,,0,0,0,,as we saw with both factorial and with string reversal
Dialogue: 0,0:22:18.06,0:22:20.52,BottomCenter,,0,0,0,,so be really really careful here alright
Dialogue: 0,0:22:20.70,0:22:22.93,BottomCenter,,0,0,0,,recursive what's the recursive definition
Dialogue: 0,0:22:23.73,0:22:26.40,BottomCenter,,0,0,0,,well what does it mean to sum up two four one and five
Dialogue: 0,0:22:26.86,0:22:29.20,BottomCenter,,0,0,0,,well one way to think about it is
Dialogue: 0,0:22:29.56,0:22:33.29,BottomCenter,,0,0,0,,I the sum of all of these elements is two plus
Dialogue: 0,0:22:33.29,0:22:35.90,BottomCenter,,0,0,0,,well whatever the some of the rest of the list is
Dialogue: 0,0:22:35.97,0:22:38.06,BottomCenter,,0,0,0,,so I can just peel off that first element
Dialogue: 0,0:22:38.17,0:22:42.06,BottomCenter,,0,0,0,,hold on to it and add it to my sum up for one five
Dialogue: 0,0:22:42.13,0:22:43.32,BottomCenter,,0,0,0,,yeah that sounds about right
Dialogue: 0,0:22:43.32,0:22:45.86,BottomCenter,,0,0,0,,and by the way that sounds a lot like factorial
Dialogue: 0,0:22:46.06,0:22:47.90,BottomCenter,,0,0,0,,right and factorial as end times
Dialogue: 0,0:22:47.90,0:22:49.97,BottomCenter,,0,0,0,,whatever the answer is for everything else
Dialogue: 0,0:22:50.00,0:22:52.52,BottomCenter,,0,0,0,,so here instead of decorating a value I'm just taking
Dialogue: 0,0:22:52.67,0:22:53.93,BottomCenter,,0,0,0,,one element off the list
Dialogue: 0,0:22:53.93,0:22:54.97,BottomCenter,,0,0,0,,and then summing everything else
Dialogue: 0,0:22:54.97,0:22:56.76,BottomCenter,,0,0,0,,and that's sort of like what we did with reversal
Dialogue: 0,0:22:56.97,0:22:58.56,BottomCenter,,0,0,0,,we took one element off the list
Dialogue: 0,0:22:58.59,0:22:59.52,BottomCenter,,0,0,0,,we put it to the end
Dialogue: 0,0:22:59.52,0:23:01.59,BottomCenter,,0,0,0,,and then we reversed everything else up front
Dialogue: 0,0:23:01.73,0:23:02.67,BottomCenter,,0,0,0,,same thing here
Dialogue: 0,0:23:03.06,0:23:04.29,BottomCenter,,0,0,0,,all right so what I'm going to do is I'm going to
Dialogue: 0,0:23:04.29,0:23:05.93,BottomCenter,,0,0,0,,peel off that first element
Dialogue: 0,0:23:06.06,0:23:08.06,BottomCenter,,0,0,0,,and then I'm going to add that
Dialogue: 0,0:23:08.17,0:23:10.52,BottomCenter,,0,0,0,,to the recursive call of everything else
Dialogue: 0,0:23:10.52,0:23:12.79,BottomCenter,,0,0,0,,okay that should be pretty straightforward
Dialogue: 0,0:23:13.13,0:23:16.13,BottomCenter,,0,0,0,,so if l does the empty list return zero else
Dialogue: 0,0:23:16.36,0:23:18.40,BottomCenter,,0,0,0,,grab the zero element
Dialogue: 0,0:23:18.86,0:23:22.20,BottomCenter,,0,0,0,,and added to everything else recursively
Dialogue: 0,0:23:22.20,0:23:23.20,BottomCenter,,0,0,0,,called with my psalm
Dialogue: 0,0:23:23.20,0:23:26.00,BottomCenter,,0,0,0,,so it began the one colon operator says
Dialogue: 0,0:23:26.00,0:23:27.00,BottomCenter,,0,0,0,,starting at
Dialogue: 0,0:23:27.13,0:23:29.93,BottomCenter,,0,0,0,,position one which is the second element of the list
Dialogue: 0,0:23:30.06,0:23:31.32,BottomCenter,,0,0,0,,up until the end
Dialogue: 0,0:23:31.86,0:23:32.86,BottomCenter,,0,0,0,,grab that list
Dialogue: 0,0:23:32.93,0:23:34.90,BottomCenter,,0,0,0,,call my sum recursively
Dialogue: 0,0:23:34.90,0:23:36.86,BottomCenter,,0,0,0,,and then this will eventually return
Dialogue: 0,0:23:37.29,0:23:39.56,BottomCenter,,0,0,0,,four plus five plus one which is 10
Dialogue: 0,0:23:39.56,0:23:42.73,BottomCenter,,0,0,0,,and it'll add that to two and I'll have my answer
Dialogue: 0,0:23:42.73,0:23:45.52,BottomCenter,,0,0,0,,and again that return there is important
Dialogue: 0,0:23:45.52,0:23:47.47,BottomCenter,,0,0,0,,you are building an expression
Dialogue: 0,0:23:47.76,0:23:51.56,BottomCenter,,0,0,0,,you have to return something to the previous
Dialogue: 0,0:23:51.79,0:23:52.97,BottomCenter,,0,0,0,,function call
Dialogue: 0,0:23:53.06,0:23:56.26,BottomCenter,,0,0,0,,whether it's recursive or whoever called you from the
Dialogue: 0,0:23:56.67,0:23:57.47,BottomCenter,,0,0,0,,outside
Dialogue: 0,0:23:58.09,0:24:00.40,BottomCenter,,0,0,0,,all right let's make sure we understand how this works
Dialogue: 0,0:24:00.40,0:24:01.20,BottomCenter,,0,0,0,,so let's
Dialogue: 0,0:24:01.32,0:24:04.06,BottomCenter,,0,0,0,,walk through an example with this list with four
Dialogue: 0,0:24:04.06,0:24:07.20,BottomCenter,,0,0,0,,elements my sum of 2 4 1 5
Dialogue: 0,0:24:07.20,0:24:08.70,BottomCenter,,0,0,0,,all right let's go into the code
Dialogue: 0,0:24:08.79,0:24:09.90,BottomCenter,,0,0,0,,list isn't empty
Dialogue: 0,0:24:09.90,0:24:11.56,BottomCenter,,0,0,0,,so peel off the first element
Dialogue: 0,0:24:11.56,0:24:14.56,BottomCenter,,0,0,0,,and add it to the recursive call of everything else
Dialogue: 0,0:24:14.56,0:24:17.32,BottomCenter,,0,0,0,,so that's two plus my sum of 4 1 5
Dialogue: 0,0:24:17.86,0:24:19.50,BottomCenter,,0,0,0,,okay am I done no
Dialogue: 0,0:24:19.67,0:24:22.40,BottomCenter,,0,0,0,,I want to add two things but that is a function call
Dialogue: 0,0:24:22.40,0:24:24.36,BottomCenter,,0,0,0,,so I eventually have to go call some function
Dialogue: 0,0:24:24.50,0:24:25.59,BottomCenter,,0,0,0,,and get an answer
Dialogue: 0,0:24:25.59,0:24:26.79,BottomCenter,,0,0,0,,and then I can return
Dialogue: 0,0:24:27.17,0:24:29.09,BottomCenter,,0,0,0,,all right what's my sum of 4 1 5
Dialogue: 0,0:24:29.20,0:24:30.93,BottomCenter,,0,0,0,,come into here that's not empty
Dialogue: 0,0:24:30.97,0:24:32.09,BottomCenter,,0,0,0,,peel off the first element
Dialogue: 0,0:24:32.09,0:24:34.09,BottomCenter,,0,0,0,,make a recursive call with the next two element
Dialogue: 0,0:24:34.26,0:24:36.50,BottomCenter,,0,0,0,,four plus my sum of one five
Dialogue: 0,0:24:36.50,0:24:38.73,BottomCenter,,0,0,0,,am I done yet nope I still need this
Dialogue: 0,0:24:39.06,0:24:41.26,BottomCenter,,0,0,0,,peel off the first element recursive call
Dialogue: 0,0:24:41.32,0:24:43.29,BottomCenter,,0,0,0,,peel off the first element recursive call
Dialogue: 0,0:24:43.29,0:24:45.52,BottomCenter,,0,0,0,,aha you can see we're getting there by the way
Dialogue: 0,0:24:45.52,0:24:47.67,BottomCenter,,0,0,0,,now this little guy is done
Dialogue: 0,0:24:47.67,0:24:50.06,BottomCenter,,0,0,0,,why because it hits the base case
Dialogue: 0,0:24:50.32,0:24:52.32,BottomCenter,,0,0,0,,and notice the base case doesn't have to do any work
Dialogue: 0,0:24:52.32,0:24:53.50,BottomCenter,,0,0,0,,it hits the zero
Dialogue: 0,0:24:53.97,0:24:57.32,BottomCenter,,0,0,0,,so now five plus my some of the empty list says
Dialogue: 0,0:24:57.32,0:24:59.90,BottomCenter,,0,0,0,,please return zero to my some of the empty list
Dialogue: 0,0:24:59.90,0:25:02.20,BottomCenter,,0,0,0,,now I have an expression five
Dialogue: 0,0:25:02.67,0:25:05.20,BottomCenter,,0,0,0,,and now I have the answer to my sum of five
Dialogue: 0,0:25:05.26,0:25:08.06,BottomCenter,,0,0,0,,so I can pop that up to my sum of five
Dialogue: 0,0:25:08.20,0:25:11.93,BottomCenter,,0,0,0,,now I have an answer to my sum of one five it's six
Dialogue: 0,0:25:12.17,0:25:15.97,BottomCenter,,0,0,0,,now I have an answer to my sum of 4 1 5 it is 10
Dialogue: 0,0:25:16.06,0:25:20.67,BottomCenter,,0,0,0,,and now finally I have an answer which is 12
Dialogue: 0,0:25:21.70,0:25:22.36,BottomCenter,,0,0,0,,good
Dialogue: 0,0:25:22.36,0:25:23.36,BottomCenter,,0,0,0,,all right let's do a drill
Dialogue: 0,0:25:23.36,0:25:25.67,BottomCenter,,0,0,0,,I'm going to give you two back to back so
Dialogue: 0,0:25:25.97,0:25:28.67,BottomCenter,,0,0,0,,the first one is right and iterative function
Dialogue: 0,0:25:28.97,0:25:31.17,BottomCenter,,0,0,0,,that takes us input an integer end
Dialogue: 0,0:25:31.17,0:25:32.79,BottomCenter,,0,0,0,,just a number positive integer
Dialogue: 0,0:25:34.00,0:25:36.86,BottomCenter,,0,0,0,,and returns the sum of the first end integer
Dialogue: 0,0:25:36.86,0:25:38.26,BottomCenter,,0,0,0,,so some five for example
Dialogue: 0,0:25:38.26,0:25:40.40,BottomCenter,,0,0,0,,will return one plus two plus two plus four plus five
Dialogue: 0,0:25:40.47,0:25:42.36,BottomCenter,,0,0,0,,so this looks a lot like factorial
Dialogue: 0,0:25:42.56,0:25:45.70,BottomCenter,,0,0,0,,so do that please iteratively while loop four loop
Dialogue: 0,0:25:45.70,0:25:47.06,BottomCenter,,0,0,0,,I don't care how you do it
Dialogue: 0,0:25:47.29,0:25:48.97,BottomCenter,,0,0,0,,and then when you're done with that
Dialogue: 0,0:25:49.13,0:25:53.20,BottomCenter,,0,0,0,,please do exactly the same thing but do it recursively
Dialogue: 0,0:25:53.20,0:25:55.20,BottomCenter,,0,0,0,,okay so two drills back to back
Dialogue: 0,0:25:55.76,0:25:56.86,BottomCenter,,0,0,0,,go ahead and pause the video
Dialogue: 0,0:25:57.09,0:25:58.56,BottomCenter,,0,0,0,,take some time to do those two
Dialogue: 0,0:25:59.00,0:25:59.90,BottomCenter,,0,0,0,,I think the iterative
Dialogue: 0,0:26:00.00,0:26:01.56,BottomCenter,,0,0,0,,you should be able to do very quickly
Dialogue: 0,0:26:01.67,0:26:02.36,BottomCenter,,0,0,0,,and then again
Dialogue: 0,0:26:02.36,0:26:04.56,BottomCenter,,0,0,0,,think about the nature of the recursive call
Dialogue: 0,0:26:04.56,0:26:06.40,BottomCenter,,0,0,0,,base case recursive call
Dialogue: 0,0:26:06.50,0:26:09.20,BottomCenter,,0,0,0,,and then come back and we'll do both solutions to this
Dialogue: 0,0:26:12.17,0:26:15.26,BottomCenter,,0,0,0,,all right I hope you got the answer to both of those
Dialogue: 0,0:26:15.56,0:26:17.32,BottomCenter,,0,0,0,,so let me show you my solution
Dialogue: 0,0:26:17.73,0:26:19.32,BottomCenter,,0,0,0,,uh the iterative one
Dialogue: 0,0:26:19.59,0:26:20.76,BottomCenter,,0,0,0,,uh so some iter
Dialogue: 0,0:26:20.76,0:26:23.00,BottomCenter,,0,0,0,,I'm gonna just distinguish between the two types of uh
Dialogue: 0,0:26:23.00,0:26:24.52,BottomCenter,,0,0,0,,functions takes as input and
Dialogue: 0,0:26:24.52,0:26:25.90,BottomCenter,,0,0,0,,and again I'm not gonna check whether I'm
Dialogue: 0,0:26:25.90,0:26:26.76,BottomCenter,,0,0,0,,as a positive integra
Dialogue: 0,0:26:26.76,0:26:27.97,BottomCenter,,0,0,0,,we won't worry about that
Dialogue: 0,0:26:28.06,0:26:30.70,BottomCenter,,0,0,0,,I'm going to initialize a variable to be some
Dialogue: 0,0:26:31.17,0:26:31.40,BottomCenter,,0,0,0,,sorry
Dialogue: 0,0:26:31.40,0:26:34.09,BottomCenter,,0,0,0,,I'm gonna initialize a variable called some to be zero
Dialogue: 0,0:26:34.20,0:26:35.79,BottomCenter,,0,0,0,,and then I'm going to iterate
Dialogue: 0,0:26:36.17,0:26:38.17,BottomCenter,,0,0,0,,between the value zero and n
Dialogue: 0,0:26:38.17,0:26:40.00,BottomCenter,,0,0,0,,notice here this is an off by one
Dialogue: 0,0:26:40.00,0:26:41.70,BottomCenter,,0,0,0,,error that may have bit some of you
Dialogue: 0,0:26:41.93,0:26:43.79,BottomCenter,,0,0,0,,if I want to use a for loop
Dialogue: 0,0:26:44.47,0:26:46.26,BottomCenter,,0,0,0,,iterating between zero and n
Dialogue: 0,0:26:46.26,0:26:48.00,BottomCenter,,0,0,0,,I have to go from zero to n plus one
Dialogue: 0,0:26:48.00,0:26:50.79,BottomCenter,,0,0,0,,because this last value is non inclusive
Dialogue: 0,0:26:51.50,0:26:53.06,BottomCenter,,0,0,0,,so the value of I
Dialogue: 0,0:26:53.13,0:26:54.93,BottomCenter,,0,0,0,,inside the body of the for
Dialogue: 0,0:26:54.93,0:26:57.50,BottomCenter,,0,0,0,,loop will take on the value 0 1 2 3 4
Dialogue: 0,0:26:57.50,0:27:00.29,BottomCenter,,0,0,0,,up until n what do I want to do with those
Dialogue: 0,0:27:00.36,0:27:01.56,BottomCenter,,0,0,0,,I want to sum them up
Dialogue: 0,0:27:01.73,0:27:04.09,BottomCenter,,0,0,0,,so I'm going to say some is equal to the previous sum
Dialogue: 0,0:27:04.09,0:27:07.00,BottomCenter,,0,0,0,,plus I noticed by the way unlike factorial
Dialogue: 0,0:27:07.17,0:27:09.59,BottomCenter,,0,0,0,,where we initialize the effectorily the b one
Dialogue: 0,0:27:09.59,0:27:11.76,BottomCenter,,0,0,0,,because we are computing products
Dialogue: 0,0:27:11.76,0:27:13.90,BottomCenter,,0,0,0,,and one is the identity for product
Dialogue: 0,0:27:14.00,0:27:16.70,BottomCenter,,0,0,0,,in some of course we have to initialize it zero
Dialogue: 0,0:27:16.90,0:27:21.97,BottomCenter,,0,0,0,,okay so running some each iteration we add 0 1 2 3 4 5
Dialogue: 0,0:27:22.00,0:27:23.79,BottomCenter,,0,0,0,,and then eventually we return some
Dialogue: 0,0:27:23.79,0:27:25.17,BottomCenter,,0,0,0,,at the very end here
Dialogue: 0,0:27:25.20,0:27:26.93,BottomCenter,,0,0,0,,and relatively straightforward
Dialogue: 0,0:27:27.00,0:27:28.52,BottomCenter,,0,0,0,,now you may have done a little while loop
Dialogue: 0,0:27:28.56,0:27:29.67,BottomCenter,,0,0,0,,perfectly fine
Dialogue: 0,0:27:30.13,0:27:32.26,BottomCenter,,0,0,0,,I would argue the four loops probably cleaner
Dialogue: 0,0:27:32.26,0:27:34.13,BottomCenter,,0,0,0,,because if you're counting integers from
Dialogue: 0,0:27:34.13,0:27:35.36,BottomCenter,,0,0,0,,zero to some number
Dialogue: 0,0:27:35.67,0:27:37.20,BottomCenter,,0,0,0,,there's no reason for you to do with a wildlife
Dialogue: 0,0:27:37.20,0:27:39.20,BottomCenter,,0,0,0,,there's no reason for you to initialize a variable
Dialogue: 0,0:27:39.73,0:27:41.79,BottomCenter,,0,0,0,,do the condition and then increment the variable
Dialogue: 0,0:27:42.00,0:27:43.52,BottomCenter,,0,0,0,,let python do the hard work for you
Dialogue: 0,0:27:43.52,0:27:45.26,BottomCenter,,0,0,0,,so I would argue probably the four
Dialogue: 0,0:27:45.32,0:27:48.32,BottomCenter,,0,0,0,,version of this is a little tighter and a little meter
Dialogue: 0,0:27:48.76,0:27:52.00,BottomCenter,,0,0,0,,because it fits very nicely into what exactly range
Dialogue: 0,0:27:52.29,0:27:53.20,BottomCenter,,0,0,0,,designs for you
Dialogue: 0,0:27:53.76,0:27:57.36,BottomCenter,,0,0,0,,okay let's do now the recursive definition
Dialogue: 0,0:27:58.59,0:27:59.86,BottomCenter,,0,0,0,,base case is easy
Dialogue: 0,0:28:00.47,0:28:02.26,BottomCenter,,0,0,0,,if end is zero return zero
Dialogue: 0,0:28:02.26,0:28:05.86,BottomCenter,,0,0,0,,right so if I ask you to sum the the first zero numbers
Dialogue: 0,0:28:06.00,0:28:07.47,BottomCenter,,0,0,0,,I'm done there's nothing to do
Dialogue: 0,0:28:07.47,0:28:09.06,BottomCenter,,0,0,0,,okay good so that's easy
Dialogue: 0,0:28:09.29,0:28:11.47,BottomCenter,,0,0,0,,so what's the recursive definition
Dialogue: 0,0:28:11.52,0:28:12.52,BottomCenter,,0,0,0,,well let's see
Dialogue: 0,0:28:12.97,0:28:16.59,BottomCenter,,0,0,0,,the sum of n is
Dialogue: 0,0:28:17.97,0:28:19.00,BottomCenter,,0,0,0,,let's start from this side
Dialogue: 0,0:28:19.00,0:28:20.50,BottomCenter,,0,0,0,,five plus four plus two three one
Dialogue: 0,0:28:20.56,0:28:23.56,BottomCenter,,0,0,0,,so surely we can agree that that's five plus
Dialogue: 0,0:28:23.56,0:28:25.76,BottomCenter,,0,0,0,,the recursion of four
Dialogue: 0,0:28:26.17,0:28:27.56,BottomCenter,,0,0,0,,and four is four
Dialogue: 0,0:28:27.97,0:28:30.17,BottomCenter,,0,0,0,,the recursion call recursive call of three
Dialogue: 0,0:28:30.20,0:28:31.59,BottomCenter,,0,0,0,,it's exactly like factorial
Dialogue: 0,0:28:31.59,0:28:34.00,BottomCenter,,0,0,0,,it's just that we're summing instead of multiplying
Dialogue: 0,0:28:34.00,0:28:34.86,BottomCenter,,0,0,0,,okay good
Dialogue: 0,0:28:34.93,0:28:37.00,BottomCenter,,0,0,0,,so let's see what that recursive call looks like
Dialogue: 0,0:28:37.17,0:28:40.40,BottomCenter,,0,0,0,,so if n is not zero I'm going to take the number n
Dialogue: 0,0:28:40.52,0:28:42.59,BottomCenter,,0,0,0,,and I'm going to add it not multiply
Dialogue: 0,0:28:42.59,0:28:44.79,BottomCenter,,0,0,0,,to a recursive call of n minus one
Dialogue: 0,0:28:45.40,0:28:46.29,BottomCenter,,0,0,0,,and eventually
Dialogue: 0,0:28:46.76,0:28:48.52,BottomCenter,,0,0,0,,so I'll make a recursive call here
Dialogue: 0,0:28:48.52,0:28:51.09,BottomCenter,,0,0,0,,I'll keep building up the expression so it'll be n
Dialogue: 0,0:28:51.32,0:28:52.47,BottomCenter,,0,0,0,,plus n minus one
Dialogue: 0,0:28:52.47,0:28:54.76,BottomCenter,,0,0,0,,plus n minus two boot all the way down
Dialogue: 0,0:28:55.17,0:28:57.17,BottomCenter,,0,0,0,,until we hit the zero
Dialogue: 0,0:28:57.32,0:28:58.29,BottomCenter,,0,0,0,,the base case
Dialogue: 0,0:28:58.59,0:29:00.36,BottomCenter,,0,0,0,,okay good I hope you got that
Dialogue: 0,0:29:00.36,0:29:02.79,BottomCenter,,0,0,0,,by the way some of you may be getting errors in
Dialogue: 0,0:29:03.26,0:29:05.97,BottomCenter,,0,0,0,,python or jupiter notebook saying recursion
Dialogue: 0,0:29:07.00,0:29:08.20,BottomCenter,,0,0,0,,length exceeded
Dialogue: 0,0:29:08.32,0:29:11.13,BottomCenter,,0,0,0,,that's because it's sort of like an infinite loop
Dialogue: 0,0:29:11.32,0:29:14.00,BottomCenter,,0,0,0,,you keep going recursive recursive recursive calls
Dialogue: 0,0:29:14.00,0:29:15.76,BottomCenter,,0,0,0,,and it's not catching your base case
Dialogue: 0,0:29:15.90,0:29:17.97,BottomCenter,,0,0,0,,it's sort of the equivalent and iteration of that
Dialogue: 0,0:29:17.97,0:29:19.47,BottomCenter,,0,0,0,,you're not stopping the loop
Dialogue: 0,0:29:19.67,0:29:21.47,BottomCenter,,0,0,0,,and that just means something's wrong with your logic
Dialogue: 0,0:29:21.47,0:29:22.86,BottomCenter,,0,0,0,,or you have a little bit of bug in your code
Dialogue: 0,0:29:22.86,0:29:23.86,BottomCenter,,0,0,0,,so if you're seeing this
Dialogue: 0,0:29:24.50,0:29:29.47,BottomCenter,,0,0,0,,stack overflow or cube blown out or recursion limit
Dialogue: 0,0:29:29.59,0:29:31.50,BottomCenter,,0,0,0,,exceeded something is wrong
Dialogue: 0,0:29:31.50,0:29:33.86,BottomCenter,,0,0,0,,with the stopping condition on your code
Dialogue: 0,0:29:34.17,0:29:34.93,BottomCenter,,0,0,0,,all right now
Dialogue: 0,0:29:34.93,0:29:35.70,BottomCenter,,0,0,0,,at this point
Dialogue: 0,0:29:35.70,0:29:37.67,BottomCenter,,0,0,0,,we've seen a number of examples of recursive calls
Dialogue: 0,0:29:37.67,0:29:39.47,BottomCenter,,0,0,0,,and I'll be the first one to admit that they are
Dialogue: 0,0:29:39.50,0:29:40.73,BottomCenter,,0,0,0,,relatively straightforward
Dialogue: 0,0:29:40.76,0:29:42.93,BottomCenter,,0,0,0,,and there's no obvious benefit
Dialogue: 0,0:29:43.20,0:29:46.09,BottomCenter,,0,0,0,,to doing something recursively over iterative
Dialogue: 0,0:29:46.70,0:29:47.90,BottomCenter,,0,0,0,,and the last example I'm going to show you
Dialogue: 0,0:29:47.90,0:29:49.20,BottomCenter,,0,0,0,,I want to show you the power
Dialogue: 0,0:29:49.20,0:29:52.17,BottomCenter,,0,0,0,,the really the true power and beauty of recursion
Dialogue: 0,0:29:52.29,0:29:53.40,BottomCenter,,0,0,0,,and we are going to solve a
Dialogue: 0,0:29:53.40,0:29:55.52,BottomCenter,,0,0,0,,fairly complex problem recursively
Dialogue: 0,0:29:55.67,0:29:56.70,BottomCenter,,0,0,0,,and you're going to see how
Dialogue: 0,0:29:56.70,0:29:59.17,BottomCenter,,0,0,0,,truly elegant recursion can be when it's done very
Dialogue: 0,0:29:59.17,0:29:59.52,BottomCenter,,0,0,0,,very well
Dialogue: 0,0:29:59.52,0:30:01.52,BottomCenter,,0,0,0,,so we'll pick it up in a little bit when we come back
Dialogue: 0,0:30:03.79,0:30:06.06,BottomCenter,,0,0,0,,list comprehensions
Dialogue: 0,0:30:06.13,0:30:07.76,BottomCenter,,0,0,0,,are a powerful form
Dialogue: 0,0:30:07.76,0:30:10.70,BottomCenter,,0,0,0,,of combination in the python language
Dialogue: 0,0:30:11.59,0:30:13.59,BottomCenter,,0,0,0,,and a list comprehension
Dialogue: 0,0:30:14.09,0:30:15.93,BottomCenter,,0,0,0,,like the one that you see here
Dialogue: 0,0:30:16.50,0:30:17.97,BottomCenter,,0,0,0,,on this 2nd line
Dialogue: 0,0:30:19.06,0:30:22.40,BottomCenter,,0,0,0,,takes an existing list in this case a list of numbers
Dialogue: 0,0:30:23.56,0:30:26.29,BottomCenter,,0,0,0,,and computes a new list from it
Dialogue: 0,0:30:26.86,0:30:28.97,BottomCenter,,0,0,0,,according to some expression
Dialogue: 0,0:30:30.29,0:30:33.59,BottomCenter,,0,0,0,,so this one built a list out of the letter's eye
Dialogue: 0,0:30:33.93,0:30:36.17,BottomCenter,,0,0,0,,for every eye in 3468
Dialogue: 0,0:30:36.29,0:30:39.56,BottomCenter,,0,0,0,,where letters is the sequence of letters which gives me
Dialogue: 0,0:30:39.73,0:30:42.86,BottomCenter,,0,0,0,,demo oh time for a demo
Dialogue: 0,0:30:44.20,0:30:45.32,BottomCenter,,0,0,0,,let's start simple
Dialogue: 0,0:30:45.93,0:30:48.50,BottomCenter,,0,0,0,,I'll create a list called odds
Dialogue: 0,0:30:49.47,0:30:52.17,BottomCenter,,0,0,0,,with one three five seven and nine in it
Dialogue: 0,0:30:53.06,0:30:56.20,BottomCenter,,0,0,0,,now a list comprehension can state
Dialogue: 0,0:30:56.29,0:30:59.47,BottomCenter,,0,0,0,,I want to computer list that is x plus one
Dialogue: 0,0:30:59.67,0:31:01.70,BottomCenter,,0,0,0,,for every x in odds
Dialogue: 0,0:31:02.56,0:31:05.17,BottomCenter,,0,0,0,,and that will give me 2 4 6 8 10
Dialogue: 0,0:31:05.59,0:31:08.79,BottomCenter,,0,0,0,,where one became two and three became four etc
Dialogue: 0,0:31:09.79,0:31:10.86,BottomCenter,,0,0,0,,and this happened
Dialogue: 0,0:31:10.86,0:31:12.52,BottomCenter,,0,0,0,,by evaluating the x plus one
Dialogue: 0,0:31:12.52,0:31:14.20,BottomCenter,,0,0,0,,expression over and over again
Dialogue: 0,0:31:14.56,0:31:17.52,BottomCenter,,0,0,0,,with x bound to each of these in turn
Dialogue: 0,0:31:19.67,0:31:22.09,BottomCenter,,0,0,0,,there's a more complicated form
Dialogue: 0,0:31:23.17,0:31:24.93,BottomCenter,,0,0,0,,of a list comprehension
Dialogue: 0,0:31:25.97,0:31:28.36,BottomCenter,,0,0,0,,that includes not only an expression
Dialogue: 0,0:31:28.36,0:31:30.00,BottomCenter,,0,0,0,,of how to compute gentlemen
Dialogue: 0,0:31:32.52,0:31:33.36,BottomCenter,,0,0,0,,a name
Dialogue: 0,0:31:33.79,0:31:36.32,BottomCenter,,0,0,0,,and then the sequence that you want to compute over
Dialogue: 0,0:31:36.90,0:31:37.97,BottomCenter,,0,0,0,,but also
Dialogue: 0,0:31:38.73,0:31:42.13,BottomCenter,,0,0,0,,the word if followed by some condition
Dialogue: 0,0:31:42.67,0:31:47.13,BottomCenter,,0,0,0,,such as saying 25% x equals zero
Dialogue: 0,0:31:48.56,0:31:53.50,BottomCenter,,0,0,0,,which means I only want to keep an element x if
Dialogue: 0,0:31:53.90,0:31:57.17,BottomCenter,,0,0,0,,it's the case that x divides evenly
Dialogue: 0,0:31:57.56,0:31:58.76,BottomCenter,,0,0,0,,into the number 25
Dialogue: 0,0:31:59.20,0:32:02.52,BottomCenter,,0,0,0,,so 25 divided by x has a remainder of zero
Dialogue: 0,0:32:02.56,0:32:05.73,BottomCenter,,0,0,0,,using the remainder operator or modulo operator
Dialogue: 0,0:32:07.29,0:32:09.73,BottomCenter,,0,0,0,,so one goes into 25 25 times
Dialogue: 0,0:32:09.73,0:32:12.40,BottomCenter,,0,0,0,,five goes into twenty five five times
Dialogue: 0,0:32:12.47,0:32:16.09,BottomCenter,,0,0,0,,but three seven and nine don't evenly divide 25
Dialogue: 0,0:32:17.09,0:32:18.06,BottomCenter,,0,0,0,,so this
Dialogue: 0,0:32:19.06,0:32:21.09,BottomCenter,,0,0,0,,part of the list comprehension
Dialogue: 0,0:32:21.17,0:32:22.32,BottomCenter,,0,0,0,,lets me select
Dialogue: 0,0:32:22.40,0:32:25.00,BottomCenter,,0,0,0,,only part of the list that I want to keep around
Dialogue: 0,0:32:26.52,0:32:29.90,BottomCenter,,0,0,0,,and I can have interesting combinations of these
Dialogue: 0,0:32:30.09,0:32:32.67,BottomCenter,,0,0,0,,so I could say I want x plus one
Dialogue: 0,0:32:32.70,0:32:35.26,BottomCenter,,0,0,0,,for these elements that evenly defy 25
Dialogue: 0,0:32:35.36,0:32:36.86,BottomCenter,,0,0,0,,and then I won't get 1 in 5
Dialogue: 0,0:32:36.86,0:32:38.97,BottomCenter,,0,0,0,,but instead I'll get two and six
Dialogue: 0,0:32:39.93,0:32:41.76,BottomCenter,,0,0,0,,so those are list comprehensions
Dialogue: 0,0:32:42.86,0:32:45.17,BottomCenter,,0,0,0,,I can certainly put them inside of a function
Dialogue: 0,0:32:45.67,0:32:47.67,BottomCenter,,0,0,0,,so for example I might have
Dialogue: 0,0:32:47.79,0:32:50.73,BottomCenter,,0,0,0,,a function that computes the devices
Dialogue: 0,0:32:51.06,0:32:52.86,BottomCenter,,0,0,0,,of some number n
Dialogue: 0,0:32:53.70,0:32:55.00,BottomCenter,,0,0,0,,and how would it do it
Dialogue: 0,0:32:55.32,0:32:56.73,BottomCenter,,0,0,0,,well it would just return
Dialogue: 0,0:32:57.50,0:32:59.26,BottomCenter,,0,0,0,,one which divides everything
Dialogue: 0,0:32:59.67,0:33:00.52,BottomCenter,,0,0,0,,and then
Dialogue: 0,0:33:01.40,0:33:04.97,BottomCenter,,0,0,0,,x for x in the range from two all the way up to
Dialogue: 0,0:33:04.97,0:33:06.36,BottomCenter,,0,0,0,,but not including in
Dialogue: 0,0:33:09.36,0:33:10.52,BottomCenter,,0,0,0,,if it's the case
Dialogue: 0,0:33:10.93,0:33:11.73,BottomCenter,,0,0,0,,that
Dialogue: 0,0:33:12.47,0:33:14.73,BottomCenter,,0,0,0,,end divided by x equals zero
Dialogue: 0,0:33:17.70,0:33:19.86,BottomCenter,,0,0,0,,so what are the devices of one well just one
Dialogue: 0,0:33:19.86,0:33:21.36,BottomCenter,,0,0,0,,that's kind of a special case
Dialogue: 0,0:33:21.56,0:33:22.59,BottomCenter,,0,0,0,,how about four
Dialogue: 0,0:33:22.79,0:33:24.26,BottomCenter,,0,0,0,,well you have one and two
Dialogue: 0,0:33:24.86,0:33:26.93,BottomCenter,,0,0,0,,what about nine you have one and three
Dialogue: 0,0:33:27.09,0:33:29.32,BottomCenter,,0,0,0,,what about eight you have one two and four
Dialogue: 0,0:33:29.40,0:33:30.76,BottomCenter,,0,0,0,,twelve has even more
Dialogue: 0,0:33:31.50,0:33:33.47,BottomCenter,,0,0,0,,18 has several devices
Dialogue: 0,0:33:33.47,0:33:35.56,BottomCenter,,0,0,0,,and these are all the integers that
Dialogue: 0,0:33:36.59,0:33:38.79,BottomCenter,,0,0,0,,evenly divide some number n
Dialogue: 0,0:33:40.93,0:33:42.86,BottomCenter,,0,0,0,,strings are my favorite
Dialogue: 0,0:33:43.56,0:33:45.20,BottomCenter,,0,0,0,,strings are an abstraction
Dialogue: 0,0:33:45.40,0:33:48.00,BottomCenter,,0,0,0,,a representation of textual data
Dialogue: 0,0:33:49.00,0:33:51.17,BottomCenter,,0,0,0,,I call them an abstraction because we don't care
Dialogue: 0,0:33:51.17,0:33:53.73,BottomCenter,,0,0,0,,about the details of exactly how they're encoded
Dialogue: 0,0:33:54.73,0:33:56.70,BottomCenter,,0,0,0,,but they do represent information
Dialogue: 0,0:33:57.00,0:33:58.76,BottomCenter,,0,0,0,,they can represent numbers
Dialogue: 0,0:33:58.76,0:33:59.79,BottomCenter,,0,0,0,,and the way we write
Dialogue: 0,0:33:59.79,0:34:01.97,BottomCenter,,0,0,0,,numbers can all be represented with the string
Dialogue: 0,0:34:01.97,0:34:03.79,BottomCenter,,0,0,0,,here we have scientific notation
Dialogue: 0,0:34:03.93,0:34:05.50,BottomCenter,,0,0,0,,here we have some point
Dialogue: 0,0:34:05.67,0:34:07.76,BottomCenter,,0,0,0,,and all of these are just strings that somehow
Dialogue: 0,0:34:07.76,0:34:08.96,BottomCenter,,0,0,0,,tell us information
Dialogue: 0,0:34:09.40,0:34:11.00,BottomCenter,,0,0,0,,they can represent language
Dialogue: 0,0:34:11.50,0:34:13.40,BottomCenter,,0,0,0,,and as imagination
Dialogue: 0,0:34:13.40,0:34:16.13,BottomCenter,,0,0,0,,bodies forth the forms of things to unknown
Dialogue: 0,0:34:16.13,0:34:17.40,BottomCenter,,0,0,0,,and the poet's pen
Dialogue: 0,0:34:17.59,0:34:20.50,BottomCenter,,0,0,0,,turns them to shapes and gives to airy nothing
Dialogue: 0,0:34:20.57,0:34:23.26,BottomCenter,,0,0,0,,a local habitation and a name
Dialogue: 0,0:34:24.13,0:34:27.40,BottomCenter,,0,0,0,,I think when shakespeare wrote midsummer night's dream
Dialogue: 0,0:34:27.57,0:34:32.13,BottomCenter,,0,0,0,,he was talking about computer science and abstraction
Dialogue: 0,0:34:33.59,0:34:36.17,BottomCenter,,0,0,0,,you can also use strings to represent programs
Dialogue: 0,0:34:36.30,0:34:39.26,BottomCenter,,0,0,0,,so here's a string that defines the curry function
Dialogue: 0,0:34:39.73,0:34:42.46,BottomCenter,,0,0,0,,and python source files are just strings
Dialogue: 0,0:34:42.46,0:34:45.19,BottomCenter,,0,0,0,,so if I put this in a source file and executed it
Dialogue: 0,0:34:45.32,0:34:47.92,BottomCenter,,0,0,0,,then I would have defined the curry function
Dialogue: 0,0:34:48.53,0:34:49.57,BottomCenter,,0,0,0,,and by the way
Dialogue: 0,0:34:49.76,0:34:54.07,BottomCenter,,0,0,0,,if I start a python and create exactly that string
Dialogue: 0,0:34:54.30,0:34:55.96,BottomCenter,,0,0,0,,curry lamb the f
Dialogue: 0,0:34:56.32,0:34:59.36,BottomCenter,,0,0,0,,lamb the x lamb the y
Dialogue: 0,0:34:59.76,0:35:01.59,BottomCenter,,0,0,0,,f of x combo y
Dialogue: 0,0:35:03.73,0:35:04.96,BottomCenter,,0,0,0,,it's just a string
Dialogue: 0,0:35:05.36,0:35:08.17,BottomCenter,,0,0,0,,but if I execute that string
Dialogue: 0,0:35:08.90,0:35:11.26,BottomCenter,,0,0,0,,well then I've just defined curry
Dialogue: 0,0:35:15.53,0:35:17.53,BottomCenter,,0,0,0,,and if I curry the add function
Dialogue: 0,0:35:17.67,0:35:20.13,BottomCenter,,0,0,0,,using what was just a string before
Dialogue: 0,0:35:20.86,0:35:23.90,BottomCenter,,0,0,0,,I can in fact add numbers together
Dialogue: 0,0:35:25.17,0:35:27.13,BottomCenter,,0,0,0,,so some details about strings
Dialogue: 0,0:35:27.13,0:35:28.19,BottomCenter,,0,0,0,,that you may have discovered
Dialogue: 0,0:35:28.19,0:35:29.40,BottomCenter,,0,0,0,,already throughout the course
Dialogue: 0,0:35:29.40,0:35:30.69,BottomCenter,,0,0,0,,but I'll go through them now
Dialogue: 0,0:35:31.86,0:35:34.40,BottomCenter,,0,0,0,,there's three different ways to write down a string
Dialogue: 0,0:35:34.86,0:35:36.50,BottomCenter,,0,0,0,,I can use single quotes
Dialogue: 0,0:35:36.86,0:35:38.50,BottomCenter,,0,0,0,,I can use double quotes
Dialogue: 0,0:35:38.80,0:35:39.92,BottomCenter,,0,0,0,,and they're the same
Dialogue: 0,0:35:39.96,0:35:42.13,BottomCenter,,0,0,0,,except for that if you put an apostrophe
Dialogue: 0,0:35:42.36,0:35:44.13,BottomCenter,,0,0,0,,in the middle of a double quoted string
Dialogue: 0,0:35:44.13,0:35:45.46,BottomCenter,,0,0,0,,it works out fine
Dialogue: 0,0:35:46.00,0:35:47.50,BottomCenter,,0,0,0,,but if you do that in the middle of a
Dialogue: 0,0:35:47.50,0:35:48.80,BottomCenter,,0,0,0,,single quoted string
Dialogue: 0,0:35:49.19,0:35:50.53,BottomCenter,,0,0,0,,well then it would end the string
Dialogue: 0,0:35:51.67,0:35:52.30,BottomCenter,,0,0,0,,you don't have to
Dialogue: 0,0:35:52.30,0:35:54.30,BottomCenter,,0,0,0,,just put English characters in the string
Dialogue: 0,0:35:54.80,0:35:55.59,BottomCenter,,0,0,0,,nehal
Dialogue: 0,0:35:56.13,0:35:57.17,BottomCenter,,0,0,0,,is fine
Dialogue: 0,0:35:58.17,0:36:00.96,BottomCenter,,0,0,0,,single quoted and double quoted strings are equivalent
Dialogue: 0,0:36:01.90,0:36:03.67,BottomCenter,,0,0,0,,a triple quoted string
Dialogue: 0,0:36:04.90,0:36:06.69,BottomCenter,,0,0,0,,can span multiple lines
Dialogue: 0,0:36:07.17,0:36:09.40,BottomCenter,,0,0,0,,so I use those a lot for dock strings
Dialogue: 0,0:36:09.53,0:36:11.09,BottomCenter,,0,0,0,,because a lot of times
Dialogue: 0,0:36:11.09,0:36:12.92,BottomCenter,,0,0,0,,dock strings will extend the multiple lines
Dialogue: 0,0:36:12.92,0:36:14.36,BottomCenter,,0,0,0,,when you add dock tests
Dialogue: 0,0:36:15.96,0:36:18.90,BottomCenter,,0,0,0,,now when I evaluate this multiple line string
Dialogue: 0,0:36:19.40,0:36:22.50,BottomCenter,,0,0,0,,when it shows me at the end all fits on one line
Dialogue: 0,0:36:23.76,0:36:25.13,BottomCenter,,0,0,0,,and what's happened is
Dialogue: 0,0:36:25.17,0:36:27.50,BottomCenter,,0,0,0,,it's used a special symbol to encode
Dialogue: 0,0:36:27.50,0:36:30.00,BottomCenter,,0,0,0,,the end of one line at the beginning of another
Dialogue: 0,0:36:30.36,0:36:32.00,BottomCenter,,0,0,0,,this is called a line feed
Dialogue: 0,0:36:33.00,0:36:36.53,BottomCenter,,0,0,0,,so whenever you see a backslash inside of a line
Dialogue: 0,0:36:36.90,0:36:39.07,BottomCenter,,0,0,0,,that escapes the following character
Dialogue: 0,0:36:39.69,0:36:42.57,BottomCenter,,0,0,0,,and what that means is that the two characters together
Dialogue: 0,0:36:42.92,0:36:45.67,BottomCenter,,0,0,0,,the backslash and the following character
Dialogue: 0,0:36:46.00,0:36:50.19,BottomCenter,,0,0,0,,really are just one thing in the sequence of letters
Dialogue: 0,0:36:50.19,0:36:51.57,BottomCenter,,0,0,0,,that is the string
Dialogue: 0,0:36:52.17,0:36:55.92,BottomCenter,,0,0,0,,and this backslash n means line feed which means
Dialogue: 0,0:36:56.26,0:36:57.46,BottomCenter,,0,0,0,,start a new line
Dialogue: 0,0:36:58.96,0:37:00.40,BottomCenter,,0,0,0,,strings or sequences
Dialogue: 0,0:37:00.67,0:37:02.32,BottomCenter,,0,0,0,,the length and element selection
Dialogue: 0,0:37:03.09,0:37:05.40,BottomCenter,,0,0,0,,operations are similar to what you'd expect
Dialogue: 0,0:37:05.90,0:37:08.67,BottomCenter,,0,0,0,,so the length of the city of berkeley is eight
Dialogue: 0,0:37:08.69,0:37:10.30,BottomCenter,,0,0,0,,which means they're eight letters
Dialogue: 0,0:37:10.30,0:37:12.13,BottomCenter,,0,0,0,,each letter is called the character
Dialogue: 0,0:37:13.59,0:37:14.40,BottomCenter,,0,0,0,,now
Dialogue: 0,0:37:14.59,0:37:17.69,BottomCenter,,0,0,0,,actually element selection has the same indexing scheme
Dialogue: 0,0:37:17.69,0:37:19.17,BottomCenter,,0,0,0,,0 1 2 3
Dialogue: 0,0:37:19.59,0:37:22.30,BottomCenter,,0,0,0,,but the result is not quite what you might think
Dialogue: 0,0:37:23.09,0:37:25.17,BottomCenter,,0,0,0,,so what you get back is an
Dialogue: 0,0:37:25.50,0:37:29.30,BottomCenter,,0,0,0,,string even though what you selected from was a string
Dialogue: 0,0:37:29.76,0:37:31.19,BottomCenter,,0,0,0,,now list don't work like this
Dialogue: 0,0:37:31.19,0:37:32.67,BottomCenter,,0,0,0,,if you had a list of numbers
Dialogue: 0,0:37:32.67,0:37:35.09,BottomCenter,,0,0,0,,and you selected the element of the next three
Dialogue: 0,0:37:35.13,0:37:36.30,BottomCenter,,0,0,0,,you would get a number
Dialogue: 0,0:37:36.50,0:37:41.17,BottomCenter,,0,0,0,,not a list but for strings you get a string
Dialogue: 0,0:37:41.53,0:37:44.26,BottomCenter,,0,0,0,,but with only one element only one character in it
Dialogue: 0,0:37:46.67,0:37:47.57,BottomCenter,,0,0,0,,in and not in
Dialogue: 0,0:37:47.57,0:37:49.96,BottomCenter,,0,0,0,,are a little bit different for strings than they are
Dialogue: 0,0:37:50.13,0:37:52.00,BottomCenter,,0,0,0,,with other sequence types
Dialogue: 0,0:37:52.96,0:37:53.76,BottomCenter,,0,0,0,,so
Dialogue: 0,0:37:54.50,0:37:57.96,BottomCenter,,0,0,0,,instead of looking for only individual letters
Dialogue: 0,0:37:57.96,0:38:00.00,BottomCenter,,0,0,0,,inside this sequence of letters
Dialogue: 0,0:38:00.09,0:38:01.67,BottomCenter,,0,0,0,,you can look for whole words
Dialogue: 0,0:38:01.76,0:38:04.26,BottomCenter,,0,0,0,,so if I say is here in wears waddle though
Dialogue: 0,0:38:04.26,0:38:05.36,BottomCenter,,0,0,0,,it will tell me true
Dialogue: 0,0:38:05.86,0:38:08.09,BottomCenter,,0,0,0,,but if I said if 2 3 4 innocent here
Dialogue: 0,0:38:08.09,0:38:09.92,BottomCenter,,0,0,0,,even though two three and four next to each other
Dialogue: 0,0:38:09.92,0:38:10.96,BottomCenter,,0,0,0,,it would say false
Dialogue: 0,0:38:11.09,0:38:12.76,BottomCenter,,0,0,0,,and if I looked for the list in here
Dialogue: 0,0:38:12.76,0:38:14.26,BottomCenter,,0,0,0,,that would be false as well
Dialogue: 0,0:38:14.73,0:38:17.46,BottomCenter,,0,0,0,,so this you can only look for one element at a time
Dialogue: 0,0:38:17.73,0:38:21.00,BottomCenter,,0,0,0,,but in strings you can look for consecutive letters
Dialogue: 0,0:38:21.53,0:38:22.32,BottomCenter,,0,0,0,,that's because
Dialogue: 0,0:38:22.32,0:38:24.09,BottomCenter,,0,0,0,,most of the time when you're working with strings
Dialogue: 0,0:38:24.09,0:38:25.90,BottomCenter,,0,0,0,,you actually care about whole words
Dialogue: 0,0:38:26.07,0:38:27.76,BottomCenter,,0,0,0,,more than just individual letters
Dialogue: 0,0:38:27.76,0:38:29.69,BottomCenter,,0,0,0,,so strings are a special abstraction
Dialogue: 0,0:38:29.76,0:38:31.92,BottomCenter,,0,0,0,,which are like sequences in many ways
Dialogue: 0,0:38:31.92,0:38:33.19,BottomCenter,,0,0,0,,but they behave in a way
Dialogue: 0,0:38:33.19,0:38:35.57,BottomCenter,,0,0,0,,that's slightly different from other sequences
Dialogue: 0,0:38:37.26,0:38:37.67,BottomCenter,,0,0,0,,okay
Dialogue: 0,0:38:37.67,0:38:39.53,BottomCenter,,0,0,0,,let's pick it up where we left off
Dialogue: 0,0:38:39.53,0:38:40.96,BottomCenter,,0,0,0,,and we're going to talk a little bit more about
Dialogue: 0,0:38:40.96,0:38:42.69,BottomCenter,,0,0,0,,recursion and
Dialogue: 0,0:38:42.80,0:38:44.59,BottomCenter,,0,0,0,,you may remember that we wrote an
Dialogue: 0,0:38:44.59,0:38:48.13,BottomCenter,,0,0,0,,iterative algorithm for reversing a string
Dialogue: 0,0:38:48.19,0:38:51.13,BottomCenter,,0,0,0,,to reverse ward to draw or draw toward
Dialogue: 0,0:38:51.40,0:38:52.73,BottomCenter,,0,0,0,,so how did that work
Dialogue: 0,0:38:52.80,0:38:55.26,BottomCenter,,0,0,0,,we took the first letter in the last letter and we
Dialogue: 0,0:38:55.26,0:38:56.07,BottomCenter,,0,0,0,,swapped them
Dialogue: 0,0:38:56.17,0:38:58.69,BottomCenter,,0,0,0,,and then we incremented one decremented one
Dialogue: 0,0:38:58.69,0:39:01.69,BottomCenter,,0,0,0,,swap and kept going until we got to the midway point
Dialogue: 0,0:39:01.69,0:39:03.40,BottomCenter,,0,0,0,,and it was an iterative algorithm
Dialogue: 0,0:39:03.73,0:39:05.53,BottomCenter,,0,0,0,,we had either a while or a for loop
Dialogue: 0,0:39:05.53,0:39:07.59,BottomCenter,,0,0,0,,that would work its way from the first letter
Dialogue: 0,0:39:07.59,0:39:09.26,BottomCenter,,0,0,0,,to the midway point of the string
Dialogue: 0,0:39:09.36,0:39:10.96,BottomCenter,,0,0,0,,swapping swapping swapping swap
Dialogue: 0,0:39:10.96,0:39:12.36,BottomCenter,,0,0,0,,perfectly fine way to swap
Dialogue: 0,0:39:12.50,0:39:13.73,BottomCenter,,0,0,0,,and I just want to think about this
Dialogue: 0,0:39:13.73,0:39:15.50,BottomCenter,,0,0,0,,how we would do this recursively
Dialogue: 0,0:39:16.09,0:39:20.73,BottomCenter,,0,0,0,,so what does it mean to recursively reverse a string
Dialogue: 0,0:39:20.80,0:39:22.59,BottomCenter,,0,0,0,,well as you saw with the factorial
Dialogue: 0,0:39:22.80,0:39:24.59,BottomCenter,,0,0,0,,typically what it means is that you keep
Dialogue: 0,0:39:24.59,0:39:26.26,BottomCenter,,0,0,0,,simplifying the problem
Dialogue: 0,0:39:26.67,0:39:28.26,BottomCenter,,0,0,0,,until you get to a base case
Dialogue: 0,0:39:28.96,0:39:29.80,BottomCenter,,0,0,0,,so what does a base
Dialogue: 0,0:39:29.80,0:39:31.46,BottomCenter,,0,0,0,,case look like in reversing a string
Dialogue: 0,0:39:31.46,0:39:33.32,BottomCenter,,0,0,0,,what's the easiest possible thing
Dialogue: 0,0:39:33.59,0:39:35.57,BottomCenter,,0,0,0,,while a string with only one letter
Dialogue: 0,0:39:35.73,0:39:37.96,BottomCenter,,0,0,0,,is trivial to reverse it's that letter
Dialogue: 0,0:39:38.13,0:39:39.86,BottomCenter,,0,0,0,,or maybe the empty string
Dialogue: 0,0:39:40.09,0:39:41.96,BottomCenter,,0,0,0,,is a trivial base case
Dialogue: 0,0:39:41.96,0:39:43.67,BottomCenter,,0,0,0,,so that's always good to think about
Dialogue: 0,0:39:43.67,0:39:44.90,BottomCenter,,0,0,0,,when you think recursive is like
Dialogue: 0,0:39:45.09,0:39:46.90,BottomCenter,,0,0,0,,what's the simple case here
Dialogue: 0,0:39:47.00,0:39:49.36,BottomCenter,,0,0,0,,and then your job recursively
Dialogue: 0,0:39:49.53,0:39:51.59,BottomCenter,,0,0,0,,is to take a problem that is big
Dialogue: 0,0:39:51.73,0:39:54.73,BottomCenter,,0,0,0,,reverse a string with n letters in it
Dialogue: 0,0:39:54.92,0:39:57.00,BottomCenter,,0,0,0,,and figure out how to break that down
Dialogue: 0,0:39:57.19,0:39:59.32,BottomCenter,,0,0,0,,into a simple operation
Dialogue: 0,0:39:59.36,0:40:01.53,BottomCenter,,0,0,0,,with a slightly simpler version of it
Dialogue: 0,0:40:01.53,0:40:04.09,BottomCenter,,0,0,0,,say reversing and minus one characters
Dialogue: 0,0:40:04.17,0:40:05.53,BottomCenter,,0,0,0,,so let's just think about that
Dialogue: 0,0:40:05.80,0:40:08.46,BottomCenter,,0,0,0,,so what does it mean to reverse a string
Dialogue: 0,0:40:08.46,0:40:11.36,BottomCenter,,0,0,0,,so we had been thinking about this as I swap the w
Dialogue: 0,0:40:11.46,0:40:13.09,BottomCenter,,0,0,0,,and the d and the a and the r
Dialogue: 0,0:40:13.53,0:40:14.96,BottomCenter,,0,0,0,,but the other way to think about this is
Dialogue: 0,0:40:14.96,0:40:16.17,BottomCenter,,0,0,0,,I can just take that w
Dialogue: 0,0:40:16.40,0:40:18.40,BottomCenter,,0,0,0,,and put it all the way at the end
Dialogue: 0,0:40:18.76,0:40:20.26,BottomCenter,,0,0,0,,and then reverse the
Dialogue: 0,0:40:20.67,0:40:21.73,BottomCenter,,0,0,0,,rest of the string
Dialogue: 0,0:40:21.90,0:40:23.40,BottomCenter,,0,0,0,,yeah that sounds about right
Dialogue: 0,0:40:23.40,0:40:25.69,BottomCenter,,0,0,0,,so let's see if that makes sense
Dialogue: 0,0:40:26.13,0:40:29.90,BottomCenter,,0,0,0,,so can we agree that the reverse of the string ward
Dialogue: 0,0:40:30.36,0:40:31.17,BottomCenter,,0,0,0,,is
Dialogue: 0,0:40:31.69,0:40:34.36,BottomCenter,,0,0,0,,the reverse of everything but the first letter
Dialogue: 0,0:40:34.69,0:40:36.90,BottomCenter,,0,0,0,,string concatenated with the first letter
Dialogue: 0,0:40:37.13,0:40:38.80,BottomCenter,,0,0,0,,sure let's just do this in our heads
Dialogue: 0,0:40:38.80,0:40:41.00,BottomCenter,,0,0,0,,if I reverse this it's dra
Dialogue: 0,0:40:41.19,0:40:43.13,BottomCenter,,0,0,0,,and then I attach it w to it
Dialogue: 0,0:40:43.13,0:40:44.69,BottomCenter,,0,0,0,,and that's of course the reversal
Dialogue: 0,0:40:45.17,0:40:46.57,BottomCenter,,0,0,0,,so notice what I've done here
Dialogue: 0,0:40:46.73,0:40:48.90,BottomCenter,,0,0,0,,I've simplified the problem by one letter
Dialogue: 0,0:40:48.90,0:40:50.00,BottomCenter,,0,0,0,,and I've done that by
Dialogue: 0,0:40:50.09,0:40:52.13,BottomCenter,,0,0,0,,thinking about the nature of what reverses
Dialogue: 0,0:40:52.13,0:40:52.50,BottomCenter,,0,0,0,,by just saying
Dialogue: 0,0:40:52.50,0:40:54.53,BottomCenter,,0,0,0,,if I just take that first letter and put it at the end
Dialogue: 0,0:40:54.80,0:40:56.86,BottomCenter,,0,0,0,,and then I'll worry about the rest of the string later
Dialogue: 0,0:40:57.26,0:40:58.67,BottomCenter,,0,0,0,,that's a recursive definition
Dialogue: 0,0:40:58.67,0:41:00.17,BottomCenter,,0,0,0,,because notice I've defined
Dialogue: 0,0:41:00.46,0:41:01.26,BottomCenter,,0,0,0,,the
Dialogue: 0,0:41:01.96,0:41:04.80,BottomCenter,,0,0,0,,reversing of an entire string as
Dialogue: 0,0:41:05.07,0:41:07.09,BottomCenter,,0,0,0,,the reversing of a slightly smaller string
Dialogue: 0,0:41:07.13,0:41:08.57,BottomCenter,,0,0,0,,plus a simple operation
Dialogue: 0,0:41:08.57,0:41:10.86,BottomCenter,,0,0,0,,looks a lot like the factorial right end factorial
Dialogue: 0,0:41:10.86,0:41:13.57,BottomCenter,,0,0,0,,it was end times and minus one factorial
Dialogue: 0,0:41:13.67,0:41:15.59,BottomCenter,,0,0,0,,all right let's just do it again and make sure we see
Dialogue: 0,0:41:15.76,0:41:16.67,BottomCenter,,0,0,0,,how we reverse
Dialogue: 0,0:41:16.67,0:41:17.57,BottomCenter,,0,0,0,,now ard
Dialogue: 0,0:41:18.26,0:41:19.40,BottomCenter,,0,0,0,,it's the same game
Dialogue: 0,0:41:19.46,0:41:20.73,BottomCenter,,0,0,0,,take that I a
Dialogue: 0,0:41:20.80,0:41:23.90,BottomCenter,,0,0,0,,shove it to the end now not the end here of course
Dialogue: 0,0:41:24.00,0:41:25.19,BottomCenter,,0,0,0,,the end of this
Dialogue: 0,0:41:25.26,0:41:28.00,BottomCenter,,0,0,0,,and then reverse rd at the front of that
Dialogue: 0,0:41:28.19,0:41:32.19,BottomCenter,,0,0,0,,so the reversal of ard is the reversal of rd plus a
Dialogue: 0,0:41:32.76,0:41:33.86,BottomCenter,,0,0,0,,now eventually
Dialogue: 0,0:41:33.92,0:41:35.17,BottomCenter,,0,0,0,,so notice what's happening
Dialogue: 0,0:41:35.17,0:41:38.07,BottomCenter,,0,0,0,,this thing has to evaluate to this
Dialogue: 0,0:41:38.09,0:41:39.53,BottomCenter,,0,0,0,,this will eventually give me an answer
Dialogue: 0,0:41:39.53,0:41:41.30,BottomCenter,,0,0,0,,when I work my way down the recursion
Dialogue: 0,0:41:41.30,0:41:43.32,BottomCenter,,0,0,0,,I'll shove it in there it should be dra
Dialogue: 0,0:41:43.50,0:41:46.07,BottomCenter,,0,0,0,,I attach it w to it and then I'm done
Dialogue: 0,0:41:46.86,0:41:47.40,BottomCenter,,0,0,0,,okay
Dialogue: 0,0:41:47.40,0:41:48.69,BottomCenter,,0,0,0,,what's the reversal of our d
Dialogue: 0,0:41:48.69,0:41:50.00,BottomCenter,,0,0,0,,now we know what the game is
Dialogue: 0,0:41:50.09,0:41:51.30,BottomCenter,,0,0,0,,take that first letter
Dialogue: 0,0:41:51.40,0:41:54.57,BottomCenter,,0,0,0,,shove it to the end and then reverse a single letter
Dialogue: 0,0:41:54.57,0:41:56.96,BottomCenter,,0,0,0,,ah this looks like the base case I mentioned
Dialogue: 0,0:41:56.96,0:41:58.30,BottomCenter,,0,0,0,,if I have a single letter
Dialogue: 0,0:41:58.36,0:41:59.46,BottomCenter,,0,0,0,,reversalist trivial
Dialogue: 0,0:41:59.46,0:42:01.46,BottomCenter,,0,0,0,,there's no work to be done there's no computation
Dialogue: 0,0:42:01.46,0:42:02.50,BottomCenter,,0,0,0,,it's just the letter
Dialogue: 0,0:42:02.73,0:42:05.19,BottomCenter,,0,0,0,,so let's agree that the reversal of d is just d
Dialogue: 0,0:42:05.36,0:42:07.46,BottomCenter,,0,0,0,,base case no recursive call
Dialogue: 0,0:42:07.53,0:42:09.86,BottomCenter,,0,0,0,,this is like zero factorial is one
Dialogue: 0,0:42:10.09,0:42:11.26,BottomCenter,,0,0,0,,no work to be done
Dialogue: 0,0:42:11.90,0:42:13.09,BottomCenter,,0,0,0,,all right now what you have to do
Dialogue: 0,0:42:13.09,0:42:14.00,BottomCenter,,0,0,0,,notice what we've done if we
Dialogue: 0,0:42:14.09,0:42:15.90,BottomCenter,,0,0,0,,build up an expression
Dialogue: 0,0:42:15.90,0:42:18.13,BottomCenter,,0,0,0,,with a series of string concatenations
Dialogue: 0,0:42:18.13,0:42:20.67,BottomCenter,,0,0,0,,and now we've just got to work our way back up
Dialogue: 0,0:42:20.69,0:42:24.80,BottomCenter,,0,0,0,,this stack in order to create the final answer
Dialogue: 0,0:42:25.13,0:42:26.80,BottomCenter,,0,0,0,,so let's start at the bottom of course
Dialogue: 0,0:42:26.86,0:42:28.19,BottomCenter,,0,0,0,,what is reversive d
Dialogue: 0,0:42:28.40,0:42:30.76,BottomCenter,,0,0,0,,it is d and so reverse of r
Dialogue: 0,0:42:30.76,0:42:33.36,BottomCenter,,0,0,0,,d is just the string concatenation of d and r
Dialogue: 0,0:42:33.53,0:42:35.50,BottomCenter,,0,0,0,,okay that's easy I know how to do that
Dialogue: 0,0:42:35.67,0:42:37.36,BottomCenter,,0,0,0,,now there's no recursive call here
Dialogue: 0,0:42:37.36,0:42:38.26,BottomCenter,,0,0,0,,there's no work to be done
Dialogue: 0,0:42:38.26,0:42:39.92,BottomCenter,,0,0,0,,just do the string concatenation
Dialogue: 0,0:42:40.07,0:42:43.17,BottomCenter,,0,0,0,,so the reversal of r d is d r
Dialogue: 0,0:42:43.17,0:42:45.92,BottomCenter,,0,0,0,,and I'm going to concatenate that with a good
Dialogue: 0,0:42:45.92,0:42:46.67,BottomCenter,,0,0,0,,let's do that
Dialogue: 0,0:42:46.67,0:42:48.07,BottomCenter,,0,0,0,,so d r plus a
Dialogue: 0,0:42:48.40,0:42:51.17,BottomCenter,,0,0,0,,the reversal of ard is dra
Dialogue: 0,0:42:51.50,0:42:53.32,BottomCenter,,0,0,0,,so we pop that back up one
Dialogue: 0,0:42:53.40,0:42:57.30,BottomCenter,,0,0,0,,and now we have the reversal of ward is draw
Dialogue: 0,0:42:57.30,0:42:58.59,BottomCenter,,0,0,0,,and again we've done that
Dialogue: 0,0:42:58.67,0:42:59.46,BottomCenter,,0,0,0,,and notice
Dialogue: 0,0:42:59.67,0:43:02.26,BottomCenter,,0,0,0,,it's really a different algorithm in this case
Dialogue: 0,0:43:02.50,0:43:05.13,BottomCenter,,0,0,0,,right so instead of swapping swapping swapping
Dialogue: 0,0:43:05.30,0:43:08.40,BottomCenter,,0,0,0,,I am building up an expression of string concatenation
Dialogue: 0,0:43:08.40,0:43:09.76,BottomCenter,,0,0,0,,by one at a time
Dialogue: 0,0:43:09.96,0:43:11.50,BottomCenter,,0,0,0,,peeling off one letter
Dialogue: 0,0:43:11.50,0:43:13.09,BottomCenter,,0,0,0,,and that's what I meant when I said
Dialogue: 0,0:43:13.30,0:43:14.73,BottomCenter,,0,0,0,,at the beginning of the previous lecture
Dialogue: 0,0:43:14.73,0:43:15.40,BottomCenter,,0,0,0,,that recursion
Dialogue: 0,0:43:15.40,0:43:16.92,BottomCenter,,0,0,0,,you have to think really
Dialogue: 0,0:43:16.92,0:43:19.26,BottomCenter,,0,0,0,,quite differently about the nature of computation
Dialogue: 0,0:43:19.26,0:43:21.09,BottomCenter,,0,0,0,,and I think in a very elegant way
Dialogue: 0,0:43:21.46,0:43:22.90,BottomCenter,,0,0,0,,all right now let's do it in python
Dialogue: 0,0:43:24.57,0:43:29.30,BottomCenter,,0,0,0,,reverse is a function that takes as input a string s
Dialogue: 0,0:43:30.09,0:43:32.92,BottomCenter,,0,0,0,,base case if the length of the list is one
Dialogue: 0,0:43:33.00,0:43:34.19,BottomCenter,,0,0,0,,then return s
Dialogue: 0,0:43:34.19,0:43:36.76,BottomCenter,,0,0,0,,there's nothing to do right I sent you in the letter d
Dialogue: 0,0:43:37.00,0:43:38.36,BottomCenter,,0,0,0,,the reversal of d is d
Dialogue: 0,0:43:38.53,0:43:39.76,BottomCenter,,0,0,0,,go home you're done
Dialogue: 0,0:43:40.40,0:43:41.19,BottomCenter,,0,0,0,,otherwise
Dialogue: 0,0:43:41.53,0:43:44.53,BottomCenter,,0,0,0,,what am I going to do I want to peel off that first
Dialogue: 0,0:43:44.73,0:43:46.59,BottomCenter,,0,0,0,,letter and put it at the end
Dialogue: 0,0:43:46.80,0:43:48.59,BottomCenter,,0,0,0,,and string concatenate
Dialogue: 0,0:43:48.69,0:43:51.07,BottomCenter,,0,0,0,,the reversal of the rest of the list
Dialogue: 0,0:43:51.26,0:43:52.90,BottomCenter,,0,0,0,,so remember that string
Dialogue: 0,0:43:52.90,0:43:56.53,BottomCenter,,0,0,0,,rather remember that strings can be indexed like lists
Dialogue: 0,0:43:56.73,0:43:58.30,BottomCenter,,0,0,0,,here's where it's a very convenient
Dialogue: 0,0:43:58.46,0:44:02.36,BottomCenter,,0,0,0,,so s sub zero is the first element of the list
Dialogue: 0,0:44:02.57,0:44:05.00,BottomCenter,,0,0,0,,and you May not have seen this notation before
Dialogue: 0,0:44:05.00,0:44:07.17,BottomCenter,,0,0,0,,but this one colon operator
Dialogue: 0,0:44:07.40,0:44:11.46,BottomCenter,,0,0,0,,is short hand for everything from the first
Dialogue: 0,0:44:11.90,0:44:12.80,BottomCenter,,0,0,0,,character in
Dialogue: 0,0:44:13.80,0:44:15.26,BottomCenter,,0,0,0,,the first position of the string
Dialogue: 0,0:44:15.26,0:44:19.73,BottomCenter,,0,0,0,,so that's 2nd letter to the end of the list
Dialogue: 0,0:44:19.86,0:44:23.86,BottomCenter,,0,0,0,,so I could have also done one colon length of s
Dialogue: 0,0:44:23.86,0:44:26.19,BottomCenter,,0,0,0,,but this is a simpler notation
Dialogue: 0,0:44:26.32,0:44:29.07,BottomCenter,,0,0,0,,that python gives you that just says one colon
Dialogue: 0,0:44:29.07,0:44:30.73,BottomCenter,,0,0,0,,and then you leave a blank here
Dialogue: 0,0:44:30.73,0:44:31.69,BottomCenter,,0,0,0,,and that says give me
Dialogue: 0,0:44:31.69,0:44:34.32,BottomCenter,,0,0,0,,everything but the zero with element
Dialogue: 0,0:44:34.36,0:44:35.86,BottomCenter,,0,0,0,,yeah and that's perfect
Dialogue: 0,0:44:35.92,0:44:36.90,BottomCenter,,0,0,0,,because now I'm going to take
Dialogue: 0,0:44:36.90,0:44:38.59,BottomCenter,,0,0,0,,let's say what comes in is ward
Dialogue: 0,0:44:38.69,0:44:42.07,BottomCenter,,0,0,0,,I take the w that's subzero I take ard
Dialogue: 0,0:44:42.19,0:44:43.13,BottomCenter,,0,0,0,,and I take ard
Dialogue: 0,0:44:43.13,0:44:45.96,BottomCenter,,0,0,0,,and I shove it back into a recursive call
Dialogue: 0,0:44:46.19,0:44:49.26,BottomCenter,,0,0,0,,of reverse okay what does that do
Dialogue: 0,0:44:49.26,0:44:52.26,BottomCenter,,0,0,0,,that peels off the first letter and notice again
Dialogue: 0,0:44:53.07,0:44:54.50,BottomCenter,,0,0,0,,this is where it's really important to
Dialogue: 0,0:44:54.50,0:44:56.19,BottomCenter,,0,0,0,,understand these local variables
Dialogue: 0,0:44:56.53,0:44:59.19,BottomCenter,,0,0,0,,the first s coming in was ward
Dialogue: 0,0:44:59.59,0:45:03.76,BottomCenter,,0,0,0,,but when I make a recursive call the news is ard
Dialogue: 0,0:45:03.80,0:45:05.26,BottomCenter,,0,0,0,,and then the next time it's rd
Dialogue: 0,0:45:05.26,0:45:06.53,BottomCenter,,0,0,0,,and then the next time it's d
Dialogue: 0,0:45:06.86,0:45:09.76,BottomCenter,,0,0,0,,and then this expression the stinking cat nation
Dialogue: 0,0:45:09.86,0:45:10.50,BottomCenter,,0,0,0,,holds on
Dialogue: 0,0:45:10.50,0:45:13.17,BottomCenter,,0,0,0,,to the memory of all of those different instantiations
Dialogue: 0,0:45:13.17,0:45:14.96,BottomCenter,,0,0,0,,of the local variable
Dialogue: 0,0:45:15.07,0:45:16.90,BottomCenter,,0,0,0,,to the function reverse
Dialogue: 0,0:45:17.40,0:45:18.90,BottomCenter,,0,0,0,,all right last thing is
Dialogue: 0,0:45:19.32,0:45:20.36,BottomCenter,,0,0,0,,there's another base case
Dialogue: 0,0:45:20.36,0:45:21.57,BottomCenter,,0,0,0,,I just want to show you what it looks like
Dialogue: 0,0:45:21.57,0:45:22.96,BottomCenter,,0,0,0,,because it's equally fine
Dialogue: 0,0:45:22.96,0:45:23.30,BottomCenter,,0,0,0,,which is
Dialogue: 0,0:45:23.30,0:45:25.57,BottomCenter,,0,0,0,,you could have had the base case be the empty list
Dialogue: 0,0:45:25.67,0:45:26.86,BottomCenter,,0,0,0,,and it would have worked just fine
Dialogue: 0,0:45:26.86,0:45:28.26,BottomCenter,,0,0,0,,you would eventually hit the empty list
Dialogue: 0,0:45:28.32,0:45:30.73,BottomCenter,,0,0,0,,I don't think this is really necessary because
Dialogue: 0,0:45:31.00,0:45:34.26,BottomCenter,,0,0,0,,a character a list with a single character is in fact
Dialogue: 0,0:45:34.67,0:45:36.86,BottomCenter,,0,0,0,,the reversal is itself
Dialogue: 0,0:45:36.92,0:45:38.19,BottomCenter,,0,0,0,,the only reason you might want to do this
Dialogue: 0,0:45:38.19,0:45:40.59,BottomCenter,,0,0,0,,is if somebody passes you an empty list
Dialogue: 0,0:45:40.69,0:45:42.59,BottomCenter,,0,0,0,,it'd be nice not to choke on it
Dialogue: 0,0:45:42.59,0:45:45.40,BottomCenter,,0,0,0,,and so this is nice because it deals with an empty list
Dialogue: 0,0:45:45.59,0:45:46.40,BottomCenter,,0,0,0,,problem
Dialogue: 0,0:45:47.50,0:45:50.32,BottomCenter,,0,0,0,,that is the second recursive example that we've done
Dialogue: 0,0:45:50.32,0:45:52.19,BottomCenter,,0,0,0,,and I hope you now see that
Dialogue: 0,0:45:52.26,0:45:54.73,BottomCenter,,0,0,0,,not only is the code look different but
Dialogue: 0,0:45:54.76,0:45:56.90,BottomCenter,,0,0,0,,you have to think differently about the problem
Dialogue: 0,0:45:56.90,0:45:59.76,BottomCenter,,0,0,0,,and I really like that because it forces you to sort of
Dialogue: 0,0:45:59.76,0:46:01.59,BottomCenter,,0,0,0,,think about the nature of computation
Dialogue: 0,0:46:01.59,0:46:02.80,BottomCenter,,0,0,0,,in a really fundamental way
Dialogue: 0,0:46:02.80,0:46:04.50,BottomCenter,,0,0,0,,so we're going to do a couple more examples
Dialogue: 0,0:46:04.80,0:46:05.50,BottomCenter,,0,0,0,,when we come back
Dialogue: 0,0:46:05.50,0:46:06.57,BottomCenter,,0,0,0,,I'll see you in a few minutes